// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using xbytechat.api;

#nullable disable

namespace xbytechat.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContactTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("TagId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("MessageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CTAFlowConfigId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CTAFlowStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsIncoming")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("RawResponse")
                        .HasColumnType("text");

                    b.Property<string>("RecipientNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RefMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("RenderedBody")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ContactId");

                    b.ToTable("MessageLogs");
                });

            modelBuilder.Entity("xbytechat.api.AuthModule.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("xbytechat.api.AuthModule.Models.WhatsAppTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ButtonsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("HasImageHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)");

                    b.Property<int>("PlaceholderCount")
                        .HasColumnType("integer");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("RawJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId", "Name");

                    b.HasIndex("BusinessId", "Provider");

                    b.HasIndex("BusinessId", "Name", "Language", "Provider")
                        .IsUnique();

                    b.ToTable("WhatsAppTemplates");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedAgentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutomationPaused")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCTAInteraction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastCTAType")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastClickedProductId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastContactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LeadSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("NextFollowUpAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Reminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("DueAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FollowUpSent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<string>("LastCTAType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastClickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LinkedCampaign")
                        .HasColumnType("text");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RecurrencePattern")
                        .HasColumnType("text");

                    b.Property<string>("ReminderType")
                        .HasColumnType("text");

                    b.Property<bool>("SendWhatsappNotification")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("ColorHex")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemTag")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000000"),
                            Code = "dashboard.view",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5243),
                            Description = "Permission for dashboard.view",
                            IsActive = true,
                            Name = "dashboard.view"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Code = "campaign.view",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5251),
                            Description = "Permission for campaign.view",
                            IsActive = true,
                            Name = "campaign.view"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            Code = "campaign.create",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5254),
                            Description = "Permission for campaign.create",
                            IsActive = true,
                            Name = "campaign.create"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            Code = "campaign.delete",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5256),
                            Description = "Permission for campaign.delete",
                            IsActive = true,
                            Name = "campaign.delete"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            Code = "product.view",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5258),
                            Description = "Permission for product.view",
                            IsActive = true,
                            Name = "product.view"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            Code = "product.create",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5260),
                            Description = "Permission for product.create",
                            IsActive = true,
                            Name = "product.create"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            Code = "product.delete",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5309),
                            Description = "Permission for product.delete",
                            IsActive = true,
                            Name = "product.delete"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            Code = "contacts.view",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5312),
                            Description = "Permission for contacts.view",
                            IsActive = true,
                            Name = "contacts.view"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            Code = "tags.edit",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5315),
                            Description = "Permission for tags.edit",
                            IsActive = true,
                            Name = "tags.edit"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            Code = "admin.business.approve",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5330),
                            Description = "Permission for admin.business.approve",
                            IsActive = true,
                            Name = "admin.business.approve"
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000010"),
                            Code = "admin.logs.view",
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5332),
                            Description = "Permission for admin.logs.view",
                            IsActive = true,
                            Name = "admin.logs.view"
                        });
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.PlanPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanPermissions");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(4588),
                            Description = "Super Admin",
                            IsActive = true,
                            IsSystemDefined = false,
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(4591),
                            Description = "Business Partner",
                            IsActive = true,
                            IsSystemDefined = false,
                            Name = "partner"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(4592),
                            Description = "Reseller Partner",
                            IsActive = true,
                            IsSystemDefined = false,
                            Name = "reseller"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(4593),
                            Description = "Business Owner",
                            IsActive = true,
                            IsSystemDefined = false,
                            Name = "business"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(4594),
                            Description = "Staff",
                            IsActive = true,
                            IsSystemDefined = false,
                            Name = "staff"
                        });
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("388a0b39-6799-46c0-a407-5a1bc26895a2"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5669),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000000"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("5ec974c0-7262-4725-b5fb-0bc60e91d870"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5677),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("8f6118e3-51e8-4aa6-aa08-b292d075c1a7"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5685),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("ce6bf6df-8f3b-4044-a1a5-3a9c32a45dd7"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5688),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("fd6d06ce-9e22-47e9-ae76-414b2a076cc8"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5700),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("849d8282-0636-4588-b01e-f17eb38d2f1b"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5704),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("4bcafbd2-f965-45f0-b0d2-c79a40bdb721"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5715),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("4cd72ffb-1c0b-4629-a962-2218c34e4443"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5727),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("e8f4a680-feb8-484b-a897-b6baceae3ab9"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5730),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000008"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("a10fca4f-d5e2-4e33-9509-0cbd5c6fa6e3"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5733),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000009"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("edd9c61b-3e4e-4d93-877d-2f1a25b3ee73"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5736),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000010"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("b88e4968-db52-40ed-bfc7-933b741366ca"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5743),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000000"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("bf2a6dcc-72c0-4e80-9ef8-9a78c1a5210f"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5747),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("1a0fab7f-c9e0-411b-8156-b6c8308dab35"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5749),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("13313cfb-9000-4382-b9a9-784ffdc77070"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5758),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000004"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("b21a3c29-a737-4430-8710-4dc78f1ebdec"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5766),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000000"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("78481725-46ae-4ab8-8c30-cab6f0ea736d"),
                            AssignedAt = new DateTime(2025, 8, 24, 7, 7, 2, 458, DateTimeKind.Utc).AddTicks(5770),
                            IsActive = true,
                            IsRevoked = false,
                            PermissionId = new Guid("30000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("00000000-0000-0000-0000-000000000005")
                        });
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("xbytechat.api.Features.AuditTrail.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<Guid>("PerformedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PerformedByUserName")
                        .HasColumnType("text");

                    b.Property<string>("RoleAtTime")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EdgesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IndustryTag")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerKeyword")
                        .HasColumnType("text");

                    b.Property<string>("UseCase")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AutoReplyFlows");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceHandle")
                        .HasColumnType("text");

                    b.Property<string>("SourceNodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetHandle")
                        .HasColumnType("text");

                    b.Property<string>("TargetNodeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("AutoReplyFlowEdges");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConfigJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodeName")
                        .HasColumnType("text");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("AutoReplyFlowNodes");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("FlowName")
                        .HasColumnType("text");

                    b.Property<Guid?>("MessageLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReplyContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerKeyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AutoReplyLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<string>("FlowName")
                        .HasColumnType("text");

                    b.Property<string>("IndustryTag")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("ReplyMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceChannel")
                        .HasColumnType("text");

                    b.Property<string>("TriggerKeyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("AutoReplyRules");
                });

            modelBuilder.Entity("xbytechat.api.Features.Automation.Models.AutomationFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EdgesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NodesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerKeyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AutomationFlows");
                });

            modelBuilder.Entity("xbytechat.api.Features.BusinessModule.Models.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<string>("BusinessEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedByPartnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Industry")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FlowName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CTAFlowConfigs");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CTAFlowConfigId")
                        .HasColumnType("uuid");

                    b.Property<float?>("PositionX")
                        .HasColumnType("real");

                    b.Property<float?>("PositionY")
                        .HasColumnType("real");

                    b.Property<string>("RequiredSource")
                        .HasColumnType("text");

                    b.Property<string>("RequiredTag")
                        .HasColumnType("text");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<string>("TemplateToSend")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateType")
                        .HasColumnType("text");

                    b.Property<string>("TriggerButtonText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TriggerButtonType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CTAFlowConfigId");

                    b.ToTable("CTAFlowSteps");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ButtonSubType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CTAFlowStepId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NextStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CTAFlowStepId");

                    b.ToTable("FlowButtonLinks");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FlowId")
                        .HasColumnType("uuid");

                    b.Property<string>("RawResponse")
                        .HasColumnType("text");

                    b.Property<Guid>("StepId")
                        .HasColumnType("uuid");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("TemplateType")
                        .HasColumnType("text");

                    b.Property<Guid?>("TrackingLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("TriggeredByButton")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FlowExecutionLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAManagement.Models.CTADefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ButtonType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CTADefinitions");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("CampaignType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("CtaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("FollowUpTemplateId")
                        .HasColumnType("text");

                    b.Property<string>("ImageCaption")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageBody")
                        .HasColumnType("text");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SourceCampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<string>("TemplateParameters")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CtaId");

                    b.HasIndex("SourceCampaignId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignButton", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFromTemplate")
                        .HasColumnType("boolean");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignButtons");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("OverrideNextTemplate")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignFlowOverrides");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BotId")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryBrowsed")
                        .HasColumnType("text");

                    b.Property<string>("ClickedCTA")
                        .HasColumnType("text");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAutoTagged")
                        .HasColumnType("boolean");

                    b.Property<string>("MessagePreview")
                        .HasColumnType("text");

                    b.Property<string>("ProductBrowsed")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ContactId");

                    b.ToTable("CampaignRecipients");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowRetry")
                        .HasColumnType("boolean");

                    b.Property<string>("Browser")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ClickType")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsClicked")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastRetryStatus")
                        .HasColumnType("text");

                    b.Property<string>("MacAddress")
                        .HasColumnType("text");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<Guid?>("MessageLogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("SendStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceChannel")
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ContactId");

                    b.HasIndex("MessageLogId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("UserId");

                    b.ToTable("CampaignSendLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.Catalog.Models.CatalogClickLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BotId")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CTAJourney")
                        .HasColumnType("text");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CampaignSendLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryBrowsed")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CtaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("FollowUpSent")
                        .HasColumnType("boolean");

                    b.Property<string>("LastInteractionType")
                        .HasColumnType("text");

                    b.Property<Guid?>("MessageLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlanSnapshot")
                        .HasColumnType("text");

                    b.Property<string>("ProductBrowsed")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("RefMessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("UserPhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CatalogClickLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.Catalog.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastClickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MostClickedCTA")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalClicks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Plan")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId", "FeatureName")
                        .IsUnique();

                    b.ToTable("FeatureAccess");
                });

            modelBuilder.Entity("xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FeatureCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("FeatureMaster");
                });

            modelBuilder.Entity("xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserFeatureAccess");
                });

            modelBuilder.Entity("xbytechat.api.Features.Inbox.Models.ChatSessionState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChatSessionStates");
                });

            modelBuilder.Entity("xbytechat.api.Features.Inbox.Models.ContactRead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId", "UserId")
                        .IsUnique();

                    b.ToTable("ContactReads");
                });

            modelBuilder.Entity("xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerProfileName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSessionOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("MetaTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("RawPayload")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecipientNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateCategory")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageStatusLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("PlanFeatureMatrix");
                });

            modelBuilder.Entity("xbytechat.api.Features.Tracking.Models.TrackingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Browser")
                        .HasColumnType("text");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<string>("ButtonText")
                        .HasColumnType("text");

                    b.Property<string>("CTAType")
                        .HasColumnType("text");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CampaignSendLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("ClickedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClickedVia")
                        .HasColumnType("text");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DeviceType")
                        .HasColumnType("text");

                    b.Property<bool>("FollowUpSent")
                        .HasColumnType("boolean");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text");

                    b.Property<string>("LastInteractionType")
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasColumnType("text");

                    b.Property<Guid?>("MessageLogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Referrer")
                        .HasColumnType("text");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StepId")
                        .HasColumnType("uuid");

                    b.Property<string>("TemplateId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignSendLogId");

                    b.HasIndex("ContactId");

                    b.HasIndex("MessageLogId");

                    b.ToTable("TrackingLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.Webhooks.Models.FailedWebhookLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("FailureType")
                        .HasColumnType("text");

                    b.Property<string>("RawJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceModule")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FailedWebhookLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.Webhooks.Models.WebhookSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoCleanupEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCleanupAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WebhookSettings");
                });

            modelBuilder.Entity("xbytechat.api.Features.xbTimelines.Models.LeadTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CTASourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("CTASourceType")
                        .HasColumnType("text");

                    b.Property<string>("CTAType")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSystemGenerated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ContactId");

                    b.ToTable("LeadTimelines");
                });

            modelBuilder.Entity("xbytechat.api.Models.BusinessModel.BusinessPlanInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Plan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("QuotaResetDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RemainingMessages")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMonthlyQuota")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("WalletBalance")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("BusinessPlanInfos");
                });

            modelBuilder.Entity("xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ApiToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumberId")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SenderDisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WabaId")
                        .HasColumnType("text");

                    b.Property<string>("WebhookSecret")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("WebhookVerifyToken")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("WhatsAppBusinessNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.ToTable("WhatsAppSettings");
                });

            modelBuilder.Entity("ContactTag", b =>
                {
                    b.HasOne("xbytechat.api.CRM.Models.Contact", "Contact")
                        .WithMany("ContactTags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.CRM.Models.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MessageLog", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "SourceCampaign")
                        .WithMany("MessageLogs")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("xbytechat.api.CRM.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Business");

                    b.Navigation("Contact");

                    b.Navigation("SourceCampaign");
                });

            modelBuilder.Entity("xbytechat.api.AuthModule.Models.User", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany("Users")
                        .HasForeignKey("BusinessId");

                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Business");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Contact", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.PlanPermission", b =>
                {
                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Permission", "Permission")
                        .WithMany("PlanPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Plan", "Plan")
                        .WithMany("PlanPermissions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.RolePermission", b =>
                {
                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.UserPermission", b =>
                {
                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.AuthModule.Models.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge", b =>
                {
                    b.HasOne("xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode", b =>
                {
                    b.HasOne("xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("xbytechat.api.Features.AutoReplyBuilder.Models.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("AutoReplyFlowNodeId")
                                .HasColumnType("uuid");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("AutoReplyFlowNodeId");

                            b1.ToTable("AutoReplyFlowNodes");

                            b1.WithOwner()
                                .HasForeignKey("AutoReplyFlowNodeId");
                        });

                    b.Navigation("Flow");

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule", b =>
                {
                    b.HasOne("xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("xbytechat.api.Features.BusinessModule.Models.Business", b =>
                {
                    b.HasOne("xbytechat.api.Features.AccessControl.Models.Plan", "Plan")
                        .WithMany("Businesses")
                        .HasForeignKey("PlanId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep", b =>
                {
                    b.HasOne("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig", "Flow")
                        .WithMany("Steps")
                        .HasForeignKey("CTAFlowConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink", b =>
                {
                    b.HasOne("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep", "Step")
                        .WithMany("ButtonLinks")
                        .HasForeignKey("CTAFlowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.Campaign", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany("Campaigns")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.Features.CTAManagement.Models.CTADefinition", "Cta")
                        .WithMany()
                        .HasForeignKey("CtaId");

                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "SourceCampaign")
                        .WithMany()
                        .HasForeignKey("SourceCampaignId");

                    b.Navigation("Business");

                    b.Navigation("Cta");

                    b.Navigation("SourceCampaign");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignButton", b =>
                {
                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "Campaign")
                        .WithMany("MultiButtons")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride", b =>
                {
                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignRecipient", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "Campaign")
                        .WithMany("Recipients")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.CRM.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Campaign");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog", b =>
                {
                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "Campaign")
                        .WithMany("SendLogs")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.CRM.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MessageLog", "MessageLog")
                        .WithMany()
                        .HasForeignKey("MessageLogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.CampaignRecipient", "Recipient")
                        .WithMany("SendLogs")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.AuthModule.Models.User", null)
                        .WithMany("SendLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Campaign");

                    b.Navigation("Contact");

                    b.Navigation("MessageLog");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany("MessageStatusLogs")
                        .HasForeignKey("BusinessId");

                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "Campaign")
                        .WithMany("MessageStatusLogs")
                        .HasForeignKey("CampaignId");

                    b.HasOne("xbytechat.api.AuthModule.Models.User", "User")
                        .WithMany("MessageStatusLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("Business");

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("xbytechat.api.Features.Tracking.Models.TrackingLog", b =>
                {
                    b.HasOne("xbytechat.api.Features.CampaignModule.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog", "CampaignSendLog")
                        .WithMany()
                        .HasForeignKey("CampaignSendLogId");

                    b.HasOne("xbytechat.api.CRM.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("MessageLog", "MessageLog")
                        .WithMany()
                        .HasForeignKey("MessageLogId");

                    b.Navigation("Campaign");

                    b.Navigation("CampaignSendLog");

                    b.Navigation("Contact");

                    b.Navigation("MessageLog");
                });

            modelBuilder.Entity("xbytechat.api.Features.xbTimelines.Models.LeadTimeline", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xbytechat.api.CRM.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("xbytechat.api.Models.BusinessModel.BusinessPlanInfo", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", "Business")
                        .WithOne("BusinessPlanInfo")
                        .HasForeignKey("xbytechat.api.Models.BusinessModel.BusinessPlanInfo", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity", b =>
                {
                    b.HasOne("xbytechat.api.Features.BusinessModule.Models.Business", null)
                        .WithOne("WhatsAppSettings")
                        .HasForeignKey("xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity", "BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("xbytechat.api.AuthModule.Models.User", b =>
                {
                    b.Navigation("MessageStatusLogs");

                    b.Navigation("SendLogs");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Contact", b =>
                {
                    b.Navigation("ContactTags");
                });

            modelBuilder.Entity("xbytechat.api.CRM.Models.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.Permission", b =>
                {
                    b.Navigation("PlanPermissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.Plan", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("PlanPermissions");
                });

            modelBuilder.Entity("xbytechat.api.Features.AccessControl.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("xbytechat.api.Features.BusinessModule.Models.Business", b =>
                {
                    b.Navigation("BusinessPlanInfo");

                    b.Navigation("Campaigns");

                    b.Navigation("MessageStatusLogs");

                    b.Navigation("Users");

                    b.Navigation("WhatsAppSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep", b =>
                {
                    b.Navigation("ButtonLinks");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.Campaign", b =>
                {
                    b.Navigation("MessageLogs");

                    b.Navigation("MessageStatusLogs");

                    b.Navigation("MultiButtons");

                    b.Navigation("Recipients");

                    b.Navigation("SendLogs");
                });

            modelBuilder.Entity("xbytechat.api.Features.CampaignModule.Models.CampaignRecipient", b =>
                {
                    b.Navigation("SendLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
