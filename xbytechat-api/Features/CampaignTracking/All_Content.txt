Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\All_Content.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\All_Content.txt 
====================================================== 
 
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\extract_all.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.

set "outputFile=All_Content.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%"
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Controllers\CampaignAnalyticsController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using xbytechat.api.Features.CampaignTracking.Services;

namespace xbytechat.api.Features.CampaignTracking.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class CampaignAnalyticsController : ControllerBase
    {
        private readonly ICampaignAnalyticsService _campaignAnalyticsService;

        public CampaignAnalyticsController(ICampaignAnalyticsService campaignAnalyticsService)
        {
            _campaignAnalyticsService = campaignAnalyticsService;
        }

        [HttpGet("status-dashboard")]
        //public async Task<IActionResult> GetStatusDashboard()
        //{
        //    var businessIdString = User.FindFirstValue("BusinessId");
        //    if (!Guid.TryParse(businessIdString, out var businessId))
        //    {
        //        return Unauthorized("Invalid business identifier.");
        //    }
        //    var result = await _campaignAnalyticsService.GetStatusDashboardAsync(businessId);
        //    return Ok(result);
        //}

        [HttpGet("top-campaigns")]
        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)
        {
            var businessIdString = User.FindFirstValue("BusinessId");
            if (!Guid.TryParse(businessIdString, out var businessId))
            {
                return Unauthorized("Invalid business identifier.");
            }
            var result = await _campaignAnalyticsService.GetTopCampaignsAsync(businessId, count);
            return Ok(result);
        }
    }
} 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Controllers\CampaignRetryController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignTracking.Services;

namespace xbytechat.api.Features.CampaignTracking.Controllers
{
    [ApiController]
    [Route("api/campaign-retry")]
    public class CampaignRetryController : ControllerBase
    {
        private readonly ICampaignRetryService _retryService;

        public CampaignRetryController(ICampaignRetryService retryService)
        {
            _retryService = retryService;
        }

        // üîÅ Retry a single failed log
        // Endpoint: POST /api/campaign-retry/{logId}/retry
        [HttpPost("{logId}/retry")]
        public async Task<IActionResult> RetrySingle(Guid logId)
        {
            var success = await _retryService.RetrySingleAsync(logId);
            if (!success)
                return BadRequest(new { message = "Retry failed or not allowed for this log." });

            return Ok(new { success = true, message = "Retry completed." });
        }

        // üîÅ Retry all failed logs in a campaign
        // Endpoint: POST /api/campaign-retry/campaign/{campaignId}/retry-all
        [HttpPost("campaign/{campaignId}/retry-all")]
        public async Task<IActionResult> RetryAllInCampaign(Guid campaignId)
        {
            var retriedCount = await _retryService.RetryFailedInCampaignAsync(campaignId);
            return Ok(new { success = true, retriedCount });
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Controllers\CampaignSendLogController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignTracking.DTOs;
using xbytechat.api.Features.CampaignTracking.Services;

namespace xbytechat.api.Features.CampaignTracking.Controllers
{
    [ApiController]
    [Route("api/campaign-logs")]
    public class CampaignSendLogController : ControllerBase
    {
        private readonly ICampaignSendLogService _logService;
        private readonly ICampaignRetryService _retryService;

        public CampaignSendLogController(
            ICampaignSendLogService logService,
            ICampaignRetryService retryService
        )
        {
            _logService = logService;
            _retryService = retryService;
        }

        [HttpGet("campaign/{campaignId}")]
        public async Task<IActionResult> GetLogsByCampaign(Guid campaignId)
        {
            var logs = await _logService.GetLogsByCampaignIdAsync(campaignId);
            return Ok(logs);
        }

        [HttpGet("campaign/{campaignId}/contact/{contactId}")]
        public async Task<IActionResult> GetLogsForContact(Guid campaignId, Guid contactId)
        {
            var logs = await _logService.GetLogsForContactAsync(campaignId, contactId);
            return Ok(logs);
        }

        [HttpPost]
        public async Task<IActionResult> AddSendLog([FromBody] CampaignSendLogDto dto)
        {
            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
            var userAgent = Request.Headers["User-Agent"].ToString() ?? "unknown";

            var result = await _logService.AddSendLogAsync(dto, ipAddress, userAgent);
            if (!result)
                return BadRequest(new { message = "Failed to add send log" });

            return Ok(new { success = true });
        }

        [HttpPut("{logId}/status")]
        public async Task<IActionResult> UpdateDeliveryStatus(Guid logId, [FromBody] DeliveryStatusUpdateDto dto)
        {
            var result = await _logService.UpdateDeliveryStatusAsync(logId, dto.Status, dto.DeliveredAt, dto.ReadAt);
            if (!result)
                return NotFound(new { message = "Log not found" });

            return Ok(new { success = true });
        }

        [HttpPut("{logId}/track-click")]
        public async Task<IActionResult> TrackClick(Guid logId, [FromBody] ClickTrackDto dto)
        {
            var result = await _logService.TrackClickAsync(logId, dto.ClickType);
            if (!result)
                return NotFound(new { message = "Log not found" });

            return Ok(new { success = true });
        }

        // ‚úÖ FIXED: Retry a single log using correct interface method
        [HttpPost("{logId}/retry")]
        public async Task<IActionResult> RetrySingle(Guid logId)
        {
            var result = await _retryService.RetrySingleAsync(logId);
            if (!result)
                return BadRequest(new { message = "Retry failed" });

            return Ok(new { success = true });
        }

        // ‚úÖ FIXED: Retry all failed logs using correct interface method
        [HttpPost("campaign/{campaignId}/retry-all")]
        public async Task<IActionResult> RetryAll(Guid campaignId)
        {
            var result = await _retryService.RetryFailedInCampaignAsync(campaignId);
            return Ok(new { success = true, retried = result });
        }
        // ‚úÖ FIXED: Get summary of campaign logs as per Campaign ID
        [HttpGet("campaign/{campaignId}/summary")]
        public async Task<IActionResult> GetCampaignSummary(Guid campaignId)
        {
            var summary = await _logService.GetCampaignSummaryAsync(campaignId);
            return Ok(summary);
        }

    }

    public class DeliveryStatusUpdateDto
    {
        public string Status { get; set; }
        public DateTime? DeliveredAt { get; set; }
        public DateTime? ReadAt { get; set; }
    }

    public class ClickTrackDto
    {
        public string ClickType { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\DTOs\CampaignLogSummaryDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignTracking.DTOs
{
    public class CampaignLogSummaryDto
    {
        public int TotalSent { get; set; }
        public int FailedCount { get; set; }
        public int ClickedCount { get; set; }
        public DateTime? LastSentAt { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\DTOs\CampaignSendLogDto.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignTracking.DTOs
{
    public class CampaignSendLogDto
    {
        public Guid Id { get; set; }

        // üîó Relationships
        public Guid CampaignId { get; set; }
        public Guid ContactId { get; set; }
        public string ContactName { get; set; }
        public string ContactPhone { get; set; }

        // üì§ Message Info
        public Guid RecipientId { get; set; }
        public string MessageBody { get; set; }
        public string? TemplateId { get; set; }
        public string? SendStatus { get; set; }
        public string? ErrorMessage { get; set; }

        // üïí Timestamps
        public DateTime CreatedAt { get; set; }
        public DateTime? SentAt { get; set; }
        public DateTime? DeliveredAt { get; set; }
        public DateTime? ReadAt { get; set; }

        // üåê Metadata
        public string? SourceChannel { get; set; }
        public string? IpAddress { get; set; }
        public string? DeviceInfo { get; set; }
        public string? MacAddress { get; set; }

        // ‚úÖ Enriched metadata
        public string? DeviceType { get; set; }
        public string? Browser { get; set; }
        public string? Country { get; set; }
        public string? City { get; set; }

        // üìà Click Tracking
        public bool IsClicked { get; set; }
        public DateTime? ClickedAt { get; set; }
        public string? ClickType { get; set; }

        // üîÅ Retry Info
        public string? RetryStatus { get; set; }     // Pending, Retried, Skipped
        public int RetryCount { get; set; }
        public DateTime? LastRetryAt { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\DTOs\CampaignStatusDashboardDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignTracking.DTOs
{
    public class CampaignStatusDashboardDto
    {
        public Guid CampaignId { get; set; }

        // üìä Overall Stats
        public int TotalRecipients { get; set; }
        public int SentCount { get; set; }
        public int DeliveredCount { get; set; }
        public int ReadCount { get; set; }
        public int FailedCount { get; set; }

        // üïí Delivery Timing (optional but insightful)
        public DateTime? FirstSentAt { get; set; }
        public DateTime? LastSentAt { get; set; }
        public DateTime? FirstReadAt { get; set; }
        public DateTime? LastReadAt { get; set; }

        // üìâ Delivery Rates
        public double DeliveryRate => TotalRecipients == 0 ? 0 : (double)DeliveredCount / TotalRecipients * 100;
        public double ReadRate => TotalRecipients == 0 ? 0 : (double)ReadCount / TotalRecipients * 100;
        public double FailureRate => TotalRecipients == 0 ? 0 : (double)FailedCount / TotalRecipients * 100;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\DTOs\TopCampaignDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignTracking.DTOs
{
    public class TopCampaignDto
    {
        public Guid CampaignId { get; set; }
        public string CampaignName { get; set; }
        public double ReadRate { get; set; }
        public double ClickThroughRate { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Models\CampaignSendLog.cs 
====================================================== 
 
Ôªøusing System;
using System.ComponentModel.DataAnnotations;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignTracking.Models
{
    public class CampaignSendLog
    {
        [Key]
        public Guid Id { get; set; }

        public string? MessageId { get; set; } // Unique WAMID from WhatsApp
        // üîó Foreign Keys
        [Required]
        public Guid CampaignId { get; set; }
        public Campaign? Campaign { get; set; }

        [Required]
        public Guid ContactId { get; set; }

        [Required]
        public Guid RecipientId { get; set; }

        // üì© Message Info
        [Required]
        public string MessageBody { get; set; } = "";

        public string? TemplateId { get; set; }
        public string? SendStatus { get; set; }
        public string? ErrorMessage { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        public string? CreatedBy { get; set; }

        public DateTime? SentAt { get; set; }
        public DateTime? DeliveredAt { get; set; }
        public DateTime? ReadAt { get; set; }

        // üåê Metadata
        public string? IpAddress { get; set; }
        public string? DeviceInfo { get; set; }
        public string? MacAddress { get; set; }
        public string? SourceChannel { get; set; }

        // ‚úÖ UX-Derived
        public string? DeviceType { get; set; }
        public string? Browser { get; set; }
        public string? Country { get; set; }
        public string? City { get; set; }

        // üìä Click Tracking
        public bool IsClicked { get; set; } = false;
        public DateTime? ClickedAt { get; set; }
        public string? ClickType { get; set; }

        // üîÅ Retry Tracking (üí° New)
        public int RetryCount { get; set; } = 0;                 // Number of retry attempts
        public DateTime? LastRetryAt { get; set; }               // When retry last happened
        public string? LastRetryStatus { get; set; }             // Success / Failed
        public bool AllowRetry { get; set; } = true;             // Flag to enable/disable retry

        // üëÅ Navigation
      
        public Contact? Contact { get; set; }
        public CampaignRecipient? Recipient { get; set; }


        // üîó MessageLog reference (optional)
        public Guid? MessageLogId { get; set; }
        public MessageLog? MessageLog { get; set; }

        public Guid BusinessId { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\CampaignAnalyticsService.cs 
====================================================== 
 
Ôªøusing Microsoft.EntityFrameworkCore;
using xbytechat.api.Features.CampaignTracking.DTOs;
using xbytechat.api.Features.CampaignTracking.Models;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    

    public class CampaignAnalyticsService : ICampaignAnalyticsService
    {
        private readonly AppDbContext _context;

        public CampaignAnalyticsService(AppDbContext context)
        {
            _context = context;
            //_context = context;
        }

        public async Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId)
        {
            var logs = await _context.CampaignSendLogs
                .Where(l => l.CampaignId == campaignId)
                .ToListAsync();

            if (!logs.Any()) return null;

            return new CampaignStatusDashboardDto
            {
                CampaignId = campaignId,
                TotalRecipients = logs.Count,
                SentCount = logs.Count(l => l.SendStatus == "Sent"),
                DeliveredCount = logs.Count(l => l.SendStatus == "Delivered"),
                ReadCount = logs.Count(l => l.SendStatus == "Read"),
                FailedCount = logs.Count(l => l.SendStatus == "Failed"),
                FirstSentAt = logs.Min(l => l.SentAt),
                LastSentAt = logs.Max(l => l.SentAt),
                FirstReadAt = logs.Min(l => l.ReadAt),
                LastReadAt = logs.Max(l => l.ReadAt)
            };
        }

        //public async Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId)
        //{
        //    var stats = await _context.CampaignSendLogs
        //        .Where(log => log.BusinessId == businessId)
        //        .GroupBy(log => 1) // Group by a constant to aggregate all rows
        //        .Select(g => new
        //        {
        //            TotalSent = g.Count(),
        //            TotalDelivered = g.Count(l => l.DeliveredAt != null),
        //            TotalRead = g.Count(l => l.ReadAt != null),
        //            TotalClicked = g.Count(l => l.ClickedAt != null),
        //            TotalFailed = g.Count(l => l.Status == "failed")
        //        })
        //        .FirstOrDefaultAsync();

        //    if (stats == null)
        //    {
        //        return new CampaignStatusDashboardDto(); // Return empty DTO if no logs found
        //    }

        //    //return new CampaignStatusDashboardDto
        //    //{
        //    //    TotalSent = stats.TotalSent,
        //    //    TotalDelivered = stats.TotalDelivered,
        //    //    TotalRead = stats.TotalRead,
        //    //    TotalClicked = stats.TotalClicked,
        //    //    TotalFailed = stats.TotalFailed,
        //    //    DeliveryRate = stats.TotalSent > 0 ? Math.Round((double)stats.TotalDelivered / stats.TotalSent * 100, 2) : 0,
        //    //    ReadRate = stats.TotalDelivered > 0 ? Math.Round((double)stats.TotalRead / stats.TotalDelivered * 100, 2) : 0,
        //    //    ClickRate = stats.TotalDelivered > 0 ? Math.Round((double)stats.TotalClicked / stats.TotalDelivered * 100, 2) : 0
        //    //};
        //}

        public async Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5)
        {
            var campaignStats = await _context.CampaignSendLogs
                .Where(log => log.BusinessId == businessId)
                .GroupBy(log => log.CampaignId)
                .Select(group => new
                {
                    CampaignId = group.Key,
                    TotalSent = group.Count(),
                    TotalRead = group.Count(l => l.ReadAt != null),
                    TotalClicked = group.Count(l => l.ClickedAt != null)
                })
                .Where(s => s.TotalSent > 0)
                .OrderByDescending(s => (double)s.TotalClicked / s.TotalSent)
                .Take(count)
                .ToListAsync();

            if (!campaignStats.Any())
            {
                return new List<TopCampaignDto>();
            }

            var campaignIds = campaignStats.Select(s => s.CampaignId).ToList();
            var campaigns = await _context.Campaigns
                .Where(c => campaignIds.Contains(c.Id))
                .ToDictionaryAsync(c => c.Id, c => c.Name);

            return campaignStats.Select(s => new TopCampaignDto
            {
                CampaignId = s.CampaignId,
                CampaignName = campaigns.GetValueOrDefault(s.CampaignId, "Unnamed Campaign"),
                ReadRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalRead / s.TotalSent) * 100, 2) : 0,
                ClickThroughRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalClicked / s.TotalSent) * 100, 2) : 0
            });
        }
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\CampaignRetryService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using xbytechat.api;
using xbytechat.api.Features.CampaignTracking.Models;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public class CampaignRetryService : ICampaignRetryService
    {
        private readonly AppDbContext _context;

        public CampaignRetryService(AppDbContext context)
        {
            _context = context;
        }

        // ‚úÖ Public method: Retry a single failed log
        public async Task<bool> RetrySingleAsync(Guid logId)
        {
            return await RetrySendLogAsync(logId);
        }

        // ‚úÖ Public method: Retry all failed logs in a campaign
        public async Task<int> RetryFailedInCampaignAsync(Guid campaignId)
        {
            return await RetryAllFailedInCampaignAsync(campaignId);
        }

        // üîÅ Private: Retry a specific log
        private async Task<bool> RetrySendLogAsync(Guid logId)
        {
            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(x => x.Id == logId);

            if (log == null || log.SendStatus != "Failed" || !log.AllowRetry)
                return false;

            // üîÑ Simulate re-send (replace with actual IMessageService.SendAsync later)
            bool sent = SimulateSendMessage(log);

            log.RetryCount += 1;
            log.LastRetryAt = DateTime.UtcNow;
            log.LastRetryStatus = sent ? "Sent" : "Failed";
            log.SendStatus = sent ? "Sent" : "Failed";
            log.ErrorMessage = sent ? null : "Mock failure on retry";

            await _context.SaveChangesAsync();
            return sent;
        }

        // üîÅ Private: Retry all failed logs in a given campaign
        private async Task<int> RetryAllFailedInCampaignAsync(Guid campaignId)
        {
            var failedLogs = await _context.CampaignSendLogs
                .Where(log => log.CampaignId == campaignId && log.SendStatus == "Failed" && log.AllowRetry)
                .ToListAsync();

            int successCount = 0;

            foreach (var log in failedLogs)
            {
                bool sent = SimulateSendMessage(log);

                log.RetryCount += 1;
                log.LastRetryAt = DateTime.UtcNow;
                log.LastRetryStatus = sent ? "Sent" : "Failed";
                log.SendStatus = sent ? "Sent" : "Failed";
                log.ErrorMessage = sent ? null : "Mock failure on retry";

                if (sent) successCount++;
            }

            await _context.SaveChangesAsync();
            return successCount;
        }

        // üîß Simulated send (replace with actual WhatsApp message logic)
        private bool SimulateSendMessage(CampaignSendLog log)
        {
            return new Random().NextDouble() < 0.9; // 90% success rate
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\CampaignSendLogEnricher.cs 
====================================================== 
 
Ôªøusing System.Threading.Tasks;
using xbytechat.api.Features.CampaignTracking.Models;
using System;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public class CampaignSendLogEnricher : ICampaignSendLogEnricher
    {
        public async Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress)
        {
            // üß† Device Detection (simplified for now)
            log.DeviceInfo = userAgent;

            // üåç IP Lookup - Mocked for now
            if (!string.IsNullOrWhiteSpace(ipAddress))
            {
                log.IpAddress = ipAddress;
                log.SourceChannel = "API"; // Example: mark origin
                // Future: Use IPinfo or GeoLite2 for full location enrichment
            }

            // ‚åõ Simulate async task for compatibility
            await Task.CompletedTask;
        }
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\CampaignSendLogService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using xbytechat.api;
using xbytechat.api.Features.CampaignTracking.DTOs;
using xbytechat.api.Features.CampaignTracking.Models;
using xbytechat.api.Features.CampaignTracking.Services;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public class CampaignSendLogService : ICampaignSendLogService
    {
        private readonly AppDbContext _context;
        private readonly ICampaignSendLogEnricher _enricher;

        public CampaignSendLogService(AppDbContext context, ICampaignSendLogEnricher enricher)
        {
            _context = context;
            _enricher = enricher;
        }

        // üìä Get all send logs for a given campaign
        public async Task<List<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId)
        {
            return await _context.CampaignSendLogs
                .Where(log => log.CampaignId == campaignId)
                .Include(log => log.Contact)
                .Select(log => new CampaignSendLogDto
                {
                    Id = log.Id,
                    CampaignId = log.CampaignId,
                    ContactId = log.ContactId,
                    ContactName = log.Contact != null ? log.Contact.Name : "N/A",
                    ContactPhone = log.Contact != null ? log.Contact.PhoneNumber : "-",
                    MessageBody = log.MessageBody,
                    TemplateId = log.TemplateId,
                    SendStatus = log.SendStatus,
                    ErrorMessage = log.ErrorMessage,
                    CreatedAt = log.CreatedAt,
                    SentAt = log.SentAt,
                    DeliveredAt = log.DeliveredAt,
                    ReadAt = log.ReadAt,
                    IpAddress = log.IpAddress,
                    DeviceInfo = log.DeviceInfo,
                    MacAddress = log.MacAddress,
                    SourceChannel = log.SourceChannel,
                    IsClicked = log.IsClicked,
                    ClickedAt = log.ClickedAt,
                    ClickType = log.ClickType
                })
                .ToListAsync();
        }

        // üìç Get logs for a specific contact in a campaign
        public async Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId)
        {
            return await _context.CampaignSendLogs
                .Where(log => log.CampaignId == campaignId && log.ContactId == contactId)
                .Select(log => new CampaignSendLogDto
                {
                    Id = log.Id,
                    CampaignId = log.CampaignId,
                    ContactId = log.ContactId,
                    MessageBody = log.MessageBody,
                    TemplateId = log.TemplateId,
                    SendStatus = log.SendStatus,
                    ErrorMessage = log.ErrorMessage,
                    CreatedAt = log.CreatedAt,
                    SentAt = log.SentAt,
                    DeliveredAt = log.DeliveredAt,
                    ReadAt = log.ReadAt,
                    IpAddress = log.IpAddress,
                    DeviceInfo = log.DeviceInfo,
                    MacAddress = log.MacAddress,
                    SourceChannel = log.SourceChannel,
                    IsClicked = log.IsClicked,
                    ClickedAt = log.ClickedAt,
                    ClickType = log.ClickType
                })
                .ToListAsync();
        }

        // üÜï Create a new send log (with enrichment)
        public async Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent)
        {
            var log = new CampaignSendLog
            {
                Id = Guid.NewGuid(),
                CampaignId = dto.CampaignId,
                ContactId = dto.ContactId,
                MessageBody = dto.MessageBody,
                TemplateId = dto.TemplateId,
                SendStatus = dto.SendStatus,
                ErrorMessage = dto.ErrorMessage,
                CreatedAt = DateTime.UtcNow,
                SentAt = dto.SentAt,
                DeliveredAt = dto.DeliveredAt,
                ReadAt = dto.ReadAt,
                SourceChannel = dto.SourceChannel,
                IsClicked = dto.IsClicked,
                ClickedAt = dto.ClickedAt,
                ClickType = dto.ClickType,
                RecipientId = dto.RecipientId
            };

            // ‚úÖ Use enrichment service
            await _enricher.EnrichAsync(log, userAgent, ipAddress);

            _context.CampaignSendLogs.Add(log);
            await _context.SaveChangesAsync();
            return true;
        }

        // üì® Update delivery or read status
        public async Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt)
        {
            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);
            if (log == null) return false;

            log.SendStatus = status;
            log.DeliveredAt = deliveredAt ?? log.DeliveredAt;
            log.ReadAt = readAt ?? log.ReadAt;

            await _context.SaveChangesAsync();
            return true;
        }

        // üìà Track click (CTA)
        public async Task<bool> TrackClickAsync(Guid logId, string clickType)
        {
            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);
            if (log == null) return false;

            log.IsClicked = true;
            log.ClickedAt = DateTime.UtcNow;
            log.ClickType = clickType;

            await _context.SaveChangesAsync();
            return true;
        }

        // üìä Get summary of campaign logs
        public async Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId)
        {
            var logs = await _context.CampaignSendLogs
                .Where(l => l.CampaignId == campaignId)
                .ToListAsync();

            return new CampaignLogSummaryDto
            {
                TotalSent = logs.Count,
                FailedCount = logs.Count(l => l.SendStatus == "Failed"),
                ClickedCount = logs.Count(l => l.IsClicked),
                LastSentAt = logs.Max(l => l.SentAt)
            };
        }


    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\ICampaignAnalyticsService.cs 
====================================================== 
 
Ôªøusing xbytechat.api.Features.CampaignTracking.DTOs;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public interface ICampaignAnalyticsService
    {
       // Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId);
        Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5);
        Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId);
    }
} 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\ICampaignRetryService.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public interface ICampaignRetryService
    {

        // Retry a single failed message log by its ID.
        // will be used when user clicks "Retry Now" on a log row.
        Task<bool> RetrySingleAsync(Guid logId);


        // Retry all failed messages in a campaign where retry is allowed.
        // will support "Retry All Failed" button from Campaign logs.
        Task<int> RetryFailedInCampaignAsync(Guid campaignId);
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\ICampaignSendLogEnricher.cs 
====================================================== 
 
Ôªøusing System.Threading.Tasks;
using xbytechat.api.Features.CampaignTracking.Models;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public interface ICampaignSendLogEnricher
    {
        Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress);
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignTracking\Services\ICampaignSendLogService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignTracking.DTOs;

namespace xbytechat.api.Features.CampaignTracking.Services
{
    public interface ICampaignSendLogService
    {
        // üìä Get all logs for a specific campaign
        Task<List<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId);

        // üìç Get logs for a specific contact in a campaign
        Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId);

        // üÜï Add a new send log entry with enrichment (IP, User-Agent)
        Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent);

        // üì® Update delivery or read status
        Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt);

        // üìà Track CTA click (e.g., BuyNow, ViewDetails)
        Task<bool> TrackClickAsync(Guid logId, string clickType);
        // üìä Get summary of campaign logs
        Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId);

    }
}
 
 
