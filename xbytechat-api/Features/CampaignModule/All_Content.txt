Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\All_Content.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\All_Content.txt 
====================================================== 
 
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\extract_all.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.

set "outputFile=All_Content.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%"
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Serilog;
using System;
using System.Security.Claims;
using System.Threading.Tasks;
using xbytechat.api.AuthModule.Models;
using xbytechat.api.Features.BusinessModule.Services;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.Helpers;
using xbytechat.api.Shared;
using static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CampaignController : ControllerBase
    {
        private readonly ICampaignService _campaignService;
        private readonly IBusinessService _businessService;
        private readonly IMessageEngineService _messageService;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CampaignController(
            ICampaignService campaignService,
            IBusinessService businessService,
            IMessageEngineService messageEngineService,
            IHttpContextAccessor httpContextAccessor)
        {
            _campaignService = campaignService;
            _businessService = businessService;
            _messageService = messageEngineService;
            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet("get-image-campaign")]
        public async Task<IActionResult> GetAll([FromQuery] string? type)
        {
            var user = HttpContext.User;
            var businessIdClaim = user.FindFirst("businessId");

            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))
                return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

            var result = await _campaignService.GetAllCampaignsAsync(businessId, type);
            return Ok(result);
        }

        [HttpGet("paginated")]
        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)
        {
            var user = HttpContext.User;
            var businessIdClaim = user.FindFirst("businessId");

            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))
                return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);
            return Ok(result);
        }

        [HttpGet("debug-claims")]
        public IActionResult DebugClaims()
        {
            var user = HttpContext.User;
            var businessId = user.FindFirst("businessId")?.Value;

            return Ok(new
            {
                name = user.Identity?.Name,
                businessId
            });
        }

        [HttpPost("create-text-campaign")]
        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)
        {
            try
            {
                var businessIdClaim = User.FindFirst("businessId")?.Value;
                if (!Guid.TryParse(businessIdClaim, out var businessId))
                    return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

                var createdBy = User.Identity?.Name ?? "system";

                if (string.IsNullOrWhiteSpace(dto.Name))
                    return BadRequest(new { message = "üö´ Campaign name is required." });

                if (string.IsNullOrWhiteSpace(dto.TemplateId))
                    return BadRequest(new { message = "üö´ TemplateId is required for template campaigns." });

                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))
                    return BadRequest(new { message = "üö´ Message template content is required." });

                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);

                return campaignId != null
                    ? Ok(new
                    {
                        success = true,
                        message = "‚úÖ Campaign created successfully",
                        campaignId = campaignId.Value
                    })
                    : BadRequest(new { success = false, message = "‚ùå Failed to create campaign" });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception in CreateTextCampaign");
                return StatusCode(500, new { message = "üö® Internal server error", error = ex.Message });
            }
        }

        [HttpPost("create-image-campaign")]
        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)
        {
            try
            {
                var user = HttpContext.User;
                var businessIdClaim = user.FindFirst("businessId");

                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))
                    return Unauthorized(new { message = "üö´ Invalid or missing BusinessId claim." });

                if (dto.MultiButtons != null && dto.MultiButtons.Any())
                {
                    var allowedTypes = new[] { "url", "copy_code", "flow", "phone_number", "quick_reply" };
                    foreach (var button in dto.MultiButtons)
                    {
                        var type = button.ButtonType?.Trim().ToLower();

                        if (!allowedTypes.Contains(type))
                            return BadRequest(new { message = $"‚ùå Invalid ButtonType: '{type}' is not supported." });

                        var needsValue = new[] { "url", "flow", "copy_code", "phone_number" };
                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))
                            return BadRequest(new { message = $"‚ùå Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'." });

                        if (button.TargetUrl?.ToLower() == "unknown")
                            return BadRequest(new { message = $"‚ùå Invalid value 'unknown' found in button '{button.ButtonText}'." });
                    }
                }

                var createdBy = user.Identity?.Name ?? "system";
                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);

                return Ok(new
                {
                    success = true,
                    message = "‚úÖ Campaign created successfully",
                    campaignId
                });
            }
            catch (UnauthorizedAccessException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception in CreateImageCampaign");
                return StatusCode(500, new { message = "üö® Internal server error", error = ex.Message });
            }
        }

        // ‚úÖ Moved above {id} routes
        [HttpPost("{id}/assign-contacts")]
        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)
        {
            try
            {
                var businessId = GetBusinessId();
                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);

                return success
                    ? Ok(new { message = "‚úÖ Contacts assigned" })
                    : BadRequest(new { message = "‚ùå Failed to assign contacts" });
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå Error assigning contacts: " + ex.Message);
                return StatusCode(500, new { message = "Internal error", error = ex.Message });
            }
        }

        [HttpDelete("{campaignId}/recipients/{contactId}")]
        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)
        {
            try
            {
                var businessId = GetBusinessId();
                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);

                if (!success)
                    return NotFound(new { message = "Recipient not found or not assigned" });

                return NoContent();
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå Remove recipient failed: " + ex.Message);
                return StatusCode(500, new { message = "Error removing recipient", detail = ex.Message });
            }
        }

        [HttpPost("send-campaign/{campaignId}")] // use to send free text and Template campaigns
        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)
        {
            try
            {
                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);
                return result.Success ? Ok(result) : BadRequest(result);
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception while sending image template campaign");
                return StatusCode(500, ResponseResult.ErrorInfo("üö® Server error while sending campaign", ex.ToString()));
            }
        }

        [HttpPost("send-template-campaign/{id}")]
        public async Task<IActionResult> SendImageCampaign(Guid id)
        {
            var result = await _campaignService.SendTemplateCampaignAsync(id);
            return result.Success ? Ok(result) : BadRequest(result);
        }

        [HttpPost("send/{campaignId}")]
        public async Task<IActionResult> SendCampaign(Guid campaignId)
        {
            try
            {
                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
                var userAgent = Request.Headers["User-Agent"].ToString() ?? "unknown";

                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);

                return success
                    ? Ok(new { success = true, message = "‚úÖ Campaign sent successfully" })
                    : BadRequest(new { success = false, message = "‚ùå Campaign sending failed" });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Exception in SendCampaign");
                return StatusCode(500, new { success = false, message = "üö® Internal Server Error", error = ex.Message });
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)
        {
            var result = await _campaignService.UpdateCampaignAsync(id, dto);
            return result
                ? Ok(new { message = "‚úèÔ∏è Campaign updated successfully" })
                : BadRequest(new { message = "‚ùå Update failed ‚Äî only draft campaigns can be edited" });
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCampaign(Guid id)
        {
            var result = await _campaignService.DeleteCampaignAsync(id);
            return result
                ? Ok(new { message = "üóëÔ∏è Campaign deleted successfully" })
                : BadRequest(new { message = "‚ùå Delete failed ‚Äî only draft campaigns can be deleted" });
        }

        [HttpGet("recipients/{id}")]
        public async Task<IActionResult> GetCampaignRecipients(Guid id)
        {
            try
            {
                var businessId = GetBusinessId();
                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);
                return Ok(recipients);
            }
            catch (Exception ex)
            {
                Console.WriteLine("‚ùå Error fetching campaign recipients: " + ex.Message);
                return StatusCode(500, new { message = "Error fetching recipients", detail = ex.Message });
            }
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)
        {
            var businessId = GetBusinessId();
            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);

            if (campaign == null)
                return NotFound();

            return Ok(campaign);
        }

        private Guid GetBusinessId()
        {
            var claim = HttpContext.User.FindFirst("businessId")?.Value;
            if (string.IsNullOrEmpty(claim))
                throw new UnauthorizedAccessException("BusinessId not found in token claims.");

            return Guid.Parse(claim);
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Controllers\CampaignRecipientController.cs 
====================================================== 
 
Ôªøusing Microsoft.AspNetCore.Mvc;
using Serilog;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Services;

namespace xbytechat.api.Features.CampaignModule.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CampaignRecipientController : ControllerBase
    {
        private readonly ICampaignRecipientService _recipientService;

        public CampaignRecipientController(ICampaignRecipientService recipientService)
        {
            _recipientService = recipientService;
        }

        // ‚úÖ Get a single recipient by ID
        [HttpGet("{id}")]
        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)
        {
            var recipient = await _recipientService.GetByIdAsync(id);
            if (recipient == null)
                return NotFound(new { message = "Recipient not found" });

            return Ok(recipient);
        }

        // ‚úÖ Get all recipients for a specific campaign
        [HttpGet("/api/campaigns/{campaignId}/recipients")]
        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)
        {
            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);
            return Ok(recipients);
        }

        // ‚úÖ Update recipient status (e.g., from Pending ‚Üí Sent)
        [HttpPut("{recipientId}/status")]
        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)
        {
            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);
            if (!success)
                return NotFound(new { message = "Recipient not found or update failed" });

            return Ok(new { message = "Status updated" });
        }

        // ‚úÖ Track a reply from customer
        [HttpPut("{recipientId}/reply")]
        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)
        {
            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);
            if (!success)
                return NotFound(new { message = "Recipient not found or tracking failed" });

            return Ok(new { message = "Reply tracked" });
        }

        // üîç Search recipients by optional filters (status, keyword)
        [HttpGet("search")]
        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)
        {
            var results = await _recipientService.SearchRecipientsAsync(status, keyword);
            return Ok(results);
        }

        [HttpPost("{id}/assign-contacts")]
        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)
        {
            try
            {
                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);
                return Ok(new { message = "Contacts assigned successfully" });
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Error assigning contacts to campaign");
                return StatusCode(500, new { message = "Failed to assign contacts" });
            }
        }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\AssignContactsDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class AssignContactsDto
    {
        public List<Guid> ContactIds { get; set; }
    }

}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignButtonDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignButtonDto
    {
        public string ButtonText { get; set; } = string.Empty; // üìç e.g., "Buy Now"
        public string ButtonType { get; set; } = "url";         // üîò url | quick_reply | call
        public string TargetUrl { get; set; } = string.Empty;  // üåê or phone/call param
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignButtonParamFromMetaDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignButtonParamFromMetaDto
    {
        public string Text { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string SubType { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignCreateDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using xbytechat.api.Features.CTAManagement.DTOs;
using xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignCreateDto
    {
        public string Name { get; set; }

        [Column(TypeName = "text")]
        public string MessageTemplate { get; set; }

        public string? TemplateId { get; set; } // ‚úÖ Optional Meta template ID

        public string? FollowUpTemplateId { get; set; } // üîÅ Auto-reply template after interest

        public string? CampaignType { get; set; } //= "template"; // "text", "template", "cta"

        public Guid? CtaId { get; set; } // üîò For legacy CTA support (optional)

        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ‚úÖ New multi-button support
        public DateTime? ScheduledAt { get; set; } // üìÖ Optional future scheduling

        //public List<Guid>? ContactIds { get; set; } // üë• Target contact list

        public string? ImageUrl { get; set; } // üñºÔ∏è Optional image field

        public string? ImageCaption { get; set; } // üìù Optional caption

        public List<Guid> ContactIds { get; set; } = new();

        public List<string>? TemplateParameters { get; set; }
        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignDto.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignDto
    {
        public Guid Id { get; set; }

        public string Name { get; set; }

        public string MessageTemplate { get; set; }

        public string? TemplateId { get; set; }
        public string? MessageBody { get; set; }
        public string? CampaignType { get; set; }

        public string? Status { get; set; }

        public string? ImageUrl { get; set; }

        public string? ImageCaption { get; set; }

        public DateTime CreatedAt { get; set; }

        public DateTime? ScheduledAt { get; set; }

        public Guid? CtaId { get; set; }

        public CtaPreviewDto? Cta { get; set; }

        public List<CampaignButtonDto> MultiButtons { get; set; } = new();
    }

    // üì¶ Embedded DTO for CTA preview (title + button text only)
    public class CtaPreviewDto
    {
        public string Title { get; set; } = string.Empty;

        public string ButtonText { get; set; } = string.Empty;
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignRecipientDto.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignRecipientDto
    {
        public Guid Id { get; set; }

        public Guid ContactId { get; set; }
        public string ContactName { get; set; }
        public string ContactPhone { get; set; }

        public string Status { get; set; }
        public DateTime? SentAt { get; set; }

        // üîÅ Advanced Fields (for analytics & future automation)
        public string? BotId { get; set; }
        public string? MessagePreview { get; set; }
        public string? ClickedCTA { get; set; }
        public string? CategoryBrowsed { get; set; }
        public string? ProductBrowsed { get; set; }
        public bool IsAutoTagged { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\DTOs\CampaignSummaryDto.cs 
====================================================== 
 
Ôªønamespace xbytechat.api.Features.CampaignModule.DTOs
{
    public class CampaignSummaryDto
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? Status { get; set; }
        public DateTime? ScheduledAt { get; set; }
        public DateTime CreatedAt { get; set; }


        public string? ImageUrl { get; set; } // ‚úÖ Add this
        public string? ImageCaption { get; set; } // ‚úÖ Add this
        public string? CtaTitle { get; set; } // Optional: For CTA info
        public int RecipientCount { get; set; } // Optional: To show 0/10 etc
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\Campaign.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.CampaignTracking.Models;
using xbytechat.api.Features.CTAManagement.Models;
using System.ComponentModel.DataAnnotations.Schema;
using xbytechat.api.Features.MessageManagement.DTOs;
using xbytechat.api.Features.BusinessModule.Models;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class Campaign
    {
        public Guid Id { get; set; }

        // üîó Business info
        public Guid BusinessId { get; set; }
        public Business Business { get; set; }
        public Guid? CampaignId { get; set; }
        public Campaign? SourceCampaign { get; set; }

        // üìã Core campaign details
        public string Name { get; set; }
        public string MessageTemplate { get; set; }
        public string? TemplateId { get; set; } // ‚úÖ Meta-approved template ID

        [Column(TypeName = "text")]
        public string? MessageBody { get; set; } // ‚úÖ Final resolved WhatsApp message body


        public string? FollowUpTemplateId { get; set; } // üîÅ For auto-reply follow-up after interest
        public string? CampaignType { get; set; } // = "template"; // text, template, cta

        // üîò CTA tracking (optional)
        public Guid? CtaId { get; set; }
        public CTADefinition? Cta { get; set; }

       
        public DateTime? ScheduledAt { get; set; }
        public string Status { get; set; } = "Draft"; // Draft, Scheduled, Sent

        // üë§ Metadata
        public string? CreatedBy { get; set; }
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        // üóëÔ∏è Soft delete support
        public bool IsDeleted { get; set; } = false;
        public DateTime? DeletedAt { get; set; }
        public string? DeletedBy { get; set; }

        // üë• Recipient relationship
        public ICollection<CampaignRecipient> Recipients { get; set; }

        // üìä Logs
        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();
        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }

        //public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();

        public string? ImageUrl { get; set; } // ‚úÖ store image URL
        public string? ImageCaption { get; set; } // optional caption
        public string? TemplateParameters { get; set; } // ‚úÖ stores ["value1", "value2", ...] as JSON string

        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();

        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignButton.cs 
====================================================== 
 
Ôªøusing System;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class CampaignButton
    {
        public Guid Id { get; set; }

        public Guid CampaignId { get; set; } // üîó Foreign key
        public Campaign Campaign { get; set; }

        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)
        public string Type { get; set; } = "url"; // Type: url, quick_reply, call, etc.
        public string Value { get; set; } = string.Empty; // Target URL or payload

        public int Position { get; set; } // Button order (1‚Äì3)
        public bool IsFromTemplate { get; set; } = false;

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignFlowOverride.cs 
====================================================== 
 
Ôªøusing System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class CampaignFlowOverride
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        public Guid CampaignId { get; set; }

        [Required]
        [MaxLength(100)]
        public string TemplateName { get; set; } = string.Empty;

        [Required]
        [MaxLength(50)]
        public string ButtonText { get; set; } = string.Empty;

        public string? OverrideNextTemplate { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public string? CreatedBy { get; set; }

        [ForeignKey("CampaignId")]
        public Campaign? Campaign { get; set; }
    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Models\CampaignRecipient.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using xbytechat.api.CRM.Models;
using xbytechat.api.Features.BusinessModule.Models;
using xbytechat.api.Features.CampaignTracking.Models;

namespace xbytechat.api.Features.CampaignModule.Models
{
    public class CampaignRecipient
    {
        public Guid Id { get; set; }

        public Guid CampaignId { get; set; }
        public Campaign Campaign { get; set; }

        public Guid ContactId { get; set; }
        public Contact Contact { get; set; }

        public string Status { get; set; } = "Pending"; // Pending, Sent, Delivered, Failed, Replied
        public DateTime? SentAt { get; set; }

        public string? BotId { get; set; } // Multi-bot support
        public string? MessagePreview { get; set; } // Final message sent
        public string? ClickedCTA { get; set; } // Track CTA clicked like "BuyNow"
        public string? CategoryBrowsed { get; set; } // e.g., Ads
        public string? ProductBrowsed { get; set; } // e.g., Product name
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging

        // ‚úÖ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)
        public ICollection<CampaignSendLog> SendLogs { get; set; }

        public Guid BusinessId { get; set; }  // ‚úÖ Add this line
        public Business Business { get; set; } = null!; // if navigation is needed


    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignRecipientService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public class CampaignRecipientService : ICampaignRecipientService
    {
        private readonly AppDbContext _context;

        public CampaignRecipientService(AppDbContext context)
        {
            _context = context;
        }

        // üîç Get a single recipient by ID
        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)
        {
            return await _context.CampaignRecipients
                .Include(r => r.Contact)
                .Where(r => r.Id == id)
                .Select(r => new CampaignRecipientDto
                {
                    Id = r.Id,
                    ContactId = r.ContactId,
                    ContactName = r.Contact.Name,
                    ContactPhone = r.Contact.PhoneNumber,
                    Status = r.Status,
                    SentAt = r.SentAt
                })
                .FirstOrDefaultAsync();
        }

        // üì¶ Get all recipients of a specific campaign
        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)
        {
            return await _context.CampaignRecipients
                .Include(r => r.Contact)
                .Where(r => r.CampaignId == campaignId)
                .Select(r => new CampaignRecipientDto
                {
                    Id = r.Id,
                    ContactId = r.ContactId,
                    ContactName = r.Contact.Name,
                    ContactPhone = r.Contact.PhoneNumber,
                    Status = r.Status,
                    SentAt = r.SentAt
                })
                .ToListAsync();
        }

        // ‚úèÔ∏è Update status of a specific recipient
        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)
        {
            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);
            if (recipient == null) return false;

            recipient.Status = newStatus;
            recipient.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }

        // üí¨ Track customer reply or CTA
        // üó£Ô∏è Track customer reply on a recipient
        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)
        {
            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);
            if (recipient == null) return false;

            recipient.ClickedCTA = replyText; // You may later rename this to something like `LastReply`
            recipient.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }


        // üîé Global recipient search across all campaigns
        // üîç Search recipients by optional status or keyword
        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)
        {
            var query = _context.CampaignRecipients
                .Include(r => r.Contact)
                .AsQueryable();

            if (!string.IsNullOrEmpty(status))
                query = query.Where(r => r.Status == status);

            if (!string.IsNullOrEmpty(keyword))
                query = query.Where(r =>
                    r.Contact.Name.Contains(keyword) ||
                    r.Contact.PhoneNumber.Contains(keyword)
                );

            return await query
                .Select(r => new CampaignRecipientDto
                {
                    Id = r.Id,
                    ContactId = r.ContactId,
                    ContactName = r.Contact.Name,
                    ContactPhone = r.Contact.PhoneNumber,
                    Status = r.Status,
                    SentAt = r.SentAt
                })
                .ToListAsync();
        }

        //public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)
        //{
        //    var existing = await _context.CampaignRecipients
        //        .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))
        //        .Select(r => r.ContactId)
        //        .ToListAsync();

        //    var newRecipients = contactIds
        //        .Where(id => !existing.Contains(id))
        //        .Select(contactId => new CampaignRecipient
        //        {
        //            Id = Guid.NewGuid(),
        //            CampaignId = campaignId,
        //            ContactId = contactId,
        //            Status = "Pending",
        //            SentAt = DateTime.UtcNow,
        //            UpdatedAt = DateTime.UtcNow,
        //            IsAutoTagged = false
        //        }).ToList();

        //    if (newRecipients.Any())
        //    {
        //        await _context.CampaignRecipients.AddRangeAsync(newRecipients);
        //        await _context.SaveChangesAsync();
        //    }
        //}
        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)
        {
            var campaign = await _context.Campaigns
                .AsNoTracking()
                .FirstOrDefaultAsync(c => c.Id == campaignId);

            if (campaign == null)
                throw new Exception("Campaign not found.");

            var businessId = campaign.BusinessId;

            var existing = await _context.CampaignRecipients
                .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))
                .Select(r => r.ContactId)
                .ToListAsync();

            var newRecipients = contactIds
                .Where(id => !existing.Contains(id))
                .Select(contactId => new CampaignRecipient
                {
                    Id = Guid.NewGuid(),
                    CampaignId = campaignId,
                    ContactId = contactId,
                    BusinessId = businessId, // ‚úÖ required
                    Status = "Pending",
                    SentAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    IsAutoTagged = false
                }).ToList();

            if (newRecipients.Any())
            {
                await _context.CampaignRecipients.AddRangeAsync(newRecipients);
                await _context.SaveChangesAsync();
            }
        }

    }
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\CampaignService.cs 
====================================================== 
 
Ôªøusing System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Serilog;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Features.CampaignModule.Models;
using xbytechat.api.Shared;
using xbytechat.api.Features.CampaignTracking.Models;
using xbytechat.api.Services.Messages.Interfaces;
using xbytechat.api.DTOs.Messages;
using Microsoft.Extensions.DependencyInjection;
using xbytechat.api.Features.xbTimeline.Services;
using xbytechat.api.Features.MessagesEngine.DTOs;
using xbytechat.api.Features.MessagesEngine.Services;
using xbytechat.api.CRM.Dtos;
using Newtonsoft.Json;
using xbytechat.api.Helpers;
using xbytechat_api.WhatsAppSettings.Services;
using xbytechat.api.Shared.utility;
using xbytechat.api.Features.MessagesEngine.PayloadBuilders;
using xbytechat.api.WhatsAppSettings.DTOs;
using xbytechat.api.Features.BusinessModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public class CampaignService : ICampaignService
    {
        private readonly AppDbContext _context;
        private readonly IMessageService _messageService;
        private readonly IServiceProvider _serviceProvider;
        private readonly ILeadTimelineService _timelineService;
        private readonly IMessageEngineService _messageEngineService;
        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;
        public CampaignService(AppDbContext context, IMessageService messageService,
                               IServiceProvider serviceProvider,
                               ILeadTimelineService timelineService,
                               IMessageEngineService messageEngineService,
                               IWhatsAppTemplateFetcherService templateFetcherService)
        {
            _context = context;
            _messageService = messageService;
            _serviceProvider = serviceProvider;
            _timelineService = timelineService; // ‚úÖ new
            _messageEngineService = messageEngineService;
            _templateFetcherService = templateFetcherService;

        }


        #region Get All Types of Get and Update and Delete Methods

        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)
        {
            return await _context.Campaigns
                .Where(c => c.BusinessId == businessId)
                .OrderByDescending(c => c.CreatedAt)
                .Select(c => new CampaignSummaryDto
                {
                    Id = c.Id,
                    Name = c.Name,
                    Status = c.Status,
                    ScheduledAt = c.ScheduledAt,
                    CreatedAt = c.CreatedAt,

                })
                .ToListAsync();
        }
        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Cta) // if CTA is stored in a separate table
                .Include(c => c.MultiButtons) // assuming EF Core relation
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

            if (campaign == null) return null;

            return new CampaignDto
            {
                Id = campaign.Id,
                Name = campaign.Name,
                MessageTemplate = campaign.MessageTemplate,
                MessageBody = campaign.MessageBody,
                TemplateId = campaign.TemplateId,
                CampaignType = campaign.CampaignType,
                Status = campaign.Status,
                ImageUrl = campaign.ImageUrl,
                ImageCaption = campaign.ImageCaption,
                CreatedAt = campaign.CreatedAt,
                ScheduledAt = campaign.ScheduledAt,
                CtaId = campaign.CtaId,
                Cta = campaign.Cta == null ? null : new CtaPreviewDto
                {
                    Title = campaign.Cta.Title,
                    ButtonText = campaign.Cta.ButtonText
                },
                MultiButtons = campaign.MultiButtons?
                    .Select(b => new CampaignButtonDto
                    {
                        ButtonText = b.Title,// ButtonText,
                        ButtonType = b.Type,//ButtonType,
                        TargetUrl = b.Value
                    }).ToList() ?? new List<CampaignButtonDto>()
            };
        }

        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)
        {
            var query = _context.Campaigns
                .Where(c => c.BusinessId == businessId)
                .AsQueryable();

            if (!string.IsNullOrEmpty(type))
                query = query.Where(c => c.CampaignType == type);

            return await query
                .OrderByDescending(c => c.CreatedAt)
                .Select(c => new CampaignSummaryDto
                {
                    Id = c.Id,
                    Name = c.Name,
                    Status = c.Status,
                    ScheduledAt = c.ScheduledAt,
                    CreatedAt = c.CreatedAt,
                    ImageUrl = c.ImageUrl,            // ‚úÖ Now mapped
                    ImageCaption = c.ImageCaption,    // ‚úÖ Now mapped
                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional
                    RecipientCount = c.Recipients.Count()
                })
                .ToListAsync();
        }

        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)
        {
            var recipients = await _context.CampaignRecipients
                .Include(r => r.Contact)
                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)
                .Select(r => new ContactDto
                {
                    Id = r.Contact.Id,
                    Name = r.Contact.Name,
                    PhoneNumber = r.Contact.PhoneNumber,
                    Email = r.Contact.Email,
                    LeadSource = r.Contact.LeadSource,
                    CreatedAt = r.Contact.CreatedAt
                })
                .ToListAsync();

            return recipients;
        }

        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)
        {
            var query = _context.Campaigns
                .Where(c => c.BusinessId == businessId)
                .OrderByDescending(c => c.CreatedAt);

            var total = await query.CountAsync();

            var items = await query
                .Skip((request.Page - 1) * request.PageSize)
                .Take(request.PageSize)
                .Select(c => new CampaignSummaryDto
                {
                    Id = c.Id,
                    Name = c.Name,
                    Status = c.Status,
                    ScheduledAt = c.ScheduledAt,
                    CreatedAt = c.CreatedAt
                })
                .ToListAsync();

            return new PaginatedResponse<CampaignSummaryDto>
            {
                Items = items,
                TotalCount = total,
                Page = request.Page,
                PageSize = request.PageSize
            };
        }
        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)
        {
            var campaign = await _context.Campaigns.FindAsync(id);
            if (campaign == null || campaign.Status != "Draft")
                return false;

            // ‚úÖ Extract BusinessId from current campaign
            var businessId = campaign.BusinessId;

            // ‚úÖ Optional CTA ownership validation
            if (dto.CtaId.HasValue)
            {
                var cta = await _context.CTADefinitions
                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);

                if (cta == null)
                    throw new UnauthorizedAccessException("‚ùå The selected CTA does not belong to your business or is inactive.");
            }

            // ‚úèÔ∏è Update campaign fields
            campaign.Name = dto.Name;
            campaign.MessageTemplate = dto.MessageTemplate;
            campaign.TemplateId = dto.TemplateId;
            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;
            campaign.CampaignType = dto.CampaignType;
            campaign.CtaId = dto.CtaId;
            campaign.ImageUrl = dto.ImageUrl;
            campaign.ImageCaption = dto.ImageCaption;
            campaign.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> DeleteCampaignAsync(Guid id)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .FirstOrDefaultAsync(c => c.Id == id);

            if (campaign == null || campaign.Status != "Draft")
                return false;

            _context.CampaignRecipients.RemoveRange(campaign.Recipients);
            _context.Campaigns.Remove(campaign);

            await _context.SaveChangesAsync();
            Log.Information("üóëÔ∏è Campaign deleted: {Id}", id);
            return true;
        }

        #endregion

        #region // üÜï CreateCampaignAsync(Text/Image)
        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)
        {
            try
            {
                var campaignId = Guid.NewGuid();

                // üîÅ Parse template parameters into list
                var parsedParams = TemplateParameterHelper.ParseTemplateParams(
                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())
                );

                // üß† Fetch template (for body + buttons)
                var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, dto.TemplateId, true);

                // üß† Fill message body
                var resolvedBody = TemplateParameterHelper.FillPlaceholders(
                    template?.Body ?? dto.MessageTemplate,
                    parsedParams
                );

                // ‚úÖ Step 1: Create campaign object
                var campaign = new Campaign
                {
                    Id = campaignId,
                    BusinessId = businessId,
                    Name = dto.Name,
                    MessageTemplate = dto.MessageTemplate,
                    TemplateId = dto.TemplateId,
                    FollowUpTemplateId = dto.FollowUpTemplateId,
                    CampaignType = dto.CampaignType ?? "text",
                    CtaId = dto.CtaId,
                    ScheduledAt = dto.ScheduledAt,
                    CreatedBy = createdBy,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow,
                    Status = "Draft",
                    ImageUrl = dto.ImageUrl,
                    ImageCaption = dto.ImageCaption,
                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),
                    MessageBody = resolvedBody // ‚úÖ final resolved message
                };

                await _context.Campaigns.AddAsync(campaign);

                // ‚úÖ Step 2: Assign contacts if provided
                if (dto.ContactIds != null && dto.ContactIds.Any())
                {
                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaignId,
                        ContactId = contactId,
                        BusinessId = businessId,
                        Status = "Pending",
                        SentAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    });

                    await _context.CampaignRecipients.AddRangeAsync(recipients);
                }

                // ‚úÖ Step 3a: Save manual buttons from frontend
                if (dto.MultiButtons != null && dto.MultiButtons.Any())
                {
                    var buttons = dto.MultiButtons
                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))
                        .Take(3)
                        .Select((btn, index) => new CampaignButton
                        {
                            Id = Guid.NewGuid(),
                            CampaignId = campaignId,
                            Title = btn.ButtonText,
                            Type = btn.ButtonType ?? "url",
                            Value = btn.TargetUrl,
                            Position = index + 1,
                            IsFromTemplate = false
                        });

                    await _context.CampaignButtons.AddRangeAsync(buttons);
                }

                // ‚úÖ Step 3b: Save buttons auto-fetched from WhatsApp Template
                if (template != null && template.ButtonParams?.Count > 0)
                {
                    var autoButtons = template.ButtonParams
                        .Take(3)
                        .Select((btn, index) => new CampaignButton
                        {
                            Id = Guid.NewGuid(),
                            CampaignId = campaignId,
                            Title = btn.Text,
                            Type = btn.Type,
                            // Value = btn.SubType == "url" ? "https://your-redirect.com" : btn.SubType,
                            Value = btn.ParameterValue,
                            Position = index + 1,
                            IsFromTemplate = true
                        });

                    await _context.CampaignButtons.AddRangeAsync(autoButtons);
                }

                // ‚úÖ Final Save
                await _context.SaveChangesAsync();

                Log.Information("‚úÖ Campaign '{Name}' created with {Contacts} recipients, {ManualButtons} user buttons, {TemplateButtons} template buttons and {Params} template parameters",
                    dto.Name,
                    dto.ContactIds?.Count ?? 0,
                    dto.MultiButtons?.Count ?? 0,
                    template?.ButtonParams?.Count ?? 0,
                    dto.TemplateParameters?.Count ?? 0
                );

                return campaignId;
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Failed to create campaign");
                return null;
            }
        }
        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)
        {
            // üîê Optional CTA validation
            if (dto.CtaId.HasValue)
            {
                var cta = await _context.CTADefinitions
                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);

                if (cta == null)
                    throw new UnauthorizedAccessException("‚ùå The selected CTA does not belong to your business or is inactive.");
            }

            // üéØ Create campaign
            var campaign = new Campaign
            {
                Id = Guid.NewGuid(),
                BusinessId = businessId,
                Name = dto.Name,
                MessageTemplate = dto.MessageTemplate,
                TemplateId = dto.TemplateId,
                FollowUpTemplateId = dto.FollowUpTemplateId,
                CampaignType = "image",
                ImageUrl = dto.ImageUrl,
                ImageCaption = dto.ImageCaption,
                CtaId = dto.CtaId,
                CreatedBy = createdBy,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                Status = "Draft"
            };

            await _context.Campaigns.AddAsync(campaign);

            // üîò Save manual buttons from UI
            if (dto.MultiButtons?.Any() == true)
            {
                var buttons = dto.MultiButtons
                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))
                    .Take(3)
                    .Select((btn, index) => new CampaignButton
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaign.Id,
                        Title = btn.ButtonText,
                        Type = string.IsNullOrWhiteSpace(btn.ButtonType) ? "url" : btn.ButtonType,
                        Value = btn.TargetUrl,
                        Position = index + 1,
                        IsFromTemplate = false
                    }).ToList();

                if (buttons.Any())
                    await _context.CampaignButtons.AddRangeAsync(buttons);
            }

            // üîò Save template buttons (from Meta) with proper dynamic/static handling
            if (dto.ButtonParams?.Any() == true)
            {
                var templateButtons = dto.ButtonParams
                    .Where(btn => !string.IsNullOrWhiteSpace(btn.Text) && !string.IsNullOrWhiteSpace(btn.Type))
                    .Take(3)
                    .Select((btn, index) =>
                    {
                        var subType = btn.SubType?.ToLower();
                        var isDynamic = subType == "url" || subType == "flow" || subType == "copy_code";

                        // ‚úÖ Prefer user-provided value if dynamic, fallback to Meta value
                        var userInput = dto.MultiButtons?.ElementAtOrDefault(index)?.TargetUrl?.Trim();
                        var valueToSave = isDynamic && !string.IsNullOrWhiteSpace(userInput)
                            ? userInput
                            : btn.Value;

                        return new CampaignButton
                        {
                            Id = Guid.NewGuid(),
                            CampaignId = campaign.Id,
                            Title = btn.Text,
                            Type = btn.Type,
                            Value = valueToSave,
                            Position = index + 1,
                            IsFromTemplate = true
                        };
                    })
                    .Where(btn => !string.IsNullOrWhiteSpace(btn.Value)) // ‚úÖ Prevent null insert error
                    .ToList();

                if (templateButtons.Any())
                    await _context.CampaignButtons.AddRangeAsync(templateButtons);
            }

            await _context.SaveChangesAsync();
            return campaign.Id;
        }
        #endregion

        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .ThenInclude(r => r.Contact)
                .FirstOrDefaultAsync(c => c.Id == campaignId);

            if (campaign == null || campaign.Recipients.Count == 0)
            {
                Log.Warning("üö´ Campaign not found or has no recipients");
                return false;
            }

            campaign.Status = "Sending";
            campaign.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            int throttleLimit = 5;

            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions { MaxDegreeOfParallelism = throttleLimit }, async (recipient, ct) =>
            {
                try
                {
                    using var scope = _serviceProvider.CreateScope();
                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();

                    // üü¢ Use SimpleTemplateMessageDto instead of raw text
                    var dto = new SimpleTemplateMessageDto
                    {
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        TemplateName = campaign.MessageTemplate,
                        TemplateParameters = new List<string> { recipient.Contact.Name ?? "Customer" }
                    };

                    var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);

                    var sendLog = new CampaignSendLog
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaign.Id,
                        ContactId = recipient.ContactId,
                        RecipientId = recipient.Id,
                        TemplateId = campaign.TemplateId,
                        MessageBody = campaign.MessageTemplate,
                        MessageId = null,
                        SendStatus = result.Success ? "Sent" : "Failed",
                        ErrorMessage = result.Message,
                        SentAt = DateTime.UtcNow,
                        CreatedAt = DateTime.UtcNow,
                        SourceChannel = "whatsapp",
                        IpAddress = ipAddress,
                        DeviceInfo = userAgent
                    };

                    scopedDb.CampaignSendLogs.Add(sendLog);

                    var recipientToUpdate = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(r => r.Id == recipient.Id);
                    if (recipientToUpdate != null)
                    {
                        recipientToUpdate.Status = result.Success ? "Sent" : "Failed";
                        recipientToUpdate.MessagePreview = campaign.MessageTemplate;
                        recipientToUpdate.SentAt = DateTime.UtcNow;
                        recipientToUpdate.UpdatedAt = DateTime.UtcNow;
                    }

                    await scopedDb.SaveChangesAsync();
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "‚ùå Send failed for recipient: {RecipientId}", recipient.Id);
                }
            });

            campaign.Status = "Sent";
            campaign.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            Log.Information("üì§ Campaign {CampaignId} sent via template to {Count} recipients", campaign.Id, campaign.Recipients.Count);
            return true;
        }
        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .ThenInclude(r => r.Contact)
                .FirstOrDefaultAsync(c => c.Id == campaignId);

            if (campaign == null || campaign.Recipients.Count == 0)
            {
                Log.Warning("üö´ Campaign not found or has no recipients");
                return false;
            }

            campaign.Status = "Sending";
            campaign.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            int maxParallelism = 5;

#if NET6_0_OR_GREATER
            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions
            {
                MaxDegreeOfParallelism = maxParallelism
            },
            async (recipient, cancellationToken) =>
            {
                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);
            });
#else
    var tasks = campaign.Recipients.Select(recipient =>
        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)
    );
    await Task.WhenAll(tasks);
#endif

            campaign.Status = "Sent";
            campaign.UpdatedAt = DateTime.UtcNow;
            await _context.SaveChangesAsync();

            Log.Information("üì§ Campaign {CampaignId} sent in parallel to {Count} recipients", campaign.Id, campaign.Recipients.Count);
            return true;
        }
        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)
        {
            try
            {
                var dto = new SimpleTemplateMessageDto
                {
                    RecipientNumber = recipient.Contact.PhoneNumber,
                    TemplateName = campaign.MessageTemplate,
                    TemplateParameters = new List<string> { recipient.Contact.Name ?? "Customer" }
                };

                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);


                var log = new CampaignSendLog
                {
                    Id = Guid.NewGuid(),
                    CampaignId = campaign.Id,
                    ContactId = recipient.ContactId,
                    RecipientId = recipient.Id,
                    TemplateId = campaign.TemplateId,
                    MessageBody = campaign.MessageTemplate,
                    MessageId = null,
                    SendStatus = result.Success ? "Sent" : "Failed",
                    ErrorMessage = result.Message,
                    SentAt = DateTime.UtcNow,
                    CreatedAt = DateTime.UtcNow,
                    SourceChannel = "whatsapp",
                    IpAddress = ip,
                    DeviceInfo = ua
                };

                lock (_context)
                {
                    _context.CampaignSendLogs.Add(log);
                    recipient.Status = result.Success ? "Sent" : "Failed";
                    recipient.MessagePreview = campaign.MessageTemplate;
                    recipient.SentAt = DateTime.UtcNow;
                    recipient.UpdatedAt = DateTime.UtcNow;
                }

                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Failed to send template to recipient: {RecipientId}", recipient.Id);
            }
        }

        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)
        {
            var entry = await _context.CampaignRecipients
                .FirstOrDefaultAsync(r =>
                    r.CampaignId == campaignId &&
                    r.ContactId == contactId &&
                    r.Campaign.BusinessId == businessId); // ‚úÖ Filter by related Campaign.BusinessId

            if (entry == null)
                return false;

            _context.CampaignRecipients.Remove(entry);
            await _context.SaveChangesAsync();
            return true;
        }

        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);

            if (campaign == null)
                return false;

            var newRecipients = contactIds.Select(id => new CampaignRecipient
            {
                Id = Guid.NewGuid(),
                CampaignId = campaignId,
                ContactId = id,
                BusinessId = businessId,
                Status = "Pending",
                SentAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            });

            _context.CampaignRecipients.AddRange(newRecipients);
            await _context.SaveChangesAsync();
            return true;
        }
        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)
        {
            try
            {
                var campaign = await _context.Campaigns
                    .Include(c => c.Recipients)
                        .ThenInclude(r => r.Contact) // üß† include contact details
                    .Include(c => c.MultiButtons)
                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

                if (campaign == null)
                    return ResponseResult.ErrorInfo("‚ùå Campaign not found.");

                if (campaign.Recipients == null || !campaign.Recipients.Any())
                    return ResponseResult.ErrorInfo("‚ùå No recipients assigned to this campaign.");

                var templateName = campaign.MessageTemplate;
                var templateId = campaign.TemplateId;
                var language = "en_US"; // Optional: make dynamic later
                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);

                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? "[]");

                int success = 0, failed = 0;

                foreach (var recipient in campaign.Recipients)
                {
                    var messageDto = new ImageTemplateMessageDto
                    {
                       // BusinessId = campaign.BusinessId,
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        TemplateName = templateName,
                        LanguageCode = language,
                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,
                        TemplateParameters = templateParams,
                        ButtonParameters = campaign.MultiButtons
                            .OrderBy(b => b.Position)
                            .Take(3)
                            .Select(btn => new CampaignButtonDto
                            {
                                ButtonText = btn.Title,
                                ButtonType = btn.Type,
                                TargetUrl = btn.Value
                            }).ToList()
                    };

                    // ‚úÖ Call the image/template sender
                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);
                    var isSuccess = sendResult.ToString().ToLower().Contains("messages");

                    var log = new MessageLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = campaign.BusinessId,
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        MessageContent = templateName,
                        MediaUrl = campaign.ImageUrl,
                        Status = isSuccess ? "Sent" : "Failed",
                        ErrorMessage = isSuccess ? null : "API Failure",
                        RawResponse = JsonConvert.SerializeObject(sendResult),
                        CreatedAt = DateTime.UtcNow,
                        SentAt = DateTime.UtcNow
                    };

                    await _context.MessageLogs.AddAsync(log);

                    if (isSuccess) success++;
                    else failed++;
                }

                await _context.SaveChangesAsync();
                return ResponseResult.SuccessInfo($"‚úÖ Sent: {success}, ‚ùå Failed: {failed}");
            }
            catch (Exception ex)
            {
                return ResponseResult.ErrorInfo("‚ùå Unexpected error during campaign send.", ex.ToString());
            }
        }

        #region  This region include all the code related to sending text and image based

        // Detection - which type of campaign to send (text based or Image based)
        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)
        {
            var campaign = await _context.Campaigns
                .Include(c => c.Recipients)
                    .ThenInclude(r => r.Contact)
                .Include(c => c.MultiButtons)
                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);

            if (campaign == null)
                return ResponseResult.ErrorInfo("‚ùå Campaign not found.");

            // Template Type Detection
            return campaign.CampaignType?.ToLower() switch
            {
                "text" => await SendTextTemplateCampaignAsync(campaign),
                "image" => await SendImageTemplateCampaignAsync(campaign),
                _ => ResponseResult.ErrorInfo("‚ùå Unsupported campaign type.")
            };
        }

        // This is used for "Text" based campaigns sending
        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)
        {
            try
            {
                if (campaign == null || campaign.IsDeleted)
                {
                    Log.Warning("‚ùå Campaign is null or marked as deleted.");
                    return ResponseResult.ErrorInfo("‚ùå Invalid campaign.");
                }

                if (campaign.Recipients == null || !campaign.Recipients.Any())
                {
                    Log.Warning("‚ö†Ô∏è Campaign has no assigned recipients.");
                    return ResponseResult.ErrorInfo("‚ö†Ô∏è No recipients assigned to this campaign.");
                }

                var businessId = campaign.BusinessId;
                var templateName = campaign.TemplateId;
                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);
                var buttons = campaign.MultiButtons?.ToList();

                // ‚úÖ Fetch WhatsApp template metadata
                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
                if (templateMeta == null)
                {
                    Log.Error("‚ùå Could not fetch template metadata for {Template}.", templateName);
                    return ResponseResult.ErrorInfo("Template metadata not found.");
                }

                if (templateParams.Count != templateMeta.PlaceholderCount)
                {
                    Log.Warning("‚ö†Ô∏è Template expects {Expected} body parameters but received {Actual}.",
                        templateMeta.PlaceholderCount, templateParams.Count);
                }

                int successCount = 0, failureCount = 0;

                foreach (var recipient in campaign.Recipients)
                {
                    if (recipient?.Contact == null)
                    {
                        Log.Warning("‚ö†Ô∏è Skipping recipient: recipient or contact is null. Recipient ID: {RecipientId}", recipient?.Id);
                        continue;
                    }

                    Log.Information("üì® Preparing to send to {Phone}", recipient.Contact.PhoneNumber);

                    var components = BuildTextTemplateComponents(templateParams, buttons, templateMeta);

                    var payload = new
                    {
                        messaging_product = "whatsapp",
                        to = recipient.Contact.PhoneNumber,
                        type = "template",
                        template = new
                        {
                            name = templateName,
                            language = new { code = templateMeta.Language ?? "en_US" },
                            components = components
                        }
                    };

                    Log.Debug("üì¶ WhatsApp Payload:\n{Payload}", JsonConvert.SerializeObject(payload, Formatting.Indented));

                    ResponseResult sendResult = await _messageEngineService.SendToWhatsAppAsync(payload, businessId);
                    Log.Information("üì¨ Send result: {Result}", JsonConvert.SerializeObject(sendResult));

                    var messageLog = new MessageLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        CampaignId = campaign.Id,
                        ContactId = recipient.ContactId,
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        MessageContent = campaign.MessageTemplate ?? templateName,
                        Status = sendResult.Success ? "Sent" : "Failed",
                        MessageId = sendResult.MessageId,
                        ErrorMessage = sendResult.ErrorMessage,
                        RawResponse = sendResult.RawResponse,
                        CreatedAt = DateTime.UtcNow,
                        SentAt = sendResult.Success ? DateTime.UtcNow : null
                    };

                    await _context.MessageLogs.AddAsync(messageLog);
                    Log.Information("‚úÖ Added MessageLog for {Recipient}", recipient.Contact.PhoneNumber);

                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaign.Id,
                        ContactId = recipient.ContactId,
                        RecipientId = recipient.Id,
                        MessageBody = campaign.MessageBody ?? templateName,
                        TemplateId = templateName,
                        SendStatus = sendResult.Success ? "Sent" : "Failed",
                        MessageLogId = messageLog.Id,
                        MessageId = sendResult.MessageId,
                        CreatedAt = DateTime.UtcNow,
                        SentAt = DateTime.UtcNow,
                        CreatedBy = campaign.CreatedBy
                    });

                    Log.Information("üìò Added CampaignSendLog for recipient {Recipient}", recipient.Id);

                    if (sendResult.Success) successCount++;
                    else failureCount++;
                }

                Log.Information("üíæ Saving all DB changes...");
                await _context.SaveChangesAsync();
                Log.Information("‚úÖ All saved successfully.");

                return ResponseResult.SuccessInfo($"üì§ Sent to {successCount} contacts. ‚ùå Failed for {failureCount}.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error while sending text template campaign");
                return ResponseResult.ErrorInfo("üö® Unexpected error while sending campaign.", ex.ToString());
            }
        }

        private List<object> BuildTextTemplateComponents(List<string> templateParams, List<CampaignButton>? buttonList, TemplateMetadataDto templateMeta)
        {
            var components = new List<object>();

            // ‚úÖ 1. Optional Header
            if (templateMeta.HasImageHeader)
            {
                Log.Information("‚ÑπÔ∏è Header detected, but skipping image as it's a text template.");
                // If you ever support header text, you can handle here
            }

            // ‚úÖ 2. Body parameters
            if (templateParams != null && templateParams.Count > 0)
            {
                components.Add(new
                {
                    type = "body",
                    parameters = templateParams.Select(p => new
                    {
                        type = "text",
                        text = p
                    }).ToArray()
                });
            }
            else if (templateMeta.PlaceholderCount > 0)
            {
                Log.Warning("‚ö†Ô∏è Body params missing but template expects {Count} placeholders.", templateMeta.PlaceholderCount);
            }

            // ‚úÖ 3. Footer (optional, static ‚Äî Meta doesn‚Äôt accept dynamic footer
            // ly)
            // If you want to support footer with text later, it can go like this:
            // components.Add(new { type = "footer", parameters = new[] { new { type = "text", text = "Your footer text" } } });

            // ‚úÖ 4. Buttons
            if (buttonList != null && buttonList.Any())
            {
                for (int i = 0; i < buttonList.Count && i < templateMeta.ButtonParams.Count; i++)
                {
                    var btn = buttonList[i];
                    var meta = templateMeta.ButtonParams[i];

                    string index = i.ToString();
                    string subtype = meta.SubType?.ToLower() ?? "url";
                    string? value = btn.Value?.Trim();
                    string? metaParam = meta.ParameterValue?.Trim();

                    // üîç Determine if this is a dynamic param (contains {{}})
                    bool isDynamic = metaParam != null && metaParam.Contains("{{");

                    // ‚úÖ Skip entire button if static and no dynamic value
                    if (!isDynamic)
                    {
                        Log.Information("‚è© Skipping static button '{Title}' as it requires no parameters", btn.Title);
                        continue;
                    }

                    var paramType = subtype switch
                    {
                        "url" => "text",
                        "copy_code" => "coupon_code",
                        "phone_number" => "phone_number",
                        "flow" => "flow_id",
                        _ => "text"
                    };

                    var buttonPayload = new Dictionary<string, object>
        {
                        { "type", "button" },
                        { "sub_type", subtype },
                        { "index", index },
                        { "parameters", new[] {
                            new Dictionary<string, object>
                            {
                                { "type", paramType },
                                { paramType, value }
                            }
                        }}
                    };

                    components.Add(buttonPayload);
                }

            }

            return components;
        }


        // This is used for "Image" based campaigns sending
        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)
        {
            try
            {
                if (campaign == null || campaign.IsDeleted)
                {
                    Log.Warning("‚ùå Campaign is null or marked as deleted.");
                    return ResponseResult.ErrorInfo("‚ùå Invalid campaign.");
                }

                if (campaign.Recipients == null || !campaign.Recipients.Any())
                {
                    Log.Warning("‚ö†Ô∏è Campaign has no assigned recipients.");
                    return ResponseResult.ErrorInfo("‚ö†Ô∏è No recipients assigned to this campaign.");
                }

                var businessId = campaign.BusinessId;
                var templateName = campaign.TemplateId;
                var imageUrl = campaign.ImageUrl;
                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);
                var buttons = campaign.MultiButtons?.ToList();

                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);
                if (templateMeta == null)
                {
                    Log.Error("‚ùå Could not fetch template metadata for {Template}.", templateName);
                    return ResponseResult.ErrorInfo("Template metadata not found.");
                }

                if (templateParams.Count != templateMeta.PlaceholderCount)
                {
                    Log.Warning("‚ö†Ô∏è Template expects {Expected} body parameters but received {Actual}.",
                        templateMeta.PlaceholderCount, templateParams.Count);
                }

                int successCount = 0, failureCount = 0;

                foreach (var recipient in campaign.Recipients)
                {
                    if (recipient?.Contact == null)
                    {
                        Log.Warning("‚ö†Ô∏è Skipping recipient: recipient or contact is null. Recipient ID: {RecipientId}", recipient?.Id);
                        continue;
                    }

                    Log.Information("üì® Preparing to send to {Phone}", recipient.Contact.PhoneNumber);

                    var components = BuildImageTemplateComponents(templateParams, imageUrl, buttons, templateMeta);

                    var payload = new
                    {
                        messaging_product = "whatsapp",
                        to = recipient.Contact.PhoneNumber,
                        type = "template",
                        template = new
                        {
                            name = templateName,
                            language = new { code = "en_US" },
                            components = components
                        }
                    };

                    Log.Debug("üì¶ Final WhatsApp Payload:\n{Payload}", JsonConvert.SerializeObject(payload, Formatting.Indented));

                    var sendResult = await _messageEngineService.SendToWhatsAppAsync(payload, businessId);
                    Log.Information("üì¨ Send result: {Result}", JsonConvert.SerializeObject(sendResult));

                    var messageLog = new MessageLog
                    {
                        Id = Guid.NewGuid(),
                        BusinessId = businessId,
                        CampaignId = campaign.Id,
                        ContactId = recipient.ContactId,
                        RecipientNumber = recipient.Contact.PhoneNumber,
                        MessageContent = campaign.MessageTemplate ?? templateName,
                        MediaUrl = imageUrl,
                        Status = sendResult.Success ? "Sent" : "Failed",
                        MessageId = sendResult.MessageId,
                        ErrorMessage = sendResult.ErrorMessage,
                        RawResponse = sendResult.RawResponse,
                        CreatedAt = DateTime.UtcNow,
                        SentAt = sendResult.Success ? DateTime.UtcNow : null
                    };

                    await _context.MessageLogs.AddAsync(messageLog);
                    Log.Information("üì• MessageLog saved for {Recipient}", recipient.Contact.PhoneNumber);

                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog
                    {
                        Id = Guid.NewGuid(),
                        CampaignId = campaign.Id,
                        BusinessId = businessId,
                        ContactId = recipient.ContactId,
                        RecipientId = recipient.Id,
                        MessageBody = campaign.MessageBody ?? templateName,
                        TemplateId = templateName,
                        SendStatus = sendResult.Success ? "Sent" : "Failed",
                        MessageLogId = messageLog.Id,
                        MessageId = sendResult.MessageId,
                        CreatedAt = DateTime.UtcNow,
                        SentAt = DateTime.UtcNow,
                        CreatedBy = campaign.CreatedBy
                    });

                    Log.Information("üóÉÔ∏è CampaignSendLog saved for recipient {Recipient}", recipient.Id);

                    if (sendResult.Success) successCount++;
                    else failureCount++;
                }

                Log.Information("üíæ Saving all DB changes...");
                await _context.SaveChangesAsync();
                Log.Information("‚úÖ All saved successfully.");

                return ResponseResult.SuccessInfo($"üì§ Sent to {successCount} contacts. ‚ùå Failed for {failureCount}.");
            }
            catch (Exception ex)
            {
                Log.Error(ex, "‚ùå Error while sending image template campaign");
                return ResponseResult.ErrorInfo("üö® Unexpected error while sending campaign.", ex.ToString());
            }
        }

        private List<object> BuildImageTemplateComponents(List<string> templateParams, string? imageUrl, List<CampaignButton>? buttonList, TemplateMetadataDto templateMeta)
        {
            var components = new List<object>();

            // ‚úÖ 1. Header image
            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)
            {
                components.Add(new
                {
                    type = "header",
                    parameters = new[]
                    {
                new
                {
                    type = "image",
                    image = new { link = imageUrl }
                }
            }
                });
            }

            // ‚úÖ 2. Body parameters
            if (templateParams != null && templateParams.Count > 0)
            {
                components.Add(new
                {
                    type = "body",
                    parameters = templateParams.Select(p => new
                    {
                        type = "text",
                        text = p
                    }).ToArray()
                });
            }
            else if (templateMeta.PlaceholderCount > 0)
            {
                Log.Warning("‚ö†Ô∏è Body params missing but template expects {Count} placeholders.", templateMeta.PlaceholderCount);
            }

            // ‚úÖ 3. Buttons with logic to exclude parameters for static values
            if (buttonList != null && buttonList.Any())
            {
                for (int i = 0; i < buttonList.Count && i < templateMeta.ButtonParams.Count; i++)
                {
                    var btn = buttonList[i];
                    var meta = templateMeta.ButtonParams[i];

                    string index = i.ToString();
                    string subtype = meta.SubType?.ToLower() ?? "url";
                    string? value = btn.Value?.Trim();
                    string? metaParam = meta.ParameterValue?.Trim();

                    var buttonPayload = new Dictionary<string, object>
            {
                { "type", "button" },
                { "sub_type", subtype },
                { "index", index }
            };

                    // üîç Determine if this is a dynamic param (contains {{}})
                    bool isDynamic = metaParam != null && metaParam.Contains("{{");

                    // ‚úÖ Only add parameters for dynamic types
                    if (isDynamic && !string.IsNullOrWhiteSpace(value))
                    {
                        var paramType = subtype switch
                        {
                            "url" => "text",
                            "copy_code" => "coupon_code",
                            "phone_number" => "phone_number",
                            "flow" => "flow_id",
                            _ => "text"
                        };

                        buttonPayload["parameters"] = new[]
                        {
                    new Dictionary<string, object>
                    {
                        { "type", paramType },
                        { paramType, value }
                    }
                };
                    }
                    else
                    {
                        Log.Information("‚ÑπÔ∏è Skipping parameters for static button '{Title}' ({SubType})", btn.Title, subtype);
                    }

                    components.Add(buttonPayload);
                }
            }

            return components;
        }

        #endregion
    }

}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignRecipientService.cs 
====================================================== 
 
Ôªøusing System;
using System.Collections.Generic;
using System.Threading.Tasks;
using xbytechat.api.Features.CampaignModule.DTOs;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignRecipientService
    {
        Task<CampaignRecipientDto> GetByIdAsync(Guid id);
        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);

        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);
        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);
        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);

        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);
    }
}

 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-api\xbytechat-api\Features\CampaignModule\Services\ICampaignService.cs 
====================================================== 
 
Ôªøusing System;
using System.Threading.Tasks;
using System.Collections.Generic;
using xbytechat.api.Features.CampaignModule.DTOs;
using xbytechat.api.Shared;
using xbytechat.api.CRM.Dtos;
using xbytechat.api.Helpers;
using xbytechat.api.Features.CampaignModule.Models;

namespace xbytechat.api.Features.CampaignModule.Services
{
    public interface ICampaignService
    {
        /// üÜï Create a new campaign with recipients
        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);

        /// ‚úèÔ∏è Update an existing draft campaign
        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);

        /// üóëÔ∏è Soft-delete a draft campaign
        Task<bool> DeleteCampaignAsync(Guid id);

        /// üìã Get all campaigns for the business
        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);

        /// üìÑ Get paginated campaigns
        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);
        /// üöÄ Trigger campaign send flow (template message to all recipients)
        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);
        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);
        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);
        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);
        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);
        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);
        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);

        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);

        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);

        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);
        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);


    }
}
 
 
