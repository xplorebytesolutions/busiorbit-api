{
  "name": "xbytechat-api/Features/MessageManagement",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/MessageManagement/Controllers/MessageStatusController.cs",
      "sha256": "b0d7d3e99be2a95698a0e358da794c0d0f53a81c7f38846322df111c19fd0fbb",
      "language": "csharp",
      "size": 3213,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\n\nnamespace xbytechat.api.Features.MessageManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/message-status\")]\n    public class MessageStatusController : ControllerBase\n    {\n        private readonly IMessageStatusService _service;\n        private readonly ILogger<MessageStatusController> _logger;\n        private readonly AppDbContext _context;\n        private readonly IConfiguration _config;\n        public MessageStatusController(\n    IMessageStatusService service,\n    ILogger<MessageStatusController> logger,\n    AppDbContext context,\n    IConfiguration config)\n        {\n            _service = service;\n            _logger = logger;\n            _context = context;\n            _config = config;\n        }\n\n        // ‚úÖ STEP 1: Webhook Verification (GET)\n        [HttpGet(\"webhook\")]\n        public IActionResult VerifyWebhook([FromQuery(Name = \"hub.mode\")] string mode,\n                                    [FromQuery(Name = \"hub.verify_token\")] string token,\n                                    [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            //var VERIFY_TOKEN = _config[\"WhatsApp:MetaToken\"]; // ‚úÖ pulled from config\n\n            if (mode == \"subscribe\" && token == \"xbytechat-secret-token\")\n            {\n                _logger.LogInformation(\"‚úÖ Webhook verified.\");\n                return Ok(challenge);\n            }\n\n            _logger.LogWarning(\"‚ùå Webhook verification failed.\");\n            return Forbid();\n        }\n\n\n        // ‚úÖ STEP 2: Webhook Payload (POST)\n        [HttpPost(\"webhook\")]\n        public async Task<IActionResult> ReceiveStatus([FromBody] WebhookStatusDto dto)\n        {\n            if (dto == null || dto.statuses == null || dto.statuses.Count == 0)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è Invalid webhook payload received.\");\n                return BadRequest(\"Invalid payload\");\n            }\n\n            await _service.LogWebhookStatusAsync(dto);\n            _logger.LogInformation(\"‚úÖ Webhook status processed successfully.\");\n\n            return Ok(new { success = true });\n        }\n\n        // ‚úÖ STEP 3: Frontend UI (GET Logs)\n        [HttpGet]\n        public async Task<IActionResult> GetStatusLogs([FromQuery] Guid businessId)\n        {\n            var logs = await _context.MessageStatusLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100)\n                .Select(x => new\n                {\n                    x.MessageId,\n                    x.RecipientNumber,\n                    x.Status,\n                    x.SentAt,\n                    x.DeliveredAt,\n                    x.ReadAt,\n                    x.ErrorMessage,\n                    x.TemplateCategory,\n                    x.MessageType\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = logs });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/DTOs/MessageLogDto.cs",
      "sha256": "c0f207826b70160db8814aaf2e5fcf92174c9b5b7d0904bf27f60163fb2ca516",
      "language": "csharp",
      "size": 643,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public bool IsIncoming { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public string? RenderedBody { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/DTOs/WebhookStatusDto.cs",
      "sha256": "aeb1bd281f5cc025fcc6c5a2a924daf3078c9e774d3fad3860626f871caad053",
      "language": "csharp",
      "size": 1324,
      "content": "namespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class WebhookStatusDto\n    {\n        public List<StatusObject> statuses { get; set; }\n    }\n\n    public class StatusObject\n    {\n        public string id { get; set; }                     // Message ID (WAMID)\n        public string status { get; set; }                 // sent, delivered, read, failed\n        public long timestamp { get; set; }                // UNIX timestamp\n        public string recipient_id { get; set; }           // Phone number\n        public ConversationInfo conversation { get; set; }\n        public PricingInfo pricing { get; set; }\n        public List<ErrorInfo>? errors { get; set; }\n    }\n\n    public class ConversationInfo\n    {\n        public string id { get; set; }\n        public Origin origin { get; set; }\n    }\n\n    public class Origin\n    {\n        public string type { get; set; }                   // marketing, utility, etc.\n    }\n\n    public class PricingInfo\n    {\n        public bool billable { get; set; }\n        public string pricing_model { get; set; }\n        public string category { get; set; }               // Template category\n    }\n\n    public class ErrorInfo\n    {\n        public int code { get; set; }\n        public string title { get; set; }\n        public string details { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Models/MessageStatusLog.cs",
      "sha256": "3e0a8a53cdfb329873018f1c8d6d53c03ef5c6be3e10247853ed67761cafbb4f",
      "language": "csharp",
      "size": 1958,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageStatusLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        // üîó Who is it for\n        public string RecipientNumber { get; set; }\n        public string? CustomerProfileName { get; set; }\n\n        // üì© WhatsApp Message Info\n       // [ForeignKey(nameof(Message))]\n        public string? MessageId { get; set; } // WAMID\n\n       // public MessageLog? Message { get; set; }\n        public string Status { get; set; }\n        public string MessageType { get; set; }\n\n        // üßæ Template Info\n        public string? TemplateName { get; set; }\n        public string? TemplateCategory { get; set; }\n\n        // üß† Analytics/Reporting\n        public string Channel { get; set; } = \"whatsapp\";\n        public bool IsSessionOpen { get; set; }\n        public long? MetaTimestamp { get; set; }\n\n        // üïí Timestamps\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // ‚ùå Error Tracking\n        public string? ErrorMessage { get; set; }\n        public int? ErrorCode { get; set; }\n\n        // üîç Raw Log (for audit/debug)\n        public string? RawPayload { get; set; }\n\n        // üîó Foreign Keys\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        public Guid? BusinessId { get; set; }\n        public Business? Business { get; set; }\n\n        public Guid? UserId { get; set; }\n        public User? User { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // ‚úÖ Navigation using alternate key (WAMID)\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Services/IMessageStatusService.cs",
      "sha256": "cca96e16b96ab978d9e4c344d9a12a8377da0c701b18ea3e5e1bb981d1d6578a",
      "language": "csharp",
      "size": 262,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public interface IMessageStatusService\n    {\n        Task LogWebhookStatusAsync(WebhookStatusDto dto);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Services/MessageStatusService.cs",
      "sha256": "f68c41d4a80e28d1b1de9da188c8b43c756b495494588de6fd11c8275d59a544",
      "language": "csharp",
      "size": 2755,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.AuthModule.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public class MessageStatusService : IMessageStatusService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageStatusService> _logger;\n\n        public MessageStatusService(AppDbContext context, ILogger<MessageStatusService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogWebhookStatusAsync(WebhookStatusDto dto)\n        {\n            foreach (var status in dto.statuses)\n            {\n                var log = new MessageStatusLog\n                {\n                    Id = Guid.NewGuid(),\n                    MessageId = status.id,\n                    Status = status.status.ToLower(),\n                    RecipientNumber = status.recipient_id,\n                    MetaTimestamp = status.timestamp,\n                    TemplateCategory = status?.pricing?.category,\n                    MessageType = status?.conversation?.origin?.type ?? \"session\",\n                    Channel = \"whatsapp\",\n                    CreatedAt = DateTime.UtcNow,\n                    RawPayload = System.Text.Json.JsonSerializer.Serialize(status)\n                };\n\n                var statusTime = DateTimeOffset.FromUnixTimeSeconds(status.timestamp).UtcDateTime;\n\n                switch (status.status.ToLower())\n                {\n                    case \"sent\": log.SentAt = statusTime; break;\n                    case \"delivered\": log.DeliveredAt = statusTime; break;\n                    case \"read\": log.ReadAt = statusTime; break;\n                }\n\n                if (status.errors != null && status.errors.Count > 0)\n                {\n                    log.ErrorMessage = status.errors[0].details;\n                    log.ErrorCode = status.errors[0].code;\n                }\n\n                await _context.MessageStatusLogs.AddAsync(log);\n            }\n\n            // ‚õëÔ∏è Wrap in try-catch and log full inner exception\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"‚ùå SaveChangesAsync failed: \" + ex.Message);\n                _logger.LogError(\"‚ùå Inner exception: \" + ex.InnerException?.Message);\n                throw;\n            }\n        }\n\n    }\n}\n"
    }
  ]
}
