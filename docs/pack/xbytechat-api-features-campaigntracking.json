{
  "name": "xbytechat-api/Features/CampaignTracking",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignAnalyticsController.cs",
      "sha256": "6c7bbdd6a0b01a9ec8cbb26be5139c16e41469243bda8101faa7cf042887338f",
      "language": "csharp",
      "size": 1637,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class CampaignAnalyticsController : ControllerBase\n    {\n        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n\n        public CampaignAnalyticsController(ICampaignAnalyticsService campaignAnalyticsService)\n        {\n            _campaignAnalyticsService = campaignAnalyticsService;\n        }\n\n        [HttpGet(\"status-dashboard\")]\n        //public async Task<IActionResult> GetStatusDashboard()\n        //{\n        //    var businessIdString = User.FindFirstValue(\"BusinessId\");\n        //    if (!Guid.TryParse(businessIdString, out var businessId))\n        //    {\n        //        return Unauthorized(\"Invalid business identifier.\");\n        //    }\n        //    var result = await _campaignAnalyticsService.GetStatusDashboardAsync(businessId);\n        //    return Ok(result);\n        //}\n\n        [HttpGet(\"top-campaigns\")]\n        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n        {\n            var businessIdString = User.FindFirstValue(\"BusinessId\");\n            if (!Guid.TryParse(businessIdString, out var businessId))\n            {\n                return Unauthorized(\"Invalid business identifier.\");\n            }\n            var result = await _campaignAnalyticsService.GetTopCampaignsAsync(businessId, count);\n            return Ok(result);\n        }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignRetryController.cs",
      "sha256": "b45bb8993a8de233fd24dbbfa69ed1d48a2e48d062fe36e81feb3a4384bed5d2",
      "language": "csharp",
      "size": 1454,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-retry\")]\n    public class CampaignRetryController : ControllerBase\n    {\n        private readonly ICampaignRetryService _retryService;\n\n        public CampaignRetryController(ICampaignRetryService retryService)\n        {\n            _retryService = retryService;\n        }\n\n        // üîÅ Retry a single failed log\n        // Endpoint: POST /api/campaign-retry/{logId}/retry\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var success = await _retryService.RetrySingleAsync(logId);\n            if (!success)\n                return BadRequest(new { message = \"Retry failed or not allowed for this log.\" });\n\n            return Ok(new { success = true, message = \"Retry completed.\" });\n        }\n\n        // üîÅ Retry all failed logs in a campaign\n        // Endpoint: POST /api/campaign-retry/campaign/{campaignId}/retry-all\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAllInCampaign(Guid campaignId)\n        {\n            var retriedCount = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retriedCount });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignSendLogController.cs",
      "sha256": "bc0f07e7012784757cf4cd0d58115aa69c521a5c518e227a771bc254f68db896",
      "language": "csharp",
      "size": 4030,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-logs\")]\n    public class CampaignSendLogController : ControllerBase\n    {\n        private readonly ICampaignSendLogService _logService;\n        private readonly ICampaignRetryService _retryService;\n\n        public CampaignSendLogController(\n            ICampaignSendLogService logService,\n            ICampaignRetryService retryService\n        )\n        {\n            _logService = logService;\n            _retryService = retryService;\n        }\n\n        [HttpGet(\"campaign/{campaignId}\")]\n        public async Task<IActionResult> GetLogsByCampaign(Guid campaignId)\n        {\n            var logs = await _logService.GetLogsByCampaignIdAsync(campaignId);\n            return Ok(logs);\n        }\n\n        [HttpGet(\"campaign/{campaignId}/contact/{contactId}\")]\n        public async Task<IActionResult> GetLogsForContact(Guid campaignId, Guid contactId)\n        {\n            var logs = await _logService.GetLogsForContactAsync(campaignId, contactId);\n            return Ok(logs);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddSendLog([FromBody] CampaignSendLogDto dto)\n        {\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _logService.AddSendLogAsync(dto, ipAddress, userAgent);\n            if (!result)\n                return BadRequest(new { message = \"Failed to add send log\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/status\")]\n        public async Task<IActionResult> UpdateDeliveryStatus(Guid logId, [FromBody] DeliveryStatusUpdateDto dto)\n        {\n            var result = await _logService.UpdateDeliveryStatusAsync(logId, dto.Status, dto.DeliveredAt, dto.ReadAt);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/track-click\")]\n        public async Task<IActionResult> TrackClick(Guid logId, [FromBody] ClickTrackDto dto)\n        {\n            var result = await _logService.TrackClickAsync(logId, dto.ClickType);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ‚úÖ FIXED: Retry a single log using correct interface method\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var result = await _retryService.RetrySingleAsync(logId);\n            if (!result)\n                return BadRequest(new { message = \"Retry failed\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ‚úÖ FIXED: Retry all failed logs using correct interface method\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAll(Guid campaignId)\n        {\n            var result = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retried = result });\n        }\n        // ‚úÖ FIXED: Get summary of campaign logs as per Campaign ID\n        [HttpGet(\"campaign/{campaignId}/summary\")]\n        public async Task<IActionResult> GetCampaignSummary(Guid campaignId)\n        {\n            var summary = await _logService.GetCampaignSummaryAsync(campaignId);\n            return Ok(summary);\n        }\n\n    }\n\n    public class DeliveryStatusUpdateDto\n    {\n        public string Status { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n\n    public class ClickTrackDto\n    {\n        public string ClickType { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignLogSummaryDto.cs",
      "sha256": "41bd053931f58ad0a1eb056cadbe46d553f949ab070ac3454d6bb05d1662e6c1",
      "language": "csharp",
      "size": 294,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignLogSummaryDto\n    {\n        public int TotalSent { get; set; }\n        public int FailedCount { get; set; }\n        public int ClickedCount { get; set; }\n        public DateTime? LastSentAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignSendLogDto.cs",
      "sha256": "42c34ffaad27eea7cfade390bdbd9220b2abbf7095b92a61d1d3d52e57226306",
      "language": "csharp",
      "size": 1676,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignSendLogDto\n    {\n        public Guid Id { get; set; }\n\n        // üîó Relationships\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        // üì§ Message Info\n        public Guid RecipientId { get; set; }\n        public string MessageBody { get; set; }\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        // üïí Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // üåê Metadata\n        public string? SourceChannel { get; set; }\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n\n        // ‚úÖ Enriched metadata\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üìà Click Tracking\n        public bool IsClicked { get; set; }\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // üîÅ Retry Info\n        public string? RetryStatus { get; set; }     // Pending, Retried, Skipped\n        public int RetryCount { get; set; }\n        public DateTime? LastRetryAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignStatusDashboardDto.cs",
      "sha256": "21979b3b1de98ab2567e6485c9c0e4684b848735d36743226caaca66504e9b7b",
      "language": "csharp",
      "size": 1038,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignStatusDashboardDto\n    {\n        public Guid CampaignId { get; set; }\n\n        // üìä Overall Stats\n        public int TotalRecipients { get; set; }\n        public int SentCount { get; set; }\n        public int DeliveredCount { get; set; }\n        public int ReadCount { get; set; }\n        public int FailedCount { get; set; }\n\n        // üïí Delivery Timing (optional but insightful)\n        public DateTime? FirstSentAt { get; set; }\n        public DateTime? LastSentAt { get; set; }\n        public DateTime? FirstReadAt { get; set; }\n        public DateTime? LastReadAt { get; set; }\n\n        // üìâ Delivery Rates\n        public double DeliveryRate => TotalRecipients == 0 ? 0 : (double)DeliveredCount / TotalRecipients * 100;\n        public double ReadRate => TotalRecipients == 0 ? 0 : (double)ReadCount / TotalRecipients * 100;\n        public double FailureRate => TotalRecipients == 0 ? 0 : (double)FailedCount / TotalRecipients * 100;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/TopCampaignDto.cs",
      "sha256": "deebf224725de4a79f8363405623b0761fed9b776ec86cc8d6a9b05c5f79940e",
      "language": "csharp",
      "size": 295,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class TopCampaignDto\n    {\n        public Guid CampaignId { get; set; }\n        public string CampaignName { get; set; }\n        public double ReadRate { get; set; }\n        public double ClickThroughRate { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignSendLog.cs",
      "sha256": "a19d5f0ad994f72337ad52ffeba0a1d94314d6f673b090bdc329093bdbcdfba6",
      "language": "csharp",
      "size": 2514,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Models\n{\n    public class CampaignSendLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public string? MessageId { get; set; } // Unique WAMID from WhatsApp\n        // üîó Foreign Keys\n        [Required]\n        public Guid CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public Guid RecipientId { get; set; }\n\n        // üì© Message Info\n        [Required]\n        public string MessageBody { get; set; } = \"\";\n\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // üåê Metadata\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n        public string? SourceChannel { get; set; }\n\n        // ‚úÖ UX-Derived\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üìä Click Tracking\n        public bool IsClicked { get; set; } = false;\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // üîÅ Retry Tracking (üí° New)\n        public int RetryCount { get; set; } = 0;                 // Number of retry attempts\n        public DateTime? LastRetryAt { get; set; }               // When retry last happened\n        public string? LastRetryStatus { get; set; }             // Success / Failed\n        public bool AllowRetry { get; set; } = true;             // Flag to enable/disable retry\n\n        // üëÅ Navigation\n      \n        public Contact? Contact { get; set; }\n        public CampaignRecipient? Recipient { get; set; }\n\n\n        // üîó MessageLog reference (optional)\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; }\n\n        public Guid BusinessId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignAnalyticsService.cs",
      "sha256": "508462378daa1f45360929c4affbf43b7644d4ad8f799674980452efdc934474",
      "language": "csharp",
      "size": 4769,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    \n\n    public class CampaignAnalyticsService : ICampaignAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n            //_context = context;\n        }\n\n        public async Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId)\n        {\n            var logs = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .ToListAsync();\n\n            if (!logs.Any()) return null;\n\n            return new CampaignStatusDashboardDto\n            {\n                CampaignId = campaignId,\n                TotalRecipients = logs.Count,\n                SentCount = logs.Count(l => l.SendStatus == \"Sent\"),\n                DeliveredCount = logs.Count(l => l.SendStatus == \"Delivered\"),\n                ReadCount = logs.Count(l => l.SendStatus == \"Read\"),\n                FailedCount = logs.Count(l => l.SendStatus == \"Failed\"),\n                FirstSentAt = logs.Min(l => l.SentAt),\n                LastSentAt = logs.Max(l => l.SentAt),\n                FirstReadAt = logs.Min(l => l.ReadAt),\n                LastReadAt = logs.Max(l => l.ReadAt)\n            };\n        }\n\n        //public async Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId)\n        //{\n        //    var stats = await _context.CampaignSendLogs\n        //        .Where(log => log.BusinessId == businessId)\n        //        .GroupBy(log => 1) // Group by a constant to aggregate all rows\n        //        .Select(g => new\n        //        {\n        //            TotalSent = g.Count(),\n        //            TotalDelivered = g.Count(l => l.DeliveredAt != null),\n        //            TotalRead = g.Count(l => l.ReadAt != null),\n        //            TotalClicked = g.Count(l => l.ClickedAt != null),\n        //            TotalFailed = g.Count(l => l.Status == \"failed\")\n        //        })\n        //        .FirstOrDefaultAsync();\n\n        //    if (stats == null)\n        //    {\n        //        return new CampaignStatusDashboardDto(); // Return empty DTO if no logs found\n        //    }\n\n        //    //return new CampaignStatusDashboardDto\n        //    //{\n        //    //    TotalSent = stats.TotalSent,\n        //    //    TotalDelivered = stats.TotalDelivered,\n        //    //    TotalRead = stats.TotalRead,\n        //    //    TotalClicked = stats.TotalClicked,\n        //    //    TotalFailed = stats.TotalFailed,\n        //    //    DeliveryRate = stats.TotalSent > 0 ? Math.Round((double)stats.TotalDelivered / stats.TotalSent * 100, 2) : 0,\n        //    //    ReadRate = stats.TotalDelivered > 0 ? Math.Round((double)stats.TotalRead / stats.TotalDelivered * 100, 2) : 0,\n        //    //    ClickRate = stats.TotalDelivered > 0 ? Math.Round((double)stats.TotalClicked / stats.TotalDelivered * 100, 2) : 0\n        //    //};\n        //}\n\n        public async Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5)\n        {\n            var campaignStats = await _context.CampaignSendLogs\n                .Where(log => log.BusinessId == businessId)\n                .GroupBy(log => log.CampaignId)\n                .Select(group => new\n                {\n                    CampaignId = group.Key,\n                    TotalSent = group.Count(),\n                    TotalRead = group.Count(l => l.ReadAt != null),\n                    TotalClicked = group.Count(l => l.ClickedAt != null)\n                })\n                .Where(s => s.TotalSent > 0)\n                .OrderByDescending(s => (double)s.TotalClicked / s.TotalSent)\n                .Take(count)\n                .ToListAsync();\n\n            if (!campaignStats.Any())\n            {\n                return new List<TopCampaignDto>();\n            }\n\n            var campaignIds = campaignStats.Select(s => s.CampaignId).ToList();\n            var campaigns = await _context.Campaigns\n                .Where(c => campaignIds.Contains(c.Id))\n                .ToDictionaryAsync(c => c.Id, c => c.Name);\n\n            return campaignStats.Select(s => new TopCampaignDto\n            {\n                CampaignId = s.CampaignId,\n                CampaignName = campaigns.GetValueOrDefault(s.CampaignId, \"Unnamed Campaign\"),\n                ReadRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalRead / s.TotalSent) * 100, 2) : 0,\n                ClickThroughRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalClicked / s.TotalSent) * 100, 2) : 0\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignRetryService.cs",
      "sha256": "c006d284f3bc500e9eb4d5b0191ac34ccdd5643bc4742c18b5af20ec13334116",
      "language": "csharp",
      "size": 2911,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignRetryService : ICampaignRetryService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRetryService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ‚úÖ Public method: Retry a single failed log\n        public async Task<bool> RetrySingleAsync(Guid logId)\n        {\n            return await RetrySendLogAsync(logId);\n        }\n\n        // ‚úÖ Public method: Retry all failed logs in a campaign\n        public async Task<int> RetryFailedInCampaignAsync(Guid campaignId)\n        {\n            return await RetryAllFailedInCampaignAsync(campaignId);\n        }\n\n        // üîÅ Private: Retry a specific log\n        private async Task<bool> RetrySendLogAsync(Guid logId)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (log == null || log.SendStatus != \"Failed\" || !log.AllowRetry)\n                return false;\n\n            // üîÑ Simulate re-send (replace with actual IMessageService.SendAsync later)\n            bool sent = SimulateSendMessage(log);\n\n            log.RetryCount += 1;\n            log.LastRetryAt = DateTime.UtcNow;\n            log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n            log.SendStatus = sent ? \"Sent\" : \"Failed\";\n            log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n            await _context.SaveChangesAsync();\n            return sent;\n        }\n\n        // üîÅ Private: Retry all failed logs in a given campaign\n        private async Task<int> RetryAllFailedInCampaignAsync(Guid campaignId)\n        {\n            var failedLogs = await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.SendStatus == \"Failed\" && log.AllowRetry)\n                .ToListAsync();\n\n            int successCount = 0;\n\n            foreach (var log in failedLogs)\n            {\n                bool sent = SimulateSendMessage(log);\n\n                log.RetryCount += 1;\n                log.LastRetryAt = DateTime.UtcNow;\n                log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n                log.SendStatus = sent ? \"Sent\" : \"Failed\";\n                log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n                if (sent) successCount++;\n            }\n\n            await _context.SaveChangesAsync();\n            return successCount;\n        }\n\n        // üîß Simulated send (replace with actual WhatsApp message logic)\n        private bool SimulateSendMessage(CampaignSendLog log)\n        {\n            return new Random().NextDouble() < 0.9; // 90% success rate\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogEnricher.cs",
      "sha256": "6d1155127869663e221b9c1a80e5dce49dd32c3d57d218d8157691ed3bc8edeb",
      "language": "csharp",
      "size": 872,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogEnricher : ICampaignSendLogEnricher\n    {\n        public async Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress)\n        {\n            // üß† Device Detection (simplified for now)\n            log.DeviceInfo = userAgent;\n\n            // üåç IP Lookup - Mocked for now\n            if (!string.IsNullOrWhiteSpace(ipAddress))\n            {\n                log.IpAddress = ipAddress;\n                log.SourceChannel = \"API\"; // Example: mark origin\n                // Future: Use IPinfo or GeoLite2 for full location enrichment\n            }\n\n            // ‚åõ Simulate async task for compatibility\n            await Task.CompletedTask;\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogService.cs",
      "sha256": "17a9852f8e2cd9ddf34b0ebdf64d080aa53e811211b11d89d94b2376fabc0ae3",
      "language": "csharp",
      "size": 6335,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogService : ICampaignSendLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ICampaignSendLogEnricher _enricher;\n\n        public CampaignSendLogService(AppDbContext context, ICampaignSendLogEnricher enricher)\n        {\n            _context = context;\n            _enricher = enricher;\n        }\n\n        // üìä Get all send logs for a given campaign\n        public async Task<List<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId)\n                .Include(log => log.Contact)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    ContactName = log.Contact != null ? log.Contact.Name : \"N/A\",\n                    ContactPhone = log.Contact != null ? log.Contact.PhoneNumber : \"-\",\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    IpAddress = log.IpAddress,\n                    DeviceInfo = log.DeviceInfo,\n                    MacAddress = log.MacAddress,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n        }\n\n        // üìç Get logs for a specific contact in a campaign\n        public async Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId)\n        {\n            return await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.ContactId == contactId)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    IpAddress = log.IpAddress,\n                    DeviceInfo = log.DeviceInfo,\n                    MacAddress = log.MacAddress,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n        }\n\n        // üÜï Create a new send log (with enrichment)\n        public async Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent)\n        {\n            var log = new CampaignSendLog\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = dto.CampaignId,\n                ContactId = dto.ContactId,\n                MessageBody = dto.MessageBody,\n                TemplateId = dto.TemplateId,\n                SendStatus = dto.SendStatus,\n                ErrorMessage = dto.ErrorMessage,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = dto.SentAt,\n                DeliveredAt = dto.DeliveredAt,\n                ReadAt = dto.ReadAt,\n                SourceChannel = dto.SourceChannel,\n                IsClicked = dto.IsClicked,\n                ClickedAt = dto.ClickedAt,\n                ClickType = dto.ClickType,\n                RecipientId = dto.RecipientId\n            };\n\n            // ‚úÖ Use enrichment service\n            await _enricher.EnrichAsync(log, userAgent, ipAddress);\n\n            _context.CampaignSendLogs.Add(log);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // üì® Update delivery or read status\n        public async Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.SendStatus = status;\n            log.DeliveredAt = deliveredAt ?? log.DeliveredAt;\n            log.ReadAt = readAt ?? log.ReadAt;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // üìà Track click (CTA)\n        public async Task<bool> TrackClickAsync(Guid logId, string clickType)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.IsClicked = true;\n            log.ClickedAt = DateTime.UtcNow;\n            log.ClickType = clickType;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // üìä Get summary of campaign logs\n        public async Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId)\n        {\n            var logs = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .ToListAsync();\n\n            return new CampaignLogSummaryDto\n            {\n                TotalSent = logs.Count,\n                FailedCount = logs.Count(l => l.SendStatus == \"Failed\"),\n                ClickedCount = logs.Count(l => l.IsClicked),\n                LastSentAt = logs.Max(l => l.SentAt)\n            };\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignAnalyticsService.cs",
      "sha256": "c4c188f0eba3b537c076a7fc42ef62094de1ced491abcaecb619097e40debb8b",
      "language": "csharp",
      "size": 437,
      "content": "using xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignAnalyticsService\n    {\n       // Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId);\n        Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5);\n        Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignRetryService.cs",
      "sha256": "1211609bf9f58a20712fb625fd9e5691ba959d0f12ddde94e3d869cdf1cd9088",
      "language": "csharp",
      "size": 546,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignRetryService\n    {\n\n        // Retry a single failed message log by its ID.\n        // will be used when user clicks \"Retry Now\" on a log row.\n        Task<bool> RetrySingleAsync(Guid logId);\n\n\n        // Retry all failed messages in a campaign where retry is allowed.\n        // will support \"Retry All Failed\" button from Campaign logs.\n        Task<int> RetryFailedInCampaignAsync(Guid campaignId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogEnricher.cs",
      "sha256": "9204a2182522e06e53fe6beb21100820231943995d044f01feb200bdcaa521de",
      "language": "csharp",
      "size": 290,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogEnricher\n    {\n        Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogService.cs",
      "sha256": "0e28d9721d3fa93d26567c1671562fba640dadfd8b09b2b2c10500d613373eb4",
      "language": "csharp",
      "size": 1129,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogService\n    {\n        // üìä Get all logs for a specific campaign\n        Task<List<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId);\n\n        // üìç Get logs for a specific contact in a campaign\n        Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId);\n\n        // üÜï Add a new send log entry with enrichment (IP, User-Agent)\n        Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent);\n\n        // üì® Update delivery or read status\n        Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt);\n\n        // üìà Track CTA click (e.g., BuyNow, ViewDetails)\n        Task<bool> TrackClickAsync(Guid logId, string clickType);\n        // üìä Get summary of campaign logs\n        Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId);\n\n    }\n}\n"
    }
  ]
}
