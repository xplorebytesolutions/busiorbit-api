{
  "name": "xbytechat-api/Data",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Data/AppDbContext.cs",
      "sha256": "1d0133425b58fdc5b25f76370481d0709aacc757a52ddc7ca1ec139c82dd5a74",
      "language": "csharp",
      "size": 12532,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Globalization;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AccessControl.Seeder;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api\n{\n    public class AppDbContext : DbContext\n    {\n        public AppDbContext(DbContextOptions<AppDbContext> options)\n            : base(options) { }\n\n        // ‚úÖ Table Registrations\n        public DbSet<Business> Businesses { get; set; }\n        public DbSet<User> Users { get; set; }\n        public DbSet<MessageLog> MessageLogs { get; set; }\n        public DbSet<Product> Products { get; set; }\n        public DbSet<CatalogClickLog> CatalogClickLogs { get; set; }\n        public DbSet<Contact> Contacts { get; set; }\n        public DbSet<Tag> Tags { get; set; }\n        public DbSet<Reminder> Reminders { get; set; }\n        public DbSet<Note> Notes { get; set; }\n        public DbSet<LeadTimeline> LeadTimelines { get; set; }\n        public DbSet<ContactTag> ContactTags { get; set; }\n        public DbSet<Campaign> Campaigns { get; set; }\n        public DbSet<CampaignRecipient> CampaignRecipients { get; set; }\n        public DbSet<CampaignSendLog> CampaignSendLogs { get; set; }\n        public DbSet<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // üß© Access Control\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Permission> Permissions { get; set; }\n        public DbSet<RolePermission> RolePermissions { get; set; }\n        public DbSet<UserPermission> UserPermissions { get; set; }\n        public DbSet<AuditLog> AuditLogs { get; set; }\n        public DbSet<WhatsAppSettingEntity> WhatsAppSettings { get; set; }\n        public DbSet<BusinessPlanInfo> BusinessPlanInfos { get; set; }\n\n        public DbSet<TrackingLog> TrackingLogs { get; set; }\n        public DbSet<CTADefinition> CTADefinitions { get; set; }\n        public DbSet<CampaignButton> CampaignButtons { get; set; }\n        public DbSet<FailedWebhookLog> FailedWebhookLogs { get; set; }\n        public DbSet<WebhookSettings> WebhookSettings { get; set; }\n\n        public DbSet<CTAFlowConfig> CTAFlowConfigs { get; set; }\n        public DbSet<CTAFlowStep> CTAFlowSteps { get; set; }\n        public DbSet<FlowButtonLink> FlowButtonLinks { get; set; }\n\n        public DbSet<CampaignFlowOverride> CampaignFlowOverrides { get; set; }\n        public DbSet<FlowExecutionLog> FlowExecutionLogs { get; set; }\n        public DbSet<ContactRead> ContactReads { get; set; }\n\n        public DbSet<AutoReplyRule> AutoReplyRules { get; set; }\n        public DbSet<AutoReplyFlow> AutoReplyFlows { get; set; }\n        public DbSet<AutoReplyFlowNode> AutoReplyFlowNodes { get; set; }\n        public DbSet<AutoReplyFlowEdge> AutoReplyFlowEdges { get; set; }\n        public DbSet<AutoReplyLog> AutoReplyLogs { get; set; }\n        public DbSet<ChatSessionState> ChatSessionStates { get; set; }\n        public DbSet<Plan> Plans { get; set; }\n        public DbSet<PlanPermission> PlanPermissions { get; set; }\n        public DbSet<FeatureAccess> FeatureAccess { get; set; }\n        public DbSet<PlanFeatureMatrix> PlanFeatureMatrix { get; set; }\n        public DbSet<UserFeatureAccess> UserFeatureAccess { get; set; }\n        public DbSet<FeatureMaster> FeatureMasters { get; set; }\n        public DbSet<AutomationFlow> AutomationFlows { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            // ‚úÖ Seed Role IDs (keep them consistent)\n            var superadminRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000001\");\n            var partnerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000002\");\n            var resellerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000003\");\n            var businessRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000004\");\n            var agentRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000005\");\n\n            // ‚úÖ Roles\n            modelBuilder.Entity<Role>().HasData(\n                new Role { Id = superadminRoleId, Name = \"admin\", Description = \"Super Admin\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = partnerRoleId, Name = \"partner\", Description = \"Business Partner\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = resellerRoleId, Name = \"reseller\", Description = \"Reseller Partner\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = businessRoleId, Name = \"business\", Description = \"Business Owner\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = agentRoleId, Name = \"staff\", Description = \"Staff\", CreatedAt = DateTime.UtcNow }\n            );\n\n            // ‚úÖ Permissions from RolePermissionMapping\n            var allPermissions = RolePermissionMapping.RolePermissions\n                .SelectMany(p => p.Value)\n                .Distinct()\n                .ToList();\n\n            var permissionEntities = allPermissions.Select((perm, index) => new Permission\n            {\n                Id = Guid.Parse($\"30000000-0000-0000-0000-{index.ToString(\"D12\", CultureInfo.InvariantCulture)}\"),\n                Name = perm,\n                Code = perm,\n                Description = $\"Permission for {perm}\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            }).ToList();\n            modelBuilder.Entity<Permission>().HasData(permissionEntities);\n\n            // ‚úÖ RolePermission mappings\n            var permissionMap = permissionEntities.ToDictionary(p => p.Name, p => p.Id);\n            var roleMap = new Dictionary<string, Guid>\n            {\n                [\"admin\"] = superadminRoleId,\n                [\"partner\"] = partnerRoleId,\n                [\"reseller\"] = resellerRoleId,\n                [\"business\"] = businessRoleId,\n                [\"staff\"] = agentRoleId\n            };\n\n            var rolePermissions = RolePermissionMapping.RolePermissions\n                .SelectMany(rp => rp.Value.Select(permissionName => new RolePermission\n                {\n                    Id = Guid.NewGuid(),\n                    RoleId = roleMap[rp.Key],\n                    PermissionId = permissionMap[permissionName],\n                    IsActive = true,\n                    AssignedAt = DateTime.UtcNow\n                }))\n                .ToList();\n\n            modelBuilder.Entity<RolePermission>().HasData(rolePermissions);\n\n            // ========== üß© CORRECT RELATIONSHIPS ==========\n\n            // Role ‚ÜîÔ∏è RolePermission (One-to-Many)\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Role)\n                .WithMany(r => r.RolePermissions)\n                .HasForeignKey(rp => rp.RoleId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // Permission ‚ÜîÔ∏è RolePermission (One-to-Many)\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Permission)\n                .WithMany(p => p.RolePermissions)\n                .HasForeignKey(rp => rp.PermissionId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // User ‚ÜîÔ∏è UserPermission (One-to-Many)\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.User)\n                .WithMany(u => u.UserPermissions)\n                .HasForeignKey(up => up.UserId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // Permission ‚ÜîÔ∏è UserPermission (One-to-Many)\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.Permission)\n                .WithMany(p => p.UserPermissions)\n                .HasForeignKey(up => up.PermissionId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // ========== (Rest of your model mappings below remain the same) ==========\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.MessageLog)\n                .WithMany()\n                .HasForeignKey(s => s.MessageLogId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<LeadTimeline>()\n                .HasOne(t => t.Contact)\n                .WithMany()\n                .HasForeignKey(t => t.ContactId);\n\n            modelBuilder.Entity<Campaign>()\n                .HasOne(c => c.Business)\n                .WithMany(b => b.Campaigns)\n                .HasForeignKey(c => c.BusinessId)\n                .IsRequired();\n\n            modelBuilder.Entity<CampaignRecipient>()\n                .HasOne(r => r.Campaign)\n                .WithMany(c => c.Recipients)\n                .HasForeignKey(r => r.CampaignId);\n\n            modelBuilder.Entity<CampaignRecipient>()\n                .HasOne(r => r.Contact)\n                .WithMany()\n                .HasForeignKey(r => r.ContactId);\n\n            modelBuilder.Entity<CampaignRecipient>()\n                .HasOne(r => r.Business)\n                .WithMany()\n                .HasForeignKey(r => r.BusinessId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.Recipient)\n                .WithMany(r => r.SendLogs)\n                .HasForeignKey(s => s.RecipientId);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.Contact)\n                .WithMany()\n                .HasForeignKey(s => s.ContactId);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.Campaign)\n                .WithMany(c => c.SendLogs)\n                .HasForeignKey(s => s.CampaignId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<ContactTag>()\n                .HasOne(ct => ct.Contact)\n                .WithMany(c => c.ContactTags)\n                .HasForeignKey(ct => ct.ContactId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<ContactTag>()\n                .HasOne(ct => ct.Tag)\n                .WithMany(t => t.ContactTags)\n                .HasForeignKey(ct => ct.TagId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<Role>()\n                .HasMany(r => r.Users)\n                .WithOne(u => u.Role)\n                .HasForeignKey(u => u.RoleId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<Campaign>()\n                .HasMany(c => c.MultiButtons)\n                .WithOne(b => b.Campaign)\n                .HasForeignKey(b => b.CampaignId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<MessageLog>()\n                .HasOne(m => m.SourceCampaign)\n                .WithMany(c => c.MessageLogs)\n                .HasForeignKey(m => m.CampaignId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .Property(s => s.BusinessId)\n                .IsRequired();\n\n            modelBuilder.Entity<FlowButtonLink>()\n                .HasKey(b => b.Id);\n\n            modelBuilder.Entity<Business>()\n                .HasOne(b => b.WhatsAppSettings)\n                .WithOne()\n                .HasForeignKey<WhatsAppSettingEntity>(s => s.BusinessId);\n\n            modelBuilder.Entity<ContactRead>()\n                .HasIndex(cr => new { cr.ContactId, cr.UserId })\n                .IsUnique();\n\n            modelBuilder.Entity<AutoReplyFlowNode>()\n                .OwnsOne(n => n.Position);\n\n            modelBuilder.Entity<FeatureAccess>()\n            .HasIndex(f => new { f.BusinessId, f.FeatureName })\n            .IsUnique();\n\n        }\n    }\n}\n"
    }
  ]
}
