{
  "name": "xbytechat-api/Services",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Services/MessageModule/Implementations/MessageService.cs",
      "sha256": "4a9530274bcc8a60c09a984dfd7c120424ee9f5b32a1d430a4f393b0ebd5d45c",
      "language": "csharp",
      "size": 9833,
      "content": "using System.Text;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Services.Messages.Implementations\n{\n    public class MessageService : IMessageService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly IGenericRepository<MessageLog> _messageLogRepo;\n        private readonly Dictionary<string, IWhatsAppPayloadBuilder> _payloadBuilders;\n        private readonly ILogger<MessageService> _logger;\n\n        public MessageService(\n            AppDbContext dbContext,\n            HttpClient httpClient,\n            IConfiguration config,\n            IGenericRepository<MessageLog> messageLogRepo,\n            IEnumerable<IWhatsAppPayloadBuilder> builders,\n            ILogger<MessageService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _config = config;\n            _messageLogRepo = messageLogRepo;\n            _logger = logger;\n\n            _payloadBuilders = builders.ToDictionary(\n                b => b.GetType().Name.Replace(\"MessagePayloadBuilder\", \"\").ToLower(),\n                b => b\n            );\n        }\n\n        public async Task SendFollowUpAsync(string recipientNumber, string messageContent)\n        {\n            var dto = new TextMessageDto\n            {\n                RecipientNumber = recipientNumber,\n                MessageContent = messageContent,\n                BusinessId = Guid.Empty // Optional: Set dynamically if needed\n            };\n\n            await SendMessageAsync(dto); // ‚úÖ You already have this method\n        }\n\n\n        public async Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto)\n        {\n            var messageType = dto.GetType().Name.Replace(\"MessageDto\", \"\").ToLower();\n\n            // üß† Get the right builder (e.g., for text, image)\n            if (!_payloadBuilders.TryGetValue(messageType, out var builder))\n            {\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"‚ùå Unsupported message type: \" + messageType\n                };\n            }\n\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = builder.BuildPayload(dto);\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"üì¶ Sending Payload: {Payload}\", json);\n\n            try\n\n\n            {\n                // üõ†Ô∏è Log the payload for debugging\n                _logger.LogInformation(\"üì§ Final WhatsApp Payload:\\n\" + JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n\n                string? messageId = null;\n\n                // üßæ Try extracting messageId (WAMID) from response\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        var jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"‚úÖ Message sent but failed to parse WAMID: \" + ex.Message);\n                    }\n                }\n\n                // üìù Log message for tracking\n                var log = new MessageLog\n                {\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto is TextMessageDto textDto && !string.IsNullOrEmpty(textDto.MessageContent)\n                        ? textDto.MessageContent\n                        : \"[Empty or Non-Text]\",\n                    MediaUrl = (dto as ImageMessageDto)?.MediaUrl,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"‚úÖ Message sent successfully\" : \"‚ùå Failed to send message\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception during message send\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"‚ùå Exception while sending\",\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n        public async Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons)\n        {\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientPhone,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = bodyText },\n                    action = new\n                    {\n                        buttons = buttons.Select((text, index) => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = $\"cta_{index + 1}\",\n                                title = text\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"üöÄ Sending CTA Message: \" + json);\n\n            try\n            {\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n                // Message send here successfully \n                string? messageId = null;\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        dynamic jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"‚ö†Ô∏è Sent, but failed to parse messageId: \" + ex.Message);\n                    }\n                }\n\n                // Log to MessageLogs table (optional: use a dummy entry)\n\n                var log = new MessageLog\n                {\n\n                    //BusinessId = Guid.Parse(\"put-a-valid-business-guid-here\"), //Guid.Empty, // set properly if you want to track\n                    BusinessId = Guid.TryParse(\"45262049-0127-4658-93e1-b3ffea645f4f\", out var parsedId)\n    ? parsedId\n    : throw new FormatException(\"‚ùå Invalid GUID format used for BusinessId.\"),\n                    RecipientNumber = recipientPhone,\n                    MessageContent = bodyText,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"‚úÖ CTA message sent\" : \"‚ùå Failed to send CTA\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception while sending CTA\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"‚ùå Exception while sending CTA\",\n                    ErrorMessage = ex.InnerException?.Message ?? ex.Message // ‚úÖ this is critical\n                };\n            }\n\n        }\n\n    }\n}\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Interfaces/IMessageService.cs",
      "sha256": "7592cb1c94c37bab95a7c1a34fbc22e00b2fa0428bc1a23a4c2626a437314c30",
      "language": "csharp",
      "size": 846,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Services.Messages.Interfaces\n{\n    public interface IMessageService\n    {\n        /// <summary>\n        /// Sends a message of any supported type (Text, Image, Template).\n        /// </summary>\n        /// <param name=\"dto\">Base DTO representing message details.</param>\n        /// <returns>Standardized result with status, error info, and raw response.</returns>\n        Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto);\n        //Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto);\n        Task SendFollowUpAsync(string recipientNumber, string messageContent);\n        Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/WhatsAppService.cs",
      "sha256": "239db95488943944c9836125a53c4ede14522f2bc4914748e07350d86cc0051f",
      "language": "csharp",
      "size": 2917,
      "content": "using System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Configuration;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Services\n{\n    public class WhatsAppService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _whatsAppToken;\n        private readonly string _whatsAppPhoneId;\n\n        public WhatsAppService(IConfiguration configuration)\n        {\n            _httpClient = new HttpClient();\n\n            _whatsAppToken = configuration[\"WhatsApp:apiToken\"];\n            _whatsAppPhoneId = configuration[\"WhatsApp:PhoneNumberId\"];\n\n            if (string.IsNullOrEmpty(_whatsAppToken))\n                Console.WriteLine(\"‚ùå Token is NULL or EMPTY from config!\");\n\n            if (string.IsNullOrEmpty(_whatsAppPhoneId))\n                Console.WriteLine(\"‚ùå Phone ID is NULL or EMPTY from config!\");\n        }\n\n        public async Task<WhatsAppResult> SendMessageAsync(string recipientPhone, string messageText)\n        {\n            try\n            {\n                Console.WriteLine(\"üëâ Preparing to send WhatsApp message...\");\n                var url = $\"https://graph.facebook.com/v22.0/{_whatsAppPhoneId}/messages\";\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = recipientPhone,\n                    type = \"text\",\n                    text = new { body = messageText }\n                };\n\n                var json = JsonSerializer.Serialize(payload);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _whatsAppToken);\n\n                var response = await _httpClient.PostAsync(url, content);\n                var responseBody = await response.Content.ReadAsStringAsync();\n\n                Console.WriteLine($\"‚úÖ Status: {response.StatusCode}\");\n                Console.WriteLine($\"üì• Response: {responseBody}\");\n\n                if (response.IsSuccessStatusCode)\n                {\n                    return new WhatsAppResult { Success = true, RawResponse = responseBody };\n                }\n                else\n                {\n                    return new WhatsAppResult\n                    {\n                        Success = false,\n                        ErrorMessage = $\"Meta API Error: {response.StatusCode}\",\n                        RawResponse = responseBody\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Exception while sending:\");\n                Console.WriteLine(ex.Message);\n\n                return new WhatsAppResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n    }\n}\n"
    }
  ]
}
