{
  "name": "xbytechat-api/Features/FeatureAccessModule",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Controllers/FeatureAccessController.cs",
      "sha256": "a22d132286854a629e58eaa52e3ceebc77dcbe65ccb89d849b5c61fbe23f9904",
      "language": "csharp",
      "size": 5482,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Claims;\nusing xbytechat.api;\nusing FeatureAccessEntity = xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess;\n\nusing xbytechat.api.Features.FeatureAccessModule.Models;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/feature-access\")]\n    [Authorize]\n    public class FeatureAccessController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public FeatureAccessController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // DTOs to match your frontend shape\n        public class FeatureMeDto\n        {\n            public string featureCode { get; set; } = \"\";\n            public bool isAvailableInPlan { get; set; }\n            public bool? isOverridden { get; set; } // null = not overridden\n        }\n\n        public class BusinessFeatureDto\n        {\n            public string featureName { get; set; } = \"\";\n            public bool isEnabled { get; set; }\n        }\n\n        /// <summary>\n        /// Returns features for the current user, merged from plan + per-business overrides\n        /// Shape: [{ featureCode, isAvailableInPlan, isOverridden }]\n        /// </summary>\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMyFeatureAccess()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true })\n                return Unauthorized();\n\n            var role = (user.FindFirst(\"role\")?.Value ?? user.FindFirst(ClaimTypes.Role)?.Value ?? \"business\").ToLower();\n            var plan = (user.FindFirst(\"plan\")?.Value ?? \"basic\").ToLower();\n\n            Guid businessId = Guid.Empty;\n            _ = Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out businessId);\n\n            // Superadmin: grant all known features\n            if (role == \"superadmin\")\n            {\n                var allNames = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToListAsync();\n\n                var super = allNames.Select(name => new FeatureMeDto\n                {\n                    featureCode = name,\n                    isAvailableInPlan = true,\n                    isOverridden = true\n                });\n\n                return Ok(super);\n            }\n\n            // Load plan-level features (same entity type as DbSet)\n            var planRows = await _db.FeatureAccess\n                .AsNoTracking()\n                .Where(f => f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            // Load business overrides using SAME type; avoid ternary type-mismatch\n            List<FeatureAccessEntity> overrideRows;\n            if (businessId == Guid.Empty)\n            {\n                overrideRows = new();\n            }\n            else\n            {\n                overrideRows = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Where(f => f.BusinessId == businessId)\n                    .ToListAsync();\n            }\n\n            // Build base from plan, then apply overrides\n            var map = new Dictionary<string, FeatureMeDto>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var p in planRows)\n            {\n                if (!map.ContainsKey(p.FeatureName))\n                {\n                    map[p.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = p.FeatureName,\n                        isAvailableInPlan = p.IsEnabled,\n                        isOverridden = null\n                    };\n                }\n                else\n                {\n                    map[p.FeatureName].isAvailableInPlan = p.IsEnabled;\n                }\n            }\n\n            foreach (var o in overrideRows)\n            {\n                if (!map.ContainsKey(o.FeatureName))\n                {\n                    map[o.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = o.FeatureName,\n                        isAvailableInPlan = false,\n                        isOverridden = o.IsEnabled\n                    };\n                }\n                else\n                {\n                    map[o.FeatureName].isOverridden = o.IsEnabled;\n                }\n            }\n\n            return Ok(map.Values.ToArray());\n        }\n\n        /// <summary>\n        /// Returns all features for a business (used by useAllFeatureAccess/useFeatureAccess hooks)\n        /// Shape: [{ featureName, isEnabled }]\n        /// </summary>\n        [HttpGet(\"business/{businessId:guid}\")]\n        public async Task<IActionResult> GetBusinessFeatureAccess([FromRoute] Guid businessId)\n        {\n            // (Optional) enforce tenant isolation:\n            // var currentBiz = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            // if (!Guid.TryParse(currentBiz, out var bizFromToken) || bizFromToken != businessId)\n            //     return Forbid();\n\n            var rows = await _db.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new BusinessFeatureDto\n                {\n                    featureName = f.FeatureName,\n                    isEnabled = f.IsEnabled\n                })\n                .ToListAsync();\n\n            return Ok(rows);\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureAccessDto.cs",
      "sha256": "c418561ae9075f32902a032190e2252c7eab385bbdf1028ddd5748f0190df6de",
      "language": "csharp",
      "size": 409,
      "content": "using System;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string FeatureName { get; set; } = string.Empty;\n\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs",
      "sha256": "958bb8308ae62a666fd659a66327d6b5cb0a7a66659e4048df206994ea3e9aec",
      "language": "csharp",
      "size": 360,
      "content": "// 📄 Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureMetadataDto\n    {\n        public string FeatureCode { get; set; } = string.Empty;\n        public string Group { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureStatusDto.cs",
      "sha256": "36dfe2add0ad58f4e5f9e0d572e43bf68a42cc95b17f5654cacb1e7596e9715a",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.FeatureAccess.DTOs;\n\npublic class FeatureStatusDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public bool IsAvailableInPlan { get; set; }\n    public bool? IsOverridden { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureTogglePatchDto.cs",
      "sha256": "4663d2df320001525fb2b9ff9847b149f77677557a22efbaa7c455ed8ac3c483",
      "language": "csharp",
      "size": 157,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureTogglePatchDto\n    {\n        public bool IsEnabled { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureToggleViewDto.cs",
      "sha256": "cc966666d4e050d9d16f7bab7d10f8c059305fc24a84ea7bd2642eb9a4375e8b",
      "language": "csharp",
      "size": 423,
      "content": "public class FeatureToggleViewDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public string Group { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n\n    public bool IsAvailableInPlan { get; set; }     // From PlanManager\n    public bool? IsOverridden { get; set; }         // null if no override\n    public bool IsActive => IsOverridden ?? IsAvailableInPlan;\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/UserFeatureAccessDto.cs",
      "sha256": "24a59738ee2f1924903a6e14ecf5ed5a1ce6cbb0269b34013438b37502c2efa9",
      "language": "csharp",
      "size": 520,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class UserFeatureAccessDto\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Role { get; set; } = \"\";\n        public List<FeaturePermissionDto> Permissions { get; set; } = new();\n    }\n\n    public class FeaturePermissionDto\n    {\n        public string FeatureName { get; set; } = \"\";\n        public bool IsEnabled { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureAccess.cs",
      "sha256": "53331121064e4c1559420eb6de1770eb6788b85b404505420f11d5c0bb6b8fe6",
      "language": "csharp",
      "size": 975,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureAccess\")]\n    public class FeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } // e.g. \"CRM\", \"Campaigns\", \"Catalog\"\n        [MaxLength(200)]\n        public string Description { get; set; } = string.Empty;\n        [Required]\n        public bool IsEnabled { get; set; } // ✅ true = allow, false = restrict\n\n        public string? Notes { get; set; } // Optional: reason or context\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty;\n        public string? Plan { get; set; } // e.g. \"basic\", \"smart\", \"advanced\"\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureMaster.cs",
      "sha256": "dcf5048b433abe18e2d52542d30fd81664a62f97176fe4ae583ce8218dfb002c",
      "language": "csharp",
      "size": 853,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureMaster\")]\n    public class FeatureMaster\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FeatureCode { get; set; } = string.Empty; // e.g. \"crm\", \"catalog\"\n\n        [Required]\n        [MaxLength(100)]\n        public string DisplayName { get; set; } = string.Empty; // e.g. \"CRM\", \"Catalog\"\n\n        [MaxLength(250)]\n        public string Description { get; set; } = string.Empty;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty; // Optional grouping like \"CRM\", \"Messaging\"\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/UserFeatureAccess.cs",
      "sha256": "894b0a6020dffcbe46247fd5412ef98ab890a641144d089aa7c9c7aa351d0f9b",
      "language": "csharp",
      "size": 778,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"UserFeatureAccess\")]\n    public class UserFeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        [Required]\n        public Guid UserId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty;\n\n        [Required]\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public Guid? ModifiedByUserId { get; set; }  // Who applied this override\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessEvaluator.cs",
      "sha256": "b7ad7ecdc58db9f75f5793f8fb207db8b7127f878b4d51a7144c6a71e1c2dd48",
      "language": "csharp",
      "size": 1566,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessEvaluator : IFeatureAccessEvaluator\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<FeatureAccessEvaluator> _logger;\n\n        public FeatureAccessEvaluator(AppDbContext db, ILogger<FeatureAccessEvaluator> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<bool> CanUseAsync(Guid businessId, string featureCode, Guid? userId)\n        {\n            var business = await _db.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.BusinessPlanInfo == null)\n                return false;\n\n            var planEnum = business.BusinessPlanInfo.Plan;\n            var planName = Enum.GetName(typeof(PlanType), planEnum)?.ToLower();\n\n            var planFeatures = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase)\n            {\n                [\"crm\"] = planName == \"smart\" || planName == \"advanced\",\n                [\"campaigns\"] = planName == \"advanced\",\n                [\"catalog\"] = true,\n                [\"automation\"] = planName == \"smart\" || planName == \"advanced\"\n            };\n\n            return planFeatures.TryGetValue(featureCode.ToLower(), out var allowed) && allowed;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessService.cs",
      "sha256": "7968f3a0ef26fa05305fef477338950b8cb824aea9785d56b5d500ef3c376921",
      "language": "csharp",
      "size": 9158,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Services;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessService : IFeatureAccessService\n    {\n        private readonly AppDbContext _context;\n        private readonly IPlanManager _planManager;\n        private readonly ILogger<FeatureAccessService> _logger;\n\n        public FeatureAccessService(AppDbContext context, IPlanManager planManager, ILogger<FeatureAccessService> logger)\n        {\n            _context = context;\n            _planManager = planManager;\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetAllAsync()\n        {\n            return await _context.FeatureAccess\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<FeatureAccessDto?> GetAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return null;\n\n            return new FeatureAccessDto\n            {\n                Id = entity.Id,\n                BusinessId = entity.BusinessId,\n                FeatureName = entity.FeatureName,\n                IsEnabled = entity.IsEnabled,\n                Notes = entity.Notes,\n                CreatedAt = entity.CreatedAt\n            };\n        }\n\n        public async Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto)\n        {\n            var entity = new  xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                FeatureName = dto.FeatureName,\n                IsEnabled = dto.IsEnabled,\n                Notes = dto.Notes,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FeatureAccess.Add(entity);\n            await _context.SaveChangesAsync();\n\n            dto.Id = entity.Id;\n            dto.CreatedAt = entity.CreatedAt;\n            return dto;\n        }\n\n        public async Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null)\n                throw new Exception(\"FeatureAccess not found\");\n\n            entity.FeatureName = dto.FeatureName;\n            entity.IsEnabled = dto.IsEnabled;\n            entity.Notes = dto.Notes;\n\n            await _context.SaveChangesAsync();\n\n            return dto;\n        }\n\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return false;\n\n            _context.FeatureAccess.Remove(entity);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan)\n        {\n            var allFeatures = await _context.FeatureAccess.ToListAsync();\n\n            var planAccessMap = _planManager.GetPlanFeatureMap(plan); // e.g., Dictionary<string, bool>\n\n            var userOverrides = await _context.UserFeatureAccess\n                .Where(x => x.BusinessId == businessId)\n                .ToDictionaryAsync(x => x.FeatureName, x => x.IsEnabled);\n\n            var result = allFeatures.Select(f => new FeatureToggleViewDto\n            {\n                FeatureCode = f.FeatureName,\n                Group = f.Group,\n                Description = f.Description,\n                IsAvailableInPlan = planAccessMap.ContainsKey(f.FeatureName),\n                IsOverridden = userOverrides.TryGetValue(f.FeatureName, out var val) ? val : null\n            }).ToList();\n\n            return result;\n        }\n\n        public async Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled)\n        {\n            try\n            {\n                var existing = await _context.UserFeatureAccess\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.FeatureName == featureCode);\n\n                if (existing != null)\n                {\n                    existing.IsEnabled = isEnabled;\n                    _context.UserFeatureAccess.Update(existing);\n                }\n                else\n                {\n                    var newAccess = new UserFeatureAccess\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FeatureName = featureCode,\n                        IsEnabled = isEnabled,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    await _context.UserFeatureAccess.AddAsync(newAccess);\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to toggle feature {FeatureCode} for business {BusinessId}\", featureCode, businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId)\n        {\n            var business = await _context.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n            {\n                _logger.LogError(\"❌ Business not found for feature access: {BusinessId}\", businessId);\n                return new List<FeatureStatusDto>();\n            }\n\n            var planName = business.BusinessPlanInfo?.Plan.ToString() ?? \"basic\"; // Fallback to basic\n            _logger.LogInformation(\"📦 Resolved plan for Business {BusinessId}: {Plan}\", businessId, planName);\n\n            var planFeatureMap = _planManager.GetPlanFeatureMap(planName);\n\n            var overrides = await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName, f => (bool?)f.IsEnabled);\n            foreach (var kv in overrides)\n                _logger.LogInformation($\"🔧 Feature override: {kv.Key} = {kv.Value}\");\n            var allFeatures = planFeatureMap.Keys\n                .Union(overrides.Keys)\n                .Distinct();\n\n            return allFeatures.Select(f => new FeatureStatusDto\n            {\n                FeatureCode = f,\n                IsAvailableInPlan = planFeatureMap.ContainsKey(f),\n                IsOverridden = overrides.ContainsKey(f) ? overrides[f] : null\n            }).ToList();\n        }\n\n        public async Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId)\n        {\n            var users = await _context.Users\n             .Where(u => u.BusinessId == businessId)\n             .Select(u => new UserFeatureAccessDto\n             {\n                 Id = u.Id,\n                 FullName = u.Name, // ✅ Fixed\n                 Email = u.Email,\n                 Role = u.Role.Name, // ✅ Assuming you want role name string\n                 Permissions = _context.UserFeatureAccess\n                     .Where(p => p.BusinessId == businessId && p.UserId == u.Id)\n                     .Select(p => new FeaturePermissionDto\n                     {\n                         FeatureName = p.FeatureName,\n                         IsEnabled = p.IsEnabled\n                     })\n                     .ToList()\n             }).ToListAsync();\n\n\n            return users;\n        }\n        public async Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName.ToLower(), f => f.IsEnabled);\n        }\n        public async Task<Dictionary<string, bool>> GetAllFeatureCodesAsync()\n        {\n            return await _context.FeatureMasters\n                .Select(f => f.FeatureCode.ToLower())\n                .Distinct()\n                .ToDictionaryAsync(k => k, v => true);\n        }\n\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessEvaluator.cs",
      "sha256": "c469910530df845be90a6d4135c2d39d19993f8abff4b3eefc6e8c05effe373d",
      "language": "csharp",
      "size": 259,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessEvaluator\n    {\n        Task<bool> CanUseAsync(Guid businessId, string featureName, Guid? userId = null);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessService.cs",
      "sha256": "6b328b62d7d5356015dc30688fa072e890cac87e55a5c8a12b1e605b05a744f3",
      "language": "csharp",
      "size": 1183,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessService\n    {\n        Task<IEnumerable<FeatureAccessDto>> GetAllAsync();\n        Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId);\n        Task<FeatureAccessDto?> GetAsync(Guid id);\n        Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto);\n        Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto);\n        Task<bool> DeleteAsync(Guid id);\n\n        Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan);\n        Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled);\n        Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId);\n        Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetAllFeatureCodesAsync();\n    }\n}\n"
    }
  ]
}
