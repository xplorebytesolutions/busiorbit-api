{
  "name": "xbytechat-api/AuthModule",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/AuthModule/Controllers/AuthController.cs",
      "sha256": "ce71246c74ec02c0bea6716f2f97e3cec601650c44bd545fd698c7b1935f1e65",
      "language": "csharp",
      "size": 9518,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.Features.BusinessModule.DTOs;\n\nnamespace xbytechat.api.AuthModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuthController : ControllerBase\n    {\n        private readonly IAuthService _authService;\n\n        public AuthController(IAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        // ‚úÖ Login ‚Üí return { token } (NO cookies)\n        [AllowAnonymous]\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] UserLoginDto dto)\n        {\n            var result = await _authService.LoginAsync(dto);\n            if (!result.Success || string.IsNullOrWhiteSpace(result.Token))\n                return Unauthorized(new { success = false, message = result.Message });\n\n            return Ok(new { token = result.Token });\n        }\n\n        // (Optional) Refresh token endpoint if you still issue refresh tokens.\n        // Returns tokens in body (NO cookies).\n        [AllowAnonymous]\n        [HttpPost(\"refresh-token\")]\n        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)\n        {\n            var result = await _authService.RefreshTokenAsync(request.RefreshToken);\n            if (!result.Success) return Unauthorized(new { success = false, message = result.Message });\n\n            dynamic data = result.Data!;\n            return Ok(new\n            {\n                accessToken = data.accessToken,\n                refreshToken = data.refreshToken\n            });\n        }\n        // ‚úÖ Signup\n        [HttpPost(\"business-user-signup\")]\n        public async Task<IActionResult> Signup([FromBody] SignupBusinessDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values\n                    .SelectMany(v => v.Errors)\n                    .Select(e => e.ErrorMessage)\n                    .ToList();\n\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed.\",\n                    errors\n                });\n            }\n\n            var result = await _authService.SignupAsync(dto);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        // ‚úÖ Logout (stateless JWT): nothing server-side to do\n        [Authorize]\n        [HttpPost(\"logout\")]\n        public IActionResult Logout() => Ok(new { success = true, message = \"Logged out\" });\n\n        // ‚úÖ (Optional) lightweight session echo from claims (works with Bearer)\n        [Authorize]\n        [HttpGet(\"session\")]\n        public IActionResult GetSession()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true }) return BadRequest(\"Invalid session\");\n\n            var email = user.FindFirst(ClaimTypes.Email)?.Value ?? \"unknown\";\n            var role = user.FindFirst(ClaimTypes.Role)?.Value\n                       ?? user.FindFirst(\"role\")?.Value\n                       ?? \"unknown\";\n            var plan = user.FindFirst(\"plan\")?.Value ?? \"basic\";\n            var biz = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new { isAuthenticated = true, role, email, plan, businessId = biz });\n        }\n\n        [Authorize]\n        [HttpGet(\"features\")]\n        public async Task<IActionResult> GetFeatureAccess()\n        {\n            var result = await _authService.GetFeatureAccessForUserAsync(User);\n            return Ok(result.Features);\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using xbytechat.api.AuthModule.DTOs;\n//using xbytechat.api.AuthModule.Services;\n//using xbytechat.api.Features.BusinessModule.DTOs;\n//using System.Security.Claims;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Features.FeatureAccessModule.Services;\n//using xbytechat.api.Features.FeatureAccess;\n//namespace xbytechat.api.AuthModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class AuthController : ControllerBase\n//    {\n//        private readonly IAuthService _authService;\n//        private readonly IFeatureAccessService _featureAccessService;\n//        public AuthController(IAuthService authService, IFeatureAccessService featureAccessService)\n//        {\n//            _authService = authService;\n//            _featureAccessService = featureAccessService;\n//        }\n\n//        // ‚úÖ Login\n//        [AllowAnonymous]\n//        [HttpPost(\"login\")]\n//        public async Task<IActionResult> Login([FromBody] UserLoginDto dto)\n//        {\n//            var result = await _authService.LoginAsync(dto);\n\n//            if (!result.Success || string.IsNullOrWhiteSpace(result.Token))\n//                return Unauthorized(result);\n\n//            JwtCookieHelper.SetJwtCookie(HttpContext, \"xbyte_token\", result.Token);\n\n//            if (!string.IsNullOrEmpty(result.RefreshToken))\n//            {\n//                JwtCookieHelper.SetRefreshTokenCookie(HttpContext, \"xbyte_refresh\", result.RefreshToken);\n//            }\n\n//            return Ok(new\n//            {\n//                success = true,\n//                message = result.Message,\n//                data = result.Data\n//            });\n//        }\n\n//        // ‚úÖ Refresh Token\n//        // ‚úÖ Refresh Token with cookie update\n//        [AllowAnonymous]\n//        [HttpPost(\"refresh-token\")]\n//        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)\n//        {\n//            var result = await _authService.RefreshTokenAsync(request.RefreshToken);\n\n//            if (!result.Success)\n//                return Unauthorized(result);\n\n//            dynamic data = result.Data;\n//            var newAccessToken = data?.accessToken?.ToString();\n//            var newRefreshToken = data?.refreshToken?.ToString();\n\n//            // ‚úÖ Set new JWT token in cookie\n//            if (!string.IsNullOrEmpty(newAccessToken))\n//                JwtCookieHelper.SetJwtCookie(HttpContext, \"xbyte_token\", newAccessToken);\n\n//            // ‚úÖ Set new refresh token in cookie (rotated)\n//            if (!string.IsNullOrEmpty(newRefreshToken))\n//                JwtCookieHelper.SetRefreshTokenCookie(HttpContext, \"xbyte_refresh\", newRefreshToken);\n\n//            return Ok(new\n//            {\n//                success = true,\n//                message = result.Message\n//            });\n//        }\n\n//        // ‚úÖ Logout\n//        [HttpPost(\"logout\")]\n//        public IActionResult Logout()\n//        {\n//            JwtCookieHelper.ClearJwtCookie(HttpContext, \"xbyte_token\");\n//            return Ok(new\n//            {\n//                success = true,\n//                message = \"üö™ Logged out successfully\"\n//            });\n//        }\n\n//        // ‚úÖ Signup\n//        [HttpPost(\"business-user-signup\")]\n//        public async Task<IActionResult> Signup([FromBody] SignupBusinessDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//            {\n//                var errors = ModelState.Values\n//                    .SelectMany(v => v.Errors)\n//                    .Select(e => e.ErrorMessage)\n//                    .ToList();\n\n//                return BadRequest(new\n//                {\n//                    success = false,\n//                    message = \"‚ùå Validation failed.\",\n//                    errors\n//                });\n//            }\n\n//            var result = await _authService.SignupAsync(dto);\n//            return result.Success ? Ok(result) : BadRequest(result);\n//        }\n\n//        // üîÅ Resend confirmation\n//        [HttpPost(\"resend-confirmation\")]\n//        public async Task<IActionResult> ResendConfirmation([FromBody] ResendConfirmationDto dto)\n//        {\n//            var result = await _authService.ResendConfirmationAsync(dto);\n//            return result.Success ? Ok(result) : BadRequest(result);\n//        }\n\n//        // üîê Reset password\n//        [HttpPost(\"reset-password\")]\n//        public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordDto dto)\n//        {\n//            var result = await _authService.ResetPasswordAsync(dto);\n//            return result.Success ? Ok(result) : BadRequest(result);\n//        }\n//        [Authorize]\n//        [HttpGet(\"features\")]\n//        public async Task<IActionResult> GetFeatureAccess()\n//        {\n//            var result = await _authService.GetFeatureAccessForUserAsync(User);\n//            return Ok(result.Features);\n//        }\n//        // ‚úÖ Session Info\n//        [Authorize]\n//        [HttpGet(\"session\")]\n//        public IActionResult GetSession()\n//        {\n//            var identity = HttpContext.User.Identity as ClaimsIdentity;\n//            if (identity == null || !identity.IsAuthenticated)\n//                return BadRequest(\"Invalid session\");\n\n//            var email = identity.FindFirst(ClaimTypes.Email)?.Value ?? \"unknown\";\n//            var role = identity.FindFirst(ClaimTypes.Role)?.Value ?? \"unknown\";\n//            var plan = identity.FindFirst(\"Plan\")?.Value ?? \"basic\";\n\n//            return Ok(new\n//            {\n//                isAuthenticated = true,\n//                role = role,\n//                email = email,\n//                plan = plan\n//            });\n//        }\n\n\n//    }\n\n//}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Controllers/TestJwtController.cs",
      "sha256": "c407c3fdf8977cffcb0cd6131f617087ede160fd75646be61000b68f7a455a22",
      "language": "csharp",
      "size": 2087,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.AuthModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/auth/test\")]\n    public class TestJwtController : ControllerBase\n    {\n        [Authorize]\n        [HttpGet(\"get-logged-in\")]\n        public IActionResult GetLoggedInUserInfo()\n        {\n            var userId = UserContextHelper.GetUserId(User);\n            var businessId = UserContextHelper.GetBusinessId(User);\n            var role = UserContextHelper.GetRole(User);\n            var plan = UserContextHelper.GetPlan(User);\n            var companyName = UserContextHelper.GetCompanyName(User);\n\n            return Ok(new\n            {\n                success = true,\n                message = \"üîê JWT is valid. Here's your decoded info:\",\n                data = new\n                {\n                    userId,\n                    businessId,\n                    role,\n                    plan,\n                    companyName\n                }\n            });\n        }\n\n        [HttpGet(\"get-current-user\")]\n        public IActionResult GetCurrentUser()\n        {\n            if (User?.Identity?.IsAuthenticated != true)\n            {\n                return Unauthorized(new { success = false, message = \"‚ùå Not authenticated\" });\n            }\n\n            var userId = User.FindFirst(\"sub\")?.Value;\n            var email = User.FindFirst(\"email\")?.Value;\n            var role = User.FindFirst(\"role\")?.Value;\n            var businessId = User.FindFirst(\"businessId\")?.Value;\n            var plan = User.FindFirst(\"plan\")?.Value;\n            var permissions = User.FindFirst(\"permissions\")?.Value;\n\n            return Ok(new\n            {\n                success = true,\n                message = \"‚úÖ Token is valid\",\n                user = new\n                {\n                    userId,\n                    email,\n                    role,\n                    businessId,\n                    plan,\n                    permissions\n                }\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/FeatureAccessDto.cs",
      "sha256": "2cd5dd1900f770fb91216632561ec241edda181aa0f8f394ca384f8ce04f70b0",
      "language": "csharp",
      "size": 220,
      "content": "// üìÅ xbytechat.api/AuthModule/DTOs/FeatureAccessDto.cs\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Dictionary<string, bool> Features { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/RefreshTokenRequest.cs",
      "sha256": "5f68342bebd5c2664561285523bcabe509a7ffe5fe9c995eeeaf821aba238e2d",
      "language": "csharp",
      "size": 142,
      "content": "namespace xbytechat.api.AuthModule.DTOs\n{\n    public class RefreshTokenRequest\n    {\n        public string RefreshToken { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/ResendConfirmationDto.cs",
      "sha256": "c390da7f0aa2324928025edc1a4ce1c65e079357cb2219fade8cdc4153734982",
      "language": "csharp",
      "size": 226,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class ResendConfirmationDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/ResetPasswordDto.cs",
      "sha256": "33b22ea5acec9376aef19d7c09ff580b689f7a6bc04ea1d6f214dd9b203de0c4",
      "language": "csharp",
      "size": 374,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class ResetPasswordDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        [MinLength(6, ErrorMessage = \"Password must be at least 6 characters long.\")]\n        public string NewPassword { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/UserDto.cs",
      "sha256": "47384e5d11fcdfb564f639c3937db6f3aa97f5963366ecb7af4dc37e6a311ff1",
      "language": "csharp",
      "size": 587,
      "content": "namespace xbytechat.api.AuthModule.DTOs\n{\n    public class UserDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Email { get; set; }\n        public string Role { get; set; }\n        public string Status { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n        // ‚úÖ Extra fields\n        public Guid BusinessId { get; set; }\n        public string CompanyName { get; set; }\n        public string Plan { get; set; }\n        public string AccessToken { get; set; }\n\n        public Guid? PlanId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/DTOs/UserLoginDto.cs",
      "sha256": "d0b1140af88b221c2cb7dbd58223d5803643620b16d27f016aba26ed9b816482",
      "language": "csharp",
      "size": 281,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class UserLoginDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string Password { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Models/User.cs",
      "sha256": "25f82a426c60ebda55385071a527cb10389e2f164415031be0a718cc4dc8f768",
      "language": "csharp",
      "size": 1761,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models; // üÜï Required for navigation\n\nnamespace xbytechat.api.AuthModule.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; }\n\n        // üîó FK to Business\n        public Guid? BusinessId { get; set; }\n        public Business Business { get; set; }\n\n        // üë§ User Info\n        [Required]\n        public string Name { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string PasswordHash { get; set; }\n\n        // üõ°Ô∏è Role System\n        // üõ°Ô∏è Role System (FK + Navigation)\n        public Guid? RoleId { get; set; }\n        public Role Role { get; set; }// admin / business / agent / staff\n\n        // ‚úÖ Status Management\n        public string Status { get; set; } = \"Pending\"; // Active / Hold / Rejected / Pending\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // üóëÔ∏è Soft Delete Role \n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n\n        public List<CampaignSendLog> SendLogs { get; set; }\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // üÜï Permission Navigation\n        public ICollection<UserPermission> UserPermissions { get; set; } // üí° Enables .WithMany(u => u.UserPermissions)\n        public string? RefreshToken { get; set; }\n        public DateTime? RefreshTokenExpiry { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Models/WhatsAppTemplate.cs",
      "sha256": "58c48102ea525733b401f28523a39a8358c4235f1bc7fad9bf667c08f942b1b9",
      "language": "csharp",
      "size": 1820,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.Models\n{\n    [Index(nameof(BusinessId), nameof(Provider))]\n    [Index(nameof(BusinessId), nameof(Name))]\n    [Index(nameof(BusinessId), nameof(Name), nameof(Language), nameof(Provider), IsUnique = true)]\n    public class WhatsAppTemplate\n    {\n        [Key] public Guid Id { get; set; } = Guid.NewGuid();\n\n        public Guid BusinessId { get; set; }\n\n        [MaxLength(40)]\n        public string Provider { get; set; } = \"meta_cloud\";   // \"meta_cloud\" | \"pinnacle\" | etc.\n\n        [MaxLength(120)]\n        public string? ExternalId { get; set; }                // Meta template id if available\n\n        [MaxLength(160)]\n        public string Name { get; set; } = \"\";\n\n        [MaxLength(16)]\n        public string Language { get; set; } = \"en_US\";\n\n        [MaxLength(32)]\n        public string Status { get; set; } = \"APPROVED\";       // APPROVED/ACTIVE/REJECTED/PENDING\n\n        [MaxLength(40)]\n        public string? Category { get; set; }                  // e.g. MARKETING, UTILITY\n\n        public string Body { get; set; } = \"\";\n\n        public bool HasImageHeader { get; set; } = false;\n\n        public int PlaceholderCount { get; set; } = 0;\n\n        // JSON blobs (use TEXT in PG)\n        public string ButtonsJson { get; set; } = \"[]\";        // serialized List<ButtonMetadataDto>\n        public string RawJson { get; set; } = \"{}\";            // provider raw item (for audit/debug)\n\n        public DateTime LastSyncedAt { get; set; } = DateTime.UtcNow;\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsActive { get; set; } = true;             // soft-disable if deprecated\n    }\n}"
    },
    {
      "path": "xbytechat-api/AuthModule/Roles/UserRoles.cs",
      "sha256": "5a91bb09b9b5fc0f5fe14cf1b9727c0c8a8de225c71455452a14d491125209c5",
      "language": "csharp",
      "size": 507,
      "content": "namespace xbytechat.api.AuthModule.Roles\n{\n    public static class UserRoles\n    {\n        public const string Admin = \"admin\";         // xByte Admin\n        public const string Business = \"business\";   // Tenant Admin\n        public const string Staff = \"staff\";         // CRM Staff (future)\n        public const string Agent = \"agent\";         // WhatsApp/chat agent\n        public const string CRM = \"crm\";             // CRM-only user (future)\n        public const string Partner = \"partner\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/AuthService.cs",
      "sha256": "f2b6fda822da5be77741a756e1eff53c493510fc5dcc46d65794d77a26ce63b0",
      "language": "csharp",
      "size": 50624,
      "content": "using System.Security.Cryptography;\nusing System.Text;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Features.AccessControl.Services;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.AspNetCore.Http;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing System.Security.Claims;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public class AuthService : IAuthService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IBusinessService _businessService;\n        private readonly IJwtTokenService _jwtTokenService;\n        private readonly IAccessControlService _accessControlService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly ILogger<AuthService> _logger;\n        private readonly AppDbContext _dbContext;\n        public AuthService(\n            IGenericRepository<User> userRepo,\n            IBusinessService businessService,\n            IJwtTokenService jwtTokenService,\n            IAccessControlService accessControlService,\n            IHttpContextAccessor httpContextAccessor,\n            ILogger<AuthService> logger,\n            AppDbContext dbContext)\n        {\n            _userRepo = userRepo;\n            _businessService = businessService;\n            _jwtTokenService = jwtTokenService;\n            _accessControlService = accessControlService;\n            _httpContextAccessor = httpContextAccessor;\n            _logger = logger;\n            _dbContext = dbContext;\n        }\n\n        // üîë Production-grade Login\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    var claims = new List<Claim>\n        //    {\n        //        new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n        //        new Claim(JwtRegisteredClaimNames.Email, user.Email ?? \"\"),\n        //        new Claim(\"name\", user.Name ?? \"\"),\n        //        new Claim(ClaimTypes.Role, roleName),\n        //        new Claim(\"role\", roleName),\n        //        new Claim(\"status\", user.Status ?? \"unknown\"),\n        //        new Claim(\"plan\", planName ?? \"\"),\n        //        new Claim(\"businessId\", businessId),\n        //        new Claim(\"companyName\", companyName ?? \"\")\n        //    };\n\n        //    if (permissions?.Any() == true)\n        //    {\n        //        claims.AddRange(permissions.Select(p => new Claim(\"perm\", p)));\n        //    }\n\n        //    var token = _jwtTokenService.GenerateToken(claims);\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        // üü¢ Signup Business User\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // 'superadmin', 'admin', etc.\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    // ‚úÖ Generate token with full claims\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚úÖ User info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // 'superadmin', 'admin', etc.\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    // ‚úÖ Generate token with full claims\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚úÖ Store token in secure HttpOnly cookie\n        //    _httpContextAccessor.HttpContext.Response.Cookies.Append(\"xbyte_token\", token, new CookieOptions\n        //    {\n        //        HttpOnly = true,\n        //        Secure = true, // Set to false only for localhost if needed\n        //        SameSite = SameSiteMode.Lax,\n        //        Expires = DateTime.UtcNow.AddDays(7)\n        //    });\n\n        //    // ‚úÖ User info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        #region // Below Code comeneted to replace cokkies to bearer\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"‚ùå Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"‚è≥ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // e.g., 'superadmin'\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\"; // Admins are not tied to a business\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //    }\n\n        //    // ‚úÖ Generate JWT with lowercase claim keys\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚úÖ Store token securely as cookie (must match JwtBearer event)\n        //    _httpContextAccessor.HttpContext.Response.Cookies.Append(\"xbyte_token\", token, \n\n        //        new CookieOptions\n        //    {\n        //        HttpOnly = true,\n        //        Secure = true,\n        //       // SameSite = SameSiteMode.Strict,\n        //        SameSite = SameSiteMode.None,\n        //        Expires = DateTime.UtcNow.AddDays(7),\n        //        Domain = \"http://localhost:3000\"\n        //    });\n\n        //    // ‚úÖ Build user info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null // Not needed since we're using secure cookie\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        #endregion\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business? business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;        // admin types treated as plan in UI\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"basic\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //    }\n\n        //    // ‚úÖ Generate JWT (includes role/plan/biz + ClaimTypes.Role)\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ‚ùå NO cookie writes in Bearer mode\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"‚úÖ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business? business = null;\n        //    Guid? planId = null;\n        //   // string planName = string.Empty;\n        //    string companyName = string.Empty;\n        //    string businessId = user.BusinessId?.ToString() ?? string.Empty;\n\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.Plan) // Ensure Plan navigation exists in Business model\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //            return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //            return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n\n        //        if (!business.PlanId.HasValue)\n        //            return ResponseResult.ErrorInfo(\"‚ùå No plan assigned to this business.\");\n\n        //        planId = business.PlanId;\n        //      //  planName = business.Plan?.Name ?? string.Empty;\n        //        companyName = business.CompanyName ?? string.Empty;\n        //    }\n\n        //    if (isAdminType)\n        //    {\n        //       // planName = roleName; // Admins' \"plan\" is just their role name\n        //        companyName = \"xByte Admin\";\n        //        businessId = string.Empty;\n        //        planId = null; // No plan restriction for admins\n        //    }\n\n        //    var permissions = planId.HasValue\n        //        ? await _accessControlService.GetPermissionsByPlanIdAsync(planId)\n        //        : new List<string>();\n\n        //    // ‚úÖ Generate JWT with planId\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? string.Empty,\n        //        user.Email ?? string.Empty,\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //       // planName,\n        //        permissions ?? new List<string>(),\n        //        planId?.ToString() ?? string.Empty\n        //    );\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        //Plan = planName,\n        //        PlanId = planId,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\n        //        \"‚úÖ Login successful for {Email}, Role: {Role}, PlanId: {PlanId}\",\n        //        dto.Email, roleName, planId\n        //    );\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n        public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        {\n            _logger.LogInformation(\"üîë Login attempt for email: {Email}\", dto.Email);\n            var hashedPassword = HashPassword(dto.Password);\n\n            var user = await _userRepo\n                .AsQueryable()\n                .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n                .Include(u => u.Role)\n                .FirstOrDefaultAsync();\n\n            if (user == null)\n            {\n                _logger.LogWarning(\"‚ùå Login failed: Invalid email or password for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid email or password\");\n            }\n\n            var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n            var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n            if (user.BusinessId == null && !isAdminType)\n            {\n                _logger.LogWarning(\"‚ùå Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Your account approval is pending. Please contact your administrator or support.\");\n            }\n\n            Business? business = null;\n            Guid? planId = null;\n            string companyName = string.Empty;\n            string businessId = user.BusinessId?.ToString() ?? string.Empty;\n\n            if (user.BusinessId != null)\n            {\n                business = await _businessService.Query()\n                    .Include(b => b.Plan)\n                    .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n                if (business == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Associated business not found.\");\n\n                if (business.Status == Business.StatusType.Pending)\n                    return ResponseResult.ErrorInfo(\"‚è≥ Your business is under review. Please wait for approval.\");\n\n                if (!business.PlanId.HasValue)\n                    return ResponseResult.ErrorInfo(\"‚ùå No plan assigned to this business.\");\n\n                planId = business.PlanId;\n                companyName = business.CompanyName ?? string.Empty;\n            }\n\n            if (isAdminType)\n            {\n                // Admins don‚Äôt get plan restrictions\n                companyName = \"xByte Admin\";\n                businessId = string.Empty;\n                planId = null;\n            }\n\n            // üî• Compute EFFECTIVE permissions (plan ‚à© role) and derive features\n            var (permCodes, featureKeys) = isAdminType\n                ? (await GetAllActivePermissions(), new List<string> { \"Dashboard\", \"Messaging\", \"CRM\", \"Campaigns\", \"Catalog\", \"AdminPanel\" })\n                : await GetEffectivePermissionsAndFeaturesAsync(user.Id);\n\n            // üé´ Generate JWT (now includes permissions, features, plan_id)\n            var token = _jwtTokenService.GenerateToken(\n                userId: user.Id.ToString(),\n                role: roleName,\n                userName: user.Name ?? string.Empty,\n                email: user.Email ?? string.Empty,\n                status: user.Status ?? \"unknown\",\n                businessId: businessId,\n                companyName: companyName,\n                permissions: permCodes ?? new List<string>(),\n                planId: planId?.ToString() ?? string.Empty,\n                features: featureKeys,\n                hasAllAccess: isAdminType\n            );\n            try\n            {\n                var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);\n                var pid = jwt.Claims.FirstOrDefault(c => c.Type == \"plan_id\")?.Value;\n                _logger.LogInformation(\"üîé JWT includes plan_id: {PlanId}\", pid ?? \"<null>\");\n            }\n            catch { /* ignore */ }\n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Name = user.Name,\n                Email = user.Email,\n                Role = roleName,\n                Status = user.Status,\n                CreatedAt = user.CreatedAt,\n                BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n                CompanyName = companyName,\n                PlanId = planId,\n                AccessToken = null\n            };\n\n            _logger.LogInformation(\n                \"‚úÖ Login successful for {Email}, Role: {Role}, PlanId: {PlanId}\",\n                dto.Email, roleName, planId\n            );\n\n            return new ResponseResult\n            {\n                Success = true,\n                Message = \"‚úÖ Login successful\",\n                Data = userDto,\n                Token = token\n            };\n        }\n        public async Task<ResponseResult> SignupAsync(SignupBusinessDto dto)\n        {\n            _logger.LogInformation(\"üü¢ Signup attempt: {Email}\", dto.Email);\n            var result = await _businessService.SignupBusinessAsync(dto);\n\n            if (!result.Success)\n            {\n                _logger.LogWarning(\"‚ùå Signup failed for {Email}: {Msg}\", dto.Email, result.Message);\n                return ResponseResult.ErrorInfo(result.Message);\n            }\n\n            var business = await _businessService.GetBusinessByEmailAsync(dto.Email);\n\n            if (business == null)\n            {\n                _logger.LogError(\"‚ùå Signup succeeded but business retrieval failed for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Signup succeeded but business retrieval failed.\");\n            }\n\n            try\n            {\n                // üÜï Set BusinessAssignedTo if available\n                if (dto.CreatedByPartnerId.HasValue && business.CreatedByPartnerId == null)\n                {\n                    business.CreatedByPartnerId = dto.CreatedByPartnerId;\n                    await _businessService.UpdateBusinessAsync(business);\n                    _logger.LogInformation(\"‚úÖ Partner assigned during signup: {PartnerId} for Business: {BusinessId}\", dto.CreatedByPartnerId, business.Id);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Signup succeeded but assigning partner failed for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå Signup succeeded but assigning partner failed: \" + ex.Message);\n            }\n\n            _logger.LogInformation(\"‚úÖ Signup successful for {Email} (BusinessId: {BusinessId})\", dto.Email, business.Id);\n            return ResponseResult.SuccessInfo(\"‚úÖ Signup successful. Pending approval.\", new { BusinessId = business.Id });\n        }\n\n        // üîÑ Refresh JWT Token (and Rotate)\n        //public async Task<ResponseResult> RefreshTokenAsync(string refreshToken)\n        //{\n        //    _logger.LogInformation(\"üîÑ RefreshToken attempt\");\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Include(u => u.Role)\n        //        .Include(u => u.Business)\n        //            .ThenInclude(b => b.BusinessPlanInfo)\n        //        .FirstOrDefaultAsync(u => u.RefreshToken == refreshToken && u.RefreshTokenExpiry > DateTime.UtcNow);\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"‚ùå Invalid or expired refresh token.\");\n        //        return ResponseResult.ErrorInfo(\"‚ùå Invalid or expired refresh token.\");\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //    }\n        //    else\n        //    {\n        //        planName = user.Business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = user.Business?.CompanyName ?? \"\";\n        //    }\n\n        //    var claims = new List<Claim>\n        //    {\n        //        new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n        //        new Claim(JwtRegisteredClaimNames.Email, user.Email ?? \"\"),\n        //        new Claim(\"name\", user.Name ?? \"\"),\n        //        new Claim(ClaimTypes.Role, roleName),\n        //        new Claim(\"role\", roleName),\n        //        new Claim(\"status\", user.Status ?? \"unknown\"),\n        //        new Claim(\"plan\", planName ?? \"\"),\n        //        new Claim(\"businessId\", businessId),\n        //        new Claim(\"companyName\", companyName ?? \"\")\n        //    };\n\n        //    if (permissions?.Any() == true)\n        //    {\n        //        claims.AddRange(permissions.Select(p => new Claim(\"perm\", p)));\n        //    }\n\n        //    var token = _jwtTokenService.GenerateToken(claims);\n\n        //    // üîÅ Rotate refresh token\n        //    var newRefreshToken = Guid.NewGuid().ToString(\"N\");\n        //    user.RefreshToken = newRefreshToken;\n        //    user.RefreshTokenExpiry = DateTime.UtcNow.AddDays(30);\n        //    _userRepo.Update(user);\n\n        //    _logger.LogInformation(\"üîÑ Token refreshed for user {UserId}, role {Role}\", user.Id, roleName);\n\n        //    return ResponseResult.SuccessInfo(\"üîÑ Token refreshed\", new\n        //    {\n        //        accessToken = token,\n        //        refreshToken = newRefreshToken\n        //    });\n        //}\n\n        // üîÅ Resend confirmation\n\n        // üîÑ Refresh JWT Token (and Rotate)\n        public async Task<ResponseResult> RefreshTokenAsync(string refreshToken)\n        {\n            _logger.LogInformation(\"üîÑ RefreshToken attempt\");\n\n            var user = await _userRepo\n                .AsQueryable()\n                .Include(u => u.Role)\n                .Include(u => u.Business)\n                    .ThenInclude(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(u => u.RefreshToken == refreshToken && u.RefreshTokenExpiry > DateTime.UtcNow);\n\n            if (user == null)\n            {\n                _logger.LogWarning(\"‚ùå Invalid or expired refresh token.\");\n                return ResponseResult.ErrorInfo(\"‚ùå Invalid or expired refresh token.\");\n            }\n\n            var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n            var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n            string planId = user.Business?.PlanId?.ToString() ?? string.Empty;\n            string companyName = isAdminType ? \"xByte Admin\" : (user.Business?.CompanyName ?? string.Empty);\n            string businessId = isAdminType ? string.Empty : (user.BusinessId?.ToString() ?? string.Empty);\n\n            var (permCodes, featureKeys) = isAdminType\n                ? (await GetAllActivePermissions(), new List<string> { \"Dashboard\", \"Messaging\", \"CRM\", \"Campaigns\", \"Catalog\", \"AdminPanel\" })\n                : await GetEffectivePermissionsAndFeaturesAsync(user.Id);\n\n            var claims = new List<Claim>\n        {\n            new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n            new Claim(\"id\", user.Id.ToString()),\n            new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),\n            new Claim(\"email\", user.Email ?? \"\"),\n            new Claim(\"name\", user.Name ?? \"\"),\n            new Claim(\"status\", user.Status ?? \"unknown\"),\n            new Claim(\"businessId\", businessId),\n            new Claim(\"companyName\", companyName),\n            new Claim(\"permissions\", string.Join(\",\", permCodes ?? new List<string>())),\n            new Claim(\"features\", string.Join(\",\", featureKeys ?? new List<string>())),\n            new Claim(\"hasAllAccess\", isAdminType ? \"true\" : \"false\"),\n            new Claim(\"role\", roleName),\n            new Claim(ClaimTypes.Role, roleName),\n            new Claim(\"plan_id\", planId ?? string.Empty)\n        };\n\n            var token = _jwtTokenService.GenerateToken(claims);\n\n            // üîÅ Rotate refresh token\n            var newRefreshToken = Guid.NewGuid().ToString(\"N\");\n            user.RefreshToken = newRefreshToken;\n            user.RefreshTokenExpiry = DateTime.UtcNow.AddDays(30);\n            _userRepo.Update(user);\n\n            _logger.LogInformation(\"üîÑ Token refreshed for user {UserId}, role {Role}\", user.Id, roleName);\n\n            return ResponseResult.SuccessInfo(\"üîÑ Token refreshed\", new\n            {\n                accessToken = token,\n                refreshToken = newRefreshToken\n            });\n        }\n        public async Task<ResponseResult> ResendConfirmationAsync(ResendConfirmationDto dto)\n        {\n            _logger.LogInformation(\"üîÅ Resend confirmation attempt for {Email}\", dto.Email);\n            var business = await _businessService.GetBusinessByEmailAsync(dto.Email);\n            if (business == null)\n            {\n                _logger.LogWarning(\"‚ùå Resend confirmation failed: No business for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå No business registered with this email\");\n            }\n\n            _logger.LogInformation(\"‚úÖ Resend confirmation request processed for {Email}\", dto.Email);\n            return ResponseResult.SuccessInfo(\"üì® Confirmation request resent.\");\n        }\n        public async Task<FeatureAccessDto> GetFeatureAccessForUserAsync(ClaimsPrincipal user)\n        {\n            var role = user.FindFirstValue(\"role\")?.ToLower();\n            var dto = new FeatureAccessDto();\n\n            if (role == \"superadmin\")\n            {\n                // Grant all known frontend features\n                dto.Features = await _dbContext.FeatureAccess\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToDictionaryAsync(name => name, name => true);\n\n                return dto;\n            }\n\n            var plan = user.FindFirstValue(\"plan\")?.ToLower();\n            var businessIdStr = user.FindFirstValue(\"businessId\");\n\n            if (!Guid.TryParse(businessIdStr, out var businessId))\n                return dto;\n\n            // Plan-level or per-business override\n            var features = await _dbContext.FeatureAccess\n                .Where(f => f.BusinessId == businessId || f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            foreach (var feature in features)\n            {\n                dto.Features[feature.FeatureName] = feature.IsEnabled;\n            }\n\n            return dto;\n        }\n\n        // üîí Reset password\n        public async Task<ResponseResult> ResetPasswordAsync(ResetPasswordDto dto)\n        {\n            _logger.LogInformation(\"üîí Reset password attempt for {Email}\", dto.Email);\n            var user = await _userRepo.FirstOrDefaultAsync(u => u.Email == dto.Email);\n            if (user == null)\n            {\n                _logger.LogWarning(\"‚ùå Reset password failed: No user for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"‚ùå No user found with this email\");\n            }\n\n            user.PasswordHash = HashPassword(dto.NewPassword);\n            _userRepo.Update(user);\n\n            _logger.LogInformation(\"‚úÖ Password reset successfully for {Email}\", dto.Email);\n            return ResponseResult.SuccessInfo(\"‚úÖ Password reset successfully\");\n        }\n\n        // Utility: Hash password using SHA256\n        //private string HashPassword(string password)\n        //{\n        //    using var sha = SHA256.Create();\n        //    var bytes = Encoding.UTF8.GetBytes(password);\n        //    var hash = sha.ComputeHash(bytes);\n        //    return Convert.ToBase64String(hash);\n        //}\n        // INTERSECTION: Role ‚à© Plan for the user, then map groups -> feature keys\n        //private async Task<(List<string> Perms, List<string> Features)> GetEffectivePermissionsAndFeaturesAsync(Guid userId)\n        //{\n        //    var userAndPermissions = _dbContext.Users\n        //        .Where(u => u.Id == userId)\n        //        .Join(_dbContext.Businesses,\n        //            u => u.BusinessId,\n        //            b => b.Id,\n        //            (u, b) => new { u, b })\n        //        .Join(_dbContext.PlanPermissions.Where(pp => pp.IsActive),\n        //            ub => ub.b.PlanId,\n        //            pp => pp.PlanId,\n        //            (ub, pp) => new { ub.u, pp })\n        //        .Join(_dbContext.Permissions.Where(p => p.IsActive),\n        //            ubpp => ubpp.pp.PermissionId,\n        //            p => p.Id,\n        //            (ubpp, p) => new { ubpp.u, p }); // This gives you a sequence of {user, permission} pairs\n\n        //    // Replace the final problematic Join with this Where clause\n        //    var rows = await userAndPermissions\n        //        .Where(up => _dbContext.RolePermissions\n        //            .Where(rp => rp.IsActive && !rp.IsRevoked)\n        //            .Any(rp => rp.RoleId == up.u.RoleId && rp.PermissionId == up.p.Id))\n        //        .Select(up => up.p) // Select the final permission object\n        //        .Select(p => new { p.Code, p.Group })\n        //        .Distinct()\n        //        .ToListAsync();\n\n        //    var perms = rows.Select(r => r.Code).ToList();\n\n        //    var features = rows.Select(r => r.Group)\n        //        .Where(g => !string.IsNullOrWhiteSpace(g))\n        //        .Select(GroupToFeature)\n        //        .Where(f => f != null)\n        //        .Select(f => f!)\n        //        .Distinct(StringComparer.OrdinalIgnoreCase)\n        //        .ToList();\n\n        //    return (perms, features);\n        //}\n        //// If you ever need ‚Äúall perms‚Äù (e.g., for superadmins)\n        /// <summary>\n        /// \n        /// </summary>\n        /// <returns></returns>\n        /// \n        private async Task<(List<string> Perms, List<string> Features)> GetEffectivePermissionsAndFeaturesAsync(Guid userId)\n        {\n            var rows = await _dbContext.Users\n                .AsNoTracking()\n                .Where(u => u.Id == userId)\n                .Join(_dbContext.Businesses.AsNoTracking(),\n                      u => u.BusinessId,\n                      b => b.Id,\n                      (u, b) => new { u, b })\n                .Join(_dbContext.PlanPermissions.AsNoTracking().Where(pp => pp.IsActive),\n                      ub => ub.b.PlanId,\n                      pp => pp.PlanId,\n                      (ub, pp) => new { ub.u, pp })\n                .Join(_dbContext.Permissions.AsNoTracking().Where(p => p.IsActive),\n                      ubpp => ubpp.pp.PermissionId,\n                      p => p.Id,\n                      (ubpp, p) => new { ubpp.u, p })\n                // Intersect with RolePermissions via EXISTS\n                .Where(up => _dbContext.RolePermissions\n                    .AsNoTracking()\n                    .Where(rp => rp.IsActive && !rp.IsRevoked)\n                    .Any(rp => rp.RoleId == up.u.RoleId && rp.PermissionId == up.p.Id))\n                .Select(up => new { up.p.Code, up.p.Group })\n                .Distinct()\n                .ToListAsync();\n\n            var perms = rows.Select(r => r.Code).ToList();\n\n            var features = rows.Select(r => r.Group)\n                .Where(g => !string.IsNullOrWhiteSpace(g))\n                .Select(GroupToFeature)\n                .Where(f => f != null)\n                .Select(f => f!)\n                .Distinct(StringComparer.OrdinalIgnoreCase)\n                .ToList();\n\n            return (perms, features);\n        }\n\n        private async Task<List<string>> GetAllActivePermissions() =>\n            await _dbContext.Permissions\n                .Where(p => p.IsActive)\n                .Select(p => p.Code)\n                .OrderBy(c => c)\n                .ToListAsync();\n\n        private static string? GroupToFeature(string? g) => g switch\n        {\n            \"Messaging\" => \"Messaging\",\n            \"Contacts\" => \"CRM\",\n            \"Campaign\" => \"Campaigns\",\n            \"Product\" => \"Catalog\",\n            \"Dashboard\" => \"Dashboard\",\n            \"Admin\" => \"AdminPanel\",\n            _ => null\n        };\n\n        private string HashPassword(string password)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/IAuthService.cs",
      "sha256": "7d563b4b118d631a798738eddf29e7637d5defe5bf5863d10d24b3e31bd897db",
      "language": "csharp",
      "size": 745,
      "content": "using System.Security.Claims;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public interface IAuthService\n    {\n        Task<ResponseResult> LoginAsync(UserLoginDto dto);\n        Task<ResponseResult> SignupAsync(SignupBusinessDto dto);                  // ‚úÖ Add this\n        Task<ResponseResult> ResetPasswordAsync(ResetPasswordDto dto);           // ‚úÖ Add this\n        Task<ResponseResult> ResendConfirmationAsync(ResendConfirmationDto dto); // ‚úÖ Add this\n        Task<ResponseResult> RefreshTokenAsync(string refreshToken);\n        Task<FeatureAccessDto> GetFeatureAccessForUserAsync(ClaimsPrincipal user);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/IJwtTokenService.cs",
      "sha256": "6d4a732e224fe37de1184e7c79c9a3413bab6ea6cda0d29a1c3fb5a70cf9b6e7",
      "language": "csharp",
      "size": 750,
      "content": "using Microsoft.IdentityModel.Tokens;\nusing System.Collections.Generic;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public interface IJwtTokenService\n    {\n        string GenerateToken(\n            string userId,\n            string role,\n            string userName,\n            string email,\n            string status,\n            string businessId,\n            string companyName,\n                       List<string> permissions,\n            string planId,\n              List<string>? features = null,\n            bool hasAllAccess = false\n        );\n        string GenerateToken(IEnumerable<Claim> claims);\n        TokenValidationParameters GetValidationParameters(); // ‚úÖ For Middleware validation\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/AuthModule/Services/JwtTokenService.cs",
      "sha256": "54b0235003a02ee3bff4006db2d37974e88962409ec7f015cbad4ad2a264491f",
      "language": "csharp",
      "size": 12625,
      "content": "using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing System;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Text;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public class JwtTokenService : IJwtTokenService\n    {\n        private readonly IConfiguration _config;\n        private readonly ILogger<JwtTokenService> _logger;\n\n        public JwtTokenService(IConfiguration config, ILogger<JwtTokenService> logger)\n        {\n            _config = config;\n            _logger = logger;\n        }\n\n        public string GenerateToken(\n            string userId,\n            string role,\n            string userName,\n            string email,\n            string status,\n            string businessId,\n            string companyName,\n            List<string> permissions,\n            string planId,\n            List<string>? features = null,\n            bool hasAllAccess = false)\n        {\n            try\n            {\n                var permissionString = string.Join(\",\", permissions ?? new List<string>());\n                var featuresString = string.Join(\",\", features ?? new List<string>());\n\n                var claims = new List<Claim>\n{\n    new Claim(JwtRegisteredClaimNames.Sub, userId),\n    new Claim(\"id\", userId),\n    new Claim(ClaimTypes.NameIdentifier, userId),\n\n    new Claim(\"email\", email ?? \"\"),\n    new Claim(\"name\", userName ?? \"\"),\n    new Claim(\"status\", status ?? \"unknown\"),\n\n    // üîê Business id: add BOTH for compatibility\n    new Claim(\"BusinessId\", businessId ?? \"\"), // <-- used by our helpers/controllers\n    new Claim(\"businessId\", businessId ?? \"\"), // <-- keep for existing clients\n\n    new Claim(\"companyName\", companyName ?? \"\"),\n\n    // üîñ Role (API + UI)\n    new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),\n    new Claim(ClaimTypes.Role, role?.ToLowerInvariant() ?? \"unknown\"),\n\n    // üß© Plan & access\n    new Claim(\"plan_id\", planId ?? string.Empty),\n    new Claim(\"permissions\", string.Join(\",\", permissions ?? new List<string>())),\n    new Claim(\"features\", string.Join(\",\", features ?? new List<string>())),\n    new Claim(\"hasAllAccess\", hasAllAccess ? \"true\" : \"false\"),\n};\n\n\n                return GenerateToken(claims);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error generating token for userId: {UserId}\", userId);\n                throw;\n            }\n        }\n\n        public string GenerateToken(IEnumerable<Claim> claims)\n        {\n            try\n            {\n                var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n                var secret = jwtSettings[\"SecretKey\"];\n                if (string.IsNullOrEmpty(secret))\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è JWT SecretKey is missing from configuration.\");\n                    throw new Exception(\"JWT SecretKey is not configured.\");\n                }\n\n                var expiry = jwtSettings[\"ExpiryMinutes\"];\n                if (!int.TryParse(expiry, out var expiryMinutes))\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è JWT ExpiryMinutes is invalid or missing. Defaulting to 60 minutes.\");\n                    expiryMinutes = 60;\n                }\n\n                var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));\n                var creds = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);\n\n                var expires = DateTime.UtcNow.AddMinutes(expiryMinutes);\n                var unixExp = new DateTimeOffset(expires).ToUnixTimeSeconds();\n\n                var finalClaims = claims.ToList();\n                finalClaims.Add(new Claim(JwtRegisteredClaimNames.Exp, unixExp.ToString()));\n\n                var token = new JwtSecurityToken(\n                    issuer: jwtSettings[\"Issuer\"],\n                    audience: jwtSettings[\"Audience\"],\n                    claims: finalClaims,\n                    expires: expires,\n                    signingCredentials: creds\n                );\n\n                _logger.LogInformation(\"‚úÖ Token generated for: {Email}\", finalClaims.FirstOrDefault(c => c.Type == \"email\")?.Value);\n\n                return new JwtSecurityTokenHandler().WriteToken(token);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error generating JWT from claims.\");\n                throw;\n            }\n        }\n\n        public TokenValidationParameters GetValidationParameters()\n        {\n            var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n            return new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateIssuerSigningKey = true,\n                ValidateLifetime = true,\n                RequireSignedTokens = true,\n                RequireExpirationTime = true,\n                ValidIssuer = jwtSettings[\"Issuer\"],\n                ValidAudience = jwtSettings[\"Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey(\n                    Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])\n                ),\n                ClockSkew = TimeSpan.Zero,\n                RoleClaimType = \"role\",\n                NameClaimType = \"name\"\n            };\n        }\n    }\n}\n\n\n//using Microsoft.Extensions.Configuration;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.IdentityModel.Tokens;\n//using System;\n//using System.Collections.Generic;\n//using System.IdentityModel.Tokens.Jwt;\n//using System.Linq;\n//using System.Security.Claims;\n//using System.Text;\n\n//namespace xbytechat.api.AuthModule.Services\n//{\n//    public class JwtTokenService : IJwtTokenService\n//    {\n//        private readonly IConfiguration _config;\n//        private readonly ILogger<JwtTokenService> _logger;\n\n//        public JwtTokenService(IConfiguration config, ILogger<JwtTokenService> logger)\n//        {\n//            _config = config;\n//            _logger = logger;\n//        }\n\n//        //public string GenerateToken(\n//        //    string userId,\n//        //    string role,\n//        //    string userName,\n//        //    string email,\n//        //    string status,\n//        //    string businessId,\n//        //    string companyName,\n//        //    string plan,\n//        //    List<string> permissions)\n//        //{\n//        //    try\n//        //    {\n//        //        var permissionString = string.Join(\",\", permissions ?? new List<string>());\n\n//        //        var claims = new List<Claim>\n//        //        {\n//        //            new Claim(JwtRegisteredClaimNames.Sub, userId),\n//        //            new Claim(\"id\", userId),\n//        //            new Claim(ClaimTypes.NameIdentifier, userId),\n//        //            new Claim(\"email\", email ?? \"\"),\n//        //            new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),    // lowercased!\n//        //            new Claim(\"name\", userName ?? \"\"),\n//        //            new Claim(\"status\", status ?? \"unknown\"),\n//        //            new Claim(\"businessId\", businessId ?? \"\"),                   // lowercased!\n//        //            new Claim(\"companyName\", companyName ?? \"\"),\n//        //            new Claim(\"plan\", plan?.ToLowerInvariant() ?? \"basic\"),      // lowercased!\n//        //            new Claim(\"permissions\", permissionString)\n//        //        };\n\n//        //        return GenerateToken(claims);\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        _logger.LogError(ex, \"‚ùå Error generating token for userId: {UserId}\", userId);\n//        //        throw;\n//        //    }\n//        //}\n//        public string GenerateToken(string userId, string role,string userName,\n//                                    string email,\n//                                    string status,\n//                                    string businessId,\n//                                    string companyName,\n//                                    //string plan,\n//                                    List<string> permissions,\n//                                    string planId)\n//        {\n//            try\n//            {\n//                var permissionString = string.Join(\",\", permissions ?? new List<string>());\n\n//                var claims = new List<Claim>\n//        {\n//            new Claim(JwtRegisteredClaimNames.Sub, userId),\n//            new Claim(\"id\", userId),\n//            new Claim(ClaimTypes.NameIdentifier, userId),\n//            new Claim(\"email\", email ?? \"\"),\n//            new Claim(\"name\", userName ?? \"\"),\n//            new Claim(\"status\", status ?? \"unknown\"),\n//            new Claim(\"businessId\", businessId ?? \"\"),\n//            new Claim(\"companyName\", companyName ?? \"\"),\n//           // new Claim(\"plan\", plan?.ToLowerInvariant() ?? \"basic\"),\n//            new Claim(\"permissions\", permissionString),\n\n//            // ‚úÖ Proper role mapping for both ASP.NET and frontend\n//            new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),           // for React\n//            new Claim(ClaimTypes.Role, role?.ToLowerInvariant() ?? \"unknown\") ,  // for ASP.NET\n//            new Claim(\"plan_id\", planId ?? string.Empty)\n\n//        };\n\n//                return GenerateToken(claims);\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå Error generating token for userId: {UserId}\", userId);\n//                throw;\n//            }\n//        }\n\n//        public string GenerateToken(IEnumerable<Claim> claims)\n//        {\n//            try\n//            {\n//                var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n//                var secret = jwtSettings[\"SecretKey\"];\n//                if (string.IsNullOrEmpty(secret))\n//                {\n//                    _logger.LogWarning(\"‚ö†Ô∏è JWT SecretKey is missing from configuration.\");\n//                    throw new Exception(\"JWT SecretKey is not configured.\");\n//                }\n\n//                var expiry = jwtSettings[\"ExpiryMinutes\"];\n//                if (!int.TryParse(expiry, out var expiryMinutes))\n//                {\n//                    _logger.LogWarning(\"‚ö†Ô∏è JWT ExpiryMinutes is invalid or missing. Defaulting to 60 minutes.\");\n//                    expiryMinutes = 60;\n//                }\n\n//                var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));\n//                var creds = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);\n\n//                var expires = DateTime.UtcNow.AddMinutes(expiryMinutes);\n//                var unixExp = new DateTimeOffset(expires).ToUnixTimeSeconds();\n\n//                var finalClaims = claims.ToList();\n//                finalClaims.Add(new Claim(JwtRegisteredClaimNames.Exp, unixExp.ToString()));\n\n//                var token = new JwtSecurityToken(\n//                    issuer: jwtSettings[\"Issuer\"],\n//                    audience: jwtSettings[\"Audience\"],\n//                    claims: finalClaims,\n//                    expires: expires,\n//                    signingCredentials: creds\n//                );\n\n//                _logger.LogInformation(\"‚úÖ Token generated for: {Email}\", finalClaims.FirstOrDefault(c => c.Type == \"email\")?.Value);\n\n//                return new JwtSecurityTokenHandler().WriteToken(token);\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå Error generating JWT from claims.\");\n//                throw;\n//            }\n//        }\n\n//        public TokenValidationParameters GetValidationParameters()\n//        {\n//            var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n//            return new TokenValidationParameters\n//            {\n//                ValidateIssuer = true,\n//                ValidateAudience = true,\n//                ValidateIssuerSigningKey = true,\n//                ValidateLifetime = true,\n//                RequireSignedTokens = true,\n//                RequireExpirationTime = true,\n//                ValidIssuer = jwtSettings[\"Issuer\"],\n//                ValidAudience = jwtSettings[\"Audience\"],\n//                IssuerSigningKey = new SymmetricSecurityKey(\n//                    Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])\n//                ),\n//                ClockSkew = TimeSpan.Zero,\n//                RoleClaimType = \"role\",   // standardized!\n//                NameClaimType = \"name\"\n//            };\n//        }\n//    }\n//}\n"
    }
  ]
}
