{
  "name": "xbytechat-api",
  "part": 2,
  "of": 6,
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/CTAManagementService.cs",
      "sha256": "a9388986726208c45f05afa2bd4ed3c74b33d7d79eb0e5863b7256e061ba4081",
      "language": "csharp",
      "size": 4621,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Models;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public class CTAManagementService : ICTAManagementService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CTAManagementService(AppDbContext dbContext, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        // üîÑ Get all active CTAs for the current business\n        public async Task<List<CTADefinitionDto>> GetAllAsync()\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            return await _dbContext.CTADefinitions\n                .Where(c => c.IsActive && c.BusinessId == businessId)\n                .Select(c => new CTADefinitionDto\n                {\n                    Id = c.Id,\n                    Title = c.Title,\n                    ButtonText = c.ButtonText,\n                    ButtonType = c.ButtonType,\n                    TargetUrl = c.TargetUrl,\n                    Description = c.Description,\n                    IsActive = c.IsActive\n                }).ToListAsync();\n        }\n\n        // ‚úÖ Add new CTA\n        public async Task<bool> AddAsync(CTADefinitionDto dto)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = new CTADefinition\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Title = dto.Title,\n                ButtonText = dto.ButtonText,\n                ButtonType = dto.ButtonType,\n                TargetUrl = dto.TargetUrl,\n                Description = dto.Description ?? \"\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _dbContext.CTADefinitions.AddAsync(cta);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üìå Get CTA by ID\n        public async Task<CTADefinitionDto?> GetByIdAsync(Guid id)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = await _dbContext.CTADefinitions\n                .FirstOrDefaultAsync(c => c.Id == id && c.IsActive && c.BusinessId == businessId);\n\n            if (cta == null) return null;\n\n            return new CTADefinitionDto\n            {\n                Id = cta.Id,\n                Title = cta.Title,\n                ButtonText = cta.ButtonText,\n                ButtonType = cta.ButtonType,\n                TargetUrl = cta.TargetUrl,\n                Description = cta.Description,\n                IsActive = cta.IsActive\n            };\n        }\n\n\n        // ‚úèÔ∏è Update CTA\n        public async Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to modify this CTA.\");\n\n            cta.Title = dto.Title;\n            cta.ButtonText = dto.ButtonText;\n            cta.ButtonType = dto.ButtonType;\n            cta.TargetUrl = dto.TargetUrl;\n            cta.Description = dto.Description ?? \"\";\n            cta.IsActive = dto.IsActive;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üóëÔ∏è Soft Delete CTA\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to delete this CTA.\");\n\n            cta.IsActive = false;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üîê Reusable method to extract BusinessId\n        private Guid GetBusinessIdFromClaims()\n        {\n            var claim = _httpContextAccessor.HttpContext?.User?.FindFirst(\"businessId\");\n            if (claim == null || string.IsNullOrWhiteSpace(claim.Value) || !Guid.TryParse(claim.Value, out var businessId))\n                throw new UnauthorizedAccessException(\"‚ùå Invalid or missing BusinessId claim.\");\n\n            return businessId;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/ICTAManagementService.cs",
      "sha256": "f05abf40bdd4a593e8c8f8980c288884dc5701a5c9ba29261588816002758bcd",
      "language": "csharp",
      "size": 814,
      "content": "using xbytechat.api.Features.CTAManagement.DTOs;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public interface ICTAManagementService\n    {\n        /// <summary>Returns all active CTAs for the current business.</summary>\n        Task<List<CTADefinitionDto>> GetAllAsync();\n\n        /// <summary>Returns a single CTA by ID (if exists).</summary>\n        Task<CTADefinitionDto?> GetByIdAsync(Guid id);\n\n        /// <summary>Adds a new CTA for the logged-in business.</summary>\n        Task<bool> AddAsync(CTADefinitionDto dto);\n\n        /// <summary>Updates an existing CTA if it belongs to the business.</summary>\n        Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto);\n\n        /// <summary>Soft deletes (deactivates) a CTA entry.</summary>\n        Task<bool> DeleteAsync(Guid id);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Controllers/FeatureAccessController.cs",
      "sha256": "9647f14c41db42003160442c67b7f3a6c51b43423ae7bc44ac9c7fcb9be67772",
      "language": "csharp",
      "size": 14926,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Claims;\nusing xbytechat.api;\nusing FeatureAccessEntity = xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess;\n\n// If your entity namespace is different, adjust this using:\nusing xbytechat.api.Features.FeatureAccessModule.Models;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/feature-access\")]\n    [Authorize]\n    public class FeatureAccessController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public FeatureAccessController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // DTOs to match your frontend shape\n        public class FeatureMeDto\n        {\n            public string featureCode { get; set; } = \"\";\n            public bool isAvailableInPlan { get; set; }\n            public bool? isOverridden { get; set; } // null = not overridden\n        }\n\n        public class BusinessFeatureDto\n        {\n            public string featureName { get; set; } = \"\";\n            public bool isEnabled { get; set; }\n        }\n\n        /// <summary>\n        /// Returns features for the current user, merged from plan + per-business overrides\n        /// Shape: [{ featureCode, isAvailableInPlan, isOverridden }]\n        /// </summary>\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMyFeatureAccess()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true })\n                return Unauthorized();\n\n            var role = (user.FindFirst(\"role\")?.Value ?? user.FindFirst(ClaimTypes.Role)?.Value ?? \"business\").ToLower();\n            var plan = (user.FindFirst(\"plan\")?.Value ?? \"basic\").ToLower();\n\n            Guid businessId = Guid.Empty;\n            _ = Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out businessId);\n\n            // Superadmin: grant all known features\n            if (role == \"superadmin\")\n            {\n                var allNames = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToListAsync();\n\n                var super = allNames.Select(name => new FeatureMeDto\n                {\n                    featureCode = name,\n                    isAvailableInPlan = true,\n                    isOverridden = true\n                });\n\n                return Ok(super);\n            }\n\n            // Load plan-level features (same entity type as DbSet)\n            var planRows = await _db.FeatureAccess\n                .AsNoTracking()\n                .Where(f => f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            // Load business overrides using SAME type; avoid ternary type-mismatch\n            List<FeatureAccessEntity> overrideRows;\n            if (businessId == Guid.Empty)\n            {\n                overrideRows = new();\n            }\n            else\n            {\n                overrideRows = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Where(f => f.BusinessId == businessId)\n                    .ToListAsync();\n            }\n\n            // Build base from plan, then apply overrides\n            var map = new Dictionary<string, FeatureMeDto>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var p in planRows)\n            {\n                if (!map.ContainsKey(p.FeatureName))\n                {\n                    map[p.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = p.FeatureName,\n                        isAvailableInPlan = p.IsEnabled,\n                        isOverridden = null\n                    };\n                }\n                else\n                {\n                    map[p.FeatureName].isAvailableInPlan = p.IsEnabled;\n                }\n            }\n\n            foreach (var o in overrideRows)\n            {\n                if (!map.ContainsKey(o.FeatureName))\n                {\n                    map[o.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = o.FeatureName,\n                        isAvailableInPlan = false,\n                        isOverridden = o.IsEnabled\n                    };\n                }\n                else\n                {\n                    map[o.FeatureName].isOverridden = o.IsEnabled;\n                }\n            }\n\n            return Ok(map.Values.ToArray());\n        }\n\n        /// <summary>\n        /// Returns all features for a business (used by useAllFeatureAccess/useFeatureAccess hooks)\n        /// Shape: [{ featureName, isEnabled }]\n        /// </summary>\n        [HttpGet(\"business/{businessId:guid}\")]\n        public async Task<IActionResult> GetBusinessFeatureAccess([FromRoute] Guid businessId)\n        {\n            // (Optional) enforce tenant isolation:\n            // var currentBiz = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            // if (!Guid.TryParse(currentBiz, out var bizFromToken) || bizFromToken != businessId)\n            //     return Forbid();\n\n            var rows = await _db.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new BusinessFeatureDto\n                {\n                    featureName = f.FeatureName,\n                    isEnabled = f.IsEnabled\n                })\n                .ToListAsync();\n\n            return Ok(rows);\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Serilog;\n//using xbytechat.api.Features.FeatureAccess.DTOs;\n//using xbytechat.api.Features.FeatureAccessModule.DTOs;\n//using xbytechat.api.Features.FeatureAccessModule.Services;\n//using xbytechat.api.Shared;\n//using System;\n\n//namespace xbytechat.api.Features.FeatureAccessModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/feature-access\")]\n//    public class FeatureAccessController : ControllerBase\n//    {\n//        private readonly IFeatureAccessService _featureAccessService;\n//        private readonly IFeatureAccessEvaluator _accessEvaluator;\n//        private readonly ILogger<FeatureAccessController> _logger;\n\n//        public FeatureAccessController(\n//            IFeatureAccessService featureAccessService,\n//            IFeatureAccessEvaluator accessEvaluator,\n//            ILogger<FeatureAccessController> logger)\n//        {\n//            _featureAccessService = featureAccessService;\n//            _accessEvaluator = accessEvaluator;\n//            _logger = logger;\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpGet]\n//        public async Task<ActionResult<IEnumerable<FeatureAccessDto>>> GetAll()\n//        {\n//            var result = await _featureAccessService.GetAllAsync();\n//            return Ok(result);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpGet(\"business/{businessId}\")]\n//        public async Task<ActionResult<IEnumerable<FeatureAccessDto>>> GetByBusinessId(Guid businessId)\n//        {\n//            var result = await _featureAccessService.GetByBusinessIdAsync(businessId);\n//            return Ok(result);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpGet(\"{id}\")]\n//        public async Task<ActionResult<FeatureAccessDto>> Get(Guid id)\n//        {\n//            var item = await _featureAccessService.GetAsync(id);\n//            return item == null ? NotFound() : Ok(item);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpPost]\n//        public async Task<ActionResult<FeatureAccessDto>> Create(FeatureAccessDto dto)\n//        {\n//            var created = await _featureAccessService.CreateAsync(dto);\n//            return CreatedAtAction(nameof(Get), new { id = created.Id }, created);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpPut(\"{id}\")]\n//        public async Task<ActionResult<FeatureAccessDto>> Update(Guid id, FeatureAccessDto dto)\n//        {\n//            var updated = await _featureAccessService.UpdateAsync(id, dto);\n//            return Ok(updated);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpDelete(\"{id}\")]\n//        public async Task<IActionResult> Delete(Guid id)\n//        {\n//            var success = await _featureAccessService.DeleteAsync(id);\n//            return success ? NoContent() : NotFound();\n//        }\n\n//        // ‚úÖ Unified endpoint for both SuperAdmin and Business users\n//        // Accepts businessId as optional (route or query)\n//        [Authorize]\n//        [HttpGet(\"available/{businessId?}\")]\n//        public async Task<ActionResult<Dictionary<string, bool>>> GetAvailableFeatures(string businessId = null)\n//        {\n//            try\n//            {\n//                var role = User.FindFirst(\"role\")?.Value?.ToLowerInvariant() ?? \"\";\n//                var result = new Dictionary<string, bool>();\n//                var allFeatures = new[] { \"CRM\", \"Campaigns\", \"Catalog\", \"CatalogInsights\", \"AdminPanel\", \"FlowBuilder\", \"Messaging\", \"FlowInsights\", \"CTAFlow\", \"CRMInsights\" };\n\n//                _logger.LogInformation(\"üîç Feature access check - Role: {Role}, BusinessId: {BusinessId}\", role, businessId);\n\n//                // ‚úÖ Superadmin: Full access to all features\n//                if (role == \"superadmin\")\n//                {\n//                    foreach (var feature in allFeatures)\n//                        result[feature] = true;\n\n//                    _logger.LogInformation(\"Superadmin detected. All features enabled.\");\n//                    return Ok(result);\n//                }\n\n//                // ‚úÖ Business: Must have valid businessId, else 400\n//                if (role == \"business\")\n//                {\n//                    if (string.IsNullOrWhiteSpace(businessId) || !Guid.TryParse(businessId, out var parsedBusinessId))\n//                    {\n//                        _logger.LogWarning(\"Feature access attempted with missing or invalid businessId by business user.\");\n//                        return BadRequest(\"Valid businessId is required for business users.\");\n//                    }\n\n//                    foreach (var feature in allFeatures)\n//                    {\n//                        bool isAllowed = await _accessEvaluator.CanUseAsync(parsedBusinessId, feature);\n//                        result[feature] = isAllowed;\n//                    }\n\n//                    _logger.LogInformation(\"Feature set calculated for businessId={BusinessId}\", businessId);\n//                    return Ok(result);\n//                }\n\n//                // ‚ùå Unknown/unsupported role\n//                _logger.LogWarning(\"Access attempt with unsupported role: {Role}\", role);\n//                return Forbid(\"Role not permitted.\");\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"üî• Error in GetAvailableFeatures for businessId={BusinessId}\", businessId);\n//                return StatusCode(500, \"Feature access calculation failed.\");\n//            }\n//        }\n\n//        [Authorize]\n//        [HttpGet(\"feature-toggle-view\")]\n//        public async Task<IActionResult> GetToggleView()\n//        {\n//            try\n//            {\n//                Guid businessId;\n//                try\n//                {\n//                    businessId = User.GetBusinessId();\n//                }\n//                catch (UnauthorizedAccessException ex)\n//                {\n//                    return Unauthorized(ex.Message);\n//                }\n\n//                var plan = User.FindFirst(\"plan\")?.Value ?? \"\";\n//                var features = await _featureAccessService.GetToggleViewAsync(businessId, plan);\n\n//                return Ok(new\n//                {\n//                    success = true,\n//                    data = features\n//                });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"üî• Error in GetToggleView\");\n//                return StatusCode(500, \"Failed to fetch feature toggle view.\");\n//            }\n//        }\n\n//        [Authorize]\n//        [HttpPatch(\"{featureCode}\")]\n//        public async Task<IActionResult> ToggleFeatureAccess(string featureCode, [FromBody] FeatureTogglePatchDto dto)\n//        {\n//            try\n//            {\n//                var businessId = User.GetBusinessId();\n//                await _featureAccessService.ToggleFeatureAsync(businessId, featureCode, dto.IsEnabled);\n//                return Ok(new { success = true });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"üî• Error toggling feature access for code={FeatureCode}\", featureCode);\n//                return StatusCode(500, \"Failed to toggle feature.\");\n//            }\n//        }\n\n//        [Authorize]\n//        [HttpGet(\"user-permissions\")]\n//        public async Task<IActionResult> GetAllUserPermissions()\n//        {\n//            try\n//            {\n//                var businessId = User.GetBusinessId();\n//                var users = await _featureAccessService.GetAllUserPermissionsAsync(businessId);\n//                return Ok(new { success = true, data = users });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"üî• Error fetching user permissions\");\n//                return StatusCode(500, \"Failed to fetch user permissions.\");\n//            }\n//        }\n\n//        // ‚úÖ Used by frontend guards like <FeatureGuard>\n//        [Authorize]\n//        [HttpGet(\"me\")]\n//        public async Task<ActionResult<List<FeatureStatusDto>>> GetMyFeatures()\n//        {\n//            try\n//            {\n//                //var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n//                //if (!Guid.TryParse(businessIdStr, out var businessId))\n//                //    return Unauthorized(\"BusinessId not found\");\n//                var businessIdStr = User.Claims.FirstOrDefault(c => c.Type.Equals(\"businessId\", StringComparison.OrdinalIgnoreCase))?.Value;\n//                if (!Guid.TryParse(businessIdStr, out var businessId))\n//                {\n//                    return Unauthorized();\n//                }\n\n//                var features = await _featureAccessService.GetFeaturesForCurrentUserAsync(businessId);\n//                foreach (var claim in User.Claims)\n//                {\n//                    Console.WriteLine($\"[{claim.Type}] = {claim.Value}\");\n//                }\n\n//                return Ok(features);\n\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"üî• Error fetching current user's features\");\n//                return StatusCode(500, \"Failed to fetch features.\");\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureAccessDto.cs",
      "sha256": "c418561ae9075f32902a032190e2252c7eab385bbdf1028ddd5748f0190df6de",
      "language": "csharp",
      "size": 409,
      "content": "using System;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string FeatureName { get; set; } = string.Empty;\n\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs",
      "sha256": "958bb8308ae62a666fd659a66327d6b5cb0a7a66659e4048df206994ea3e9aec",
      "language": "csharp",
      "size": 360,
      "content": "// üìÑ Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureMetadataDto\n    {\n        public string FeatureCode { get; set; } = string.Empty;\n        public string Group { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureStatusDto.cs",
      "sha256": "36dfe2add0ad58f4e5f9e0d572e43bf68a42cc95b17f5654cacb1e7596e9715a",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.FeatureAccess.DTOs;\n\npublic class FeatureStatusDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public bool IsAvailableInPlan { get; set; }\n    public bool? IsOverridden { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureTogglePatchDto.cs",
      "sha256": "4663d2df320001525fb2b9ff9847b149f77677557a22efbaa7c455ed8ac3c483",
      "language": "csharp",
      "size": 157,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureTogglePatchDto\n    {\n        public bool IsEnabled { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureToggleViewDto.cs",
      "sha256": "cc966666d4e050d9d16f7bab7d10f8c059305fc24a84ea7bd2642eb9a4375e8b",
      "language": "csharp",
      "size": 423,
      "content": "public class FeatureToggleViewDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public string Group { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n\n    public bool IsAvailableInPlan { get; set; }     // From PlanManager\n    public bool? IsOverridden { get; set; }         // null if no override\n    public bool IsActive => IsOverridden ?? IsAvailableInPlan;\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/UserFeatureAccessDto.cs",
      "sha256": "24a59738ee2f1924903a6e14ecf5ed5a1ce6cbb0269b34013438b37502c2efa9",
      "language": "csharp",
      "size": 520,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class UserFeatureAccessDto\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Role { get; set; } = \"\";\n        public List<FeaturePermissionDto> Permissions { get; set; } = new();\n    }\n\n    public class FeaturePermissionDto\n    {\n        public string FeatureName { get; set; } = \"\";\n        public bool IsEnabled { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureAccess.cs",
      "sha256": "53331121064e4c1559420eb6de1770eb6788b85b404505420f11d5c0bb6b8fe6",
      "language": "csharp",
      "size": 975,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureAccess\")]\n    public class FeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } // e.g. \"CRM\", \"Campaigns\", \"Catalog\"\n        [MaxLength(200)]\n        public string Description { get; set; } = string.Empty;\n        [Required]\n        public bool IsEnabled { get; set; } // ‚úÖ true = allow, false = restrict\n\n        public string? Notes { get; set; } // Optional: reason or context\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty;\n        public string? Plan { get; set; } // e.g. \"basic\", \"smart\", \"advanced\"\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureMaster.cs",
      "sha256": "dcf5048b433abe18e2d52542d30fd81664a62f97176fe4ae583ce8218dfb002c",
      "language": "csharp",
      "size": 853,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureMaster\")]\n    public class FeatureMaster\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FeatureCode { get; set; } = string.Empty; // e.g. \"crm\", \"catalog\"\n\n        [Required]\n        [MaxLength(100)]\n        public string DisplayName { get; set; } = string.Empty; // e.g. \"CRM\", \"Catalog\"\n\n        [MaxLength(250)]\n        public string Description { get; set; } = string.Empty;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty; // Optional grouping like \"CRM\", \"Messaging\"\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/UserFeatureAccess.cs",
      "sha256": "894b0a6020dffcbe46247fd5412ef98ab890a641144d089aa7c9c7aa351d0f9b",
      "language": "csharp",
      "size": 778,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"UserFeatureAccess\")]\n    public class UserFeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        [Required]\n        public Guid UserId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty;\n\n        [Required]\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public Guid? ModifiedByUserId { get; set; }  // Who applied this override\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessEvaluator.cs",
      "sha256": "b7ad7ecdc58db9f75f5793f8fb207db8b7127f878b4d51a7144c6a71e1c2dd48",
      "language": "csharp",
      "size": 1566,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessEvaluator : IFeatureAccessEvaluator\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<FeatureAccessEvaluator> _logger;\n\n        public FeatureAccessEvaluator(AppDbContext db, ILogger<FeatureAccessEvaluator> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<bool> CanUseAsync(Guid businessId, string featureCode, Guid? userId)\n        {\n            var business = await _db.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.BusinessPlanInfo == null)\n                return false;\n\n            var planEnum = business.BusinessPlanInfo.Plan;\n            var planName = Enum.GetName(typeof(PlanType), planEnum)?.ToLower();\n\n            var planFeatures = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase)\n            {\n                [\"crm\"] = planName == \"smart\" || planName == \"advanced\",\n                [\"campaigns\"] = planName == \"advanced\",\n                [\"catalog\"] = true,\n                [\"automation\"] = planName == \"smart\" || planName == \"advanced\"\n            };\n\n            return planFeatures.TryGetValue(featureCode.ToLower(), out var allowed) && allowed;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessService.cs",
      "sha256": "7968f3a0ef26fa05305fef477338950b8cb824aea9785d56b5d500ef3c376921",
      "language": "csharp",
      "size": 9158,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Services;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessService : IFeatureAccessService\n    {\n        private readonly AppDbContext _context;\n        private readonly IPlanManager _planManager;\n        private readonly ILogger<FeatureAccessService> _logger;\n\n        public FeatureAccessService(AppDbContext context, IPlanManager planManager, ILogger<FeatureAccessService> logger)\n        {\n            _context = context;\n            _planManager = planManager;\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetAllAsync()\n        {\n            return await _context.FeatureAccess\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<FeatureAccessDto?> GetAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return null;\n\n            return new FeatureAccessDto\n            {\n                Id = entity.Id,\n                BusinessId = entity.BusinessId,\n                FeatureName = entity.FeatureName,\n                IsEnabled = entity.IsEnabled,\n                Notes = entity.Notes,\n                CreatedAt = entity.CreatedAt\n            };\n        }\n\n        public async Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto)\n        {\n            var entity = new  xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                FeatureName = dto.FeatureName,\n                IsEnabled = dto.IsEnabled,\n                Notes = dto.Notes,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FeatureAccess.Add(entity);\n            await _context.SaveChangesAsync();\n\n            dto.Id = entity.Id;\n            dto.CreatedAt = entity.CreatedAt;\n            return dto;\n        }\n\n        public async Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null)\n                throw new Exception(\"FeatureAccess not found\");\n\n            entity.FeatureName = dto.FeatureName;\n            entity.IsEnabled = dto.IsEnabled;\n            entity.Notes = dto.Notes;\n\n            await _context.SaveChangesAsync();\n\n            return dto;\n        }\n\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return false;\n\n            _context.FeatureAccess.Remove(entity);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan)\n        {\n            var allFeatures = await _context.FeatureAccess.ToListAsync();\n\n            var planAccessMap = _planManager.GetPlanFeatureMap(plan); // e.g., Dictionary<string, bool>\n\n            var userOverrides = await _context.UserFeatureAccess\n                .Where(x => x.BusinessId == businessId)\n                .ToDictionaryAsync(x => x.FeatureName, x => x.IsEnabled);\n\n            var result = allFeatures.Select(f => new FeatureToggleViewDto\n            {\n                FeatureCode = f.FeatureName,\n                Group = f.Group,\n                Description = f.Description,\n                IsAvailableInPlan = planAccessMap.ContainsKey(f.FeatureName),\n                IsOverridden = userOverrides.TryGetValue(f.FeatureName, out var val) ? val : null\n            }).ToList();\n\n            return result;\n        }\n\n        public async Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled)\n        {\n            try\n            {\n                var existing = await _context.UserFeatureAccess\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.FeatureName == featureCode);\n\n                if (existing != null)\n                {\n                    existing.IsEnabled = isEnabled;\n                    _context.UserFeatureAccess.Update(existing);\n                }\n                else\n                {\n                    var newAccess = new UserFeatureAccess\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FeatureName = featureCode,\n                        IsEnabled = isEnabled,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    await _context.UserFeatureAccess.AddAsync(newAccess);\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to toggle feature {FeatureCode} for business {BusinessId}\", featureCode, businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId)\n        {\n            var business = await _context.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n            {\n                _logger.LogError(\"‚ùå Business not found for feature access: {BusinessId}\", businessId);\n                return new List<FeatureStatusDto>();\n            }\n\n            var planName = business.BusinessPlanInfo?.Plan.ToString() ?? \"basic\"; // Fallback to basic\n            _logger.LogInformation(\"üì¶ Resolved plan for Business {BusinessId}: {Plan}\", businessId, planName);\n\n            var planFeatureMap = _planManager.GetPlanFeatureMap(planName);\n\n            var overrides = await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName, f => (bool?)f.IsEnabled);\n            foreach (var kv in overrides)\n                _logger.LogInformation($\"üîß Feature override: {kv.Key} = {kv.Value}\");\n            var allFeatures = planFeatureMap.Keys\n                .Union(overrides.Keys)\n                .Distinct();\n\n            return allFeatures.Select(f => new FeatureStatusDto\n            {\n                FeatureCode = f,\n                IsAvailableInPlan = planFeatureMap.ContainsKey(f),\n                IsOverridden = overrides.ContainsKey(f) ? overrides[f] : null\n            }).ToList();\n        }\n\n        public async Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId)\n        {\n            var users = await _context.Users\n             .Where(u => u.BusinessId == businessId)\n             .Select(u => new UserFeatureAccessDto\n             {\n                 Id = u.Id,\n                 FullName = u.Name, // ‚úÖ Fixed\n                 Email = u.Email,\n                 Role = u.Role.Name, // ‚úÖ Assuming you want role name string\n                 Permissions = _context.UserFeatureAccess\n                     .Where(p => p.BusinessId == businessId && p.UserId == u.Id)\n                     .Select(p => new FeaturePermissionDto\n                     {\n                         FeatureName = p.FeatureName,\n                         IsEnabled = p.IsEnabled\n                     })\n                     .ToList()\n             }).ToListAsync();\n\n\n            return users;\n        }\n        public async Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName.ToLower(), f => f.IsEnabled);\n        }\n        public async Task<Dictionary<string, bool>> GetAllFeatureCodesAsync()\n        {\n            return await _context.FeatureMasters\n                .Select(f => f.FeatureCode.ToLower())\n                .Distinct()\n                .ToDictionaryAsync(k => k, v => true);\n        }\n\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessEvaluator.cs",
      "sha256": "88c0088b68d4137df4f0a836e48d8eb52d62af12950c913661d78b31e6c5afec",
      "language": "csharp",
      "size": 330,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessEvaluator\n    {\n        //Task<bool> CanUseAsync(Guid businessId, string featureName);\n        Task<bool> CanUseAsync(Guid businessId, string featureName, Guid? userId = null);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessService.cs",
      "sha256": "6b328b62d7d5356015dc30688fa072e890cac87e55a5c8a12b1e605b05a744f3",
      "language": "csharp",
      "size": 1183,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessService\n    {\n        Task<IEnumerable<FeatureAccessDto>> GetAllAsync();\n        Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId);\n        Task<FeatureAccessDto?> GetAsync(Guid id);\n        Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto);\n        Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto);\n        Task<bool> DeleteAsync(Guid id);\n\n        Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan);\n        Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled);\n        Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId);\n        Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetAllFeatureCodesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Controllers/FlowAnalyticsController.cs",
      "sha256": "18a260235767524c70c33a6a49f8929060e94415ee98ff743590d207242020e3",
      "language": "csharp",
      "size": 2196,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.FlowAnalytics.Services;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Controllers\n{\n    [ApiController]\n    [Route(\"api/flow-analytics\")]\n    public class FlowAnalyticsController : ControllerBase\n    {\n        private readonly IFlowAnalyticsService _analyticsService;\n\n        public FlowAnalyticsController(IFlowAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        // ‚úÖ GET /api/flow-analytics/summary\n        [HttpGet(\"summary\")]\n        [Authorize]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var result = await _analyticsService.GetAnalyticsSummaryAsync(businessId);\n            return Ok(result);\n        }\n\n        // ‚úÖ GET /api/flow-analytics/most-triggered-steps\n        [HttpGet(\"most-triggered-steps\")]\n        [Authorize]\n        public async Task<IActionResult> GetMostTriggeredSteps()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var data = await _analyticsService.GetMostTriggeredStepsAsync(businessId);\n            return Ok(data);\n        }\n\n        // ‚úÖ GET /api/flow-analytics/step-journey-breakdown?startDate=...&endDate=...\n        [HttpGet(\"step-journey-breakdown\")]\n        [Authorize]\n        public async Task<IActionResult> GetStepJourneyBreakdown([FromQuery] DateTime? startDate, [FromQuery] DateTime? endDate)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var data = await _analyticsService.GetStepJourneyBreakdownAsync(businessId, startDate, endDate);\n            return Ok(data);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsStepJourneyDto.cs",
      "sha256": "25c17b6d295eb4faf667e982e2878b32a18af8a759791962286f17eec9163f6f",
      "language": "csharp",
      "size": 889,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsStepJourneyDto\n    {\n        public Guid StepId { get; set; }\n\n        public string TemplateName { get; set; } = string.Empty;\n\n        public int TotalReached { get; set; }\n\n        public int ClickedNext { get; set; }\n\n        public Guid? NextStepId { get; set; }\n\n        // ‚úÖ Auto-calculated: number of users who dropped off at this step\n        public int DropOff => TotalReached - ClickedNext;\n\n        // ‚úÖ Auto-calculated: percentage of users who clicked \"next\"\n        public double ConversionRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)ClickedNext / TotalReached * 100, 2);\n\n        // ‚úÖ Optional: percentage of users who dropped off\n        public double DropOffRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)DropOff / TotalReached * 100, 2);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsSummaryDto.cs",
      "sha256": "5298f0c920ce53f68b8113de057d804750e1a3afd39d3a24e965ae120275118a",
      "language": "csharp",
      "size": 369,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsSummaryDto\n    {\n        public int TotalExecutions { get; set; }\n        public int UniqueContacts { get; set; }\n        public string TopStepTriggered { get; set; } = \"N/A\";\n        public int TopStepCount { get; set; }\n        public DateTime? LastExecutedAt { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowStepAnalyticsDto.cs",
      "sha256": "538b4b71cb5a0a82ee36ec0147c0014d4f6570b635eb2ce711cb7e8de3119a09",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowStepAnalyticsDto\n    {\n        public Guid StepId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public int TotalReached { get; set; }\n        public int ClickedNext { get; set; }\n        public int DropOff => TotalReached - ClickedNext;\n        public Guid? NextStepId { get; set; }\n        public DateTime ExecutedAtUtc { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/MostTriggeredStepDto.cs",
      "sha256": "18dc2f8497fae7508358e8556503db073d057061d1892fed2882208fa6653588",
      "language": "csharp",
      "size": 310,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class MostTriggeredStepDto\n    {\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n        public int TriggerCount { get; set; }\n        public DateTime? LastTriggeredAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/FlowAnalyticsService.cs",
      "sha256": "b832767451b9f0161f931082a45a698407bf4cfaa6c5077edef8a2f6d30385cb",
      "language": "csharp",
      "size": 5128,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public class FlowAnalyticsService : IFlowAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public FlowAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ‚úÖ Summary cards (executions, unique contacts, top step)\n        public async Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId)\n        {\n            try\n            {\n                Log.Information(\"üìä Generating Flow Analytics Summary for BusinessId: {BusinessId}\", businessId);\n\n                var recentExecutions = await _context.FlowExecutionLogs\n                    .Where(e => e.BusinessId == businessId)\n                    .ToListAsync();\n\n                var totalExecutions = recentExecutions.Count;\n                var uniqueContacts = recentExecutions.Select(e => e.ContactPhone).Distinct().Count();\n                var mostTriggeredStep = recentExecutions\n                    .GroupBy(e => e.StepName)\n                    .OrderByDescending(g => g.Count())\n                    .Select(g => new { Step = g.Key, Count = g.Count() })\n                    .FirstOrDefault();\n\n                return new FlowAnalyticsSummaryDto\n                {\n                    TotalExecutions = totalExecutions,\n                    UniqueContacts = uniqueContacts,\n                    TopStepTriggered = mostTriggeredStep?.Step ?? \"N/A\",\n                    TopStepCount = mostTriggeredStep?.Count ?? 0,\n                    LastExecutedAt = recentExecutions\n                        .OrderByDescending(e => e.ExecutedAt)\n                        .FirstOrDefault()?.ExecutedAt\n                };\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to generate flow analytics summary\");\n                return new FlowAnalyticsSummaryDto();\n            }\n        }\n\n        // ‚úÖ Top triggered steps leaderboard\n        public async Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId)\n        {\n            return await _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId)\n                .GroupBy(e => new { e.StepId, e.StepName })\n                .Select(g => new MostTriggeredStepDto\n                {\n                    StepId = g.Key.StepId,\n                    StepName = g.Key.StepName,\n                    TriggerCount = g.Count(),\n                    LastTriggeredAt = g.Max(e => e.ExecutedAt)\n                })\n                .OrderByDescending(x => x.TriggerCount)\n                .Take(5)\n                .ToListAsync();\n        }\n\n        // ‚úÖ Step-by-step journey breakdown (with date filter)\n        public async Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate)\n        {\n            var query = _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId);\n\n            if (startDate.HasValue)\n                query = query.Where(e => e.ExecutedAt >= startDate.Value.Date);\n\n            if (endDate.HasValue)\n                query = query.Where(e => e.ExecutedAt <= endDate.Value.Date.AddDays(1).AddTicks(-1));\n\n            var logs = await query.ToListAsync();\n\n            // Group by StepId\n            var grouped = logs\n                .GroupBy(e => new { e.StepId, e.TemplateName, e.TriggeredByButton, e.FlowId })\n                .Select(g => new\n                {\n                    StepId = g.Key.StepId,\n                    TemplateName = g.Key.TemplateName,\n                    TotalReached = g.Count(),\n                    ClickedNext = logs.Count(x =>\n                        x.TriggeredByButton != null &&\n                        x.FlowId == g.Key.FlowId &&\n                        x.StepId != g.Key.StepId &&\n                        x.TriggeredByButton == g.Key.TriggeredByButton\n                    ),\n                    FlowId = g.Key.FlowId,\n                    TriggeredByButton = g.Key.TriggeredByButton\n                })\n                .ToList();\n\n            // Build final breakdown\n            var breakdown = grouped.Select(g => new FlowAnalyticsStepJourneyDto\n            {\n                StepId = g.StepId,\n                TemplateName = g.TemplateName,\n                TotalReached = g.TotalReached,\n                ClickedNext = g.ClickedNext,\n              //  DropOff = g.TotalReached - g.ClickedNext,\n                NextStepId = _context.FlowButtonLinks\n                    .Where(bl =>\n                        bl.CTAFlowStepId == g.StepId &&\n                        bl.ButtonText == g.TriggeredByButton)\n                    .Select(bl => bl.NextStepId)\n                    .FirstOrDefault()\n            }).ToList();\n\n            return breakdown;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/IFlowAnalyticsService.cs",
      "sha256": "65a623c78188e9581eee608e1e5e53404f8431fb317139d50a4caadd86b074ae",
      "language": "csharp",
      "size": 512,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public interface IFlowAnalyticsService\n    {\n        Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId);\n        Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId);\n        Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Controllers/InboxController.cs",
      "sha256": "309176361f2834ed7c983d99dc96ebb6b7298e35e99a528c40c981257176063a",
      "language": "csharp",
      "size": 3890,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.AspNetCore.Authorization;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Controllers\n{\n    [ApiController]\n    [Route(\"api/inbox\")]\n    public class InboxController : ControllerBase\n    {\n        private readonly IInboxService _inboxService;\n\n        public InboxController(IInboxService inboxService)\n        {\n            _inboxService = inboxService;\n        }\n\n        /// <summary>\n        /// Send a new message from UI or system.\n        /// </summary>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Message content is required.\");\n\n            var result = await _inboxService.SaveOutgoingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Receive a message from external source (e.g., WhatsApp webhook).\n        /// </summary>\n        [HttpPost(\"receive\")]\n        public async Task<IActionResult> ReceiveMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Incoming message content is required.\");\n\n            var result = await _inboxService.SaveIncomingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Fetch message history between agent and customer using business token + contactId.\n        /// </summary>\n        [HttpGet(\"messages\")]\n        public async Task<IActionResult> GetMessagesByContact([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            var messages = await _inboxService.GetMessagesByContactAsync(businessId, contactId);\n            return Ok(messages);\n        }\n\n        /// <summary>\n        /// Fetch full conversation between agent (userPhone) and customer (contactPhone).\n        /// </summary>\n        [HttpGet(\"conversation\")]\n        public async Task<IActionResult> GetConversation(\n            [FromQuery] Guid businessId,\n            [FromQuery] string userPhone,\n            [FromQuery] string contactPhone)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(userPhone) || string.IsNullOrWhiteSpace(contactPhone))\n                return BadRequest(\"Invalid input.\");\n\n            var messages = await _inboxService.GetConversationAsync(businessId, userPhone, contactPhone);\n            return Ok(messages);\n        }\n\n        //[HttpGet(\"unread-counts\")]\n        //public async Task<IActionResult> GetUnreadCounts()\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    var counts = await _inboxService.GetUnreadMessageCountsAsync(businessId);\n        //    return Ok(counts);\n        //}\n\n        [HttpPost(\"mark-read\")]\n        public async Task<IActionResult> MarkMessagesAsRead([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            await _inboxService.MarkMessagesAsReadAsync(businessId, contactId);\n            return Ok();\n        }\n        [HttpGet(\"unread-counts\")]\n        public async Task<IActionResult> GetUnreadCounts()\n        {\n            var userId = User.GetUserId();\n            var businessId = User.GetBusinessId();\n\n            var counts = await _inboxService.GetUnreadCountsForUserAsync(businessId, userId);\n            return Ok(counts);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/InboxMessageDto.cs",
      "sha256": "aef9beda43a0dc4f1c619514c3289f6c68a6daf10fe5cdd46ad13c474be29c0b",
      "language": "csharp",
      "size": 881,
      "content": "// üìÑ File: Features/Inbox/DTOs/InboxMessageDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class InboxMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientPhone { get; set; }\n        public string MessageBody { get; set; }\n        public Guid? ContactId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }       // üÜï To show in chat bubble\n        public string? RenderedBody { get; set; }\n\n        public bool IsIncoming { get; set; }            // üÜï Needed for bubble side\n        public string Status { get; set; }              // üÜï For message ticks\n        public DateTime SentAt { get; set; }            // üÜï For timestamp\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/SendInboxMessageDto.cs",
      "sha256": "1ad0e0e61748e9f9e1fab32e1fe533c57a6c8d586694e55aa5b531359804de90",
      "language": "csharp",
      "size": 462,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    /// <summary>\n    /// DTO sent from frontend when a user sends a new message.\n    /// </summary>\n    public class SendInboxMessageDto\n    {\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public string MessageBody { get; set; }\n\n        public string? MediaUrl { get; set; } // Optional image or file\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/SendMessageInputDto.cs",
      "sha256": "3c76bd2b5ce839064134b72aa2114c14c73a98109c680671f5e7c463867f221a",
      "language": "csharp",
      "size": 249,
      "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class SendMessageInputDto\n    {\n        public Guid ContactId { get; set; } // üîÅ REMOVE the \"?\" (nullable) unless needed\n        public string Message { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/TextOnlyMessageSendDto.cs",
      "sha256": "2d322145a5e6410decb150b108c7d74a656201d9be027b99b02d1c261b4ed4fc",
      "language": "csharp",
      "size": 247,
      "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class TextOnlyMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Hubs/InboxHub.cs",
      "sha256": "2457d506ef6f58ed908e2183358c0506f59e9404b1d8fdb8ae97553d266a5206",
      "language": "csharp",
      "size": 6309,
      "content": "// üìÑ xbytechat.api/Features/Inbox/InboxHub.cs\n\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Hubs\n{\n    [Authorize]\n    public class InboxHub : Hub\n    {\n        private readonly AppDbContext _db;\n        private readonly IMessageEngineService _messageService;\n\n        public InboxHub(AppDbContext db, IMessageEngineService messageService)\n        {\n            _db = db;\n            _messageService = messageService;\n        }\n\n        public override async Task OnConnectedAsync()\n        {\n            var businessId = Context.User.GetBusinessId();\n            var groupName = $\"business_{businessId}\";\n\n            await Groups.AddToGroupAsync(Context.ConnectionId, groupName);\n            Console.WriteLine($\"‚úÖ Connected to group: {groupName}\");\n\n            await base.OnConnectedAsync();\n        }\n\n        public async Task SendMessageToContact(SendMessageInputDto dto)\n        {\n            Console.WriteLine(\"üì© Raw DTO payload:\");\n            Console.WriteLine($\"ContactId: {dto.ContactId}, Message: {dto.Message}\");\n\n            if (dto.ContactId == null || string.IsNullOrWhiteSpace(dto.Message))\n            {\n                Console.WriteLine(\"‚ùå Invalid contact or empty message.\");\n                return;\n            }\n\n            var businessId = Context.User.GetBusinessId();\n            var userId = Context.User.GetUserId();\n\n            // ‚úÖ Lookup recipient phone number from Contact table\n            var contact = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.Id == dto.ContactId)\n                .FirstOrDefaultAsync();\n\n            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n            {\n                Console.WriteLine($\"‚ùå Contact not found or missing phone number. ContactId: {dto.ContactId}\");\n                await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", new\n                {\n                    contactId = dto.ContactId,\n                    message = dto.Message,\n                    from = userId,\n                    status = \"Failed\",\n                    error = \"Invalid contact\"\n                   \n                });\n                return;\n            }\n\n            // ‚úÖ Prepare DTO for WhatsApp sending\n            var sendDto = new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                RecipientNumber = contact.PhoneNumber,\n                TextContent = dto.Message\n            };\n\n            // üöÄ Send via WhatsApp API and save to MessageLogs\n            var result = await _messageService.SendTextDirectAsync(sendDto);\n\n            // ‚úÖ Construct unified message payload\n            var inboxMessage = new\n            {\n                contactId = dto.ContactId,\n                message = dto.Message,\n                from = userId,\n                status = result.Success ? \"Sent\" : \"Failed\",\n                sentAt = DateTime.UtcNow,\n                logId = result.LogId,\n                senderId = userId,\n                isIncoming = false\n            };\n\n            // ‚úÖ Notify sender only\n            await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n\n            // ‚úÖ Notify others in group (for unread update)\n            var groupName = $\"business_{businessId}\";\n            await Clients.GroupExcept(groupName, Context.ConnectionId)\n                .SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n        }\n\n   \n        public async Task MarkAsRead(Guid contactId)\n        {\n            Console.WriteLine($\"üü¢ MarkAsRead triggered for ContactId: {contactId}\");\n            var userId = Context.User?.GetUserId();\n            var businessId = Context.User?.GetBusinessId();\n\n            if (userId == null || businessId == null || businessId == Guid.Empty)\n                return;\n\n            var userGuid = userId.Value;\n            var businessGuid = businessId.Value;\n            var now = DateTime.UtcNow;\n\n            // ‚úÖ Insert or Update ContactRead\n            var readEntry = await _db.ContactReads\n                .FirstOrDefaultAsync(r => r.ContactId == contactId && r.UserId == userGuid);\n\n            if (readEntry == null)\n            {\n                Console.WriteLine(\"üì• New ContactRead will be added.\");\n                _db.ContactReads.Add(new ContactRead\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessGuid,\n                    ContactId = contactId,\n                    UserId = userGuid,\n                    LastReadAt = now\n                });\n            }\n            else\n            {\n                Console.WriteLine($\"üîÑ Updating LastReadAt for contact {contactId}\");\n                readEntry.LastReadAt = now;\n            }\n\n            await _db.SaveChangesAsync();\n            Console.WriteLine(\"üíæ ContactReads saved successfully.\");\n            // ‚úÖ Step 1: Get message logs (DB)\n            var allMessages = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessGuid && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // ‚úÖ Step 2: Get contactReads (DB)\n            var contactReads = await _db.ContactReads\n                .Where(r => r.UserId == userGuid)\n                .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // ‚úÖ Step 3: Now calculate unread counts in-memory (C# LINQ)\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n            // ‚úÖ Push real-time update to user\n            await Clients.User(userGuid.ToString())\n                .SendAsync(\"UnreadCountChanged\", unreadCounts);\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/ChatSessionState.cs",
      "sha256": "fa6184f30e1715455ee5b84ae75264c5cc2d46ed4f1721014141ed9036dfda64",
      "language": "csharp",
      "size": 500,
      "content": "namespace xbytechat.api.Features.Inbox.Models\n{\n    public class ChatSessionState\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string Mode { get; set; } = \"automation\"; // values: \"automation\" | \"agent\"\n        public DateTime LastUpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Optional: track who switched the mode\n        public string? UpdatedBy { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/ContactRead.cs",
      "sha256": "aa4dd9980bc6485cf1c4981bf7dfff84f32dcfbacc6c9dbc3be4ba0429c065c6",
      "language": "csharp",
      "size": 474,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Inbox.Models\n{\n    public class ContactRead\n    {\n        public Guid Id { get; set; }\n\n        // üîó FK to Contact\n        public Guid ContactId { get; set; }\n\n        // üîó FK to User (Agent)\n        public Guid UserId { get; set; }\n\n        // üìÖ Last time this agent opened this contact's chat\n        public DateTime LastReadAt { get; set; } = DateTime.UtcNow;\n\n        public Guid BusinessId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Repositories/IInboxRepository.cs",
      "sha256": "d057575abdee0fe95972b5dcfafa6e7637884f526bb108c43b06bbb1b2d2a5bd",
      "language": "csharp",
      "size": 839,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public interface IInboxRepository\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone);\n        Task AddMessageAsync(MessageLog message);\n        Task SaveChangesAsync();\n        Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Repositories/InboxRepository.cs",
      "sha256": "06153117fc580e3c5239560868ec16dd5f41d963a159eec8ad96f569afa9bb29",
      "language": "csharp",
      "size": 4226,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public class InboxRepository : IInboxRepository\n    {\n        private readonly AppDbContext _context;\n\n        public InboxRepository(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(limit)\n                .ToListAsync();\n        }\n\n        public async Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task AddMessageAsync(MessageLog message)\n        {\n            await _context.MessageLogs.AddAsync(message);\n        }\n\n        public async Task SaveChangesAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n        public async Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId)\n        {\n            return await _context.MessageLogs\n                 .Include(m => m.SourceCampaign)\n                .Where(m => m.BusinessId == businessId && m.ContactId == contactId)\n                .OrderBy(m => m.CreatedAt)\n                .ToListAsync();\n        }\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\" &&\n                            m.ContactId != null) // ‚úÖ ensure not null\n                .GroupBy(m => m.ContactId!.Value) // ‚úÖ safe cast to Guid\n                .Select(g => new { ContactId = g.Key, Count = g.Count() })\n                .ToDictionaryAsync(x => x.ContactId, x => x.Count);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            var unreadMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.ContactId == contactId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\")\n                .ToListAsync(); \n            foreach (var msg in unreadMessages)\n                msg.Status = \"Read\";\n\n            await _context.SaveChangesAsync();\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n                    var contactReads = await _context.ContactReads\n             .Where(r => r.UserId == userId)\n             .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // üü¢ Fetch from DB first (no logic yet)\n            var allMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // üß† Now calculate in memory\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n\n            return unreadCounts;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/AgentAssignmentService.cs",
      "sha256": "de9062b213ba63cb8695f407ede5c9e8d52a589e0dc1c7a4c5c79fd243389e4e",
      "language": "csharp",
      "size": 1104,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class AgentAssignmentService : IAgentAssignmentService\n    {\n        private readonly ILogger<AgentAssignmentService> _logger;\n\n        public AgentAssignmentService(ILogger<AgentAssignmentService> logger)\n        {\n            _logger = logger;\n        }\n\n        public Task<bool> IsAgentAvailableAsync(Guid businessId)\n        {\n            // üîß TODO: Replace with real logic based on your agent pool\n            _logger.LogInformation(\"Checking if agent is available for business {BusinessId}\", businessId);\n            return Task.FromResult(true); // Assume always available for MVP\n        }\n\n        public Task AssignAgentToContactAsync(Guid businessId, Guid contactId)\n        {\n            // üîß TODO: Save agent-contact assignment to DB or notify a human agent\n            _logger.LogInformation(\"Assigning agent to contact {ContactId} for business {BusinessId}\", contactId, businessId);\n            return Task.CompletedTask;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/ChatSessionStateService.cs",
      "sha256": "5c6672bd07d87501ca9d46e38085cbec03455bae6cc943c8b8df505a7c73808e",
      "language": "csharp",
      "size": 2964,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class ChatSessionStateService : IChatSessionStateService\n    {\n        private readonly AppDbContext _db;\n\n        public ChatSessionStateService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // ‚úÖ Returns current chat mode: \"agent\" or \"auto\"\n        public async Task<string> GetChatModeAsync(Guid businessId, Guid contactId)\n        {\n            var session = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            return session?.Mode ?? \"auto\"; // Default to auto\n        }\n\n        // ‚úÖ Switches to agent mode\n        public async Task SwitchToAgentModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"agent\");\n        }\n\n        // ‚úÖ Switches to automation mode\n        public async Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"auto\");\n        }\n\n        // ‚úÖ Shared logic to insert or update session state\n        private async Task UpsertChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var existing = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (existing != null)\n            {\n                existing.Mode = mode;\n                existing.LastUpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                _db.ChatSessionStates.Add(new ChatSessionState\n                {\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                });\n            }\n\n            await _db.SaveChangesAsync();\n        }\n\n        public async Task SetChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var state = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ContactId == contactId);\n\n            if (state == null)\n            {\n                // Insert new if not exists\n                state = new ChatSessionState\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                };\n                _db.ChatSessionStates.Add(state);\n            }\n            else\n            {\n                state.Mode = mode;\n                state.LastUpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IAgentAssignmentService.cs",
      "sha256": "1eae6f670d61efc4cd6f430a93cf7188c26a6d521ae49cd50ab926aa5bc027ee",
      "language": "csharp",
      "size": 286,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IAgentAssignmentService\n    {\n        Task<bool> IsAgentAvailableAsync(Guid businessId);\n        Task AssignAgentToContactAsync(Guid businessId, Guid contactId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IChatSessionStateService.cs",
      "sha256": "3ade6df9341ebca2e5a478331e57315273317bc803a529a4e068cccc323f1693",
      "language": "csharp",
      "size": 404,
      "content": "namespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IChatSessionStateService\n    {\n        Task<string> GetChatModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAgentModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId);\n        Task SetChatModeAsync(Guid businessId, Guid contactId, string mode);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IInboxService.cs",
      "sha256": "58b2b14fb055263d0f08348900a55c5cbd62c16609e1b4ba082beb34a84efc49",
      "language": "csharp",
      "size": 885,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IInboxService\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto);\n        Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto);\n        Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/InboxService.cs",
      "sha256": "8bbfdb66619466ec1c134351db9fc8b8fd32a8d30a45da7c3d142e41f17ae8f7",
      "language": "csharp",
      "size": 3941,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class InboxService : IInboxService\n    {\n        private readonly IInboxRepository _repository;\n\n        public InboxService(IInboxRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _repository.GetConversationAsync(businessId, userPhone, contactPhone, limit);\n        }\n\n        public async Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = true,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n\n        public async Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = false,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n   \n        public async Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId)\n        {\n            var messages = await _repository.GetMessagesByContactIdAsync(businessId, contactId);\n\n            return messages.Select(m => new MessageLogDto\n            {\n                Id = m.Id,\n                ContactId = m.ContactId,\n                RecipientNumber = m.RecipientNumber, // ‚úÖ optional but helpful\n                MessageContent = m.MessageContent,\n                CreatedAt = m.CreatedAt,\n                IsIncoming = m.IsIncoming,\n                RenderedBody = m.RenderedBody,\n                CampaignId = m.CampaignId,\n                CampaignName = m.SourceCampaign?.Name, // ‚úÖ ‚úÖ This is crucial\n                CTAFlowConfigId = m.CTAFlowConfigId,\n                CTAFlowStepId = m.CTAFlowStepId\n            }).ToList();\n        }\n\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _repository.GetUnreadMessageCountsAsync(businessId);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            await _repository.MarkMessagesAsReadAsync(businessId, contactId);\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n            return await _repository.GetUnreadCountsForUserAsync(businessId, userId);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/SignalR/NameUserIdProvider.cs",
      "sha256": "177581fc6482f75de65f8a7db7a93d17a7d887e148d35eb77ca640d9df0e311f",
      "language": "csharp",
      "size": 336,
      "content": "using Microsoft.AspNetCore.SignalR;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.SignalR\n{\n    public class NameUserIdProvider : IUserIdProvider\n    {\n        public string? GetUserId(HubConnectionContext connection)\n        {\n            return connection.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Controllers/MessageStatusController.cs",
      "sha256": "b0d7d3e99be2a95698a0e358da794c0d0f53a81c7f38846322df111c19fd0fbb",
      "language": "csharp",
      "size": 3213,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\n\nnamespace xbytechat.api.Features.MessageManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/message-status\")]\n    public class MessageStatusController : ControllerBase\n    {\n        private readonly IMessageStatusService _service;\n        private readonly ILogger<MessageStatusController> _logger;\n        private readonly AppDbContext _context;\n        private readonly IConfiguration _config;\n        public MessageStatusController(\n    IMessageStatusService service,\n    ILogger<MessageStatusController> logger,\n    AppDbContext context,\n    IConfiguration config)\n        {\n            _service = service;\n            _logger = logger;\n            _context = context;\n            _config = config;\n        }\n\n        // ‚úÖ STEP 1: Webhook Verification (GET)\n        [HttpGet(\"webhook\")]\n        public IActionResult VerifyWebhook([FromQuery(Name = \"hub.mode\")] string mode,\n                                    [FromQuery(Name = \"hub.verify_token\")] string token,\n                                    [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            //var VERIFY_TOKEN = _config[\"WhatsApp:MetaToken\"]; // ‚úÖ pulled from config\n\n            if (mode == \"subscribe\" && token == \"xbytechat-secret-token\")\n            {\n                _logger.LogInformation(\"‚úÖ Webhook verified.\");\n                return Ok(challenge);\n            }\n\n            _logger.LogWarning(\"‚ùå Webhook verification failed.\");\n            return Forbid();\n        }\n\n\n        // ‚úÖ STEP 2: Webhook Payload (POST)\n        [HttpPost(\"webhook\")]\n        public async Task<IActionResult> ReceiveStatus([FromBody] WebhookStatusDto dto)\n        {\n            if (dto == null || dto.statuses == null || dto.statuses.Count == 0)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è Invalid webhook payload received.\");\n                return BadRequest(\"Invalid payload\");\n            }\n\n            await _service.LogWebhookStatusAsync(dto);\n            _logger.LogInformation(\"‚úÖ Webhook status processed successfully.\");\n\n            return Ok(new { success = true });\n        }\n\n        // ‚úÖ STEP 3: Frontend UI (GET Logs)\n        [HttpGet]\n        public async Task<IActionResult> GetStatusLogs([FromQuery] Guid businessId)\n        {\n            var logs = await _context.MessageStatusLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100)\n                .Select(x => new\n                {\n                    x.MessageId,\n                    x.RecipientNumber,\n                    x.Status,\n                    x.SentAt,\n                    x.DeliveredAt,\n                    x.ReadAt,\n                    x.ErrorMessage,\n                    x.TemplateCategory,\n                    x.MessageType\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = logs });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/DTOs/MessageLogDto.cs",
      "sha256": "c0f207826b70160db8814aaf2e5fcf92174c9b5b7d0904bf27f60163fb2ca516",
      "language": "csharp",
      "size": 643,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public bool IsIncoming { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public string? RenderedBody { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/DTOs/WebhookStatusDto.cs",
      "sha256": "aeb1bd281f5cc025fcc6c5a2a924daf3078c9e774d3fad3860626f871caad053",
      "language": "csharp",
      "size": 1324,
      "content": "namespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class WebhookStatusDto\n    {\n        public List<StatusObject> statuses { get; set; }\n    }\n\n    public class StatusObject\n    {\n        public string id { get; set; }                     // Message ID (WAMID)\n        public string status { get; set; }                 // sent, delivered, read, failed\n        public long timestamp { get; set; }                // UNIX timestamp\n        public string recipient_id { get; set; }           // Phone number\n        public ConversationInfo conversation { get; set; }\n        public PricingInfo pricing { get; set; }\n        public List<ErrorInfo>? errors { get; set; }\n    }\n\n    public class ConversationInfo\n    {\n        public string id { get; set; }\n        public Origin origin { get; set; }\n    }\n\n    public class Origin\n    {\n        public string type { get; set; }                   // marketing, utility, etc.\n    }\n\n    public class PricingInfo\n    {\n        public bool billable { get; set; }\n        public string pricing_model { get; set; }\n        public string category { get; set; }               // Template category\n    }\n\n    public class ErrorInfo\n    {\n        public int code { get; set; }\n        public string title { get; set; }\n        public string details { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Models/MessageStatusLog.cs",
      "sha256": "3e0a8a53cdfb329873018f1c8d6d53c03ef5c6be3e10247853ed67761cafbb4f",
      "language": "csharp",
      "size": 1958,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageStatusLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        // üîó Who is it for\n        public string RecipientNumber { get; set; }\n        public string? CustomerProfileName { get; set; }\n\n        // üì© WhatsApp Message Info\n       // [ForeignKey(nameof(Message))]\n        public string? MessageId { get; set; } // WAMID\n\n       // public MessageLog? Message { get; set; }\n        public string Status { get; set; }\n        public string MessageType { get; set; }\n\n        // üßæ Template Info\n        public string? TemplateName { get; set; }\n        public string? TemplateCategory { get; set; }\n\n        // üß† Analytics/Reporting\n        public string Channel { get; set; } = \"whatsapp\";\n        public bool IsSessionOpen { get; set; }\n        public long? MetaTimestamp { get; set; }\n\n        // üïí Timestamps\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // ‚ùå Error Tracking\n        public string? ErrorMessage { get; set; }\n        public int? ErrorCode { get; set; }\n\n        // üîç Raw Log (for audit/debug)\n        public string? RawPayload { get; set; }\n\n        // üîó Foreign Keys\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        public Guid? BusinessId { get; set; }\n        public Business? Business { get; set; }\n\n        public Guid? UserId { get; set; }\n        public User? User { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // ‚úÖ Navigation using alternate key (WAMID)\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Services/IMessageStatusService.cs",
      "sha256": "cca96e16b96ab978d9e4c344d9a12a8377da0c701b18ea3e5e1bb981d1d6578a",
      "language": "csharp",
      "size": 262,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public interface IMessageStatusService\n    {\n        Task LogWebhookStatusAsync(WebhookStatusDto dto);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessageManagement/Services/MessageStatusService.cs",
      "sha256": "f68c41d4a80e28d1b1de9da188c8b43c756b495494588de6fd11c8275d59a544",
      "language": "csharp",
      "size": 2755,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.AuthModule.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public class MessageStatusService : IMessageStatusService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageStatusService> _logger;\n\n        public MessageStatusService(AppDbContext context, ILogger<MessageStatusService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogWebhookStatusAsync(WebhookStatusDto dto)\n        {\n            foreach (var status in dto.statuses)\n            {\n                var log = new MessageStatusLog\n                {\n                    Id = Guid.NewGuid(),\n                    MessageId = status.id,\n                    Status = status.status.ToLower(),\n                    RecipientNumber = status.recipient_id,\n                    MetaTimestamp = status.timestamp,\n                    TemplateCategory = status?.pricing?.category,\n                    MessageType = status?.conversation?.origin?.type ?? \"session\",\n                    Channel = \"whatsapp\",\n                    CreatedAt = DateTime.UtcNow,\n                    RawPayload = System.Text.Json.JsonSerializer.Serialize(status)\n                };\n\n                var statusTime = DateTimeOffset.FromUnixTimeSeconds(status.timestamp).UtcDateTime;\n\n                switch (status.status.ToLower())\n                {\n                    case \"sent\": log.SentAt = statusTime; break;\n                    case \"delivered\": log.DeliveredAt = statusTime; break;\n                    case \"read\": log.ReadAt = statusTime; break;\n                }\n\n                if (status.errors != null && status.errors.Count > 0)\n                {\n                    log.ErrorMessage = status.errors[0].details;\n                    log.ErrorCode = status.errors[0].code;\n                }\n\n                await _context.MessageStatusLogs.AddAsync(log);\n            }\n\n            // ‚õëÔ∏è Wrap in try-catch and log full inner exception\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"‚ùå SaveChangesAsync failed: \" + ex.Message);\n                _logger.LogError(\"‚ùå Inner exception: \" + ex.InnerException?.Message);\n                throw;\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Controllers/MessageEngineController.cs",
      "sha256": "5bb38763d87308f4e4eca04c070150bb16bf85c0669dea83188183286c2906ae",
      "language": "csharp",
      "size": 7238,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.MessagesEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessageEngineController : ControllerBase\n    {\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IMessageAnalyticsService _messageAnalyticsServiceervice;\n\n\n        public MessageEngineController(IMessageEngineService messageService,IMessageAnalyticsService messageAnalyticsService)\n        {\n            _messageEngineService = messageService;\n            _messageAnalyticsServiceervice = messageAnalyticsService;\n        }\n        [HttpPost(\"send-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid text message payload.\"));\n\n            try\n            {\n                var result = await _messageEngineService.SendTextDirectAsync(dto); // üëà New direct method\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message, result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending text message: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending text message.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-template-simple\")]\n        public async Task<IActionResult> SendTemplateMessageSimple([FromBody] SimpleTemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid template message request.\"));\n\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out Guid businessId))\n                    return Unauthorized(ResponseResult.ErrorInfo(\"‚ùå Business ID not found in token.\"));\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message ?? \"‚ùå Failed to send template.\", result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending template: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString()));\n            }\n        }\n\n       \n        [HttpPost(\"send-image-campaign/{campaignId}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid campaignId)\n        {\n            try\n            {\n                var businessId = UserClaimHelper.GetBusinessId(User); // ‚úÖ from\n                                                                      // claims\n                var userName = UserClaimHelper.GetUserName(User);     // for logging (if needed)\n\n                var result = await _messageEngineService.SendImageCampaignAsync(campaignId, businessId, userName);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error while sending image campaign: \" + ex.Message);\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Server error while sending campaign.\", ex.ToString()));\n            }\n        }\n        public static class UserClaimHelper\n        {\n            public static Guid GetBusinessId(ClaimsPrincipal user)\n            {\n                var claim = user.Claims.FirstOrDefault(c => c.Type == \"businessId\");\n                return claim != null ? Guid.Parse(claim.Value) : Guid.Empty;\n            }\n\n            public static string GetUserName(ClaimsPrincipal user)\n            {\n                return user?.Identity?.Name ?? \"Unknown\";\n            }\n        }\n\n        //[HttpPost(\"send-image-template\")]\n        //public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        //{\n        //    if (string.IsNullOrWhiteSpace(dto.RecipientNumber) || string.IsNullOrWhiteSpace(dto.TemplateName))\n        //        return BadRequest(new { message = \"RecipientNumber and TemplateName are required.\" });\n\n        //    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto);\n\n        //    if (result.Success)\n        //        return Ok(new { message = result.Message, raw = result.RawResponse });\n\n        //    return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n        //[HttpPost(\"send-image-template\")]\n        //public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        //{\n        //    // Extract BusinessId from claims (assuming it's saved as \"BusinessId\" claim)\n        //    var businessIdClaim = User.Claims.FirstOrDefault(c => c.Type == \"BusinessId\")?.Value;\n        //    if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n        //        return Unauthorized(new { message = \"BusinessId not found in user claims.\" });\n\n        //    // Pass businessId explicitly to the service\n        //    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n        //    if (result.Success)\n        //        return Ok(new { message = result.Message, raw = result.RawResponse });\n\n        //    return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n        [HttpPost(\"send-image-template\")]\n        public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // Uses your extension method!\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return Unauthorized(new { message = ex.Message });\n            }\n\n            var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n            if (result.Success)\n                return Ok(new { message = result.Message, raw = result.RawResponse });\n\n            return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _messageAnalyticsServiceervice.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/AutoSendTemplateMessageDto.cs",
      "sha256": "99519bdaed8df38337d3485148cfc53b4972c2616ebb386417321455ad582576",
      "language": "csharp",
      "size": 422,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class AutoSendTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string PhoneNumber { get; set; }\n        public Guid TemplateId { get; set; }\n        public string TemplateName { get; set; }\n        public Dictionary<string, string> Placeholders { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/CtaButtonDto.cs",
      "sha256": "60ecf5aa33d787f635ef05f11c48b8f9f6a11d48b2d7322f7f2ef575b91f9657",
      "language": "csharp",
      "size": 307,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class CtaButtonDto\n    {\n        public string Title { get; set; } = string.Empty; // e.g., \"Buy Now\", \"View Details\"\n        public string Type { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/ImageTemplateMessageDto.cs",
      "sha256": "97564675c3c457ff71f51a241ad4cbca69ec60eaab2b81b81c14fb2360ae34f0",
      "language": "csharp",
      "size": 652,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class ImageTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; }\n    public string TemplateName { get; set; }\n    public string LanguageCode { get; set; } = \"en_US\";\n    public string HeaderImageUrl { get; set; }\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // ‚úÖ Add these two for flow tracking\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/MessageTypeEnum.cs",
      "sha256": "d3120f117dc16b8ab9901ba3726defab664b2a9b4a5414eff586e7e27f55062a",
      "language": "csharp",
      "size": 286,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [JsonConverter(typeof(JsonStringEnumConverter))] // Enables string parsing in JSON\n    public enum MessageTypeEnum\n    {\n        Text,\n        Image,\n        Template,\n        Cta\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendMessageDto.cs",
      "sha256": "1c45c09fda3fbb66ba843912c7617fe09447ec841b82f4b0f5c2a08cf8341fc1",
      "language": "csharp",
      "size": 1889,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs.Validation;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [ValidateMessageDto] // ‚úÖ Custom validator will enforce conditional field rules\n    public class SendMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; } = string.Empty;\n\n        [Required]\n        public MessageTypeEnum MessageType { get; set; }\n\n        // üìù Text Message\n        public string? TextContent { get; set; }\n\n        // üñºÔ∏è Image Message\n        public string? MediaUrl { get; set; }\n\n        // üìã Template Message\n        public string? TemplateName { get; set; }\n        public Dictionary<string, string>? TemplateParameters { get; set; }\n\n        // üõí CTA Message\n        public List<CtaButtonDto>? CtaButtons { get; set; }\n\n        // ‚úÖ Required: this was missing [Optional but needed for CTA/Template message sending]\n        public List<string>? ButtonParams { get; set; }\n\n        // üìä Optional Metadata\n        public Guid? CampaignId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n\n        public string? SourceModule { get; set; }\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n        public string? BotId { get; set; }\n        public string? RefMessageId { get; set; }\n        public string? CTATriggeredFrom { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n\n        // ‚úÖ Add these two for flow tracking\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendTemplateMessageSimpleDto.cs",
      "sha256": "00dc74bb6a1b396bab6fcd63f93454cfd59671260c4da8b0afd8754e83e10ce8",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SendTemplateMessageSimpleDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string TemplateName { get; set; }\n        public List<string> TemplateParameters { get; set; } = new();\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SimpleTemplateMessageDto.cs",
      "sha256": "13b09ae3db26e3770de01db13a5f5dabff0f7e5b09c9ed73dc44272e47699ac2",
      "language": "csharp",
      "size": 703,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SimpleTemplateMessageDto\n    {\n        //public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TemplateName { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public bool HasStaticButtons { get; set; } = false;\n\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "9b7be7ee8b48ca30422fe6b4ee2eb6af563f79ae7abad04aaaab9fdb4658612b",
      "language": "csharp",
      "size": 434,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\npublic class TemplateForUIResponseDto\n{\n    public string Name { get; set; }\n    public string Language { get; set; }\n    public string Body { get; set; }\n\n    // ‚úÖ Correct naming for frontend\n    public int ParametersCount { get; set; }\n\n    public List<ButtonMetadataDto> ButtonParams { get; set; }\n    public bool HasImageHeader { get; set; } // üÜï Used to detect image templates\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TextMessageSendDto.cs",
      "sha256": "7b96b59a33cc5ad7c6b1d5d926ecb2a851478863db2de77661a8b2ae5409e90a",
      "language": "csharp",
      "size": 538,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class TextMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        // ‚úÖ NEW: Optional source indicator (e.g., \"campaign\", \"auto-reply\", etc.)\n        public string? Source { get; set; }\n\n        // ‚úÖ NEW: Optional message ID for campaign tracing\n        public string? MessageId { get; set; }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/CtaMessagePayloadBuilder.cs",
      "sha256": "f23794fdb8775eff63c5d249f23e74b7ff5e4497daa7b255ce94693b3ba9a6f7",
      "language": "csharp",
      "size": 1063,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class CtaMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = dto.TextContent },\n                    action = new\n                    {\n                        buttons = dto.CtaButtons?.Select(b => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = b.Value,\n                                title = b.Title\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "1400148a9ed0b32af7ece6c87b111a1407feda0f5b651819257c5b740bb01106",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = dto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "89d6b688ba597eb931cd71401717698a692f3e3b645a02d60c1d73dae24731d3",
      "language": "csharp",
      "size": 225,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(SendMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs",
      "sha256": "5f3fdb0eec9de51853f33783973029ee43bf803491c0679c460374e2816f0d01",
      "language": "csharp",
      "size": 2574,
      "content": "using xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared.utility;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public static class MessagePayloadBuilder\n    {\n        /// <summary>\n        /// Builds a WhatsApp template message payload for image header + buttons.\n        /// </summary>\n        public static object BuildImageTemplatePayload(\n            string templateName,\n            string languageCode,\n            string recipientNumber,\n            List<string> templateParams,\n            string? imageUrl,\n            List<CampaignButton>? buttons\n        )\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Body with template params\n            if (templateParams != null && templateParams.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // ‚úÖ Header image if present\n            if (!string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                    new { type = \"image\", image = new { link = imageUrl } }\n                }\n                });\n            }\n\n            // ‚úÖ CTA buttons\n            if (buttons != null && buttons.Any())\n            {\n                var buttonComponents = buttons\n                    .OrderBy(b => b.Position)\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type, // \"url\" or \"phone_number\"\n                        index = index.ToString(),\n                        parameters = new[]\n                        {\n                        new { type = \"text\", text = btn.Value }\n                        }\n                    });\n\n                components.AddRange(buttonComponents);\n            }\n\n            // ‚úÖ Final WhatsApp Template Payload\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components = components\n                }\n            };\n        }\n    }\n\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "9f758fa90c76d160a238d286c153202e8e74f4de2261287d81cd8838f5ca8b40",
      "language": "csharp",
      "size": 2923,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ BODY PARAMETERS: Insert dynamic values into the template body\n            // WhatsApp expects these to be in order ({{1}}, {{2}}, etc.)\n            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n                return ResponseResult.ErrorInfo(\"‚ùå Missing template parameters.\");\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n                {\n                var bodyParams = dto.TemplateParameters\n                    .OrderBy(kvp => int.Parse(kvp.Key.Trim('{', '}'))) // üî¢ Extract and sort by index\n                    .Select(kvp => new\n                    {\n                        type = \"text\",\n                        text = kvp.Value\n                    }).ToArray();\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams\n                });\n            }\n\n            // ‚úÖ BUTTON PARAMETERS: For templates with dynamic URL buttons (index-based)\n            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n            {\n                for (int i = 0; i < dto.ButtonParams.Count; i++)\n                {\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i.ToString(), // WhatsApp requires index as a string\n                        parameters = new[]\n                        {\n                            new\n                            {\n                                type = \"text\",\n                                text = dto.ButtonParams[i]\n                            }\n                        }\n                    });\n                }\n            }\n\n            // ‚úÖ FINAL WHATSAPP TEMPLATE PAYLOAD\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n\n            // ü™µ Debug log for developer console (optional)\n            Console.WriteLine(\"üì¶ Built WhatsApp Template Payload:\");\n            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(payload, new System.Text.Json.JsonSerializerOptions\n            {\n                WriteIndented = true\n            }));\n\n            return payload;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateStaticButtonPayloadBuilder.cs",
      "sha256": "68979e5fa2d53ce3fa319c20377ca2022bf9e46b7244c817fb53f84594392f72",
      "language": "csharp",
      "size": 1397,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateStaticButtonPayloadBuilder\n    {\n        public static object Build(SendTemplateMessageSimpleDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Add Body Params\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n\n            // ‚ö†Ô∏è DO NOT add button components for static buttons\n            // Meta will render them automatically if template has static buttons defined\n            // You can later add logic here for dynamic buttons if needed\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "abc17e5a60e2f58ba07c610db126262040f598a15aca27d2f85d52afc2fb4766",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = dto.TextContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/IMessageEngineService.cs",
      "sha256": "9e3238790374a70a6f1e9205036a372269dbce950e53bb2efd44aa2156b579c2",
      "language": "csharp",
      "size": 1145,
      "content": "// ‚úÖ Step 1: Final interface\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\nusing System.Threading.Tasks;\nusing System.IO.Pipelines;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface IMessageEngineService\n    {\n\n        Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto); //\n        Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto);\n        Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto);\n        Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId,SimpleTemplateMessageDto dto);\n        Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string triggeredBy);\n        //Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto);\n        Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId);\n        Task<ResponseResult> SendToWhatsAppAsync(object payload, Guid businessId);\n        //Task<IEnumerable<MessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/ITemplateMessageSender.cs",
      "sha256": "8da7dff35e83f585fcca22a680aaed11b677d5d033a41d582124f899ed1660ff",
      "language": "csharp",
      "size": 960,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface ITemplateMessageSender\n    {\n        /// <summary>\n        /// Sends a template message to a single contact (used in AutoReply/Flows).\n        /// </summary>\n        Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null\n        );\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
      "sha256": "144892e8c37ae636bd916ca7dd76eb8303f7a028d6c7d16373d9bc9d35246ae6",
      "language": "csharp",
      "size": 45461,
      "content": "using Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing System.Net.Http.Headers;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing System.Text;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.IO.Pipelines;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\n//using System.Text.Json;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http;\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n        // üîÑ Basic cache for WhatsApp settings to reduce DB load\n        private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager, IHubContext<InboxHub> hubContext, IMessageIdResolver messageIdResolver, IHttpContextAccessor httpContextAccessor,\n            IContactService contactService\n            )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n               \n        }\n\n        public async Task<ResponseResult> SendToWhatsAppAsync(object payload, Guid businessId)\n        {\n            var settings = await GetBusinessWhatsAppSettingsAsync(businessId);\n            var token = settings.ApiToken;\n            var phoneId = settings.PhoneNumberId;\n            var baseUrl = settings.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n            var url = $\"{baseUrl}/{phoneId}/messages\";\n\n            var request = new HttpRequestMessage(HttpMethod.Post, url)\n            {\n                Content = new StringContent(JsonConvert.SerializeObject(payload), Encoding.UTF8, \"application/json\")\n            };\n\n            request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            Console.WriteLine(\"üöÄ Final Payload:\");\n            Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n            var response = await _http.SendAsync(request);\n            // üåê Status\n            Console.WriteLine($\"Status: {(int)response.StatusCode} {response.ReasonPhrase}\");\n\n            // üìã Headers\n            Console.WriteLine(\"Headers:\");\n            foreach (var header in response.Headers)\n            {\n                Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n            }\n            foreach (var header in response.Content.Headers)\n            {\n                Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n            }\n            // üì¶ Body (content)\n            var body = await response.Content.ReadAsStringAsync();\n\n            // ‚ùå Handle token errors or failure\n            if (!response.IsSuccessStatusCode)\n            {\n                if (body.Contains(\"invalid_token\") || body.Contains(\"Error validating access token\"))\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå WhatsApp token has expired. Please update your token.\",\n                        \"Access token expired\",\n                        body\n                    );\n                }\n\n                return ResponseResult.ErrorInfo(\n                    \"‚ùå WhatsApp API returned an error.\",\n                    \"API returned error\",\n                    body\n                );\n            }\n\n            // ‚úÖ Parse WAMID safely\n            string? wamid = null;\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(body);\n                wamid = parsed?.messages?[0]?.id;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ö†Ô∏è Failed to parse WAMID: \" + ex.Message);\n            }\n\n            // ‚úÖ Use object initializer style\n            var result = ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", data: null, raw: body);\n            result.MessageId = wamid;\n            return result;\n        }\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì® Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                // ‚úÖ Validate message type\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ‚úÖ Quota check\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"‚ùå Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ‚úÖ Build payload\n                var payload = _templateBuilder.BuildPayload(dto);\n                Console.WriteLine(\"üîß Built WhatsApp payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // üöÄ Send to WhatsApp API\n                var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n                Console.WriteLine(\"‚úÖ WhatsApp API response:\");\n                Console.WriteLine(JsonConvert.SerializeObject(sendResult, Formatting.Indented));\n\n                // ‚úÖ Build the rendered body before saving\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                );\n\n                // üìù Log success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // üìâ Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // üì° Send real-time message to SignalR group\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                var fullError = $\"üß® Error ID: {errorId}\\n{ex}\";\n\n                Console.WriteLine(fullError);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                    ),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString()\n                );\n            }\n        }\n\n        private async Task<WhatsAppSettingEntity> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            var business = await _db.Businesses\n                .Include(b => b.WhatsAppSettings)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.WhatsAppSettings == null)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            _settingsCache[businessId] = (business.WhatsAppSettings, DateTime.UtcNow.AddMinutes(5));\n            return business.WhatsAppSettings;\n        }\n\n           public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                 //‚úÖ Resolve business ID from context\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                     ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context.\");\n\n\n                // üîç Optionally associate with Contact\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // ‚úÖ Step 1: Build WhatsApp payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"text\",\n                    text = new\n                    {\n                        preview_url = false,\n                        body = dto.TextContent\n                    }\n                };\n\n                Console.WriteLine(\"‚úÖ WhatsApp Text Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ‚úÖ Step 2: Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                // ‚úÖ Step 3: Extract MessageId from response\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                            {\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // ‚úÖ Step 4: Save MessageLog\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // ‚úÖ Step 5: Optional campaign log mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                // ‚úÖ Step 6: Return structured result\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"‚úÖ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendTextDirectAsync: {ex.Message}\");\n\n                // ‚ùå Log failed attempt with partial context\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                               ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                // ‚úÖ Resolve business ID from DTO or claims\n                var businessId = (dto.BusinessId != Guid.Empty)\n                    ? dto.BusinessId\n                    : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                      ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context or DTO.\");\n\n                // üîç Optionally associate with Contact\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // ‚úÖ Step 1: Build WhatsApp payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"text\",\n                    text = new\n                    {\n                        preview_url = false,\n                        body = dto.TextContent\n                    }\n                };\n\n                Console.WriteLine(\"‚úÖ WhatsApp Text Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ‚úÖ Step 2: Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                // ‚úÖ Step 3: Extract MessageId from response\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                            {\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // ‚úÖ Step 4: Save MessageLog\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // ‚úÖ Step 5: Optional campaign log mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                // ‚úÖ Step 6: Return structured result\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"‚úÖ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendAutomationReply: {ex.Message}\");\n\n                // ‚ùå Log failed attempt with partial context\n                try\n                {\n                    var businessId = (dto.BusinessId != Guid.Empty)\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateMessageSimpleAsync(SimpleTemplateMessageDto dto)\n        //{\n        //    try\n        //    {\n        //        // ‚úÖ Build WhatsApp template payload with body only\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = dto.RecipientNumber,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = dto.TemplateName,\n        //                language = new { code = \"en_US\" },\n        //                components = new[]\n        //                {\n        //            new\n        //            {\n        //                type = \"body\",\n        //                parameters = dto.TemplateParameters.Select(p => new\n        //                {\n        //                    type = \"text\",\n        //                    text = p\n        //                }).ToArray()\n        //            }\n        //        }\n        //            }\n        //        };\n\n        //        Console.WriteLine(\"üì¶ Template Payload (no buttons):\");\n        //        Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n        //        var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n\n        //        // ‚úÖ Log success\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n\n        //            MediaUrl = null,\n        //            Status = \"Sent\", \n        //            ErrorMessage = null,\n        //            RawResponse = JsonConvert.SerializeObject(sendResult),\n        //            CreatedAt = DateTime.UtcNow,\n        //            SentAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId,\n\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return ResponseResult.SuccessInfo(\"‚úÖ Template sent successfully.\", sendResult, log.RawResponse);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        // ‚ùå Log failure\n        //        // ‚ùå Log failure\n        //        await _db.MessageLogs.AddAsync(new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters), // ‚úÖ Add this\n        //            Status = \"Failed\",\n        //            ErrorMessage = ex.Message,\n        //            CreatedAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId,\n        //        });\n\n\n        //        await _db.SaveChangesAsync();\n\n        //        return ResponseResult.ErrorInfo(\"‚ùå Error sending template.\", ex.ToString());\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName,\n                        language = new { code = \"en_US\" },\n                        components = new[]\n                        {\n                    new\n                    {\n                        type = \"body\",\n                        parameters = dto.TemplateParameters.Select(p => new\n                        {\n                            type = \"text\",\n                            text = p\n                        }).ToArray()\n                    }\n                }\n                    }\n                };\n\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n                    Status = \"Sent\",\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template sent successfully.\", sendResult);\n            }\n            catch (Exception ex)\n            {\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n\n                // ‚úÖ Early Validation (Avoid WhatsApp 400 errors)\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto\n                    {\n                        Title = b.Title,\n                        Value = b.Value\n                    })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        // Tracking metadata\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n\n\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto); // Central engine\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\n                    $\"‚úÖ Campaign sent.\\nüì§ Success: {successCount}, ‚ùå Failed: {failCount}\"\n                );\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n                   \n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì§ Sending image+CTA to {dto.RecipientNumber}\");\n\n                // ‚úÖ Early validation: TextContent and at least one button\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"‚ùå Image message caption (TextContent) cannot be empty.\");\n\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid().ToString(\"N\").Substring(0, 8)}\",\n                            title = btn.Title\n                        }\n                    }).ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                // üß± Build the payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new\n                        {\n                            buttons = validButtons\n                        }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new\n                    {\n                        link = dto.MediaUrl\n                    }\n                };\n\n                Console.WriteLine(\"üì¶ Final payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // üîÅ Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n                var rawJson = JsonConvert.SerializeObject(sendResult);\n\n                // üìù Log to DB\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = \"Sent\",\n                    RawResponse = rawJson,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                var response = ResponseResult.SuccessInfo(\"‚úÖ Image+CTA message sent.\", null, rawJson);\n                response.MessageId = log.Id.ToString();\n                response.LogId = log.Id;\n                return response;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n        //public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto)\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                List<object> components = new List<object>();\n\n                // ‚úÖ Header (Image) component ‚Äî optional\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                    new\n                    {\n                        type = \"image\",\n                        image = new\n                        {\n                            link = dto.HeaderImageUrl\n                        }\n                    }\n                }\n                    });\n                }\n\n                // ‚úÖ Body (Template Parameters)\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n\n                // ‚úÖ Buttons ‚Äî dynamic (up to 3), skip invalid entries\n                for (int i = 0; i < dto.ButtonParameters.Count && i < 3; i++)\n                {\n                    var btn = dto.ButtonParameters[i];\n                    string subType = btn.ButtonType?.ToLower();\n\n                    // üõë Skip if ButtonType or TargetUrl is missing\n                    if (string.IsNullOrWhiteSpace(subType) || string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    // üß† Add required parameters based on button subtype\n                    if (subType == \"quick_reply\")\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                    new\n                    {\n                        type = \"payload\",\n                        payload = btn.TargetUrl\n                    }\n                };\n                    }\n                    else if (subType == \"url\")\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                    new\n                    {\n                        type = \"text\",\n                        text = btn.TargetUrl\n                    }\n                };\n                    }\n                    // ‚úÖ Do not add parameters for phone/call type\n\n                    components.Add(button);\n                }\n\n                // ‚úÖ Final Payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName,\n                        language = new\n                        {\n                            code = dto.LanguageCode ?? \"en_US\"\n                        },\n                        components = components\n                    }\n                };\n\n                Console.WriteLine(\"üì¶ Sending Image Template Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ‚úÖ Send to WhatsApp API\n                object sendResult = await SendToWhatsAppAsync(payload, businessId);\n                // ‚úÖ Prepare rendered body (new)\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>()\n                );\n\n                // ‚úÖ Save log on success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n\n\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Image template sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                // üõë Log failure\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending image template.\", ex.ToString());\n            }\n        }\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n    }\n\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
      "sha256": "9316938182f43c5081969d0f706bb900ddb510f07296c4b88099304f15ea4caf",
      "language": "csharp",
      "size": 8270,
      "content": "// üìÑ File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"‚ùå Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"üì§ Sent to {success}, ‚ùå Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
      "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
      "language": "csharp",
      "size": 1760,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/BusinessPlanInfo.cs",
      "sha256": "4a8d4603750b0630eec386cbb831948aaa2cc2f5872d4e1b178da2b9a6952bc7",
      "language": "csharp",
      "size": 1240,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Models.BusinessModel\n{\n    public class BusinessPlanInfo\n    {\n        [Key]\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üîó Foreign key to Business\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [ForeignKey(nameof(BusinessId))]\n        public Business Business { get; set; }\n\n        // üì¶ Plan Management\n        [Required]\n        public PlanType Plan { get; set; } = PlanType.Trial; // Default Trial\n\n        [Required]\n        public int TotalMonthlyQuota { get; set; } = 100; // Default Trial Messages\n\n        [Required]\n        public int RemainingMessages { get; set; } = 100;\n\n        public DateTime QuotaResetDate { get; set; } = DateTime.UtcNow.AddMonths(1);\n\n        // üí∞ Wallet Management (optional)\n        public decimal WalletBalance { get; set; } = 0.00m;\n\n        // üìÖ Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/PlanFeature.cs",
      "sha256": "af8483d1a28e7555f8111b552d2730fd4ef167d9ba562bebb508328248b01a12",
      "language": "csharp",
      "size": 687,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.PlanManagement.Models\n{\n    [Table(\"PlanFeatureMatrix\")]\n    public class PlanFeatureMatrix\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PlanName { get; set; } = string.Empty;  // \"Basic\", \"Smart\", \"Advance\"\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty; // \"Contacts\", \"Catalog\", etc.\n\n        [Required]\n        public bool IsEnabled { get; set; }  // Default state for this plan-feature pair\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Models/PlanType.cs",
      "sha256": "52170542c11ff0a0e52b9f16289446106038cd266cd602169980aa1d684672ea",
      "language": "csharp",
      "size": 187,
      "content": "namespace xbytechat.api.Features.PlanManagement.Models\n{\n    public enum PlanType\n    {\n       \n        Basic = 0,\n        Smart = 1,\n        Advanced = 2,\n            Trial = 3,\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Services/IPlanManager.cs",
      "sha256": "69cb77d9f587d971ee0cc96bf3fa399d9982294045981db84e714050dc242d85",
      "language": "csharp",
      "size": 418,
      "content": "using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public interface IPlanManager\n    {\n        /// <summary>\n        /// Checks if business has enough quota to send a message.\n        /// </summary>\n        Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId);\n        Dictionary<string, bool> GetPlanFeatureMap(string plan);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/PlanManagement/Services/PlanManager.cs",
      "sha256": "0d93116ee8bd77194569c6739adad49911359cad9bd6f1919bae85f130027871",
      "language": "csharp",
      "size": 1992,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public class PlanManager : IPlanManager\n    {\n        private readonly AppDbContext _db;\n\n        public PlanManager(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId)\n        {\n            var business = await _db.Businesses.FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"Business not found.\", \"Invalid business ID\");\n            if (business?.BusinessPlanInfo?.RemainingMessages <= 0)\n            {\n                var msg = business?.BusinessPlanInfo?.Plan == PlanType.Trial\n                    ? \"Trial limit reached. Please upgrade your plan.\"\n                    : \"Monthly quota exhausted. Please upgrade or wait for reset.\";\n\n                return ResponseResult.ErrorInfo(msg, \"Quota limit exceeded\");\n            }\n\n            return ResponseResult.SuccessInfo(\"Quota check passed.\");\n        }\n\n        public Dictionary<string, bool> GetPlanFeatureMap(string plan)\n        {\n            // Example map ‚Äî replace with real logic if needed\n            if (plan == \"Basic\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", false },\n                { \"CRM_NOTES\", false }\n            };\n\n            if (plan == \"Advanced\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", true },\n                { \"CRM_NOTES\", true },\n                { \"CRM_TAGS\", true }\n            };\n\n            // Fallback plan\n            return new Dictionary<string, bool>();\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Controllers/MessageAnalyticsController.cs",
      "sha256": "37e850b94dae6b33e4c44fb129fe331ae8a36706c9e377dee456c03d4a6e57f7",
      "language": "csharp",
      "size": 1216,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Shared;\n\n\nnamespace xbytechat.api.Features.ReportingModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/reporting/messages\")]\n    public class MessageAnalyticsController : ControllerBase\n    {\n        private readonly IMessageAnalyticsService _service;\n\n        public MessageAnalyticsController(IMessageAnalyticsService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId(); // üîí assumes claims extension\n            var logs = await _service.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n        [HttpGet(\"history\")]\n        public async Task<IActionResult> GetPaginatedLogs([FromQuery] PaginatedRequest request)\n        {\n            var businessId = User.GetBusinessId(); // üîê via claims\n            var result = await _service.GetPaginatedLogsAsync(businessId, request);\n            return Ok(new { success = true, data = result });\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/DTOs/DirectMessageLogFilterDto.cs",
      "sha256": "e8f948d0367820dd6dce43d8c057e8bfe7a65889ab2eb6361f062de66d36922b",
      "language": "csharp",
      "size": 293,
      "content": "namespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class DirectMessageLogFilterDto\n\n    {\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 10;\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/DTOs/RecentMessageLogDto.cs",
      "sha256": "f86a239c42fefe2d63c5087c403a7c2cc1e2eea942cc1443bd03495783bbb2f4",
      "language": "csharp",
      "size": 586,
      "content": "// üìÑ File: Features/ReportingModule/DTOs/RecentMessageLogDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class RecentMessageLogDto\n    {\n        public Guid Id { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }             \n        public Guid? CampaignId { get; set; }\n        public string? Status { get; set; }\n        public string? ErrorMessage { get; set; }         \n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Services/IMessageAnalyticsService.cs",
      "sha256": "08c8fb19a092bb252492d04c2114547e4ca4a5725875accb403182551c8229f4",
      "language": "csharp",
      "size": 536,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public interface IMessageAnalyticsService\n    {\n        Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit);\n        Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/ReportingModule/Services/MessageAnalyticsService.cs",
      "sha256": "3a87316fa63b4890a5bc35b2d867a96a2a7d73e8aea0e52ff6854e89c4245b7a",
      "language": "csharp",
      "size": 2844,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public class MessageAnalyticsService : IMessageAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public MessageAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit)\n        {\n            return await _context.MessageLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(limit)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n        }\n\n        public async Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.MessageLogs\n                .Where(x => x.BusinessId == businessId);\n\n            if (!string.IsNullOrEmpty(request.Status))\n                query = query.Where(x => x.Status == request.Status);\n\n            if (!string.IsNullOrEmpty(request.Search))\n                query = query.Where(x =>\n                    x.RecipientNumber.Contains(request.Search) ||\n                    x.MessageContent.Contains(request.Search));\n\n            var totalCount = await query.CountAsync();\n\n            var items = await query\n                .OrderByDescending(x => x.CreatedAt)\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<RecentMessageLogDto>\n            {\n                Items = items,\n                TotalCount = totalCount,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Controllers/TemplatesController.cs",
      "sha256": "b7014e9c08b5d3cf85e8dbd5edf632bc51e34a2acac661dbb3109dcd259edf4c",
      "language": "csharp",
      "size": 1479,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateModule.Services;\n\nnamespace xbytechat.api.Features.TemplateModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateService _templateService;\n        private readonly ILogger<TemplatesController> _logger;\n\n        public TemplatesController(IWhatsAppTemplateService templateService, ILogger<TemplatesController> logger)\n        {\n            _templateService = templateService;\n            _logger = logger;\n        }\n\n        /// <summary>\n        /// Fetches WhatsApp template metadata (name, language, body, placeholders)\n        /// </summary>\n        [HttpGet(\"metadata\")]\n        public async Task<IActionResult> GetTemplates()\n        {\n            try\n            {\n                var templates = await _templateService.FetchTemplatesAsync();\n                return Ok(new\n                {\n                    success = true,\n                    templates\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error fetching template metadata: \" + ex.Message);\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"‚ùå Failed to retrieve template metadata\",\n                    error = ex.Message\n                });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/IWhatsAppTemplateService.cs",
      "sha256": "2ed5f5891246b4fec02e29892760c3d033e76572488701c525fd801763f742a9",
      "language": "csharp",
      "size": 226,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public interface IWhatsAppTemplateService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/WhatsAppTemplateService.cs",
      "sha256": "ee70376834e701f63425a69d50a4ea5d02170321edf828fe7fd2bd5d100bf3a1",
      "language": "csharp",
      "size": 2815,
      "content": "using Microsoft.Extensions.Configuration;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public class WhatsAppTemplateService : IWhatsAppTemplateService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n\n        public WhatsAppTemplateService(HttpClient httpClient, IConfiguration config, ILogger<WhatsAppTemplateService> logger)\n        {\n            _httpClient = httpClient;\n            _config = config;\n            _logger = logger;\n        }\n\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var token = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v18.0/{wabaId}/message_templates\";\n\n            var templates = new List<TemplateMetadataDto>();\n\n            try\n            {\n                _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", token);\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch WhatsApp templates: \" + json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n\n                    foreach (var component in tpl.components)\n                    {\n                        if (component.type == \"BODY\")\n                        {\n                            body = component.text;\n                            break;\n                        }\n                    }\n\n                    // Count {{placeholders}}\n                    var placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount\n                    });\n                }\n\n                return templates;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error while fetching templates from Meta: \" + ex.Message);\n                return templates;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
      "sha256": "eff454d0f22519fc547f7489d9205cb738600a0d241003c5f0ac3f38694b517a",
      "language": "csharp",
      "size": 11562,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared.TrackingUtils;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n\n        public TrackingController(ITrackingService tracker)\n        {\n            _tracker = tracker;\n        }\n        #region \"Tracking Logs\"\n        //       [HttpGet(\"redirect\")]\n        //       public async Task<IActionResult> TrackAndRedirect(\n        //                                        [FromQuery] string src,\n        //                                        [FromQuery] Guid id,\n        //                                        [FromQuery] string btn,\n        //                                        [FromQuery] string? to = null,\n        //                                        [FromQuery] string? type = null,\n        //                                        [FromQuery] Guid? msg = null,\n        //                                        [FromQuery] Guid? contact = null,\n        //                                        [FromQuery] string? phone = null,\n        //                                        [FromQuery] string? session = null,\n        //                                        [FromQuery] string? thread = null\n        //)\n        //       {\n        //           var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n        //           var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n        //                        ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n        //           var country = await GeoHelper.GetCountryFromIP(ipAddress);\n        //           var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n        //           var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n        //           if (!Guid.TryParse(businessIdClaim, out var businessId))\n        //               return Unauthorized(\"Invalid business context\");\n\n        //           var dto = new TrackingLogDto\n        //           {\n        //               BusinessId = businessId,// Guid.Empty, // TODO: Replace with actual business lookup if available\n        //               ContactId = contact,\n        //               ContactPhone = phone,\n        //               SourceType = src,\n        //               SourceId = id,\n        //               ButtonText = btn,\n        //               CTAType = type ?? btn,\n        //               MessageId = msg?.ToString(),\n        //               SessionId = session,\n        //               ThreadId = thread,\n        //               ClickedAt = DateTime.UtcNow,\n        //               IPAddress = ipAddress,\n        //               Browser = userAgent,\n        //               DeviceType = deviceType,\n        //               Country = country,\n        //               ClickedVia = \"web\"\n        //           };\n\n        //           await _tracker.LogCTAClickAsync(dto);\n\n        //           if (string.IsNullOrWhiteSpace(to))\n        //               return BadRequest(\"Missing redirect target.\");\n\n        //           var decodedUrl = Uri.UnescapeDataString(to);\n        //           return Redirect(decodedUrl);\n        //       }\n\n        #endregion\n\n        //        [HttpGet(\"redirect\")]\n        //        public async Task<IActionResult> TrackAndRedirect(\n        //            [FromQuery] string src,\n        //            [FromQuery] Guid id,\n        //            [FromQuery] string btn,\n        //            [FromQuery] string? to = null,\n        //            [FromQuery] string? type = null,\n        //            [FromQuery] Guid? msg = null,\n        //            [FromQuery] Guid? contact = null,\n        //            [FromQuery] string? phone = null,\n        //            [FromQuery] string? session = null,\n        //            [FromQuery] string? thread = null\n        //)\n        //        {\n        //            var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n        //            var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n        //                         ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n        //            var country = await GeoHelper.GetCountryFromIP(ipAddress);\n        //            var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n        //            // üîç 1. Attempt to extract businessId from claims\n        //            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n        //            var hasBusinessId = Guid.TryParse(businessIdClaim, out var businessId);\n\n        //            // üß† 2. Create base DTO\n        //            var dto = new TrackingLogDto\n        //            {\n        //                BusinessId = hasBusinessId ? businessId : Guid.Empty, // fallback ‚Äî will enrich later\n        //                ContactId = contact,\n        //                ContactPhone = phone,\n        //                SourceType = src,\n        //                SourceId = id,\n        //                ButtonText = btn,\n        //                CTAType = type ?? btn,\n        //                MessageId = msg?.ToString(),\n        //                SessionId = session,\n        //                ThreadId = thread,\n        //                ClickedAt = DateTime.UtcNow,\n        //                IPAddress = ipAddress,\n        //                Browser = userAgent,\n        //                DeviceType = deviceType,\n        //                Country = country,\n        //                ClickedVia = \"web\"\n        //            };\n\n        //            // üîÅ 3. Fallback enrichment from MessageLog\n        //            if (msg.HasValue)\n        //            {\n        //                var messageLog = await _context.MessageLogs\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(m => m.Id == msg.Value || m.MessageId == msg.ToString());\n\n        //                if (messageLog != null)\n        //                {\n        //                    // üß© Backfill missing fields if needed\n        //                    dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n        //                    dto.ContactId ??= messageLog.ContactId;\n        //                    dto.CampaignId ??= messageLog.CampaignId;\n        //                    dto.MessageLogId ??= messageLog.Id;\n        //                }\n        //            }\n\n        //            // üîÅ 4. Fallback from CampaignSendLog (if SourceType is \"campaign\")\n        //            if (src == \"campaign\" && msg.HasValue && dto.CampaignId == null)\n        //            {\n        //                var sendLog = await _context.CampaignSendLogs\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(c => c.MessageId == msg.ToString());\n\n        //                if (sendLog != null)\n        //                {\n        //                    dto.BusinessId = dto.BusinessId == Guid.Empty ? sendLog.BusinessId : dto.BusinessId;\n        //                    dto.ContactId ??= sendLog.ContactId;\n        //                    dto.CampaignId ??= sendLog.CampaignId;\n        //                    dto.CampaignSendLogId ??= sendLog.Id;\n        //                }\n        //            }\n\n        //            // ‚úÖ 5. Final safety check\n        //            if (dto.BusinessId == Guid.Empty)\n        //            {\n        //                Log.Warning(\"‚ö†Ô∏è TrackingLog DTO missing valid BusinessId. msg={@msg}\", msg);\n        //                return Unauthorized(\"Business context missing or invalid.\");\n        //            }\n\n        //            // üíæ 6. Save to database\n        //            await _tracker.LogCTAClickAsync(dto);\n\n        //            // üåê 7. Redirect to final URL\n        //            if (string.IsNullOrWhiteSpace(to))\n        //                return BadRequest(\"Missing redirect target.\");\n\n        //            var decodedUrl = Uri.UnescapeDataString(to);\n        //            return Redirect(decodedUrl);\n        //        }\n        [HttpGet(\"redirect\")]\n        public async Task<IActionResult> TrackAndRedirect([FromQuery] string src, [FromQuery] Guid id,\n            [FromQuery] string btn, [FromQuery] string? to = null, [FromQuery] string? type = null,\n            [FromQuery] Guid? msg = null, [FromQuery] Guid? contact = null, [FromQuery] string? phone = null,\n            [FromQuery] string? session = null, [FromQuery] string? thread = null)\n        {\n            var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n            var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n                         ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n            var country = await GeoHelper.GetCountryFromIP(ipAddress);\n            var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var hasBusinessId = Guid.TryParse(businessIdClaim, out var businessId);\n\n            var dto = new TrackingLogDto\n            {\n                BusinessId = hasBusinessId ? businessId : Guid.Empty,\n                ContactId = contact,\n                ContactPhone = phone,\n                SourceType = src,\n                SourceId = id,\n                ButtonText = btn,\n                CTAType = type ?? btn,\n                MessageId = msg?.ToString(),\n                SessionId = session,\n                ThreadId = thread,\n                ClickedAt = DateTime.UtcNow,\n                IPAddress = ipAddress,\n                Browser = userAgent,\n                DeviceType = deviceType,\n                Country = country,\n                ClickedVia = \"web\"\n            };\n\n            var result = await _tracker.LogCTAClickWithEnrichmentAsync(dto);\n            if (!result.Success)\n                return Unauthorized(result.Message);\n\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target.\");\n\n            return Redirect(Uri.UnescapeDataString(to));\n        }\n\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n        [HttpGet(\"flow-clicks\")]\n       \n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
      "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
      "language": "csharp",
      "size": 1584,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
      "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
      "language": "csharp",
      "size": 453,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
      "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
      "language": "csharp",
      "size": 1798,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // üß© Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // üë§ CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // üîó Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // üîò CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // üì® Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // üß† Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // üì° Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üîñ Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ‚úÖ Add this if not already there\n\n        public string? TemplateName { get; set; } // ‚úÖ Needed for follow-up matcher\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
      "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
      "language": "csharp",
      "size": 2252,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üß© Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // üë§ CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ‚úÖ NEW\n\n        // üîó Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ‚úÖ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ‚úÖ Optional\n\n        // üîò Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // üì® Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ‚úÖ Optional\n\n        // üß† Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // üïí Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üîñ Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // üßµ Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ‚úÖ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
      "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
      "language": "csharp",
      "size": 528,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingService.cs",
      "sha256": "90d3f4b3c6a0d5d10d83300d0c3ed58fc81149c2dec145768cfafe2886dccb0b",
      "language": "csharp",
      "size": 9142,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Shared.TrackingUtils;\nusing Serilog;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing AutoMapper;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class TrackingService : ITrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMapper _mapper;\n        public TrackingService(AppDbContext context, IMapper mapper)\n        {\n            _context = context;\n            _mapper = mapper;\n        }\n\n\n        public async Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                // üß† 1. Try enrich from MessageLog (if msg ID provided)\n                if (!string.IsNullOrEmpty(dto.MessageId))\n                {\n                    var messageLog = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m => m.MessageId == dto.MessageId || m.Id.ToString() == dto.MessageId);\n\n                    if (messageLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n                        dto.ContactId ??= messageLog.ContactId;\n                        dto.CampaignId ??= messageLog.CampaignId;\n                        dto.MessageLogId ??= messageLog.Id;\n                    }\n                }\n\n                // üß© 2. Enrich from CampaignSendLog if sourceType = campaign\n                CampaignSendLog? sendLog = null;\n\n                if (dto.SourceType == \"campaign\")\n                {\n                    if (!string.IsNullOrEmpty(dto.MessageId))\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .FirstOrDefaultAsync(c => c.MessageId == dto.MessageId);\n                    }\n\n                    if (sendLog == null && dto.CampaignId != null)\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .Where(c => c.CampaignId == dto.CampaignId)\n                            .OrderByDescending(c => c.CreatedAt)\n                            .FirstOrDefaultAsync();\n                    }\n\n                    if (sendLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty\n                            ? sendLog.Recipient?.BusinessId ?? Guid.Empty\n                            : dto.BusinessId;\n\n                        dto.ContactId ??= sendLog.ContactId;\n                        dto.CampaignId ??= sendLog.CampaignId;\n                        dto.CampaignSendLogId ??= sendLog.Id;\n\n                        // ‚úÖ Update campaign send log click details\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = dto.ClickedAt ?? DateTime.UtcNow;\n                        sendLog.ClickType = dto.ButtonText;\n\n                        await _context.SaveChangesAsync();\n                    }\n                }\n\n                // ‚úÖ 3. Validate business context\n                if (dto.BusinessId == Guid.Empty)\n                {\n                    Log.Warning(\"‚ùå TrackingLog failed: No BusinessId available for click.\");\n                    return ResponseResult.ErrorInfo(\"Business context is missing.\");\n                }\n\n                // üíæ 4. Save tracking log (inline instead of separate method)\n                var trackingLog = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(trackingLog);\n                await _context.SaveChangesAsync();\n\n                // ‚úÖ Return the TrackingLog.Id in the response\n                return ResponseResult.SuccessInfo(\"CTA click tracked successfully.\", trackingLog.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception during CTA tracking enrichment\");\n                return ResponseResult.ErrorInfo(\"Exception during tracking: \" + ex.Message);\n            }\n        }\n\n        public async Task LogCTAClickAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                var log = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to log CTA click\");\n            }\n        }\n        public async Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId)\n        {\n            var tracking = await _context.TrackingLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (tracking == null)\n                return null;\n\n            var contact = tracking.ContactId != null\n                ? await _context.Contacts.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.ContactId)\n                : null;\n\n            var campaign = tracking.CampaignId != null\n                ? await _context.Campaigns.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.CampaignId)\n                : null;\n\n            var messageLog = tracking.MessageLogId != null\n                ? await _context.MessageLogs.AsNoTracking().FirstOrDefaultAsync(m => m.Id == tracking.MessageLogId)\n                : null;\n\n            return new TrackingLogDetailsDto\n            {\n                Tracking = _mapper.Map<TrackingLogDto>(tracking),\n                Contact = contact != null ? _mapper.Map<ContactDto>(contact) : null,\n                Campaign = campaign != null ? _mapper.Map<CampaignDto>(campaign) : null,\n                MessageLog = messageLog != null ? _mapper.Map<MessageLogDto>(messageLog) : null\n            };\n        }\n        public async Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId)\n        {\n            return await _context.TrackingLogs\n                .Where(x => x.BusinessId == businessId && x.SourceType == \"cta-flow\")\n                .OrderByDescending(x => x.ClickedAt)\n                .ToListAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/BackgroundWorkers/WebhookAutoCleanupWorker.cs",
      "sha256": "5149c73a4fbcb11d9e501321407b1c7ae7ee660b8f7d612eca136b528f0467f2",
      "language": "csharp",
      "size": 1212,
      "content": "using xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.BackgroundWorkers\n{\n    public class WebhookAutoCleanupWorker : BackgroundService\n    {\n        private readonly ILogger<WebhookAutoCleanupWorker> _logger;\n        private readonly IServiceProvider _services;\n\n        public WebhookAutoCleanupWorker(IServiceProvider services, ILogger<WebhookAutoCleanupWorker> logger)\n        {\n            _services = services;\n            _logger = logger;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                using var scope = _services.CreateScope();\n                var maintenanceService = scope.ServiceProvider.GetRequiredService<IMaintenanceService>();\n\n                if (await maintenanceService.IsAutoCleanupEnabledAsync())\n                {\n                    var count = await maintenanceService.RunCleanupAsync();\n                    _logger.LogInformation($\"üßπ Auto-cleaned {count} old webhook logs.\");\n                }\n\n                await Task.Delay(TimeSpan.FromHours(12), stoppingToken);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/BackgroundWorkers/WebhookQueueWorker.cs",
      "sha256": "4a0dbbf63a7e5e5dbdea08790538d449d81f91e4234da7a4b8acedf0ff744b25",
      "language": "csharp",
      "size": 3019,
      "content": "using System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.DTOs;\n\npublic class WebhookQueueWorker : BackgroundService\n{\n    private readonly IWebhookQueueService _queueService;\n    private readonly IServiceScopeFactory _scopeFactory;\n    private readonly ILogger<WebhookQueueWorker> _logger;\n\n    public WebhookQueueWorker(\n        IWebhookQueueService queueService,\n        IServiceScopeFactory scopeFactory,\n        ILogger<WebhookQueueWorker> logger)\n    {\n        _queueService = queueService;\n        _scopeFactory = scopeFactory;\n        _logger = logger;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        _logger.LogInformation(\"üöÄ Webhook Queue Worker started.\");\n\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            try\n            {\n                var payload = await _queueService.DequeueAsync(stoppingToken);\n                var clonedPayload = payload.Clone(); // ‚úÖ Avoid disposal issue\n\n                using var scope = _scopeFactory.CreateScope();\n\n                // üîÑ Resolve scoped dependencies\n                var dispatcher = scope.ServiceProvider.GetRequiredService<IWhatsAppWebhookDispatcher>();\n                var failureLogger = scope.ServiceProvider.GetRequiredService<IFailedWebhookLogService>();\n\n                // üöÄ Dispatch\n                await dispatcher.DispatchAsync(clonedPayload);\n            }\n            catch (OperationCanceledException)\n            {\n                _logger.LogInformation(\"üõë Graceful shutdown requested.\");\n                break;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error while processing webhook payload.\");\n\n                try\n                {\n                    using var scope = _scopeFactory.CreateScope();\n                    var failureLogger = scope.ServiceProvider.GetRequiredService<IFailedWebhookLogService>();\n\n                    var fallback = new FailedWebhookLogDto\n                    {\n                        SourceModule = \"WebhookQueueWorker\",\n                        FailureType = \"DispatchError\",\n                        ErrorMessage = ex.Message,\n                       // RawJson = ex.Data[\"payload\"]?.ToString() ?? \"(unavailable)\",\n                        RawJson = ex.Data[\"payload\"]?.ToString() ?? \"{}\",\n                        CreatedAt = DateTime.UtcNow\n                    };\n\n                    await failureLogger.LogFailureAsync(fallback);\n                }\n                catch (Exception innerEx)\n                {\n                    _logger.LogError(innerEx, \"‚ö†Ô∏è Failed to log to FailedWebhookLogs table.\");\n                }\n            }\n        }\n\n        _logger.LogInformation(\"üõë Webhook Queue Worker stopped.\");\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/FailedWebhookLogsController.cs",
      "sha256": "f16ada5c238d2293688a73b0c4428da7f91567d1ca100da1809f0b95ea65c2fc",
      "language": "csharp",
      "size": 1018,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/failed-webhooks\")]\n    public class FailedWebhookLogsController : ControllerBase\n    {\n        private readonly IFailedWebhookLogService _service;\n\n        public FailedWebhookLogsController(IFailedWebhookLogService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllAsync()\n        {\n            var logs = await _service.GetAllAsync();\n            return Ok(logs);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var log = await _service.GetByIdAsync(id);\n            if (log == null)\n                return NotFound();\n\n            return Ok(log);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/MaintenanceController.cs",
      "sha256": "2936737cca434f20b27184b1885f94a5a90a6a94453b29dc0a597b264cc6325d",
      "language": "csharp",
      "size": 3242,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks\")]\n    public class MaintenanceController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n        private readonly IMaintenanceService _maintenance;\n\n        public MaintenanceController(AppDbContext context, IMaintenanceService maintenance)\n        {\n            _context = context;\n            _maintenance = maintenance;\n        }\n\n        // ‚úÖ Injected Test Log for Dev Testing\n        [HttpPost(\"inject-test-log\")]\n        public async Task<IActionResult> InjectTestLog()\n        {\n            var testLog = new FailedWebhookLog\n            {\n                SourceModule = \"WebhookQueueWorker\",\n                FailureType = \"DispatchError\",\n                ErrorMessage = \"üß™ Simulated webhook dispatch failure for testing.\",\n                RawJson = \"{\\\"sample\\\":\\\"test_payload\\\",\\\"reason\\\":\\\"unit_test\\\"}\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FailedWebhookLogs.Add(testLog);\n            await _context.SaveChangesAsync();\n\n            return Ok(new { message = \"‚úÖ Injected test log successfully.\" });\n        }\n\n        // ‚úÖ Manual Cleanup Trigger\n        [HttpPost(\"cleanup-now\")]\n        public async Task<IActionResult> CleanupNow()\n        {\n            var cutoff = DateTime.UtcNow.AddDays(-7);\n            var oldLogs = await _context.FailedWebhookLogs\n                .Where(x => x.CreatedAt < cutoff)\n                .ToListAsync();\n\n            if (!oldLogs.Any())\n                return Ok(new { message = \"‚úÖ No logs to delete.\" });\n\n            _context.FailedWebhookLogs.RemoveRange(oldLogs);\n            await _context.SaveChangesAsync();\n\n            return Ok(new { message = $\"‚úÖ Deleted {oldLogs.Count} old logs.\" });\n        }\n\n        // ‚úÖ Count of all failed logs\n        [HttpGet(\"failed/count\")]\n        public async Task<IActionResult> GetFailedCount()\n        {\n            var count = await _context.FailedWebhookLogs.CountAsync();\n            return Ok(count);\n        }\n\n        // ‚úÖ Cleanup Setting Status\n             [HttpGet(\"settings\")]\n        public async Task<IActionResult> GetCleanupStatus()\n        {\n            var enabled = await _maintenance.IsAutoCleanupEnabledAsync();\n            var lastRun = await _maintenance.GetLastCleanupTimeAsync();\n\n            return Ok(new\n            {\n                enabled,\n                lastCleanupAt = lastRun\n            });\n        }\n\n        // ‚úÖ Enable Auto Cleanup\n        [HttpPost(\"enable-cleanup\")]\n        public async Task<IActionResult> EnableCleanup()\n        {\n            await _maintenance.EnableAutoCleanupAsync();\n            return Ok(new { message = \"‚úÖ Auto-cleanup enabled.\" });\n        }\n\n        // ‚úÖ Disable Auto Cleanup\n        [HttpPost(\"disable-cleanup\")]\n        public async Task<IActionResult> DisableCleanup()\n        {\n            await _maintenance.DisableAutoCleanupAsync();\n            return Ok(new { message = \"‚úÖ Auto-cleanup disabled.\" });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/WebhookTestController.cs",
      "sha256": "d3d3ac0e403d42baaa151d62e86135b71a0116ed7231d86c04b87bbd4ae6ac61",
      "language": "csharp",
      "size": 1569,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/test\")]\n    public class WebhookTestController : ControllerBase\n    {\n        private readonly IWebhookQueueService _queue;\n\n        public WebhookTestController(IWebhookQueueService queue)\n        {\n            _queue = queue;\n        }\n\n        [HttpPost(\"simulate-failure\")]\n        public IActionResult SimulateWebhookFailure()\n        {\n            var fakePayload = new\n            {\n                entry = new[]\n                {\n                    new\n                    {\n                        changes = new[]\n                        {\n                            new\n                            {\n                                value = new\n                                {\n                                    // This will cause dispatcher to throw due to invalid structure\n                                    unexpected = \"üß™ Simulated bad structure\"\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            var json = JsonSerializer.Serialize(fakePayload);\n            var element = JsonDocument.Parse(json).RootElement;\n\n            _queue.Enqueue(element);\n\n            return Ok(new\n            {\n                message = \"‚úÖ Test payload enqueued to simulate failure.\",\n                enqueued = true\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Controllers/WhatsAppWebhookController.cs",
      "sha256": "d25c1bf6870c1712f3270bf8e478e741c09e7d32497bb0f3e64885e8e5c6c7ec",
      "language": "csharp",
      "size": 2801,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System.Text.Json;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/whatsapp\")]\n    public class WhatsAppWebhookController : ControllerBase\n    {\n        private readonly ILogger<WhatsAppWebhookController> _logger;\n        private readonly IConfiguration _config;\n        private readonly AppDbContext _context;\n        private readonly IWhatsAppWebhookService _webhookService;\n        private readonly IWebhookQueueService _queue;\n            public WhatsAppWebhookController(ILogger<WhatsAppWebhookController> logger,\n            IConfiguration config, AppDbContext context, IWhatsAppWebhookService webhookService, IWebhookQueueService queue)\n        {\n            _logger = logger;\n            _config = config;\n            _context = context;\n            _webhookService = webhookService;\n            _queue = queue;\n        }\n\n        // ‚úÖ Step 1: Meta verification endpoint (GET)\n        // Meta calls this to verify your webhook with hub.verify_token and expects you to return hub.challenge\n        [HttpGet]\n        public IActionResult VerifyWebhook(\n            [FromQuery(Name = \"hub.mode\")] string mode,\n            [FromQuery(Name = \"hub.verify_token\")] string token,\n            [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            // üîê Load your secret token from config or environment\n            var expectedToken = _config[\"WhatsApp:MetaToken\"];\n\n            if (mode == \"subscribe\" && token == expectedToken)\n            {\n                _logger.LogInformation(\"‚úÖ WhatsApp webhook verified successfully.\");\n                return Ok(challenge); // Meta expects a 200 OK with the challenge value\n            }\n\n            _logger.LogWarning(\"‚ùå WhatsApp webhook verification failed.\");\n            return Forbid(\"Token mismatch.\");\n        }\n\n     \n        [HttpPost]\n        public IActionResult HandleStatus([FromBody] JsonElement payload)\n        {\n            _logger.LogWarning(\"üì• Webhook received at controller:\\n\" + payload.ToString());\n\n            try\n            {\n                var cloned = payload.Clone(); // Important to clone here\n                _queue.Enqueue(cloned);\n\n                _logger.LogInformation(\"üì• Webhook payload enqueued successfully.\");\n                return Ok(new { received = true });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to enqueue WhatsApp webhook payload.\");\n                return StatusCode(500, new { error = \"Webhook queue failed\" });\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/DTOs/FailedWebhookLogDto.cs",
      "sha256": "6b14d817a983f7eb6626a70cc5aceedd50b164ce0e0282dcf155a1d6eb4b5a51",
      "language": "csharp",
      "size": 391,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Webhooks.DTOs\n{\n    public class FailedWebhookLogDto\n    {\n        public string? ErrorMessage { get; set; }\n        public string? SourceModule { get; set; }\n        public string? FailureType { get; set; }\n        public string RawJson { get; set; } = string.Empty;\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Models/FailedWebhookLog.cs",
      "sha256": "549e466af9a80b67809dd9e25d2bf5b9b5991ce11754225bda46dac4df1e6da6",
      "language": "csharp",
      "size": 624,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Webhooks.Models\n{\n    public class FailedWebhookLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üß† Debug Metadata\n        public string? ErrorMessage { get; set; }\n        public string? SourceModule { get; set; } // e.g., StatusProcessor, ClickProcessor\n        public string? FailureType { get; set; }  // e.g., JSON_PARSE_ERROR, DB_LOOKUP_FAILED\n\n        // üì¶ Raw Data Snapshot\n        public string RawJson { get; set; } = string.Empty;\n\n        // üïí Timeline\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Models/WebhookSettings.cs",
      "sha256": "c0eeeaa5e14f839b159f28d337450f595c7604994690c66fa7df82a56c6a3093",
      "language": "csharp",
      "size": 267,
      "content": "namespace xbytechat.api.Features.Webhooks.Models\n{\n    public class WebhookSettings\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public bool AutoCleanupEnabled { get; set; } = true;\n        public DateTime? LastCleanupAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/FailedWebhookLogCleanupService.cs",
      "sha256": "68f4211391a24a94d3096c5cd71fbd6cbd0fed0211dd2929b92b1780ffd02fc8",
      "language": "csharp",
      "size": 2109,
      "content": "using Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class FailedWebhookLogCleanupService : BackgroundService\n    {\n        private readonly ILogger<FailedWebhookLogCleanupService> _logger;\n        private readonly IServiceProvider _services;\n        private readonly TimeSpan _interval = TimeSpan.FromHours(24); // daily run\n\n        public FailedWebhookLogCleanupService(ILogger<FailedWebhookLogCleanupService> logger, IServiceProvider services)\n        {\n            _logger = logger;\n            _services = services;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _logger.LogInformation(\"üßπ FailedWebhookLogCleanupService started.\");\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    using var scope = _services.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    var cutoff = DateTime.UtcNow.AddDays(-7);\n                    var oldLogs = await db.FailedWebhookLogs\n                        .Where(x => x.CreatedAt < cutoff)\n                        .ToListAsync(stoppingToken);\n\n                    if (oldLogs.Any())\n                    {\n                        db.FailedWebhookLogs.RemoveRange(oldLogs);\n                        await db.SaveChangesAsync(stoppingToken);\n                        _logger.LogInformation(\"üßπ Deleted {Count} old failed webhook logs.\", oldLogs.Count);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"‚ùå Failed to clean up old webhook logs.\");\n                }\n\n                await Task.Delay(_interval, stoppingToken); // wait before next cleanup\n            }\n\n            _logger.LogInformation(\"üõë FailedWebhookLogCleanupService stopped.\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/FailedWebhookLogService.cs",
      "sha256": "3da6a5ad043773f7684b6ea9bc208441cbc36a7e53f01eacdd7c17848118c2af",
      "language": "csharp",
      "size": 1791,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class FailedWebhookLogService : IFailedWebhookLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<FailedWebhookLogService> _logger;\n\n        public FailedWebhookLogService(AppDbContext context, ILogger<FailedWebhookLogService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogFailureAsync(FailedWebhookLogDto dto)\n        {\n            try\n            {\n                var log = new FailedWebhookLog\n                {\n                    ErrorMessage = dto.ErrorMessage,\n                    SourceModule = dto.SourceModule,\n                    FailureType = dto.FailureType,\n                    RawJson = dto.RawJson,\n                    CreatedAt = dto.CreatedAt\n                };\n\n                await _context.FailedWebhookLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to persist webhook error log\");\n            }\n        }\n\n        public async Task<List<FailedWebhookLog>> GetAllAsync()\n        {\n            return await _context.FailedWebhookLogs\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100) // prevent DB overload\n                .ToListAsync();\n        }\n\n        public async Task<FailedWebhookLog?> GetByIdAsync(Guid id)\n        {\n            return await _context.FailedWebhookLogs.FindAsync(id);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IFailedWebhookLogService.cs",
      "sha256": "9366c7a087317049e7dee346a65f7ea81a76fe95fb98fe21ca457e0ed5db6a7c",
      "language": "csharp",
      "size": 396,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Webhooks.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IFailedWebhookLogService\n    {\n        Task LogFailureAsync(FailedWebhookLogDto dto);\n        Task<List<FailedWebhookLog>> GetAllAsync();\n        Task<FailedWebhookLog?> GetByIdAsync(Guid id);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IMaintenanceService.cs",
      "sha256": "76ef1df941e3536bbdce5e7213554b593e6431592ba6527334cf274c78357e26",
      "language": "csharp",
      "size": 323,
      "content": "namespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IMaintenanceService\n    {\n        Task<bool> IsAutoCleanupEnabledAsync();\n        Task EnableAutoCleanupAsync();\n        Task DisableAutoCleanupAsync();\n        Task<DateTime?> GetLastCleanupTimeAsync();\n        Task<int> RunCleanupAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IWebhookQueueService.cs",
      "sha256": "34e2e37f5ba5da57159852cecd9adde2f085640e1eb55a67116b5381ffa2e4b0",
      "language": "csharp",
      "size": 333,
      "content": "using System.Text.Json;\nusing xbytechat.api.Features.Tracking.DTOs;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWebhookQueueService\n    {\n        void Enqueue(JsonElement payload);\n        ValueTask<JsonElement> DequeueAsync(CancellationToken cancellationToken);\n        int GetQueueLength();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IWhatsAppWebhookDispatcher.cs",
      "sha256": "844865d879bca5e59aa9d82cf7fabfb3ac241233391ca0544922a8902eed4a88",
      "language": "csharp",
      "size": 219,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWhatsAppWebhookDispatcher\n    {\n        Task DispatchAsync(JsonElement payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/IWhatsAppWebhookService.cs",
      "sha256": "79f51c796e3319918315cd6043f985b763534fbb19a8357713d2c01aaf385112",
      "language": "csharp",
      "size": 227,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWhatsAppWebhookService\n    {\n        Task ProcessStatusUpdateAsync(JsonElement payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/MaintenanceService .cs",
      "sha256": "c8c7e803e34fb97d2edfbaaf824d332f8de8b1483327e364e63d68dd0082a20e",
      "language": "csharp",
      "size": 2411,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class MaintenanceService : IMaintenanceService\n    {\n        private readonly AppDbContext _context;\n\n        public MaintenanceService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<bool> IsAutoCleanupEnabledAsync()\n        {\n            var setting = await _context.WebhookSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync();\n\n            return setting?.AutoCleanupEnabled ?? false;\n        }\n\n        public async Task<DateTime?> GetLastCleanupTimeAsync()\n        {\n            return await _context.WebhookSettings\n                .AsNoTracking()\n                .Select(s => s.LastCleanupAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task EnableAutoCleanupAsync()\n        {\n            var setting = await GetOrCreateAsync();\n            setting.AutoCleanupEnabled = true;\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task DisableAutoCleanupAsync()\n        {\n            var setting = await GetOrCreateAsync();\n            setting.AutoCleanupEnabled = false;\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<int> RunCleanupAsync()\n        {\n            var threshold = DateTime.UtcNow.AddDays(-7);\n            var oldLogs = await _context.FailedWebhookLogs\n                .Where(l => l.CreatedAt < threshold)\n                .ToListAsync();\n\n            if (oldLogs.Any())\n                _context.FailedWebhookLogs.RemoveRange(oldLogs);\n\n            var setting = await GetOrCreateAsync();\n            setting.LastCleanupAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return oldLogs.Count;\n        }\n\n        private async Task<WebhookSettings> GetOrCreateAsync()\n        {\n            var setting = await _context.WebhookSettings.FirstOrDefaultAsync();\n            if (setting == null)\n            {\n                setting = new WebhookSettings\n                {\n                    AutoCleanupEnabled = false,\n                    LastCleanupAt = null\n                };\n                _context.WebhookSettings.Add(setting);\n                await _context.SaveChangesAsync();\n            }\n            return setting;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/ClickWebhookProcessor.cs",
      "sha256": "0887fd0dd55ee4fa7ceaae2f534d1b7b0fbdb99dd3814e8a861f68c1b9145c3b",
      "language": "csharp",
      "size": 17249,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.IO.Pipelines;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared.TrackingUtils;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class ClickWebhookProcessor : IClickWebhookProcessor\n    {\n        private readonly ILogger<ClickWebhookProcessor> _logger;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly ITrackingService _trackingService;\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly ICTAFlowService _flowService;\n\n        public ClickWebhookProcessor(\n            ILogger<ClickWebhookProcessor> logger,\n            IMessageIdResolver messageIdResolver,\n            ITrackingService trackingService,\n            AppDbContext context,\n            IMessageEngineService messageEngine,\n            ICTAFlowService flowService)\n        {\n            _logger = logger;\n            _messageIdResolver = messageIdResolver;\n            _trackingService = trackingService;\n            _context = context;\n            _messageEngine = messageEngine;\n            _flowService = flowService;\n        }\n\n\n        //public async Task ProcessClickAsync(JsonElement value)\n        //{\n        //    _logger.LogWarning(\"üì• [ENTERED CLICK PROCESSOR]\");\n\n        //    try\n        //    {\n        //        _logger.LogWarning(\"üì• [DEBUG] Click processor entered with value: \" + value.ToString());\n\n        //        if (!value.TryGetProperty(\"messages\", out var messages)) return;\n        //        var message = messages[0];\n\n        //        if (message.GetProperty(\"type\").GetString() != \"button\") return;\n\n        //        var clickMessageId = message.GetProperty(\"id\").GetString();\n        //        var originalMessageId = message.GetProperty(\"context\").GetProperty(\"id\").GetString();\n        //        var from = message.GetProperty(\"from\").GetString();\n        //        var buttonText = message.GetProperty(\"button\").GetProperty(\"text\").GetString()?.Trim().ToLower();\n\n        //        _logger.LogInformation(\"üñ±Ô∏è Button Click ‚ê¶ From: {From}, ClickMsgId: {ClickId}, OriginalMsgId: {OrigId}, Text: {Text}\",\n        //            from, clickMessageId, originalMessageId, buttonText);\n\n        //        Guid businessId = Guid.Empty;\n        //        Guid? contactId = null;\n        //        string contactPhone = from;\n        //        Guid? campaignId = null;\n        //        Guid? sendLogId = null;\n        //        string sourceType = \"catalog\";\n        //        Guid? sourceId = null;\n\n        //        // 1Ô∏è‚É£ Try CampaignSendLog\n        //        var campaignLog = await _context.CampaignSendLogs\n        //            .Include(l => l.Campaign)\n        //            .Include(l => l.Contact)\n        //            .FirstOrDefaultAsync(l => l.MessageId == originalMessageId);\n\n        //        if (campaignLog != null)\n        //        {\n        //            _logger.LogInformation(\"üìä CampaignSendLog matched via context.id\");\n\n        //            businessId = campaignLog.Campaign?.BusinessId ?? Guid.Empty;\n        //            contactId = campaignLog.ContactId;\n        //            contactPhone = campaignLog.Contact?.PhoneNumber ?? from;\n        //            campaignId = campaignLog.CampaignId;\n        //            sendLogId = campaignLog.Id;\n        //            sourceType = \"campaign\";\n        //            sourceId = campaignLog.CampaignId;\n\n        //            // üîÅ Auto Follow-Up\n        //            if (buttonText == \"interested\" &&\n        //                !string.IsNullOrWhiteSpace(campaignLog.Campaign?.FollowUpTemplateId))\n        //            {\n        //                var followUpDto = new SimpleTemplateMessageDto\n        //                {\n        //                    BusinessId = businessId,\n        //                    RecipientNumber = contactPhone,\n        //                    TemplateName = campaignLog.Campaign.FollowUpTemplateId,\n        //                    TemplateParameters = new() // Phase 1 ‚Üí no variables\n        //                };\n\n        //                var result = await _messageEngine.SendTemplateMessageSimpleAsync(followUpDto);\n        //                _logger.LogInformation(result.Success\n        //                    ? \"‚úÖ Follow-up message sent successfully.\"\n        //                    : $\"‚ùå Follow-up failed: {result.Message}\");\n        //            }\n        //        }\n        //        else\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è CampaignSendLog not found. Trying fallback to MessageLogs.\");\n\n        //            var log = await _context.MessageLogs\n        //                .FirstOrDefaultAsync(m =>\n        //                    m.MessageId == originalMessageId ||\n        //                    m.Id.ToString() == originalMessageId ||\n        //                    m.RawResponse.Contains(originalMessageId));\n\n        //            if (log != null)\n        //            {\n        //                businessId = log.BusinessId;\n        //                contactId = log.ContactId;\n        //                contactPhone = log.RecipientNumber ?? from;\n        //                sourceType = \"flow\";\n        //                _logger.LogInformation(\"‚úÖ Fallback matched MessageLog. BusinessId: {BusinessId}\", businessId);\n        //            }\n        //            else\n        //            {\n        //                _logger.LogWarning(\"‚ùå Fallback to MessageLogs failed. No message found for: {OriginalId}\", originalMessageId);\n        //            }\n        //        }\n\n        //        if (businessId == Guid.Empty)\n        //        {\n        //            _logger.LogWarning(\"‚ùå TrackingLog failed: No BusinessId available for click.\");\n        //            return;\n        //        }\n\n        //        // 2Ô∏è‚É£ Save Tracking\n        //        var dto = new TrackingLogDto\n        //        {\n        //            BusinessId = businessId,\n        //            CampaignId = campaignId,\n        //            CampaignSendLogId = sendLogId,\n        //            ContactId = contactId,\n        //            ContactPhone = contactPhone,\n        //            MessageId = originalMessageId,\n        //            MessageLogId = null,\n        //            SourceType = sourceType,\n        //            SourceId = sourceId,\n        //            ButtonText = buttonText,\n        //            CTAType = buttonText,\n        //            ClickedVia = \"webhook\",\n        //            ClickedAt = DateTime.UtcNow,\n        //            Browser = \"WhatsApp\",\n        //            IPAddress = \"webhook\",\n        //            DeviceType = DeviceHelper.GetDeviceType(\"WhatsApp\"),\n        //            Country = await GeoHelper.GetCountryFromIP(\"webhook\"),\n        //            RawJson = value.ToString()\n        //        };\n\n        //        var resultLog = await _trackingService.LogCTAClickWithEnrichmentAsync(dto);\n        //        _logger.LogInformation(\"üì• Tracking Result: {Result}\", resultLog?.Message ?? \"N/A\");\n\n        //        // 3Ô∏è‚É£ Match Flow ‚Üí Trigger Next Step (if any)\n        //        try\n        //        {\n        //            if (!string.IsNullOrWhiteSpace(dto.ButtonText))\n        //            {\n        //                var matchedStep = await _flowService.MatchStepByButtonAsync(\n        //                    businessId,\n        //                    dto.ButtonText.Trim().ToLower(),\n        //                    \"quick_reply\",\n        //                    campaignLog?.Campaign?.MessageTemplate ?? \"\",  // currentTemplateName\n        //                    campaignId\n        //                );\n\n        //                if (matchedStep != null)\n        //                {\n        //                    ResponseResult sendResult;\n\n        //                    switch (matchedStep.TemplateType?.ToLower())\n        //                    {\n        //                        case \"image_template\":\n        //                            var imageDto = new ImageTemplateMessageDto\n        //                            {\n        //                                BusinessId = businessId,\n        //                                RecipientNumber = contactPhone,\n        //                                TemplateName = matchedStep.TemplateToSend,\n        //                                LanguageCode = \"en_US\"\n        //                            };\n        //                            sendResult = await _messageEngine.SendImageTemplateMessageAsync(imageDto);\n        //                            break;\n\n        //                        case \"text_template\":\n        //                            var textDto = new SimpleTemplateMessageDto\n        //                            {\n        //                                BusinessId = businessId,\n        //                                RecipientNumber = contactPhone,\n        //                                TemplateName = matchedStep.TemplateToSend,\n        //                                TemplateParameters = new() // Phase 1 = No placeholders\n        //                            };\n        //                            sendResult = await _messageEngine.SendTemplateMessageSimpleAsync(textDto);\n        //                            break;\n\n        //                        default:\n        //                            _logger.LogWarning(\"‚ùå Unsupported template type in flow step: {Type}\", matchedStep.TemplateType);\n        //                            return;\n        //                    }\n\n        //                    if (sendResult.Success)\n        //                    {\n        //                        _logger.LogInformation(\"‚ö° CTA Flow matched! Sent template: {Template}\", matchedStep.TemplateToSend);\n        //                    }\n        //                    else\n        //                    {\n        //                        _logger.LogWarning(\"‚ùå Failed to send matched CTA template: {Message}\", sendResult.Message);\n        //                    }\n        //                }\n        //                else\n        //                {\n        //                    _logger.LogInformation(\"üü° No CTA Flow matched for button: {Text}\", dto.ButtonText);\n        //                }\n        //            }\n        //        }\n        //        catch (Exception flowEx)\n        //        {\n        //            _logger.LogError(flowEx, \"‚ùå CTA Flow trigger failed.\");\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"‚ùå Failed to process button click.\");\n        //    }\n        //}\n\n        public async Task ProcessClickAsync(JsonElement value)\n        {\n            _logger.LogWarning(\"üì• [ENTERED CLICK PROCESSOR]\");\n\n            try\n            {\n                if (!value.TryGetProperty(\"messages\", out var messages)) return;\n                var message = messages[0];\n\n                if (message.GetProperty(\"type\").GetString() != \"button\") return;\n\n                var clickMessageId = message.GetProperty(\"id\").GetString();\n                var originalMessageId = message.GetProperty(\"context\").GetProperty(\"id\").GetString();\n                var from = message.GetProperty(\"from\").GetString();\n                var buttonText = message.GetProperty(\"button\").GetProperty(\"text\").GetString()?.Trim();\n\n                _logger.LogInformation(\"üñ±Ô∏è Button Click ‚Üí From: {From}, ClickId: {ClickId}, OrigMsgId: {OrigId}, Text: {Text}\",\n                    from, clickMessageId, originalMessageId, buttonText);\n\n                Guid businessId = Guid.Empty;\n                Guid? contactId = null;\n                string contactPhone = from;\n                Guid? campaignId = null;\n                Guid? sendLogId = null;\n                string sourceType = \"catalog\";\n                Guid? sourceId = null;\n\n                // 1Ô∏è‚É£ Try CampaignSendLog\n                var campaignLog = await _context.CampaignSendLogs\n                    .Include(l => l.Campaign)\n                    .Include(l => l.Contact)\n                    .FirstOrDefaultAsync(l => l.MessageId == originalMessageId);\n\n                if (campaignLog != null)\n                {\n                    _logger.LogInformation(\"üìä CampaignSendLog matched via context.id\");\n\n                    businessId = campaignLog.Campaign?.BusinessId ?? Guid.Empty;\n                    contactId = campaignLog.ContactId;\n                    contactPhone = campaignLog.Contact?.PhoneNumber ?? from;\n                    campaignId = campaignLog.CampaignId;\n                    sendLogId = campaignLog.Id;\n                    sourceType = \"campaign\";\n                    sourceId = campaignLog.CampaignId;\n                }\n                else\n                {\n                    var log = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m =>\n                            m.MessageId == originalMessageId ||\n                            m.Id.ToString() == originalMessageId ||\n                            m.RawResponse.Contains(originalMessageId));\n\n                    if (log != null)\n                    {\n                        businessId = log.BusinessId;\n                        contactId = log.ContactId;\n                        contactPhone = log.RecipientNumber ?? from;\n                        sourceType = \"flow\";\n                        _logger.LogInformation(\"‚úÖ Fallback matched MessageLog. BusinessId: {BusinessId}\", businessId);\n                    }\n                }\n\n                if (businessId == Guid.Empty)\n                {\n                    _logger.LogWarning(\"‚ùå TrackingLog failed: No BusinessId available.\");\n                    return;\n                }\n\n                // 2Ô∏è‚É£ Save Click Log with enrichment\n                var dto = new TrackingLogDto\n                {\n                    BusinessId = businessId,\n                    CampaignId = campaignId,\n                    CampaignSendLogId = sendLogId,\n                    ContactId = contactId,\n                    ContactPhone = contactPhone,\n                    MessageId = originalMessageId,\n                    MessageLogId = null,\n                    SourceType = sourceType,\n                    SourceId = sourceId,\n                    ButtonText = buttonText,\n                    CTAType = buttonText,\n                    ClickedVia = \"webhook\",\n                    ClickedAt = DateTime.UtcNow,\n                    Browser = \"WhatsApp\",\n                    IPAddress = \"webhook\",\n                    DeviceType = DeviceHelper.GetDeviceType(\"WhatsApp\"),\n                    Country = await GeoHelper.GetCountryFromIP(\"webhook\"),\n                    RawJson = value.ToString()\n                };\n\n                var resultLog = await _trackingService.LogCTAClickWithEnrichmentAsync(dto);\n                _logger.LogInformation(\"üì• Click Tracked ‚Üí Result: {Msg}\", resultLog?.Message ?? \"N/A\");\n\n                // ‚úÖ Extract TrackingLog.Id from result\n                if (resultLog?.Success != true || resultLog.Data is not Guid trackingLogId)\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è Skipping flow execution: Tracking ID not found.\");\n                    return;\n                }\n\n                // 3Ô∏è‚É£ Match Flow Step and trigger flow\n                if (!string.IsNullOrWhiteSpace(dto.ButtonText))\n                {\n                    var matchedStep = await _flowService.MatchStepByButtonAsync(\n                        businessId,\n                        dto.ButtonText.Trim(),\n                        \"quick_reply\",\n                        campaignLog?.Campaign?.MessageTemplate ?? \"\",\n                        campaignId\n                    );\n\n                    if (matchedStep != null)\n                    {\n                        _logger.LogInformation(\"üîÅ Matched CTA Step ‚Üí {StepId}\", matchedStep.Id);\n\n                        await _flowService.ExecuteVisualFlowAsync(\n                            businessId,\n                            matchedStep.Id,\n                            trackingLogId\n                        );\n\n                        _logger.LogInformation(\"‚ö° Visual flow triggered via CTA click.\");\n                    }\n                    else\n                    {\n                        _logger.LogInformation(\"üü° No visual flow matched for this button: {Text}\", dto.ButtonText);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to process CTA button click.\");\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/IClickWebhookProcessor.cs",
      "sha256": "5c42427d1e6c36dd122b3a10412eb70d7c412baf00ce54a614491a5b1590afeb",
      "language": "csharp",
      "size": 228,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IClickWebhookProcessor\n    {\n        Task ProcessClickAsync(JsonElement value);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/IInboundMessageProcessor.cs",
      "sha256": "ec5496c7810122c99affe09fa17861d6d0c371457d9284e0ba58be6a93ea60f2",
      "language": "csharp",
      "size": 229,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IInboundMessageProcessor\n    {\n        Task ProcessChatAsync(JsonElement value);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/InboundMessageProcessor.cs",
      "sha256": "4d185e53ba4a52cd2439e23dc136aab36f4f7469c5399dd644247fdfd5631ae9",
      "language": "csharp",
      "size": 6493,
      "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.SignalR;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.Automation.Services;\n\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class InboundMessageProcessor : IInboundMessageProcessor\n    {\n        private readonly AppDbContext _context;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly ILogger<InboundMessageProcessor> _logger;\n        private readonly IInboxService _inboxService;\n        private readonly IServiceScopeFactory _serviceScopeFactory;\n        public InboundMessageProcessor(\n            AppDbContext context,\n            IHubContext<InboxHub> hubContext,\n            ILogger<InboundMessageProcessor> logger,\n            IInboxService inboxService,\n            IServiceScopeFactory serviceScopeFactory)\n        {\n            _context = context;\n            _hubContext = hubContext;\n            _logger = logger;\n            _inboxService = inboxService;\n            _serviceScopeFactory = serviceScopeFactory;\n        }\n\n\n\n        \n        public async Task ProcessChatAsync(JsonElement value)\n        {\n            try\n            {\n                using var scope = _serviceScopeFactory.CreateScope();\n                var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n                var contactService = scope.ServiceProvider.GetRequiredService<IContactService>();\n                var chatSessionStateService = scope.ServiceProvider.GetRequiredService<IChatSessionStateService>();\n                var automationService = scope.ServiceProvider.GetRequiredService<IAutomationService>();\n                var logger = scope.ServiceProvider.GetRequiredService<ILogger<InboundMessageProcessor>>();\n\n                // ‚úÖ 1. Extract WhatsApp metadata and message\n                var msg = value.GetProperty(\"messages\")[0];\n                var contactPhone = msg.GetProperty(\"from\").GetString()!;\n                var content = msg.GetProperty(\"text\").GetProperty(\"body\").GetString();\n                var businessNumber = value.GetProperty(\"metadata\").GetProperty(\"display_phone_number\").GetString()!;\n\n                // ‚úÖ 2. Resolve business by WhatsApp number\n                var business = await db.Businesses\n                    .Include(b => b.WhatsAppSettings)\n                    .FirstOrDefaultAsync(b => b.WhatsAppSettings.WhatsAppBusinessNumber == businessNumber);\n\n                if (business == null)\n                {\n                    logger.LogWarning(\"‚ùå Business not found for WhatsApp number: {Number}\", businessNumber);\n                    return;\n                }\n\n                var businessId = business.Id;\n\n                // ‚úÖ 3. Find or create contact\n                var contact = await contactService.FindOrCreateAsync(businessId, contactPhone);\n                if (contact == null)\n                {\n                    logger.LogWarning(\"‚ùå Could not resolve contact for phone: {Phone}\", contactPhone);\n                    return;\n                }\n\n                // ‚úÖ 4. Check chat mode (skip inbox sync if not agent)\n                var mode = await chatSessionStateService.GetChatModeAsync(businessId, contact.Id);\n                var isAgentMode = mode == \"agent\";\n\n                // ‚úÖ 5. Log incoming message\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contact.Id,\n                    RecipientNumber = contactPhone,\n                    MessageContent = content,\n                    Status = \"received\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    IsIncoming = true\n                };\n\n                db.MessageLogs.Add(messageLog);\n                await db.SaveChangesAsync();\n\n                // ‚úÖ 6. Try to trigger automation by keyword\n                try\n                {\n                    var triggerKeyword = content.Trim().ToLower();\n                    var handled = await automationService.TryRunFlowByKeywordAsync(\n                        businessId,\n                        triggerKeyword,\n                        contact.PhoneNumber,\n                        sourceChannel: \"whatsapp\",\n                        industryTag: \"default\"\n                    );\n\n                    if (!handled)\n                    {\n                        logger.LogInformation(\"üïµÔ∏è No automation flow matched keyword: {Keyword}\", triggerKeyword);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    logger.LogError(ex, \"‚ùå Automation flow execution failed.\");\n                }\n\n                // ‚úÖ 7. Only sync to inbox if chat mode is agent\n                if (isAgentMode)\n                {\n                    var inboxService = scope.ServiceProvider.GetRequiredService<IInboxService>();\n                    await inboxService.SaveIncomingMessageAsync(new InboxMessageDto\n                    {\n                        BusinessId = businessId,\n                        ContactId = contact.Id,\n                        RecipientPhone = contact.PhoneNumber,\n                        MessageBody = messageLog.MessageContent,\n                        IsIncoming = true,\n                        Status = messageLog.Status,\n                        SentAt = messageLog.CreatedAt\n                    });\n\n                    logger.LogInformation(\"üì• Message synced to inbox for contact {Phone}\", contactPhone);\n                }\n                else\n                {\n                    logger.LogInformation(\"üö´ Skipping inbox sync: chat mode is not 'agent'\");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to process inbound WhatsApp chat.\");\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/IStatusWebhookProcessor.cs",
      "sha256": "b1e65faf4d0e1fe42cb9f0ca594f5e67270ea101fb1aabf768ab89da63aba838",
      "language": "csharp",
      "size": 239,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IStatusWebhookProcessor\n    {\n        Task ProcessStatusUpdateAsync(JsonElement payload);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/ITemplateWebhookProcessor.cs",
      "sha256": "6f04b24d675a88073c59204ed241e4744205e80e8d488dd464550a6105c45b7a",
      "language": "csharp",
      "size": 242,
      "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface ITemplateWebhookProcessor\n    {\n        Task ProcessTemplateUpdateAsync(JsonElement payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/StatusWebhookProcessor.cs",
      "sha256": "2ed51eba7ff737266deb3c2aa5a4276c3e6afed2ee2da7472bd02e8e695ed4b9",
      "language": "csharp",
      "size": 4153,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class StatusWebhookProcessor : IStatusWebhookProcessor\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<StatusWebhookProcessor> _logger;\n        private readonly IMessageIdResolver _messageIdResolver; // ‚úÖ Injected resolver\n\n        public StatusWebhookProcessor(\n            AppDbContext context,\n            ILogger<StatusWebhookProcessor> logger,\n            IMessageIdResolver messageIdResolver) // ‚úÖ Accept resolver in constructor\n        {\n            _context = context;\n            _logger = logger;\n            _messageIdResolver = messageIdResolver;\n        }\n\n        // üîÑ Extract statuses from the payload and route them to log resolver\n        public async Task ProcessAsync(JsonElement value)\n        {\n            if (!value.TryGetProperty(\"statuses\", out var statuses))\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è 'statuses' field missing in webhook payload.\");\n                return;\n            }\n\n            foreach (var status in statuses.EnumerateArray())\n            {\n                var messageId = status.GetProperty(\"id\").GetString();\n                var statusText = status.GetProperty(\"status\").GetString();\n                //var timestamp = status.TryGetProperty(\"timestamp\", out var ts) ? ts.GetInt64() : 0;\n                //var timestamp = status.TryGetProperty(\"timestamp\", out var ts) ? ts.GetInt64() : 0;\n\n                long timestamp = 0;\n\n                if (status.TryGetProperty(\"timestamp\", out var ts))\n                {\n                    if (ts.ValueKind == JsonValueKind.String && long.TryParse(ts.GetString(), out var parsed))\n                    {\n                        timestamp = parsed;\n                    }\n                    else if (ts.ValueKind == JsonValueKind.Number)\n                    {\n                        timestamp = ts.GetInt64();\n                    }\n                }\n\n                var time = DateTimeOffset.FromUnixTimeSeconds(timestamp).UtcDateTime;\n                _logger.LogDebug(\"üïì Parsed timestamp: {0} from raw type: {1}\", timestamp, ts.ValueKind);\n                // ‚úÖ Resolve the correct CampaignSendLog ID using the new resolver\n                var logId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n\n                if (logId == null)\n                {\n                    _logger.LogWarning($\"‚ö†Ô∏è No matching CampaignSendLog for MessageId: {messageId}\");\n                    continue;\n                }\n\n                // üîç Now load the row by resolved ID\n                var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId.Value);\n                if (log != null)\n                {\n                    log.SendStatus = statusText switch\n                    {\n                        \"sent\" => \"Sent\",\n                        \"delivered\" => \"Delivered\",\n                        \"read\" => \"Read\",\n                        _ => log.SendStatus\n                    };\n\n                    if (statusText == \"delivered\") log.DeliveredAt = time;\n                    if (statusText == \"read\") log.ReadAt = time;\n\n                    await _context.SaveChangesAsync();\n                    _logger.LogInformation($\"‚úÖ CampaignSendLog updated for MessageId: {messageId} ‚Üí {statusText}\");\n                }\n            }\n        }\n\n        // üîÅ Entry point from webhook dispatcher\n        public async Task ProcessStatusUpdateAsync(JsonElement payload)\n        {\n            _logger.LogWarning(\"üîç Incoming timestamp raw value: {0}\", payload.ToString());\n            var entry = payload.GetProperty(\"entry\")[0];\n            var changes = entry.GetProperty(\"changes\")[0];\n            var value = changes.GetProperty(\"value\");\n\n            await ProcessAsync(value); // ‚úÖ Unified internal call\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Processors/TemplateWebhookProcessor.cs",
      "sha256": "0dbe7873fcf7b84d3a4fb9d78bda6689d86cbfd4d9fd50ce1d98029aaaef0558",
      "language": "csharp",
      "size": 1391,
      "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class TemplateWebhookProcessor : ITemplateWebhookProcessor\n    {\n        private readonly ILogger<TemplateWebhookProcessor> _logger;\n\n        public TemplateWebhookProcessor(ILogger<TemplateWebhookProcessor> logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task ProcessTemplateUpdateAsync(JsonElement payload)\n        {\n            try\n            {\n                var entry = payload.GetProperty(\"entry\")[0];\n                var changes = entry.GetProperty(\"changes\")[0];\n                var value = changes.GetProperty(\"value\");\n\n                var eventType = value.GetProperty(\"event\").GetString();\n                var templateId = value.TryGetProperty(\"message_template_id\", out var idProp)\n                                 ? idProp.GetString() : \"(unknown)\";\n\n                _logger.LogInformation($\"üßæ Template Event Received: {eventType} for ID: {templateId}\");\n\n                // üß† You can store in DB or show in admin logs in the future\n\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to process template webhook update.\");\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Resolvers/IMessageIdResolver.cs",
      "sha256": "a9129664eb60ff771e1f4895a51f74dd7277f7693c9a9638cab9363dc4618baa",
      "language": "csharp",
      "size": 369,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Resolvers\n{\n    public interface IMessageIdResolver\n    {\n        Task<Guid?> ResolveCampaignSendLogIdAsync(string messageId);\n        Task<Guid?> ResolveMessageLogIdAsync(string messageId);\n        Task<Guid?> ResolveBusinessIdByMessageIdAsync(string messageId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/Resolvers/MessageIdResolver.cs",
      "sha256": "34280daacb42fd65daf76845f254009aff42867432c235250272bb6fc6676084",
      "language": "csharp",
      "size": 1972,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Resolvers\n{\n    public class MessageIdResolver : IMessageIdResolver\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageIdResolver> _logger;\n\n        public MessageIdResolver(AppDbContext context, ILogger<MessageIdResolver> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task<Guid?> ResolveCampaignSendLogIdAsync(string messageId)\n        {\n            var log = await _context.CampaignSendLogs\n                                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è CampaignSendLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.Id;\n        }\n\n        public async Task<Guid?> ResolveMessageLogIdAsync(string messageId)\n        {\n            var log = await _context.MessageLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è MessageLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.Id;\n        }\n\n        public async Task<Guid?> ResolveBusinessIdByMessageIdAsync(string messageId)\n        {\n            var log = await _context.MessageLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è MessageLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.BusinessId;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/WebhookQueueService.cs",
      "sha256": "5de062949cd3197e00bf3971292ea36c2014849de597b6cc077673c464a02286",
      "language": "csharp",
      "size": 1054,
      "content": "using System.Text.Json;\nusing System.Threading.Channels;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class WebhookQueueService : IWebhookQueueService\n    {\n        private readonly Channel<JsonElement> _queue;\n\n        public WebhookQueueService()\n        {\n            var options = new BoundedChannelOptions(5000)\n            {\n                FullMode = BoundedChannelFullMode.Wait,\n                SingleReader = true,\n                SingleWriter = false\n            };\n\n            _queue = Channel.CreateBounded<JsonElement>(options);\n        }\n\n        public void Enqueue(JsonElement item)\n        {\n            if (!_queue.Writer.TryWrite(item))\n            {\n                throw new InvalidOperationException(\"‚ö†Ô∏è Webhook queue is full.\");\n            }\n        }\n\n        public async ValueTask<JsonElement> DequeueAsync(CancellationToken cancellationToken)\n        {\n            return await _queue.Reader.ReadAsync(cancellationToken);\n        }\n\n        public int GetQueueLength() => _queue.Reader.Count;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/WhatsAppWebhookDispatcher.cs",
      "sha256": "9b49d77f9faaa3791a6a92f988ad2269e92a283fc91898ef5e885ed90fbbd586",
      "language": "csharp",
      "size": 8135,
      "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing static System.Net.Mime.MediaTypeNames;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    /// <summary>\n    /// Central dispatcher for WhatsApp webhook events.\n    /// Routes payloads to the appropriate processor based on payload type.\n    /// </summary>\n    public class WhatsAppWebhookDispatcher : IWhatsAppWebhookDispatcher\n    {\n        private readonly IStatusWebhookProcessor _statusProcessor;\n        private readonly ITemplateWebhookProcessor _templateProcessor;\n        private readonly ILogger<WhatsAppWebhookDispatcher> _logger;\n        private readonly IClickWebhookProcessor _clickProcessor;\n        private readonly IInboundMessageProcessor _inboundMessageProcessor;\n        public WhatsAppWebhookDispatcher(\n            IStatusWebhookProcessor statusProcessor,\n            ITemplateWebhookProcessor templateProcessor,\n            ILogger<WhatsAppWebhookDispatcher> logger,\n            IClickWebhookProcessor clickProcessor,\n            IInboundMessageProcessor inboundMessageProcessor)\n        {\n            _statusProcessor = statusProcessor;\n            _templateProcessor = templateProcessor;\n            _logger = logger;\n            _clickProcessor = clickProcessor;\n            _inboundMessageProcessor = inboundMessageProcessor;\n        }\n\n\n        //public async Task DispatchAsync(JsonElement payload)\n        //{\n        //    //throw new Exception(\"üß™ Simulated webhook dispatch failure for testing.\");\n        //    _logger.LogWarning(\"üì¶ Dispatcher Raw Payload:\\n\" + payload.ToString());\n        //    try\n        //    {\n        //        if (!payload.TryGetProperty(\"entry\", out var entries)) return;\n\n        //        foreach (var entry in entries.EnumerateArray())\n        //        {\n        //            if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n        //            foreach (var change in changes.EnumerateArray())\n        //            {\n        //                if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n        //                // üì® Status Updates\n        //                if (value.TryGetProperty(\"statuses\", out _))\n        //                {\n        //                    _logger.LogInformation(\"üì¶ Routing to Status Processor\");\n        //                    await _statusProcessor.ProcessStatusUpdateAsync(payload);\n        //                    continue;\n        //                }\n\n        //                // üßæ Template Events\n        //                if (value.TryGetProperty(\"event\", out var eventType)\n        //                    && eventType.GetString()?.StartsWith(\"template_\") == true)\n        //                {\n        //                    _logger.LogInformation(\"üì¶ Routing to Template Processor\");\n        //                    await _templateProcessor.ProcessTemplateUpdateAsync(payload);\n        //                    continue;\n        //                }\n\n        //                // üéØ Click Events\n        //                if (value.TryGetProperty(\"messages\", out var messages)\n        //                    && messages.GetArrayLength() > 0\n        //                    && messages[0].TryGetProperty(\"type\", out var type)\n        //                    && type.GetString() == \"button\")\n        //                {\n        //                    _logger.LogInformation(\"üëâ Routing to Click Processor\");\n        //                    await _clickProcessor.ProcessClickAsync(value);\n        //                    continue;\n        //                }\n        //                // üì• Inbound text/image/audio messages from customer\n        //                if (value.TryGetProperty(\"messages\", out var messages) &&\n        //                    messages.GetArrayLength() > 0 &&\n        //                    messages[0].TryGetProperty(\"type\", out var typeProp))\n        //                {\n        //                    var type = typeProp.GetString();\n\n        //                    if (type is \"text\" or \"image\" or \"audio\")\n        //                    {\n        //                        _logger.LogInformation(\"üí¨ Routing to InboundMessageProcessor (type: {Type})\", type);\n        //                        await _inboundProcessor.ProcessAsync(value);\n        //                        continue;\n        //                    }\n        //                }\n\n        //                _logger.LogWarning(\"‚ö†Ô∏è No matching event processor found.\");\n        //            }\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"‚ùå Dispatcher failed to process WhatsApp webhook.\");\n        //    }\n        //}\n\n        public async Task DispatchAsync(JsonElement payload)\n        {\n            //clickMessages for button clicks\n            // inboundMessages for text / image / audio\n\n            _logger.LogWarning(\"üì¶ Dispatcher Raw Payload:\\n\" + payload.ToString());\n\n            try\n            {\n                if (!payload.TryGetProperty(\"entry\", out var entries)) return;\n\n                foreach (var entry in entries.EnumerateArray())\n                {\n                    if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n                    foreach (var change in changes.EnumerateArray())\n                    {\n                        if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n                        // üì® Status Updates\n                        if (value.TryGetProperty(\"statuses\", out _))\n                        {\n                            _logger.LogInformation(\"üì¶ Routing to Status Processor\");\n                            await _statusProcessor.ProcessStatusUpdateAsync(payload);\n                            continue;\n                        }\n\n                        // üßæ Template Events\n                        if (value.TryGetProperty(\"event\", out var eventType)\n                            && eventType.GetString()?.StartsWith(\"template_\") == true)\n                        {\n                            _logger.LogInformation(\"üì¶ Routing to Template Processor\");\n                            await _templateProcessor.ProcessTemplateUpdateAsync(payload);\n                            continue;\n                        }\n\n                        // üéØ Click Events (button type)\n                        if (value.TryGetProperty(\"messages\", out var clickMessages)\n                            && clickMessages.GetArrayLength() > 0\n                            && clickMessages[0].TryGetProperty(\"type\", out var clickType)\n                            && clickType.GetString() == \"button\")\n                        {\n                            _logger.LogInformation(\"üëâ Routing to Click Processor\");\n                            await _clickProcessor.ProcessClickAsync(value);\n                            continue;\n                        }\n\n                        // üí¨ Inbound Messages (text/image/audio)\n                        if (value.TryGetProperty(\"messages\", out var inboundMessages)\n                            && inboundMessages.GetArrayLength() > 0\n                            && inboundMessages[0].TryGetProperty(\"type\", out var inboundType))\n                        {\n                            var type = inboundType.GetString();\n\n                            if (type is \"text\" or \"image\" or \"audio\")\n                            {\n                                _logger.LogInformation(\"üí¨ Routing to InboundMessageProcessor (type: {Type})\", type);\n                                await _inboundMessageProcessor.ProcessChatAsync(value);\n                                continue;\n                            }\n                        }\n\n                        _logger.LogWarning(\"‚ö†Ô∏è No matching event processor found.\");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Dispatcher failed to process WhatsApp webhook.\");\n            }\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Webhooks/Services/WhatsAppWebhookService.cs",
      "sha256": "1eab721a5c07db54368581314d45a8dfb105e5d301d1dd25be6883950deaad02",
      "language": "csharp",
      "size": 5546,
      "content": "using System;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class WhatsAppWebhookService : IWhatsAppWebhookService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<WhatsAppWebhookService> _logger;\n\n        public WhatsAppWebhookService(AppDbContext context, ILogger<WhatsAppWebhookService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n        public async Task ProcessStatusUpdateAsync(JsonElement payload)\n        {\n            _logger.LogInformation(\"üì¶ Processing Webhook Status:\\n\" +\n                JsonSerializer.Serialize(payload, new JsonSerializerOptions { WriteIndented = true }));\n\n            if (!payload.TryGetProperty(\"entry\", out var entries))\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è Payload missing 'entry' property.\");\n                return;\n            }\n\n            foreach (var entry in entries.EnumerateArray())\n            {\n                if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n                foreach (var change in changes.EnumerateArray())\n                {\n                    if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n                    if (!value.TryGetProperty(\"statuses\", out var statuses)) continue;\n\n                    foreach (var status in statuses.EnumerateArray())\n                    {\n                        string? messageId = status.TryGetProperty(\"id\", out var idProp) ? idProp.GetString() : null;\n                        string? statusText = status.TryGetProperty(\"status\", out var statusProp) ? statusProp.GetString() : null;\n                        long timestamp = status.TryGetProperty(\"timestamp\", out var tsProp) && tsProp.ValueKind == JsonValueKind.String\n                                         && long.TryParse(tsProp.GetString(), out var parsedTs)\n                                         ? parsedTs\n                                         : (tsProp.ValueKind == JsonValueKind.Number ? tsProp.GetInt64() : 0);\n\n                        if (string.IsNullOrEmpty(messageId) || string.IsNullOrEmpty(statusText))\n                        {\n                            _logger.LogWarning(\"‚ö†Ô∏è Missing messageId or statusText in webhook payload.\");\n                            continue;\n                        }\n\n                        var log = await _context.CampaignSendLogs\n                            //.AsNoTracking()\n                            .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n                        if (log != null)\n                        {\n                            var time = DateTimeOffset.FromUnixTimeSeconds(timestamp).UtcDateTime;\n\n                            //log.SendStatus = statusText switch\n                            //{\n                            //    \"sent\" => \"Sent\",\n                            //    \"delivered\" => \"Delivered\",\n                            //    \"read\" => \"Read\",\n                            //    _ => log.SendStatus\n                            //};\n\n                            //if (statusText == \"delivered\") log.DeliveredAt = time;\n                            //if (statusText == \"read\") log.ReadAt = time;\n\n                            //await _context.SaveChangesAsync();\n                            // üîÅ Avoid redundant updates\n                            var newStatus = statusText switch\n                            {\n                                \"sent\" => \"Sent\",\n                                \"delivered\" => \"Delivered\",\n                                \"read\" => \"Read\",\n                                _ => null\n                            };\n\n                            bool isUpdated = false;\n\n                            if (!string.IsNullOrEmpty(newStatus) && log.SendStatus != newStatus)\n                            {\n                                log.SendStatus = newStatus;\n                                isUpdated = true;\n                            }\n\n                            if (statusText == \"delivered\" && log.DeliveredAt == null)\n                            {\n                                log.DeliveredAt = time;\n                                isUpdated = true;\n                            }\n\n                            if (statusText == \"read\" && log.ReadAt == null)\n                            {\n                                log.ReadAt = time;\n                                isUpdated = true;\n                            }\n\n                            if (isUpdated)\n                            {\n                                await _context.SaveChangesAsync();\n                                _logger.LogInformation($\"‚úÖ Log updated for MessageId: {messageId} ‚Üí {newStatus}\");\n                            }\n                            else\n                            {\n                                _logger.LogInformation($\"üîÅ Duplicate status '{statusText}' skipped for MessageId: {messageId}\");\n                            }\n\n                            _logger.LogInformation($\"‚úÖ Log updated for MessageId: {messageId} ‚Üí {statusText}\");\n                        }\n                        else\n                        {\n                            _logger.LogWarning($\"‚ö†Ô∏è No matching CampaignSendLog for MessageId: {messageId}\");\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/WhatsAppIntegration/Controllers/WhatsAppTemplateController.cs",
      "sha256": "7cee6e94d95a99b2c7b15eb9567b21bea75fb9efd058d6c2a00fba7585616dc8",
      "language": "csharp",
      "size": 2867,
      "content": "\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json.Linq;\n\nnamespace xbytechat.api.Features.WhatsAppIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/whatsapp\")]\n    public class WhatsAppTemplateController : ControllerBase\n    {\n        private readonly IConfiguration _config;\n\n        public WhatsAppTemplateController(IConfiguration config)\n        {\n            _config = config;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetTemplates()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v22.0/{wabaId}/message_templates\";\n\n            using var client = new HttpClient();\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            try\n            {\n                var response = await client.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                    return StatusCode((int)response.StatusCode, new { success = false, error = json });\n\n                var root = JsonConvert.DeserializeObject<JObject>(json);\n                var templatesRaw = root[\"data\"] as JArray;\n\n                if (templatesRaw == null)\n                    return BadRequest(new { success = false, error = \"Meta API did not return data array.\" });\n\n                var templates = new List<object>();\n\n                foreach (var tpl in templatesRaw)\n                {\n                    string name = tpl[\"name\"]?.ToString() ?? \"\";\n                    string language = tpl[\"language\"]?.ToString() ?? \"en_US\";\n\n                    string bodyText = \"\";\n                    var components = tpl[\"components\"] as JArray;\n\n                    if (components != null)\n                    {\n                        foreach (var comp in components)\n                        {\n                            if (comp[\"type\"]?.ToString() == \"BODY\")\n                            {\n                                bodyText = comp[\"text\"]?.ToString() ?? \"\";\n                                break;\n                            }\n                        }\n                    }\n\n                    templates.Add(new\n                    {\n                        name,\n                        language,\n                        body = bodyText\n                    });\n                }\n\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { success = false, error = ex.Message });\n            }\n        }\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/WhatsAppIntegration/DTOs/WhatsAppTemplateDto.cs",
      "sha256": "66133a62d929f35f6f56d4d6c3c9a872e14788627c9645fa41aa6eee13290993",
      "language": "csharp",
      "size": 111,
      "content": "namespace xbytechat.api.Features.WhatsAppIntegration.DTOs\n{\n    public class WhatsAppTemplateDto\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Controllers/LeadTimelineController.cs",
      "sha256": "2bf2b77897c9f322069f976352984cc8a0a0d25514e1e411e2e2393e3ccba3f0",
      "language": "csharp",
      "size": 2028,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.DTOs;\n\nnamespace xbytechat.api.Features.xbTimelines.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LeadTimelineController : ControllerBase\n    {\n        private readonly ILeadTimelineService _timelineService;\n\n        public LeadTimelineController(ILeadTimelineService timelineService)\n        {\n            _timelineService = timelineService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddTimelineEntry([FromBody] LeadTimelineDto dto)\n        {\n            try\n            {\n                if (!ModelState.IsValid)\n                    return BadRequest(ModelState);\n\n                var result = await _timelineService.AddTimelineEntryAsync(dto);\n\n                Log.Information(\"‚úÖ Timeline entry created for ContactId: {ContactId}\", dto.ContactId);\n\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to add timeline entry for ContactId: {ContactId}\", dto.ContactId);\n                throw;\n            }\n        }\n\n        [HttpGet(\"contact/{contactId}\")]\n        public async Task<IActionResult> GetTimeline(Guid contactId)\n        {\n            try\n            {\n                var timeline = await _timelineService.GetTimelineByContactIdAsync(contactId);\n\n                Log.Information(\"üìÑ Retrieved {Count} entries for ContactId: {ContactId}\", timeline.Count, contactId);\n\n                return Ok(timeline);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to get timeline for ContactId: {ContactId}\", contactId);\n                throw;\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll()\n        {\n            var timelines = await _timelineService.GetAllTimelinesAsync();\n            return Ok(timelines);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/DTOs/CampaignTimelineLogDto.cs",
      "sha256": "b279e39522b2d36effd77fe29c36653ca83b93c6cc9a1281d1ed6b3e596b96e3",
      "language": "csharp",
      "size": 361,
      "content": "public class CampaignTimelineLogDto\n{\n    public Guid ContactId { get; set; }\n    public Guid BusinessId { get; set; }   // ‚úÖ Needed for timeline insertion\n    public Guid CampaignId { get; set; }\n    public string CampaignName { get; set; } = string.Empty; // ‚úÖ Safe default to avoid null issues\n    public DateTime? Timestamp { get; set; } // optional\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/DTOs/CRMTimelineLogDto.cs",
      "sha256": "e6ce11c00e1130226359d24f7c9da23fe4fc68c6e725c5a449ed10a345378269",
      "language": "csharp",
      "size": 693,
      "content": "using System;\n\nnamespace xbytechat.api.Features.xbTimelines.DTOs\n{\n    public class CRMTimelineLogDto\n    {\n        public Guid ContactId { get; set; }\n        public Guid BusinessId { get; set; }\n        public string EventType { get; set; }  // üß© Example: \"NoteAdded\", \"ReminderSet\", \"TagApplied\"\n        public string Description { get; set; }\n        public Guid? ReferenceId { get; set; }  // üÜî Related NoteId, ReminderId, TagId (optional)\n        public string CreatedBy { get; set; }\n        public string? Category { get; set; } = \"CRM\";  // üìÇ Default category: CRM\n        public DateTime? Timestamp { get; set; }  // ‚è∞ Custom time if needed (else CreatedAt = now)\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/DTOs/LeadTimelineDto.cs",
      "sha256": "b4692f6cebba16abcb7dc7450172517334a4832fce8e02d3c4273da2d001f2c8",
      "language": "csharp",
      "size": 687,
      "content": "using System;\n\nnamespace xbytechat.api.Features.xbTimelines.DTOs\n{\n    public class LeadTimelineDto\n    {\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; } \n        public string ContactNumber { get; set; } \n        public string EventType { get; set; }\n        public string Description { get; set; }\n        public string? Data { get; set; }\n        public Guid? ReferenceId { get; set; }\n        public bool IsSystemGenerated { get; set; } = false;\n        public string CreatedBy { get; set; }\n        public string? Source { get; set; }\n        public string? Category { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Mappers/LeadTimelineMapper.cs",
      "sha256": "de301765ab3465a422c99453aab98cf7b40ec5177358642af08c2d5ec36ead4a",
      "language": "csharp",
      "size": 1837,
      "content": "using xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Mappers\n{\n    public static class LeadTimelineMapper\n    {\n        public static LeadTimelineDto ToDto(Models.LeadTimeline entry)\n        {\n            if (entry == null) return null;\n\n            return new LeadTimelineDto\n            {\n                ContactId = entry.ContactId,\n                ContactName = entry.Contact?.Name,                // ‚úÖ Enriched from navigation\n                ContactNumber = entry.Contact?.PhoneNumber,       // ‚úÖ Enriched from navigation\n                EventType = entry.EventType,\n                Description = entry.Description,\n                Data = entry.Data,\n                ReferenceId = entry.ReferenceId,\n                IsSystemGenerated = entry.IsSystemGenerated,\n                CreatedBy = entry.CreatedBy,\n                Source = entry.Source,\n                Category = entry.Category,\n                // ‚úÖ CreatedAt is intentionally excluded from DTO\n            };\n        }\n\n        // Optional for create/update, include only necessary fields\n        public static Models.LeadTimeline ToModel(LeadTimelineDto dto)\n        {\n            if (dto == null) return null;\n\n            return new Models.LeadTimeline\n            {\n                ContactId = dto.ContactId,\n                EventType = dto.EventType,\n                Description = dto.Description,\n                Data = dto.Data,\n                ReferenceId = dto.ReferenceId,\n                IsSystemGenerated = dto.IsSystemGenerated,\n                CreatedBy = dto.CreatedBy,\n                Source = dto.Source,\n                Category = dto.Category,\n                CreatedAt = DateTime.UtcNow // ‚úÖ Always use UTC when creating\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Models/LeadTimeline.cs",
      "sha256": "deaadfd25e7f565dc0456a66a61612baa9aea7a7dc297feca882d2108906413f",
      "language": "csharp",
      "size": 1195,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Models\n{\n    public class LeadTimeline\n    {\n        public int Id { get; set; }\n        public Guid ContactId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }  // optional\n\n        public Contact Contact { get; set; } // üÜï Navigation property\n\n        public string EventType { get; set; }\n\n        public string Description { get; set; }\n        public string? Data { get; set; }\n        public Guid? ReferenceId { get; set; }           // ‚úÖ New\n        public bool IsSystemGenerated { get; set; } = false;  // ‚úÖ New\n        public string CreatedBy { get; set; }\n        public string? Source { get; set; }\n        public string? Category { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n        public string? CTAType { get; set; } // e.g., \"BuyNow\", \"PriceCheck\", \"ConfirmReminder\"\n        public string? CTASourceType { get; set; } // e.g., \"catalog\", \"campaign\", \"reminder\"\n        public Guid? CTASourceId { get; set; } // ID of the source object (productId, reminderId)\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/ILeadTimelineService.cs",
      "sha256": "4bff375276ef500fcbd0288211c9a8438d983b063537b2995a6fc98a8eba1148",
      "language": "csharp",
      "size": 709,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.xbTimeline.Services\n{\n    public interface ILeadTimelineService\n    {\n        Task<LeadTimeline> AddTimelineEntryAsync(LeadTimelineDto dto);\n        Task<List<LeadTimeline>> GetTimelineByContactIdAsync(Guid contactId);\n        Task<List<LeadTimelineDto>> GetAllTimelinesAsync();\n        Task AddFromCatalogClickAsync(CatalogClickLog log);\n        Task<ResponseResult> LogCampaignSendAsync(CampaignTimelineLogDto dto);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/ITimelineService.cs",
      "sha256": "3e8a236b7ce0a2af07bc27014910b7fbd77a83c78e8ceebe38c99bab96d183e4",
      "language": "csharp",
      "size": 448,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.xbTimelines.DTOs;\n\nnamespace xbytechat.api.Features.xbTimelines.Services\n{\n    public interface ITimelineService\n    {\n        // Already existing methods...\n\n        // üÜï CRM related methods\n        Task<bool> LogNoteAddedAsync(CRMTimelineLogDto dto);\n        Task<bool> LogReminderSetAsync(CRMTimelineLogDto dto);\n        Task<bool> LogTagAppliedAsync(CRMTimelineLogDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/LeadTimelineService.cs",
      "sha256": "cf0715e549aeb3e6288ceb6cb82177dea0441d9953e64e6aca44f13ed2a19083",
      "language": "csharp",
      "size": 7579,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing static xbytechat.api.Features.BusinessModule.Models.Business;\nusing System.Text.Json;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.PlanManagement.Models;\n\n\nnamespace xbytechat.api.Features.xbTimeline.Services\n{\n    public class LeadTimelineService : ILeadTimelineService\n    {\n        private readonly AppDbContext _context;\n       \n\n        public LeadTimelineService(AppDbContext context )\n        {\n            _context = context;\n        \n        }\n\n        public async Task<LeadTimeline> AddTimelineEntryAsync(LeadTimelineDto dto)\n        {\n            try\n            {\n                var entry = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    EventType = dto.EventType,\n                    Description = dto.Description,\n                    Data = dto.Data,\n                    ReferenceId = dto.ReferenceId,\n                    IsSystemGenerated = dto.IsSystemGenerated,\n                    CreatedBy = dto.CreatedBy,\n                    Source = dto.Source,\n                    Category = dto.Category,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _context.LeadTimelines.Add(entry);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"‚úÖ Timeline entry added for ContactId: {ContactId}\", dto.ContactId);\n\n                return entry;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Error adding timeline entry for ContactId: {ContactId}\", dto.ContactId);\n                throw; // Let global middleware handle this\n            }\n        }\n\n        public async Task<List<LeadTimeline>> GetTimelineByContactIdAsync(Guid contactId)\n        {\n            try\n            {\n                var results = await _context.LeadTimelines\n                    .Where(x => x.ContactId == contactId)\n                    .OrderByDescending(x => x.CreatedAt)\n                    .ToListAsync();\n\n                Log.Information(\"üìÑ Fetched {Count} timeline entries for ContactId: {ContactId}\", results.Count, contactId);\n\n                return results;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to fetch timeline for ContactId: {ContactId}\", contactId);\n                throw;\n            }\n        }\n\n        public async Task<List<LeadTimelineDto>> GetAllTimelinesAsync()\n        {\n            try\n            {\n                var entries = await _context.LeadTimelines\n                    .Include(t => t.Contact) // for Contact Name/Phone\n                    .OrderByDescending(e => e.CreatedAt)\n                    .ToListAsync();\n\n                var dtoList = entries.Select(entry => new LeadTimelineDto\n                {\n                    ContactId = entry.ContactId,\n                    EventType = entry.EventType,\n                    Description = entry.Description,\n                    Data = entry.Data,\n                    ReferenceId = entry.ReferenceId,\n                    CreatedAt = entry.CreatedAt,\n                    CreatedBy = entry.CreatedBy,\n                    Source = entry.Source,\n                    Category = entry.Category,\n                    IsSystemGenerated = entry.IsSystemGenerated,\n                    ContactName = entry.Contact?.Name,\n                    ContactNumber = entry.Contact?.PhoneNumber\n                }).ToList();\n\n                Log.Information(\"üìÑ Loaded {Count} total timeline entries\", dtoList.Count);\n                return dtoList;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to fetch all timeline entries\");\n                throw;\n            }\n        }\n        public async Task AddFromCatalogClickAsync(CatalogClickLog log)\n        {\n            if (log == null)\n            {\n                Log.Warning(\"CatalogClickLog is null. Skipping timeline creation.\");\n                return;\n            }\n\n            try\n            {\n                var business = await _context.Businesses\n                    .AsNoTracking()\n                    .FirstOrDefaultAsync(b => b.Id == log.BusinessId);\n\n                if (business == null)\n                {\n                    Log.Warning(\"Business not found for ID: {BusinessId}. Skipping timeline creation.\", log.BusinessId);\n                    return;\n                }\n\n                // if (business.Plan == PlanType.Advanced)\n                if (business?.BusinessPlanInfo?.Plan == PlanType.Advanced)\n                {\n                    Log.Information(\"Timeline skipped for Basic Plan - BusinessId: {BusinessId}\", business.Id);\n                    return;\n                }\n\n\n                var description = $\"{log.ProductBrowsed} | {log.CTAJourney}\";\n\n                var timelineEntry = new LeadTimeline\n                {\n                    BusinessId = log.BusinessId,\n                    ContactId = log.ContactId ?? Guid.Empty,\n                    EventType = \"CatalogCTA\",\n                    Description = description,\n                    Data = JsonSerializer.Serialize(log),\n                    ReferenceId = null,\n                    CreatedBy = \"system\",\n                    IsSystemGenerated = true,\n                    Source = \"Catalog\",\n                    Category = log.CategoryBrowsed,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _context.LeadTimelines.Add(timelineEntry);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"üìà Timeline entry created from CatalogClick for UserId: {UserId}\", log.UserId);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Error creating timeline entry from CatalogClick for UserId: {UserId}\", log.UserId);\n                // Safe swallow\n            }\n        }\n\n        public async Task<ResponseResult> LogCampaignSendAsync(CampaignTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"CampaignSend\",\n                    Description = $\"Campaign '{dto.CampaignName}' was sent.\", // ‚úÖ Timeline me readable text\n                    ReferenceId = dto.CampaignId, // ‚úÖ Linking to campaign record\n                    IsSystemGenerated = false,    // ‚úÖ Default (campaign sending is manual action)\n                    CreatedBy = \"system\",         // ‚úÖ Or actual user email if needed later\n                    Source = \"CampaignModule\",    // ‚úÖ Source field for clarity\n                    Category = \"Messaging\",       // ‚úÖ Logical grouping\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow // ‚úÖ Use given Timestamp or fallback to now\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Campaign send event logged into timeline.\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to log campaign send event: \" + ex.Message);\n            }\n        }\n\n\n    }\n\n\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/xbTimelines/Services/TimelineService.cs",
      "sha256": "34982b110dddb7a0afcac7582aa0c8dfc2d85810317956df389aaf17bd1a0a1f",
      "language": "csharp",
      "size": 3341,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Services\n{\n    public class TimelineService : ITimelineService\n    {\n        private readonly AppDbContext _context;\n\n        public TimelineService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // üß© Log Note Added into Timeline\n        public async Task<bool> LogNoteAddedAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"NoteAdded\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        // ‚è∞ Log Reminder Set into Timeline\n        public async Task<bool> LogReminderSetAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"ReminderSet\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        // üè∑Ô∏è Log Tag Applied into Timeline\n        public async Task<bool> LogTagAppliedAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"TagApplied\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/GlobalExceptionMiddleware.cs",
      "sha256": "81f92c798910995fdc5e81622269bc30f14971bf74da00e5b27af3bfe4a04a79",
      "language": "csharp",
      "size": 3497,
      "content": "using System.Net;\nusing Serilog;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.AspNetCore.Hosting;\n\npublic class GlobalExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n    private readonly IWebHostEnvironment _env;\n\n    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n    {\n        _next = next;\n        _logger = logger;\n        _env = env;\n    }\n    public class ErrorResponse\n    {\n        public int StatusCode { get; set; }\n        public string Message { get; set; }\n        public string? StackTrace { get; set; }\n        public string Path { get; set; }\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            Log.Error(ex, \"‚ùå An unhandled exception occurred\");\n\n            // üö© Prevent double-write/headers-already-sent error!\n            if (context.Response.HasStarted)\n            {\n                _logger.LogError(\"Response has already started, unable to write error response for path: {Path}\", context.Request.Path);\n                return;\n            }\n\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n            var response = new ErrorResponse\n            {\n                StatusCode = context.Response.StatusCode,\n                Message = ex.Message,\n                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n                Path = context.Request.Path\n            };\n            await context.Response.WriteAsJsonAsync(response);\n        }\n    }\n}\n\n\n//using System.Net;\n//using Serilog;\n//using System.Net;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Http;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.AspNetCore.Hosting;\n\n//public class GlobalExceptionMiddleware\n//{\n//    private readonly RequestDelegate _next;\n//    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n//    private readonly IWebHostEnvironment _env;\n\n//    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n//    {\n//        _next = next;\n//        _logger = logger;\n//        _env = env;\n//    }\n//    public class ErrorResponse\n//    {\n//        public int StatusCode { get; set; }\n//        public string Message { get; set; }\n//        public string? StackTrace { get; set; }\n//        public string Path { get; set; }\n//    }\n\n//    public async Task Invoke(HttpContext context)\n//    {\n//        try\n//        {\n//            await _next(context);\n//        }\n//        catch (Exception ex)\n//        {\n//            Log.Error(ex, \"‚ùå An unhandled exception occurred\");\n\n//            context.Response.ContentType = \"application/json\";\n//            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n//            var response = new ErrorResponse\n//            {\n//                StatusCode = context.Response.StatusCode,\n//                Message = ex.Message,\n//                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n//                Path = context.Request.Path\n//            };\n//            await context.Response.WriteAsJsonAsync(response);\n//        }\n//    }\n\n//}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/JwtErrorHandlingMiddleware.cs",
      "sha256": "d35104606ec5c8b08c106f2499d4962349d1c9c99465f0772fe1a92366cdcfac",
      "language": "csharp",
      "size": 2000,
      "content": "using Microsoft.AspNetCore.Http;\nusing System.Net;\nusing System.Text.Json;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace xbytechat.api.Middlewares\n{\n    public class JwtErrorHandlingMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public JwtErrorHandlingMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context); // Proceed to next middleware\n            }\n            catch (SecurityTokenExpiredException)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = \"‚ùå Token expired. Please login again.\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (SecurityTokenException ex)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = $\"‚ùå Token invalid: {ex.Message}\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (Exception)\n            {\n                // Pass unhandled exceptions to global exception middleware\n                throw;\n            }\n        }\n    }\n\n    // Extension method for clean registration\n    public static class JwtErrorHandlingMiddlewareExtensions\n    {\n        public static IApplicationBuilder UseJwtErrorHandling(this IApplicationBuilder builder)\n        {\n            return builder.UseMiddleware<JwtErrorHandlingMiddleware>();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequirePermissionAttribute.cs",
      "sha256": "a6d3aaceba78295b73d29b3f7b0c72837f08e7f8cb0004a15f1f77f1066dc3c2",
      "language": "csharp",
      "size": 1156,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Middleware.Attributes\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePermissionAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string _requiredPermission;\n\n        public RequirePermissionAttribute(string requiredPermission)\n        {\n            _requiredPermission = requiredPermission;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var user = context.HttpContext.User;\n\n            if (!user.Identity.IsAuthenticated)\n            {\n                context.Result = new UnauthorizedResult();\n                return;\n            }\n\n            var permissionsClaim = user.Claims.FirstOrDefault(c => c.Type == \"permissions\")?.Value;\n\n            if (permissionsClaim == null || !permissionsClaim.Split(',').Contains(_requiredPermission))\n            {\n                context.Result = new ForbidResult();\n            }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequirePlanAttribute.cs",
      "sha256": "3e7d8fc23618708b9d4ae5351012eb53f013b2ab0f579426c3d4c9091ed06251",
      "language": "csharp",
      "size": 887,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePlanAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _allowedPlans;\n\n        public RequirePlanAttribute(params string[] allowedPlans)\n        {\n            _allowedPlans = allowedPlans;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var plan = context.HttpContext.User.FindFirst(\"plan\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(plan) || !_allowedPlans.Any(p => p.ToLowerInvariant() == plan))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequireRoleAttribute.cs",
      "sha256": "b8ca70695e176a36191713cb6b179e1f5097d9077227a77b8658f86392b98b6b",
      "language": "csharp",
      "size": 852,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequireRoleAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _roles;\n\n        public RequireRoleAttribute(params string[] roles)\n        {\n            _roles = roles;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var role = context.HttpContext.User.FindFirst(\"role\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(role) || !_roles.Any(r => r.ToLowerInvariant() == role))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/20250617162332_Initial.cs",
      "sha256": "7998b36675fd84a0f596d341050d3e4761c48c8480a617364e4471ef8056378f",
      "language": "csharp",
      "size": 86063,
      "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class Initial : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.CreateTable(\n                name: \"AuditLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PerformedByUserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PerformedByUserName = table.Column<string>(type: \"text\", nullable: true),\n                    RoleAtTime = table.Column<string>(type: \"text\", nullable: true),\n                    ActionType = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IPAddress = table.Column<string>(type: \"text\", nullable: true),\n                    UserAgent = table.Column<string>(type: \"text\", nullable: true),\n                    Location = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AuditLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlows\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    NodesJson = table.Column<string>(type: \"text\", nullable: false),\n                    EdgesJson = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlows\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerType = table.Column<string>(type: \"text\", nullable: false),\n                    ReplyContent = table.Column<string>(type: \"text\", nullable: false),\n                    FlowName = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    TriggeredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Businesses\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CompanyName = table.Column<string>(type: \"text\", nullable: true),\n                    BusinessName = table.Column<string>(type: \"text\", nullable: false),\n                    BusinessEmail = table.Column<string>(type: \"text\", nullable: false),\n                    RepresentativeName = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedByPartnerId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Phone = table.Column<string>(type: \"text\", nullable: true),\n                    CompanyPhone = table.Column<string>(type: \"text\", nullable: true),\n                    Website = table.Column<string>(type: \"text\", nullable: true),\n                    Address = table.Column<string>(type: \"text\", nullable: true),\n                    Industry = table.Column<string>(type: \"text\", nullable: true),\n                    LogoUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<int>(type: \"integer\", nullable: false),\n                    Tags = table.Column<string>(type: \"text\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsApproved = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ApprovedBy = table.Column<string>(type: \"text\", nullable: true),\n                    ApprovedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastLoginAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeletedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Businesses\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CatalogClickLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ProductId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    UserId = table.Column<string>(type: \"text\", nullable: true),\n                    UserName = table.Column<string>(type: \"text\", nullable: true),\n                    UserPhone = table.Column<string>(type: \"text\", nullable: true),\n                    BotId = table.Column<string>(type: \"text\", nullable: true),\n                    CategoryBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    ProductBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    CTAJourney = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: false),\n                    RefMessageId = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastInteractionType = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    PlanSnapshot = table.Column<string>(type: \"text\", nullable: true),\n                    CtaId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CatalogClickLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ChatSessionStates\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Mode = table.Column<string>(type: \"text\", nullable: false),\n                    LastUpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ChatSessionStates\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ContactReads\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    LastReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ContactReads\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTADefinitions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    TargetUrl = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTADefinitions\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTAFlowConfigs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsPublished = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTAFlowConfigs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FailedWebhookLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    SourceModule = table.Column<string>(type: \"text\", nullable: true),\n                    FailureType = table.Column<string>(type: \"text\", nullable: true),\n                    RawJson = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FailedWebhookLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FlowExecutionLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    StepId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    StepName = table.Column<string>(type: \"text\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    TrackingLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactPhone = table.Column<string>(type: \"text\", nullable: true),\n                    TriggeredByButton = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateName = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateType = table.Column<string>(type: \"text\", nullable: true),\n                    Success = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    RawResponse = table.Column<string>(type: \"text\", nullable: true),\n                    ExecutedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FlowExecutionLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Notes\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Content = table.Column<string>(type: \"text\", nullable: false),\n                    Source = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: false),\n                    IsPinned = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsInternal = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    EditedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Notes\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Permissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Code = table.Column<string>(type: \"text\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Group = table.Column<string>(type: \"text\", nullable: true),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Permissions\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Products\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    Price = table.Column<decimal>(type: \"numeric\", nullable: false),\n                    Currency = table.Column<string>(type: \"text\", nullable: false),\n                    ImageUrl = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    TotalClicks = table.Column<int>(type: \"integer\", nullable: false),\n                    LastClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    MostClickedCTA = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Products\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Reminders\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    DueAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    ReminderType = table.Column<string>(type: \"text\", nullable: true),\n                    Priority = table.Column<int>(type: \"integer\", nullable: true),\n                    IsRecurring = table.Column<bool>(type: \"boolean\", nullable: false),\n                    RecurrencePattern = table.Column<string>(type: \"text\", nullable: true),\n                    SendWhatsappNotification = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LinkedCampaign = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CompletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastCTAType = table.Column<string>(type: \"text\", nullable: true),\n                    LastClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Reminders\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Roles\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsSystemDefined = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Roles\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Tags\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    ColorHex = table.Column<string>(type: \"text\", nullable: true),\n                    Category = table.Column<string>(type: \"text\", nullable: true),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    IsSystemTag = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    LastUsedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Tags\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WebhookSettings\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AutoCleanupEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastCleanupAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WebhookSettings\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlowEdges\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    SourceNodeId = table.Column<string>(type: \"text\", nullable: false),\n                    TargetNodeId = table.Column<string>(type: \"text\", nullable: false),\n                    SourceHandle = table.Column<string>(type: \"text\", nullable: true),\n                    TargetHandle = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlowEdges\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyFlowEdges_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlowNodes\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    NodeType = table.Column<string>(type: \"text\", nullable: false),\n                    Label = table.Column<string>(type: \"text\", nullable: false),\n                    ConfigJson = table.Column<string>(type: \"text\", nullable: false),\n                    Position_X = table.Column<double>(type: \"double precision\", nullable: false),\n                    Position_Y = table.Column<double>(type: \"double precision\", nullable: false),\n                    Order = table.Column<int>(type: \"integer\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlowNodes\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyFlowNodes_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyRules\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    ReplyMessage = table.Column<string>(type: \"text\", nullable: false),\n                    MediaUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Priority = table.Column<int>(type: \"integer\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    FlowName = table.Column<string>(type: \"text\", nullable: true),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyRules\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyRules_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"BusinessPlanInfos\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Plan = table.Column<int>(type: \"integer\", nullable: false),\n                    TotalMonthlyQuota = table.Column<int>(type: \"integer\", nullable: false),\n                    RemainingMessages = table.Column<int>(type: \"integer\", nullable: false),\n                    QuotaResetDate = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    WalletBalance = table.Column<decimal>(type: \"numeric\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_BusinessPlanInfos\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_BusinessPlanInfos_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Contacts\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    PhoneNumber = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    Email = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: true),\n                    LeadSource = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: true),\n                    Tags = table.Column<string>(type: \"character varying(200)\", maxLength: 200, nullable: true),\n                    LastContactedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    NextFollowUpAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    Notes = table.Column<string>(type: \"character varying(500)\", maxLength: 500, nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    LastCTAInteraction = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastCTAType = table.Column<string>(type: \"text\", nullable: true),\n                    LastClickedProductId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsAutomationPaused = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAgentId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsFavorite = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsArchived = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Group = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Contacts\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Contacts_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WhatsAppSettings\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ApiUrl = table.Column<string>(type: \"character varying(500)\", maxLength: 500, nullable: false),\n                    ApiToken = table.Column<string>(type: \"character varying(1000)\", maxLength: 1000, nullable: false),\n                    WhatsAppBusinessNumber = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    PhoneNumberId = table.Column<string>(type: \"text\", nullable: true),\n                    WabaId = table.Column<string>(type: \"text\", nullable: true),\n                    SenderDisplayName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WhatsAppSettings\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_WhatsAppSettings_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Campaigns\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    SourceCampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    MessageTemplate = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    MessageBody = table.Column<string>(type: \"text\", nullable: true),\n                    FollowUpTemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignType = table.Column<string>(type: \"text\", nullable: true),\n                    CtaId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ScheduledAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeletedBy = table.Column<string>(type: \"text\", nullable: true),\n                    ImageUrl = table.Column<string>(type: \"text\", nullable: true),\n                    ImageCaption = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateParameters = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Campaigns\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_CTADefinitions_CtaId\",\n                        column: x => x.CtaId,\n                        principalTable: \"CTADefinitions\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_Campaigns_SourceCampaignId\",\n                        column: x => x.SourceCampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTAFlowSteps\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateToSend = table.Column<string>(type: \"text\", nullable: false),\n                    StepOrder = table.Column<int>(type: \"integer\", nullable: false),\n                    RequiredTag = table.Column<string>(type: \"text\", nullable: true),\n                    RequiredSource = table.Column<string>(type: \"text\", nullable: true),\n                    PositionX = table.Column<float>(type: \"real\", nullable: true),\n                    PositionY = table.Column<float>(type: \"real\", nullable: true),\n                    TemplateType = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTAFlowSteps\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CTAFlowSteps_CTAFlowConfigs_CTAFlowConfigId\",\n                        column: x => x.CTAFlowConfigId,\n                        principalTable: \"CTAFlowConfigs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"RolePermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RoleId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsRevoked = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_RolePermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_RolePermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_RolePermissions_Roles_RoleId\",\n                        column: x => x.RoleId,\n                        principalTable: \"Roles\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Users\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Email = table.Column<string>(type: \"text\", nullable: false),\n                    PasswordHash = table.Column<string>(type: \"text\", nullable: false),\n                    RoleId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Users\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Users_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_Users_Roles_RoleId\",\n                        column: x => x.RoleId,\n                        principalTable: \"Roles\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ContactTags\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TagId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ContactTags\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_ContactTags_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_ContactTags_Tags_TagId\",\n                        column: x => x.TagId,\n                        principalTable: \"Tags\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"LeadTimelines\",\n                columns: table => new\n                {\n                    Id = table.Column<int>(type: \"integer\", nullable: false)\n                        .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    EventType = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    Data = table.Column<string>(type: \"text\", nullable: true),\n                    ReferenceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsSystemGenerated = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: false),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Category = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CTAType = table.Column<string>(type: \"text\", nullable: true),\n                    CTASourceType = table.Column<string>(type: \"text\", nullable: true),\n                    CTASourceId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_LeadTimelines\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_LeadTimelines_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_LeadTimelines_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignButtons\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Type = table.Column<string>(type: \"text\", nullable: false),\n                    Value = table.Column<string>(type: \"text\", nullable: false),\n                    Position = table.Column<int>(type: \"integer\", nullable: false),\n                    IsFromTemplate = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignButtons\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignButtons_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignFlowOverrides\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TemplateName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    ButtonText = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    OverrideNextTemplate = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignFlowOverrides\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignFlowOverrides_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignRecipients\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    BotId = table.Column<string>(type: \"text\", nullable: true),\n                    MessagePreview = table.Column<string>(type: \"text\", nullable: true),\n                    ClickedCTA = table.Column<string>(type: \"text\", nullable: true),\n                    CategoryBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    ProductBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsAutoTagged = table.Column<bool>(type: \"boolean\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignRecipients\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"MessageLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientNumber = table.Column<string>(type: \"text\", nullable: false),\n                    MessageContent = table.Column<string>(type: \"text\", nullable: false),\n                    MediaUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    RawResponse = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsIncoming = table.Column<bool>(type: \"boolean\", nullable: false),\n                    RenderedBody = table.Column<string>(type: \"text\", nullable: true),\n                    RefMessageId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_MessageLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FlowButtonLinks\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    NextStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonSubType = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonValue = table.Column<string>(type: \"text\", nullable: false),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FlowButtonLinks\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_FlowButtonLinks_CTAFlowSteps_CTAFlowStepId\",\n                        column: x => x.CTAFlowStepId,\n                        principalTable: \"CTAFlowSteps\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"MessageStatusLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientNumber = table.Column<string>(type: \"text\", nullable: false),\n                    CustomerProfileName = table.Column<string>(type: \"text\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    MessageType = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateName = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateCategory = table.Column<string>(type: \"text\", nullable: true),\n                    Channel = table.Column<string>(type: \"text\", nullable: false),\n                    IsSessionOpen = table.Column<bool>(type: \"boolean\", nullable: false),\n                    MetaTimestamp = table.Column<long>(type: \"bigint\", nullable: true),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeliveredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    ErrorCode = table.Column<int>(type: \"integer\", nullable: true),\n                    RawPayload = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_MessageStatusLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"UserPermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    IsGranted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsRevoked = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_UserPermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_UserPermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_UserPermissions_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignSendLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageBody = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    SendStatus = table.Column<string>(type: \"text\", nullable: true),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeliveredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    IpAddress = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceInfo = table.Column<string>(type: \"text\", nullable: true),\n                    MacAddress = table.Column<string>(type: \"text\", nullable: true),\n                    SourceChannel = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceType = table.Column<string>(type: \"text\", nullable: true),\n                    Browser = table.Column<string>(type: \"text\", nullable: true),\n                    Country = table.Column<string>(type: \"text\", nullable: true),\n                    City = table.Column<string>(type: \"text\", nullable: true),\n                    IsClicked = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ClickType = table.Column<string>(type: \"text\", nullable: true),\n                    RetryCount = table.Column<int>(type: \"integer\", nullable: false),\n                    LastRetryAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastRetryStatus = table.Column<string>(type: \"text\", nullable: true),\n                    AllowRetry = table.Column<bool>(type: \"boolean\", nullable: false),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignSendLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_CampaignRecipients_RecipientId\",\n                        column: x => x.RecipientId,\n                        principalTable: \"CampaignRecipients\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_MessageLogs_MessageLogId\",\n                        column: x => x.MessageLogId,\n                        principalTable: \"MessageLogs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"TrackingLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactPhone = table.Column<string>(type: \"text\", nullable: true),\n                    SourceType = table.Column<string>(type: \"text\", nullable: false),\n                    SourceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: true),\n                    CTAType = table.Column<string>(type: \"text\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ClickedVia = table.Column<string>(type: \"text\", nullable: true),\n                    Referrer = table.Column<string>(type: \"text\", nullable: true),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IPAddress = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceType = table.Column<string>(type: \"text\", nullable: true),\n                    Browser = table.Column<string>(type: \"text\", nullable: true),\n                    Country = table.Column<string>(type: \"text\", nullable: true),\n                    City = table.Column<string>(type: \"text\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastInteractionType = table.Column<string>(type: \"text\", nullable: true),\n                    SessionId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ThreadId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    StepId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_TrackingLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_CampaignSendLogs_CampaignSendLogId\",\n                        column: x => x.CampaignSendLogId,\n                        principalTable: \"CampaignSendLogs\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_MessageLogs_MessageLogId\",\n                        column: x => x.MessageLogId,\n                        principalTable: \"MessageLogs\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Permissions\",\n                columns: new[] { \"Id\", \"Code\", \"CreatedAt\", \"Description\", \"Group\", \"IsActive\", \"Name\" },\n                values: new object[,]\n                {\n                    { new Guid(\"30000000-0000-0000-0000-000000000000\"), \"dashboard.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1701), \"Permission for dashboard.view\", null, true, \"dashboard.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000001\"), \"campaign.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1712), \"Permission for campaign.view\", null, true, \"campaign.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000002\"), \"campaign.create\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1716), \"Permission for campaign.create\", null, true, \"campaign.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000003\"), \"campaign.delete\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1719), \"Permission for campaign.delete\", null, true, \"campaign.delete\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000004\"), \"product.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1722), \"Permission for product.view\", null, true, \"product.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000005\"), \"product.create\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1727), \"Permission for product.create\", null, true, \"product.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000006\"), \"product.delete\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1730), \"Permission for product.delete\", null, true, \"product.delete\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000007\"), \"contacts.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1734), \"Permission for contacts.view\", null, true, \"contacts.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000008\"), \"tags.edit\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1737), \"Permission for tags.edit\", null, true, \"tags.edit\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000009\"), \"admin.business.approve\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1753), \"Permission for admin.business.approve\", null, true, \"admin.business.approve\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000010\"), \"admin.logs.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1757), \"Permission for admin.logs.view\", null, true, \"admin.logs.view\" }\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Roles\",\n                columns: new[] { \"Id\", \"CreatedAt\", \"Description\", \"IsActive\", \"IsSystemDefined\", \"Name\" },\n                values: new object[,]\n                {\n                    { new Guid(\"00000000-0000-0000-0000-000000000001\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(852), \"Super Admin\", true, false, \"admin\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000002\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(856), \"Business Partner\", true, false, \"partner\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000003\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(858), \"Reseller Partner\", true, false, \"reseller\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000004\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(860), \"Business Owner\", true, false, \"business\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000005\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(862), \"Staff\", true, false, \"staff\" }\n                });\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2209), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2225), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2202), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2248), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2217), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2213), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2186), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2253), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2192), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2271), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2281), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2221), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2285), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2234), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2156), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2167), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyFlowEdges_FlowId\",\n                table: \"AutoReplyFlowEdges\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyFlowNodes_FlowId\",\n                table: \"AutoReplyFlowNodes\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyRules_FlowId\",\n                table: \"AutoReplyRules\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_BusinessPlanInfos_BusinessId\",\n                table: \"BusinessPlanInfos\",\n                column: \"BusinessId\",\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignButtons_CampaignId\",\n                table: \"CampaignButtons\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignFlowOverrides_CampaignId\",\n                table: \"CampaignFlowOverrides\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_BusinessId\",\n                table: \"CampaignRecipients\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_CampaignId\",\n                table: \"CampaignRecipients\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_ContactId\",\n                table: \"CampaignRecipients\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_BusinessId\",\n                table: \"Campaigns\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_CtaId\",\n                table: \"Campaigns\",\n                column: \"CtaId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_SourceCampaignId\",\n                table: \"Campaigns\",\n                column: \"SourceCampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_CampaignId\",\n                table: \"CampaignSendLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_ContactId\",\n                table: \"CampaignSendLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_MessageLogId\",\n                table: \"CampaignSendLogs\",\n                column: \"MessageLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_RecipientId\",\n                table: \"CampaignSendLogs\",\n                column: \"RecipientId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_UserId\",\n                table: \"CampaignSendLogs\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactReads_ContactId_UserId\",\n                table: \"ContactReads\",\n                columns: new[] { \"ContactId\", \"UserId\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Contacts_BusinessId\",\n                table: \"Contacts\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactTags_ContactId\",\n                table: \"ContactTags\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactTags_TagId\",\n                table: \"ContactTags\",\n                column: \"TagId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CTAFlowSteps_CTAFlowConfigId\",\n                table: \"CTAFlowSteps\",\n                column: \"CTAFlowConfigId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_FlowButtonLinks_CTAFlowStepId\",\n                table: \"FlowButtonLinks\",\n                column: \"CTAFlowStepId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_LeadTimelines_BusinessId\",\n                table: \"LeadTimelines\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_LeadTimelines_ContactId\",\n                table: \"LeadTimelines\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_BusinessId\",\n                table: \"MessageLogs\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_CampaignId\",\n                table: \"MessageLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_ContactId\",\n                table: \"MessageLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_BusinessId\",\n                table: \"MessageStatusLogs\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_CampaignId\",\n                table: \"MessageStatusLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_UserId\",\n                table: \"MessageStatusLogs\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_RolePermissions_PermissionId\",\n                table: \"RolePermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_RolePermissions_RoleId\",\n                table: \"RolePermissions\",\n                column: \"RoleId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_CampaignId\",\n                table: \"TrackingLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_CampaignSendLogId\",\n                table: \"TrackingLogs\",\n                column: \"CampaignSendLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_ContactId\",\n                table: \"TrackingLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_MessageLogId\",\n                table: \"TrackingLogs\",\n                column: \"MessageLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_UserPermissions_PermissionId\",\n                table: \"UserPermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_UserPermissions_UserId\",\n                table: \"UserPermissions\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Users_BusinessId\",\n                table: \"Users\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Users_RoleId\",\n                table: \"Users\",\n                column: \"RoleId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_BusinessId\",\n                table: \"WhatsAppSettings\",\n                column: \"BusinessId\",\n                unique: true);\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"AuditLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlowEdges\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlowNodes\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyRules\");\n\n            migrationBuilder.DropTable(\n                name: \"BusinessPlanInfos\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignButtons\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignFlowOverrides\");\n\n            migrationBuilder.DropTable(\n                name: \"CatalogClickLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"ChatSessionStates\");\n\n            migrationBuilder.DropTable(\n                name: \"ContactReads\");\n\n            migrationBuilder.DropTable(\n                name: \"ContactTags\");\n\n            migrationBuilder.DropTable(\n                name: \"FailedWebhookLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"FlowButtonLinks\");\n\n            migrationBuilder.DropTable(\n                name: \"FlowExecutionLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"LeadTimelines\");\n\n            migrationBuilder.DropTable(\n                name: \"MessageStatusLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Notes\");\n\n            migrationBuilder.DropTable(\n                name: \"Products\");\n\n            migrationBuilder.DropTable(\n                name: \"Reminders\");\n\n            migrationBuilder.DropTable(\n                name: \"RolePermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"TrackingLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"UserPermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"WebhookSettings\");\n\n            migrationBuilder.DropTable(\n                name: \"WhatsAppSettings\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlows\");\n\n            migrationBuilder.DropTable(\n                name: \"Tags\");\n\n            migrationBuilder.DropTable(\n                name: \"CTAFlowSteps\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignSendLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Permissions\");\n\n            migrationBuilder.DropTable(\n                name: \"CTAFlowConfigs\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignRecipients\");\n\n            migrationBuilder.DropTable(\n                name: \"MessageLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Users\");\n\n            migrationBuilder.DropTable(\n                name: \"Campaigns\");\n\n            migrationBuilder.DropTable(\n                name: \"Contacts\");\n\n            migrationBuilder.DropTable(\n                name: \"Roles\");\n\n            migrationBuilder.DropTable(\n                name: \"CTADefinitions\");\n\n            migrationBuilder.DropTable(\n                name: \"Businesses\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/20250617162332_Initial.Designer.cs",
      "sha256": "1fd0680f6b8ba8f6472ed3f4bd55b54427ef6a138ef5b0f371aaa2be5c060f3b",
      "language": "csharp",
      "size": 101595,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250617162332_Initial\")]\n    partial class Initial\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1701),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1712),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1716),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1719),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1722),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1727),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1730),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1734),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1737),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1753),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1757),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(852),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(856),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(858),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(860),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(862),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2156),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2167),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2186),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2192),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2202),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2209),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2213),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2217),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2221),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2225),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2234),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2248),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2253),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2257),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2271),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2281),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2285),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/20250618065214_AddIsActiveToContact.cs",
      "sha256": "697f220f114e1035d49caecdf1172cbf96e733310f01ae29f4f443605796a99e",
      "language": "csharp",
      "size": 27559,
      "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddIsActiveToContact : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"));\n\n            migrationBuilder.AddColumn<bool>(\n                name: \"IsActive\",\n                table: \"Contacts\",\n                type: \"boolean\",\n                nullable: false,\n                defaultValue: false);\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8447));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8456));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8459));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8460));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8462));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8465));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8467));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8468));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8470));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8478));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8550));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9295), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9298), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9250), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9254), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9270), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9247), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9288), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9244), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8861), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9220), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9278), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8849), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8865), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8857), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9274), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9230), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7870));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7871));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7872));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7873));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7874));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"));\n\n            migrationBuilder.DropColumn(\n                name: \"IsActive\",\n                table: \"Contacts\");\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1701));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1712));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1716));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1719));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1722));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1727));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1730));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1734));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1737));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1753));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1757));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2209), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2225), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2202), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2248), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2217), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2213), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2186), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2253), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2192), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2271), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2281), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2221), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2285), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2234), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2156), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2167), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(852));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(856));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(858));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(860));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(862));\n        }\n    }\n}\n"
    }
  ]
}
