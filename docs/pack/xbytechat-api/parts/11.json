{
  "name": "xbytechat-api",
  "part": 11,
  "of": 11,
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Migrations/20250901103815_AddWebhookCallbackUrlToWhatsAppSettings.Designer.cs",
      "sha256": "9cd572195013c98f85cb38d8a7f12461ae5d1bde89bda7132f375634e9302b32",
      "language": "csharp",
      "size": 122531,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250901103815_AddWebhookCallbackUrlToWhatsAppSettings\")]\n    partial class AddWebhookCallbackUrlToWhatsAppSettings\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"FlowVersion\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"RecipientNumber\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.WhatsAppTemplate\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonsJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ExternalId\")\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<bool>(\"HasImageHeader\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"LastSyncedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<int>(\"PlaceholderCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\", \"Language\", \"Provider\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppTemplates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4931),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4943),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4948),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4951),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4955),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4959),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4962),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4965),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4970),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4982),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4985),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3752),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3755),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3758),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3760),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3761),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"74c0ff83-f56e-4735-a8cc-57572f4face0\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6351),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9c651876-1a7d-4ced-9681-0fdf91ec7551\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6363),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"72823a3b-a9a7-4f71-bdf8-b450c08af43c\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6381),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7ef39c05-5a80-487c-a31e-63a68097dd55\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6386),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b1f60bcc-9ab3-4d7a-976e-b3cab320921c\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6397),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"308f3478-698c-4779-9d25-ec0aff94cc25\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6404),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0c814de9-985c-4fb3-90a6-777c5538de91\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6416),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00ba56c9-71d4-44d0-9529-b6f53ebc0b7c\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6421),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a52d3157-57ec-42ff-ab25-5bb631a27938\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6424),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3e7b1aaa-d33c-4b6f-9aec-1f3edcb6b426\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6430),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"53b2fc1f-0ba5-4053-87ea-2c99d2c17c22\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6437),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dc9756aa-b639-4046-bfb2-b6ebd33d16f3\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6451),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a0e52671-9c2c-4b9e-99e3-9a0413d1d2df\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6507),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0073ea73-c2d5-4679-ab78-cda18e2eab6f\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6512),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4870be49-980d-495d-8c26-5b263b9a8188\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6525),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ae246d13-4193-4bbb-95fc-6214de0a35c4\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6536),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cf0c978a-d62d-4606-a6a6-9bf7892461ba\"),\n                            AssignedAt = new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6540),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short?>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RequestId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickDailyAgg\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<long>(\"Clicks\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<DateTime>(\"Day\")\n                        .HasColumnType(\"date\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"Day\", \"ButtonIndex\")\n                        .IsUnique();\n\n                    b.ToTable(\"CampaignClickDailyAgg\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ButtonTitle\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ClickType\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Destination\")\n                        .IsRequired()\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<string>(\"Ip\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"ButtonIndex\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\");\n\n                    b.HasIndex(\"CampaignId\", \"ClickType\", \"ClickedAt\");\n\n                    b.ToTable(\"CampaignClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiKey\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WebhookCallbackUrl\")\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"WebhookSecret\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WebhookVerifyToken\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.HasIndex(\"Provider\", \"PhoneNumberId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n                    b.HasIndex(\"Provider\", \"WabaId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n                    b.HasIndex(\"Provider\", \"WebhookCallbackUrl\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n                    b.HasIndex(\"Provider\", \"WhatsAppBusinessNumber\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"IsActive\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"Businesses\")\n                        .HasForeignKey(\"PlanId\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"CTAFlowConfig\")\n                        .WithMany()\n                        .HasForeignKey(\"CTAFlowConfigId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"CTAFlowConfig\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"Businesses\");\n\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/20250905092732_AddTempCampaignRecipients.cs",
      "sha256": "890511b72cd02a71999d6e4370c90e7f719677db81251c73f173a4eecc057b4e",
      "language": "csharp",
      "size": 27798,
      "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddTempCampaignRecipients : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropIndex(\n                name: \"IX_Contacts_BusinessId\",\n                table: \"Contacts\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0073ea73-c2d5-4679-ab78-cda18e2eab6f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00ba56c9-71d4-44d0-9529-b6f53ebc0b7c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0c814de9-985c-4fb3-90a6-777c5538de91\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"308f3478-698c-4779-9d25-ec0aff94cc25\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3e7b1aaa-d33c-4b6f-9aec-1f3edcb6b426\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4870be49-980d-495d-8c26-5b263b9a8188\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"53b2fc1f-0ba5-4053-87ea-2c99d2c17c22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"72823a3b-a9a7-4f71-bdf8-b450c08af43c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"74c0ff83-f56e-4735-a8cc-57572f4face0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7ef39c05-5a80-487c-a31e-63a68097dd55\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"9c651876-1a7d-4ced-9681-0fdf91ec7551\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a0e52671-9c2c-4b9e-99e3-9a0413d1d2df\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a52d3157-57ec-42ff-ab25-5bb631a27938\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ae246d13-4193-4bbb-95fc-6214de0a35c4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b1f60bcc-9ab3-4d7a-976e-b3cab320921c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf0c978a-d62d-4606-a6a6-9bf7892461ba\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dc9756aa-b639-4046-bfb2-b6ebd33d16f3\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4071));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4078));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4081));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4083));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4085));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4089));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4090));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4092));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4094));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4096));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4099));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"08200e68-9680-421b-8db3-5e2a1f6eef44\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4430), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1894ac73-191b-484c-a212-5cb2fdf301db\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4485), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2dee7d22-df75-48a3-9b56-1f95c0bf045e\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4470), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2ffdeaee-f441-4e38-b1fd-e5db246aef89\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4422), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5e026cb6-cd81-4cc8-867a-1426461901c2\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4417), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"70efee96-7da6-4cb5-a10d-a4ded48e54b3\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4502), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"72fc396b-8e15-4f92-841e-9263bd8f3615\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4487), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"85acdf98-8bf9-4705-b2ba-2cedc515964b\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4499), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"a4a429be-44f7-4915-a695-cb99f5b44577\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4461), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aa17a813-6633-43e5-a94d-bd13765dd99c\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4468), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"af487bd4-2ec5-4576-ada7-aa1f09443d2c\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4427), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b8a134c7-68ef-42c2-bcf4-05f8315159a3\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4434), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c85c9078-775a-4c6b-a1b2-de056dce99e5\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4409), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dcc405a6-68c4-419f-ac31-fd1126ca8115\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4491), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"ebce9383-cf87-4ad8-87b8-2d1b0c60bdf4\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4480), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"ee2cd491-064d-41bd-b612-9ac5b1583619\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4465), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"ff90735c-979a-4bb6-972d-8743149eb727\"), new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4449), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3406));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3407));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3408));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3409));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3410));\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Contacts_BusinessId_PhoneNumber\",\n                table: \"Contacts\",\n                columns: new[] { \"BusinessId\", \"PhoneNumber\" },\n                unique: true);\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropIndex(\n                name: \"IX_Contacts_BusinessId_PhoneNumber\",\n                table: \"Contacts\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"08200e68-9680-421b-8db3-5e2a1f6eef44\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1894ac73-191b-484c-a212-5cb2fdf301db\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2dee7d22-df75-48a3-9b56-1f95c0bf045e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2ffdeaee-f441-4e38-b1fd-e5db246aef89\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5e026cb6-cd81-4cc8-867a-1426461901c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"70efee96-7da6-4cb5-a10d-a4ded48e54b3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"72fc396b-8e15-4f92-841e-9263bd8f3615\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"85acdf98-8bf9-4705-b2ba-2cedc515964b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a4a429be-44f7-4915-a695-cb99f5b44577\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa17a813-6633-43e5-a94d-bd13765dd99c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"af487bd4-2ec5-4576-ada7-aa1f09443d2c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b8a134c7-68ef-42c2-bcf4-05f8315159a3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c85c9078-775a-4c6b-a1b2-de056dce99e5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcc405a6-68c4-419f-ac31-fd1126ca8115\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ebce9383-cf87-4ad8-87b8-2d1b0c60bdf4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ee2cd491-064d-41bd-b612-9ac5b1583619\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ff90735c-979a-4bb6-972d-8743149eb727\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4931));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4943));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4948));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4951));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4955));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4959));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4962));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4965));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4970));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4982));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(4985));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"0073ea73-c2d5-4679-ab78-cda18e2eab6f\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6512), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"00ba56c9-71d4-44d0-9529-b6f53ebc0b7c\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6421), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"0c814de9-985c-4fb3-90a6-777c5538de91\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6416), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"308f3478-698c-4779-9d25-ec0aff94cc25\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6404), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3e7b1aaa-d33c-4b6f-9aec-1f3edcb6b426\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6430), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4870be49-980d-495d-8c26-5b263b9a8188\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6525), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"53b2fc1f-0ba5-4053-87ea-2c99d2c17c22\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6437), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"72823a3b-a9a7-4f71-bdf8-b450c08af43c\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6381), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"74c0ff83-f56e-4735-a8cc-57572f4face0\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6351), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7ef39c05-5a80-487c-a31e-63a68097dd55\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6386), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"9c651876-1a7d-4ced-9681-0fdf91ec7551\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6363), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a0e52671-9c2c-4b9e-99e3-9a0413d1d2df\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6507), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"a52d3157-57ec-42ff-ab25-5bb631a27938\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6424), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"ae246d13-4193-4bbb-95fc-6214de0a35c4\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6536), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"b1f60bcc-9ab3-4d7a-976e-b3cab320921c\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6397), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cf0c978a-d62d-4606-a6a6-9bf7892461ba\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6540), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"dc9756aa-b639-4046-bfb2-b6ebd33d16f3\"), new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(6451), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3752));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3755));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3758));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3760));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 9, 1, 10, 38, 13, 787, DateTimeKind.Utc).AddTicks(3761));\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Contacts_BusinessId\",\n                table: \"Contacts\",\n                column: \"BusinessId\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/20250905092732_AddTempCampaignRecipients.Designer.cs",
      "sha256": "ddd72ff74c8374de34ff49fb7190033d849ebad1c227dfd8ce2569012da60536",
      "language": "csharp",
      "size": 122488,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250905092732_AddTempCampaignRecipients\")]\n    partial class AddTempCampaignRecipients\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"FlowVersion\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"RecipientNumber\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.WhatsAppTemplate\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonsJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ExternalId\")\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<bool>(\"HasImageHeader\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"LastSyncedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<int>(\"PlaceholderCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\", \"Language\", \"Provider\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppTemplates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"PhoneNumber\")\n                        .IsUnique();\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4071),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4078),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4081),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4083),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4085),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4089),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4090),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4092),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4094),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4096),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4099),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3406),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3407),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3408),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3409),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3410),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"c85c9078-775a-4c6b-a1b2-de056dce99e5\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4409),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"5e026cb6-cd81-4cc8-867a-1426461901c2\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4417),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2ffdeaee-f441-4e38-b1fd-e5db246aef89\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4422),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"af487bd4-2ec5-4576-ada7-aa1f09443d2c\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4427),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"08200e68-9680-421b-8db3-5e2a1f6eef44\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4430),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b8a134c7-68ef-42c2-bcf4-05f8315159a3\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4434),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ff90735c-979a-4bb6-972d-8743149eb727\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4449),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a4a429be-44f7-4915-a695-cb99f5b44577\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4461),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ee2cd491-064d-41bd-b612-9ac5b1583619\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4465),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aa17a813-6633-43e5-a94d-bd13765dd99c\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4468),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2dee7d22-df75-48a3-9b56-1f95c0bf045e\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4470),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ebce9383-cf87-4ad8-87b8-2d1b0c60bdf4\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4480),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1894ac73-191b-484c-a212-5cb2fdf301db\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4485),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"72fc396b-8e15-4f92-841e-9263bd8f3615\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4487),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dcc405a6-68c4-419f-ac31-fd1126ca8115\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4491),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"85acdf98-8bf9-4705-b2ba-2cedc515964b\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4499),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"70efee96-7da6-4cb5-a10d-a4ded48e54b3\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4502),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short?>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RequestId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickDailyAgg\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<long>(\"Clicks\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<DateTime>(\"Day\")\n                        .HasColumnType(\"date\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"Day\", \"ButtonIndex\")\n                        .IsUnique();\n\n                    b.ToTable(\"CampaignClickDailyAgg\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ButtonTitle\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ClickType\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Destination\")\n                        .IsRequired()\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<string>(\"Ip\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"ButtonIndex\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\");\n\n                    b.HasIndex(\"CampaignId\", \"ClickType\", \"ClickedAt\");\n\n                    b.ToTable(\"CampaignClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiKey\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WebhookCallbackUrl\")\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"WebhookSecret\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WebhookVerifyToken\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.HasIndex(\"Provider\", \"PhoneNumberId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n                    b.HasIndex(\"Provider\", \"WabaId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n                    b.HasIndex(\"Provider\", \"WebhookCallbackUrl\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n                    b.HasIndex(\"Provider\", \"WhatsAppBusinessNumber\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"IsActive\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"Businesses\")\n                        .HasForeignKey(\"PlanId\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"CTAFlowConfig\")\n                        .WithMany()\n                        .HasForeignKey(\"CTAFlowConfigId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"CTAFlowConfig\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"Businesses\");\n\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/AppDbContextModelSnapshot.cs",
      "sha256": "ce75010ff45730d7aa1e6226b1a341b42910a23fd2922b514c94d67a350f7868",
      "language": "csharp",
      "size": 122363,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    partial class AppDbContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"FlowVersion\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_MessageId\");\n\n                    b.HasIndex(\"BusinessId\", \"RecipientNumber\")\n                        .HasDatabaseName(\"IX_MessageLogs_Business_Recipient\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.WhatsAppTemplate\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Body\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonsJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ExternalId\")\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<bool>(\"HasImageHeader\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Language\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"LastSyncedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(160)\n                        .HasColumnType(\"character varying(160)\");\n\n                    b.Property<int>(\"PlaceholderCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(40)\n                        .HasColumnType(\"character varying(40)\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasMaxLength(32)\n                        .HasColumnType(\"character varying(32)\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\");\n\n                    b.HasIndex(\"BusinessId\", \"Name\", \"Language\", \"Provider\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppTemplates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"PhoneNumber\")\n                        .IsUnique();\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4071),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4078),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4081),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4083),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4085),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4089),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4090),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4092),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4094),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4096),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4099),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3406),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3407),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3408),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3409),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(3410),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"c85c9078-775a-4c6b-a1b2-de056dce99e5\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4409),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"5e026cb6-cd81-4cc8-867a-1426461901c2\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4417),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2ffdeaee-f441-4e38-b1fd-e5db246aef89\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4422),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"af487bd4-2ec5-4576-ada7-aa1f09443d2c\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4427),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"08200e68-9680-421b-8db3-5e2a1f6eef44\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4430),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b8a134c7-68ef-42c2-bcf4-05f8315159a3\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4434),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ff90735c-979a-4bb6-972d-8743149eb727\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4449),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a4a429be-44f7-4915-a695-cb99f5b44577\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4461),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ee2cd491-064d-41bd-b612-9ac5b1583619\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4465),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aa17a813-6633-43e5-a94d-bd13765dd99c\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4468),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2dee7d22-df75-48a3-9b56-1f95c0bf045e\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4470),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ebce9383-cf87-4ad8-87b8-2d1b0c60bdf4\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4480),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1894ac73-191b-484c-a212-5cb2fdf301db\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4485),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"72fc396b-8e15-4f92-841e-9263bd8f3615\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4487),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dcc405a6-68c4-419f-ac31-fd1126ca8115\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4491),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"85acdf98-8bf9-4705-b2ba-2cedc515964b\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4499),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"70efee96-7da6-4cb5-a10d-a4ded48e54b3\"),\n                            AssignedAt = new DateTime(2025, 9, 5, 9, 27, 32, 93, DateTimeKind.Utc).AddTicks(4502),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<short?>(\"ButtonIndex\")\n                        .HasColumnType(\"smallint\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RequestId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonBundleJson\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"RunId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.HasIndex(\"BusinessId\", \"MessageId\")\n                        .HasDatabaseName(\"IX_CampaignSendLogs_Business_MessageId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickDailyAgg\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<long>(\"Clicks\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<DateTime>(\"Day\")\n                        .HasColumnType(\"date\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"Day\", \"ButtonIndex\")\n                        .IsUnique();\n\n                    b.ToTable(\"CampaignClickDailyAgg\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Worker.CampaignClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"ButtonIndex\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ButtonTitle\")\n                        .IsRequired()\n                        .HasMaxLength(120)\n                        .HasColumnType(\"character varying(120)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ClickType\")\n                        .IsRequired()\n                        .HasMaxLength(16)\n                        .HasColumnType(\"character varying(16)\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Destination\")\n                        .IsRequired()\n                        .HasMaxLength(2048)\n                        .HasColumnType(\"character varying(2048)\");\n\n                    b.Property<string>(\"Ip\")\n                        .IsRequired()\n                        .HasMaxLength(64)\n                        .HasColumnType(\"character varying(64)\");\n\n                    b.Property<Guid?>(\"RunId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .IsRequired()\n                        .HasMaxLength(512)\n                        .HasColumnType(\"character varying(512)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\", \"ButtonIndex\");\n\n                    b.HasIndex(\"CampaignId\", \"ContactId\");\n\n                    b.HasIndex(\"CampaignId\", \"ClickType\", \"ClickedAt\");\n\n                    b.ToTable(\"CampaignClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiKey\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Provider\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WebhookCallbackUrl\")\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"WebhookSecret\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WebhookVerifyToken\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.HasIndex(\"Provider\", \"PhoneNumberId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_PhoneNumberId\");\n\n                    b.HasIndex(\"Provider\", \"WabaId\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_WabaId\");\n\n                    b.HasIndex(\"Provider\", \"WebhookCallbackUrl\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_CallbackUrl\");\n\n                    b.HasIndex(\"Provider\", \"WhatsAppBusinessNumber\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Provider_BusinessNumber\");\n\n                    b.HasIndex(\"BusinessId\", \"Provider\", \"IsActive\")\n                        .HasDatabaseName(\"IX_WhatsAppSettings_Business_Provider_IsActive\");\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"Businesses\")\n                        .HasForeignKey(\"PlanId\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"CTAFlowConfig\")\n                        .WithMany()\n                        .HasForeignKey(\"CTAFlowConfigId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"CTAFlowConfig\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"Businesses\");\n\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Models/MessagesModel/MessageLog.cs",
      "sha256": "1d2dd42eb12c985b1cbf1eac44e6e7dac9b2e9ead87d3803f696de950fb04c6e",
      "language": "csharp",
      "size": 2079,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\npublic class MessageLog\n{\n    public Guid Id { get; set; }\n\n    public string? MessageId { get; set; } // WAMID from WhatsApp — alternate key\n                                           // public ICollection<MessageStatusLog> StatusUpdates { get; set; } = new List<MessageStatusLog>();\n    public Guid? RunId { get; set; }\n    // 🔗 FK to Business\n    public Guid BusinessId { get; set; }\n    public Business Business { get; set; }\n\n    // 📨 Message Info\n    public string RecipientNumber { get; set; }\n    public string MessageContent { get; set; }\n    public string? MediaUrl { get; set; }\n\n    // 🧾 Status Info\n    public string Status { get; set; } = \"Queued\";\n    public string? ErrorMessage { get; set; }\n    public string? RawResponse { get; set; }\n\n    // 🕒 Timestamps\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime? SentAt { get; set; }\n\n    // 🔗 Contact (optional)\n    public Guid? ContactId { get; set; }\n    public Contact? Contact { get; set; }\n\n    // 🔗 Campaign (optional)\n    public Guid? CampaignId { get; set; }\n\n    // 🔗 CTA Flow Tracking\n    public Guid? CTAFlowConfigId { get; set; }  // Which visual flow config this message belongs to\n    public Guid? CTAFlowStepId { get; set; }    // Which flow step (template) this message originated from\n\n    public int? FlowVersion { get; set; }                // which version of the flow this message belongs to\n    public string? ButtonBundleJson { get; set; }\n\n    public Campaign? SourceCampaign { get; set; } // renamed from \"Campaign\" to avoid name conflict\n\n    public bool IsIncoming { get; set; }\n\n    public string? RenderedBody { get; set; } // actual resolved message with parameters\n\n    public Guid? RefMessageId { get; set; }\n    public string? Source { get; set; } // e.g., \"campaign\", \"flow\", \"manual\"\n}\n"
    },
    {
      "path": "xbytechat-api/Models/WhatsAppResult.cs",
      "sha256": "cd627fc7d90a4da1360bb14f8be3109068a83b746a1b782f257095f68ea5279d",
      "language": "csharp",
      "size": 220,
      "content": "namespace xbytechat.api.Models\n{\n    public class WhatsAppResult\n    {\n        public bool Success { get; set; }\n        public string? ErrorMessage { get; set; }\n        public string? RawResponse { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "71c13746d4e6cc70735324c5c2c755b80e4c7d032e71a97969c3efe007aa68ae",
      "language": "csharp",
      "size": 680,
      "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    /// <summary>\n    /// Builds payload for sending image messages with media URL.\n    /// </summary>\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var imageDto = dto as ImageMessageDto;\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = imageDto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = imageDto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "2a2ff0592129a93fea8aa20df5fe1e8454dbfbe1640d5a1e15963af93dcd7922",
      "language": "csharp",
      "size": 190,
      "content": "namespace xbytechat.api.PayloadBuilders\n{\n    using xbytechat.api.DTOs.Messages;\n\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(BaseMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "70f39daad2789c61f03ade184abdf96a43221189b751178dfa1955c123b5f884",
      "language": "csharp",
      "size": 2013,
      "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var templateDto = dto as TemplateMessageDto;\n            if (templateDto == null)\n                throw new InvalidCastException(\"DTO is not of type TemplateMessageDto.\");\n\n            var components = new List<object>();\n\n            // 🧠 Body parameters\n            if (templateDto.TemplateParameters != null && templateDto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateDto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToList()\n                });\n            }\n\n            // ✅ Add button placeholders (Meta requires them for static buttons too)\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"url\",\n                index = \"0\",\n                parameters = new object[] { }  // 👈 no parameters if static URL\n            });\n\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"phone_number\",\n                index = \"1\",\n                parameters = new object[] { }  // 👈 no parameters if static phone\n            });\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = templateDto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateDto.TemplateName,\n                    language = new\n                    {\n                        code = templateDto.LanguageCode ?? \"en_US\"\n                    },\n                    components\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "ce8e2e75c7865d9b08bebb267ceb84f7cdd0e77bd971c609576979b02726a590",
      "language": "csharp",
      "size": 750,
      "content": "// File: PayloadBuilders/TextMessagePayloadBuilder.cs\nusing xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var textDto = dto as TextMessageDto;\n\n            if (textDto == null)\n                throw new InvalidCastException(\"DTO is not of type TextMessageDto.\");\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = textDto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = textDto.MessageContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Program.cs",
      "sha256": "e3623276d656c00f172d244d3d22ca5b6161c314243948116a9fe1d8940c1d6d",
      "language": "csharp",
      "size": 18189,
      "content": "using FluentValidation;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Serilog;\nusing Serilog.Exceptions;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing xbytechat.api;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Features.TemplateModule.Services;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Middlewares;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Implementations;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services;\nusing xbytechat.api.Services.Messages.Implementations;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Validators;\nusing EnginePayloadBuilders = xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.CTAManagement.Services;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.BackgroundWorkers;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.FlowAnalytics.Services;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.SignalR;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing Npgsql;\nusing System.Net;\nusing xbytechat.api.WhatsAppSettings.Providers;\nusing xbytechat.api.Features.CampaignTracking.Config;\nusing xbytechat.api.Features.CampaignTracking.Worker;\nusing xbytechat.api.Infrastructure.Flows;\nusing xbytechat.api.Features.Webhooks.Pinnacle.Services.Adapters;\nusing xbytechat.api.Features.Webhooks.Directory;\nusing xbytechat.api.Features.Webhooks.Status;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n#region 🔷 Serilog Configuration\nLog.Logger = new LoggerConfiguration()\n    .Enrich.WithExceptionDetails()\n    .Enrich.FromLogContext()\n    .MinimumLevel.Information()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\nbuilder.Host.UseSerilog();\n#endregion\n\n#region 🔷 Database Setup (PostgreSQL)\nvar connStr = builder.Configuration.GetConnectionString(\"DefaultConnection\");\nbuilder.Services.AddDbContext<AppDbContext>(options =>\n    options.UseNpgsql(connStr).EnableSensitiveDataLogging()\n);\nConsole.WriteLine($\"[DEBUG] Using Connection String: {connStr}\");\n#endregion\n\n#region 🔷 Generic Repository Pattern\nbuilder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));\n#endregion\n\n#region 🔷 Core Modules (Business/Auth)\nbuilder.Services.AddScoped<IBusinessService, BusinessService>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\nbuilder.Services.AddScoped<IJwtTokenService, JwtTokenService>();\n#endregion\n\n#region 🔷 Messaging Services & WhatsApp\nbuilder.Services.AddScoped<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddHttpClient<IMessageService, MessageService>();\nbuilder.Services.AddScoped<WhatsAppService>();\nbuilder.Services.AddScoped<IMessageStatusService, MessageStatusService>();\nbuilder.Services.AddScoped<ITemplateMessageSender, TemplateMessageSender>();\n#endregion\n\n#region 🔷 Payload Builders\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TemplateMessagePayloadBuilder>();\n#endregion\n\n#region 🔷 Catalog & CRM Modules\nbuilder.Services.AddScoped<IProductService, ProductService>();\nbuilder.Services.AddScoped<ICatalogTrackingService, CatalogTrackingService>();\nbuilder.Services.AddScoped<ICatalogDashboardService, CatalogDashboardService>();\nbuilder.Services.AddScoped<IContactService, ContactService>();\nbuilder.Services.AddScoped<ITagService, TagService>();\nbuilder.Services.AddScoped<IReminderService, ReminderService>();\nbuilder.Services.AddScoped<INoteService, NoteService>();\nbuilder.Services.AddScoped<ITimelineService, TimelineService>();\n#endregion\n\n#region 🔷 Campaign Management\nbuilder.Services.AddScoped<ICampaignService, CampaignService>();\nbuilder.Services.AddScoped<ICampaignSendLogService, CampaignSendLogService>();\nbuilder.Services.AddScoped<ICampaignSendLogEnricher, CampaignSendLogEnricher>();\nbuilder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\nbuilder.Services.AddScoped<ICampaignRetryService, CampaignRetryService>();\nbuilder.Services.AddHttpClient<IWhatsAppTemplateService, WhatsAppTemplateService>();\nbuilder.Services.AddScoped<ICampaignRecipientService, CampaignRecipientService>();\nbuilder.Services.AddScoped<IPlanService, PlanService>();\n\n#endregion\n\n#region 🔷 Webhook Management\nbuilder.Services.AddScoped<IWhatsAppWebhookService, WhatsAppWebhookService>();\nbuilder.Services.AddScoped<IWhatsAppWebhookDispatcher, WhatsAppWebhookDispatcher>();\nbuilder.Services.AddScoped<IStatusWebhookProcessor, StatusWebhookProcessor>();\nbuilder.Services.AddScoped<ITemplateWebhookProcessor, TemplateWebhookProcessor>();\nbuilder.Services.AddScoped<IMessageIdResolver, MessageIdResolver>();\nbuilder.Services.AddScoped<IClickWebhookProcessor, ClickWebhookProcessor>();\nbuilder.Services.AddScoped<ILeadTimelineService, LeadTimelineService>();\nbuilder.Services.AddScoped<IFailedWebhookLogService, FailedWebhookLogService>();\nbuilder.Services.AddSingleton<IWebhookQueueService, WebhookQueueService>();\nbuilder.Services.AddHostedService<WebhookQueueWorker>();\nbuilder.Services.AddHostedService<FailedWebhookLogCleanupService>();\nbuilder.Services.AddScoped<IMaintenanceService, MaintenanceService>();\nbuilder.Services.AddHostedService<WebhookAutoCleanupWorker>();\nbuilder.Services.AddScoped<IProviderDirectory, ProviderDirectory>();\nbuilder.Services.AddScoped<IMessageStatusUpdater, MessageStatusUpdater>();\nbuilder.Services.AddScoped<IPinnacleToMetaAdapter, PinnacleToMetaAdapter>();\n#endregion\n\n#region 🔷 Access Control & Permission\nbuilder.Services.AddScoped<IAccessControlService, AccessControlService>();\nbuilder.Services.AddScoped<IFeatureAccessEvaluator, FeatureAccessEvaluator>();\nbuilder.Services.AddScoped<IFeatureAccessService, FeatureAccessService>();\n#endregion\n\n#region 🔷 Tracking\nbuilder.Services.AddScoped<ITrackingService, TrackingService>();\nbuilder.Services.AddScoped<IMessageAnalyticsService, MessageAnalyticsService>();\nbuilder.Services.AddScoped<IUrlBuilderService, UrlBuilderService>();\nbuilder.Services.AddScoped<IContactJourneyService, ContactJourneyService>();\n\nbuilder.Services.Configure<TrackingOptions>(builder.Configuration.GetSection(\"Tracking\"));\nbuilder.Services.AddSingleton<IClickTokenService, ClickTokenService>();\nbuilder.Services.AddSingleton<IClickEventQueue, InProcessClickEventQueue>();\nbuilder.Services.AddHostedService<ClickLogWorker>();\n\n\n#endregion\n\n#region 🔷 Flow Builder\nbuilder.Services.AddScoped<ICTAFlowService, CTAFlowService>();\nbuilder.Services.Configure<FlowClickTokenOptions>(\n    builder.Configuration.GetSection(\"FlowClickTokens\"));\nbuilder.Services.AddSingleton<IFlowClickTokenService, FlowClickTokenService>();\nbuilder.Services.AddScoped<IFlowRuntimeService, FlowRuntimeService>();  //\n#endregion\n\n#region 🔷 Audit Trail Logging\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddScoped<IAuditLogService, AuditLogService>();\n#endregion\n\n#region 🔷 WhatsApp settings\nbuilder.Services.AddScoped<IWhatsAppSettingsService, WhatsAppSettingsService>();\nbuilder.Services.AddValidatorsFromAssemblyContaining<SaveWhatsAppSettingValidator>();\nbuilder.Services.AddHttpClient<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddScoped<IWhatsAppTemplateFetcherService, WhatsAppTemplateFetcherService>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TemplateMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.CtaMessagePayloadBuilder>();\nbuilder.Services.AddScoped<IPlanManager, PlanManager>();\nbuilder.Services.AddScoped<ICTAManagementService, CTAManagementService>();\n//builder.Services.AddScoped<IWhatsAppProviderFactory, WhatsAppProviderFactory>();\nbuilder.Services.AddScoped<xbytechat.api.Features.MessagesEngine.Factory.IWhatsAppProviderFactory,\n                           xbytechat.api.Features.MessagesEngine.Factory.WhatsAppProviderFactory>();\n\n\nbuilder.Services.AddHttpClient(\"wa:pincale\", c =>\n{\n    c.Timeout = TimeSpan.FromSeconds(20);\n});\n\nbuilder.Services.AddHttpClient(\"wa:meta_cloud\", c =>\n{\n    c.Timeout = TimeSpan.FromSeconds(20);\n});\nbuilder.Services.AddScoped<MetaTemplateCatalogProvider>();\nbuilder.Services.AddScoped<PinnacleTemplateCatalogProvider>();\nbuilder.Services.AddScoped<ITemplateSyncService, TemplateSyncService>();\n\n#endregion\n\n#region 🔷 Inbox\nbuilder.Services.AddScoped<IFlowAnalyticsService, FlowAnalyticsService>();\nbuilder.Services.AddScoped<IInboxService, InboxService>();\nbuilder.Services.AddScoped<IInboundMessageProcessor, InboundMessageProcessor>();\nbuilder.Services.AddScoped<IInboxRepository, InboxRepository>();\n\n#endregion\n\n#region 🔷 Access Control\nbuilder.Services.AddScoped<IPermissionService, PermissionService>();\nbuilder.Services.AddMemoryCache();\nbuilder.Services.AddScoped<IPermissionCacheService, PermissionCacheService>();\n#endregion\n\n#region 🔷 AutoReplyBuilder Module\nbuilder.Services.AddScoped<IAutoReplyRepository, AutoReplyRepository>();\nbuilder.Services.AddScoped<IAutoReplyService, AutoReplyService>();\nbuilder.Services.AddScoped<IAutoReplyFlowRepository, AutoReplyFlowRepository>();\nbuilder.Services.AddScoped<IAutoReplyFlowService, AutoReplyFlowService>();\nbuilder.Services.AddScoped<IAutoReplyRuntimeService, AutoReplyRuntimeService>();\nbuilder.Services.AddScoped<IChatSessionStateService, ChatSessionStateService>();\nbuilder.Services.AddScoped<IAgentAssignmentService, AgentAssignmentService>();\n#endregion\n\n#region 🔷 Automation Module\nbuilder.Services.AddScoped<IAutomationFlowRepository, AutomationFlowRepository>();\nbuilder.Services.AddScoped<IAutomationRunner, AutomationRunner>();\nbuilder.Services.AddScoped<IAutomationService, AutomationService>();\n#endregion\n\n\n#region 🔐 JWT Authentication (Bearer token only, no cookies)\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = jwtSettings[\"Issuer\"],\n            ValidAudience = jwtSettings[\"Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n            ClockSkew = TimeSpan.Zero\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnAuthenticationFailed = context =>\n            {\n                if (context.Exception is SecurityTokenExpiredException)\n                {\n                    context.Response.StatusCode = 401;\n                    context.Response.ContentType = \"application/json\";\n                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n                }\n                return Task.CompletedTask;\n            }\n        };\n        options.Events = new JwtBearerEvents\n        {\n            OnMessageReceived = context =>\n            {\n                var accessToken = context.Request.Query[\"access_token\"];\n\n                // If the request is for our hub...\n                var path = context.HttpContext.Request.Path;\n                if (!string.IsNullOrEmpty(accessToken) &&\n                    (path.StartsWithSegments(\"/hubs/inbox\")))\n                {\n                    // Read the token from the query string\n                    context.Token = accessToken;\n                }\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n#endregion\n\n#region 🌐 CORS Setup (Bearer mode, no credentials)\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\nif (allowedOrigins == null || allowedOrigins.Length == 0)\n{\n    var raw = builder.Configuration[\"Cors:AllowedOrigins\"];\n    if (!string.IsNullOrWhiteSpace(raw))\n        allowedOrigins = raw.Split(new[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n}\nConsole.WriteLine(\"[CORS] Allowed origins => \" + string.Join(\", \", allowedOrigins ?? Array.Empty<string>()));\n\n\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy\n            .WithOrigins(allowedOrigins ?? Array.Empty<string>())\n            .AllowAnyHeader()\n            .AllowAnyMethod()\n            .AllowCredentials();\n    });\n});\n#endregion\n\n#region ✅ MVC + Swagger + Middleware\nbuilder.Services.AddControllers()\n    .AddJsonOptions(opts =>\n    {\n        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));\n    });\n\nbuilder.Services.AddEndpointsApiExplorer();\n\nbuilder.Services.AddSwaggerGen(options =>\n{\n    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n    {\n        Title = \"xByteChat API\",\n        Version = \"v1\",\n        Description = \"API documentation for xByteChat project\"\n    });\n});\n#endregion\n\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n#region SignalR\nbuilder.Services.AddSignalR();\nbuilder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n#endregion\n\n//builder.Services.Configure<HostOptions>(o =>\n//{\n//    o.BackgroundServiceExceptionBehavior = BackgroundServiceExceptionBehavior.Ignore;\n//});\n\nAppDomain.CurrentDomain.UnhandledException += (_, e) =>\n    Log.Error(e.ExceptionObject as Exception, \"Unhandled exception (AppDomain)\");\n\nTaskScheduler.UnobservedTaskException += (_, e) =>\n{\n    Log.Error(e.Exception, \"Unobserved task exception\");\n    e.SetObserved();\n};\nvar app = builder.Build();\n\napp.MapGet(\"/api/debug/cors\", () => Results.Ok(new\n{\n    Allowed = app.Services.GetRequiredService<IConfiguration>()\n              .GetSection(\"Cors:AllowedOrigins\").Get<string[]>()\n}));\napp.MapGet(\"/api/debug/db\", async (AppDbContext db) =>\n{\n    try { await db.Database.OpenConnectionAsync(); await db.Database.CloseConnectionAsync(); return Results.Ok(\"ok\"); }\n    catch (Exception ex) { return Results.Problem(ex.Message); }\n});\napp.MapGet(\"/api/debug/conn\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    return Results.Ok(new\n    {\n        host = b.Host,\n        port = b.Port,\n        database = b.Database,\n        username = b.Username,\n        sslmode = b.SslMode.ToString(),\n        hasPassword = !string.IsNullOrEmpty(b.Password)\n    });\n});\n// Try DNS resolution of the DB host that /api/debug/conn reports\napp.MapGet(\"/api/debug/dns\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    try\n    {\n        var ips = Dns.GetHostAddresses(b.Host);\n        return Results.Ok(new { host = b.Host, addresses = ips.Select(i => i.ToString()).ToArray() });\n    }\n    catch (Exception ex)\n    {\n        return Results.Problem($\"DNS failed for host '{b.Host}': {ex.Message}\");\n    }\n});\n\n\n#region 🌐 Middleware Pipeline Setup\nAuditLoggingHelper.Configure(app.Services);\n\napp.UseMiddleware<GlobalExceptionMiddleware>();\n\nif (app.Environment.IsDevelopment())\n{\n    // Dev-specific configs\n}\n\napp.UseSwagger();\napp.UseSwaggerUI();\nif (!app.Environment.IsDevelopment())\n    app.UseHsts();\napp.UseHttpsRedirection();\n\n// Security headers\napp.Use(async (context, next) =>\n{\n    context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n    context.Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n    context.Response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n    context.Response.Headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\";\n    context.Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n    await next();\n});\n\napp.UseRouting();\napp.UseCors(\"AllowFrontend\");\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\napp.MapHub<InboxHub>(\"/hubs/inbox\");\n\napp.Run();\n#endregion\n\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Properties/launchSettings.json",
      "sha256": "3374c65b7338b8a459db1242f356b2dd07d3dfd4cded988482a8f34fbe64e62e",
      "language": "json",
      "size": 1102,
      "content": "{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:18939\",\n      \"sslPort\": 44375\n    }\n  },\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5295;http://localhost:7113\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:7113;http://localhost:5295\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n"
    },
    {
      "path": "xbytechat-api/RepositoriesGen/Implementations/GenericRepository.cs",
      "sha256": "68fdbced75094ad69adcf2073501cec37b1745f7b4d6206826d6aedc33fe0a46",
      "language": "csharp",
      "size": 2091,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Repositories.Implementations\n{\n    public class GenericRepository<T> : IGenericRepository<T> where T : class\n    {\n        private readonly AppDbContext _context;\n        private readonly DbSet<T> _dbSet;\n\n        public GenericRepository(AppDbContext context)\n        {\n            _context = context;\n            _dbSet = _context.Set<T>();\n        }\n\n        public async Task<IEnumerable<T>> GetAllAsync()\n        {\n            return await _dbSet.ToListAsync();\n        }\n\n        public async Task<T?> FindByIdAsync(Guid id)\n        {\n            return await _dbSet.FindAsync(id);\n        }\n\n        public async Task AddAsync(T entity)\n        {\n            await _dbSet.AddAsync(entity);\n        }\n\n        public void Update(T entity)\n        {\n            _dbSet.Update(entity);\n        }\n\n        public void Delete(T entity)\n        {\n            _dbSet.Remove(entity);\n        }\n\n        public async Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.FirstOrDefaultAsync(predicate);\n        }\n\n        public async Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.Where(predicate).ToListAsync();\n        }\n\n        public async Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.AnyAsync(predicate);\n        }\n\n        public async Task SaveAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _context.Set<T>().Where(predicate).ToListAsync();\n        }\n\n        // ✅ NEW: Enables .Include(), .ThenInclude(), etc.\n        public IQueryable<T> AsQueryable()\n        {\n            return _dbSet.AsQueryable();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/RepositoriesGen/Interfaces/IGenericRepository.cs",
      "sha256": "dce9a4518c5e6db0da8996246969bbc864c23c5ec0eeb93ac053cc16a33bc920",
      "language": "csharp",
      "size": 941,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Repositories.Interfaces\n{\n    public interface IGenericRepository<T> where T : class\n    {\n        // 🔍 Basic Reads\n        Task<IEnumerable<T>> GetAllAsync();\n        Task<T?> FindByIdAsync(Guid id);\n        Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate);\n        Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate);\n\n        // 🔐 Checks\n        Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate);\n\n        // ✍️ Commands\n        Task AddAsync(T entity);\n        void Update(T entity);\n        void Delete(T entity);\n        Task SaveAsync();\n\n        Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate);\n\n        // ✅ New: Supports advanced LINQ operations like Include()\n        IQueryable<T> AsQueryable();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Implementations/MessageService.cs",
      "sha256": "4a9530274bcc8a60c09a984dfd7c120424ee9f5b32a1d430a4f393b0ebd5d45c",
      "language": "csharp",
      "size": 9833,
      "content": "using System.Text;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Services.Messages.Implementations\n{\n    public class MessageService : IMessageService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly IGenericRepository<MessageLog> _messageLogRepo;\n        private readonly Dictionary<string, IWhatsAppPayloadBuilder> _payloadBuilders;\n        private readonly ILogger<MessageService> _logger;\n\n        public MessageService(\n            AppDbContext dbContext,\n            HttpClient httpClient,\n            IConfiguration config,\n            IGenericRepository<MessageLog> messageLogRepo,\n            IEnumerable<IWhatsAppPayloadBuilder> builders,\n            ILogger<MessageService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _config = config;\n            _messageLogRepo = messageLogRepo;\n            _logger = logger;\n\n            _payloadBuilders = builders.ToDictionary(\n                b => b.GetType().Name.Replace(\"MessagePayloadBuilder\", \"\").ToLower(),\n                b => b\n            );\n        }\n\n        public async Task SendFollowUpAsync(string recipientNumber, string messageContent)\n        {\n            var dto = new TextMessageDto\n            {\n                RecipientNumber = recipientNumber,\n                MessageContent = messageContent,\n                BusinessId = Guid.Empty // Optional: Set dynamically if needed\n            };\n\n            await SendMessageAsync(dto); // ✅ You already have this method\n        }\n\n\n        public async Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto)\n        {\n            var messageType = dto.GetType().Name.Replace(\"MessageDto\", \"\").ToLower();\n\n            // 🧠 Get the right builder (e.g., for text, image)\n            if (!_payloadBuilders.TryGetValue(messageType, out var builder))\n            {\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Unsupported message type: \" + messageType\n                };\n            }\n\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = builder.BuildPayload(dto);\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"📦 Sending Payload: {Payload}\", json);\n\n            try\n\n\n            {\n                // 🛠️ Log the payload for debugging\n                _logger.LogInformation(\"📤 Final WhatsApp Payload:\\n\" + JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n\n                string? messageId = null;\n\n                // 🧾 Try extracting messageId (WAMID) from response\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        var jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"✅ Message sent but failed to parse WAMID: \" + ex.Message);\n                    }\n                }\n\n                // 📝 Log message for tracking\n                var log = new MessageLog\n                {\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto is TextMessageDto textDto && !string.IsNullOrEmpty(textDto.MessageContent)\n                        ? textDto.MessageContent\n                        : \"[Empty or Non-Text]\",\n                    MediaUrl = (dto as ImageMessageDto)?.MediaUrl,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ Message sent successfully\" : \"❌ Failed to send message\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception during message send\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending\",\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n        public async Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons)\n        {\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientPhone,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = bodyText },\n                    action = new\n                    {\n                        buttons = buttons.Select((text, index) => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = $\"cta_{index + 1}\",\n                                title = text\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"🚀 Sending CTA Message: \" + json);\n\n            try\n            {\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n                // Message send here successfully \n                string? messageId = null;\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        dynamic jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"⚠️ Sent, but failed to parse messageId: \" + ex.Message);\n                    }\n                }\n\n                // Log to MessageLogs table (optional: use a dummy entry)\n\n                var log = new MessageLog\n                {\n\n                    //BusinessId = Guid.Parse(\"put-a-valid-business-guid-here\"), //Guid.Empty, // set properly if you want to track\n                    BusinessId = Guid.TryParse(\"45262049-0127-4658-93e1-b3ffea645f4f\", out var parsedId)\n    ? parsedId\n    : throw new FormatException(\"❌ Invalid GUID format used for BusinessId.\"),\n                    RecipientNumber = recipientPhone,\n                    MessageContent = bodyText,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ CTA message sent\" : \"❌ Failed to send CTA\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while sending CTA\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending CTA\",\n                    ErrorMessage = ex.InnerException?.Message ?? ex.Message // ✅ this is critical\n                };\n            }\n\n        }\n\n    }\n}\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Interfaces/IMessageService.cs",
      "sha256": "7592cb1c94c37bab95a7c1a34fbc22e00b2fa0428bc1a23a4c2626a437314c30",
      "language": "csharp",
      "size": 846,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Services.Messages.Interfaces\n{\n    public interface IMessageService\n    {\n        /// <summary>\n        /// Sends a message of any supported type (Text, Image, Template).\n        /// </summary>\n        /// <param name=\"dto\">Base DTO representing message details.</param>\n        /// <returns>Standardized result with status, error info, and raw response.</returns>\n        Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto);\n        //Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto);\n        Task SendFollowUpAsync(string recipientNumber, string messageContent);\n        Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/WhatsAppService.cs",
      "sha256": "239db95488943944c9836125a53c4ede14522f2bc4914748e07350d86cc0051f",
      "language": "csharp",
      "size": 2917,
      "content": "using System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Configuration;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Services\n{\n    public class WhatsAppService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _whatsAppToken;\n        private readonly string _whatsAppPhoneId;\n\n        public WhatsAppService(IConfiguration configuration)\n        {\n            _httpClient = new HttpClient();\n\n            _whatsAppToken = configuration[\"WhatsApp:apiToken\"];\n            _whatsAppPhoneId = configuration[\"WhatsApp:PhoneNumberId\"];\n\n            if (string.IsNullOrEmpty(_whatsAppToken))\n                Console.WriteLine(\"❌ Token is NULL or EMPTY from config!\");\n\n            if (string.IsNullOrEmpty(_whatsAppPhoneId))\n                Console.WriteLine(\"❌ Phone ID is NULL or EMPTY from config!\");\n        }\n\n        public async Task<WhatsAppResult> SendMessageAsync(string recipientPhone, string messageText)\n        {\n            try\n            {\n                Console.WriteLine(\"👉 Preparing to send WhatsApp message...\");\n                var url = $\"https://graph.facebook.com/v22.0/{_whatsAppPhoneId}/messages\";\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = recipientPhone,\n                    type = \"text\",\n                    text = new { body = messageText }\n                };\n\n                var json = JsonSerializer.Serialize(payload);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _whatsAppToken);\n\n                var response = await _httpClient.PostAsync(url, content);\n                var responseBody = await response.Content.ReadAsStringAsync();\n\n                Console.WriteLine($\"✅ Status: {response.StatusCode}\");\n                Console.WriteLine($\"📥 Response: {responseBody}\");\n\n                if (response.IsSuccessStatusCode)\n                {\n                    return new WhatsAppResult { Success = true, RawResponse = responseBody };\n                }\n                else\n                {\n                    return new WhatsAppResult\n                    {\n                        Success = false,\n                        ErrorMessage = $\"Meta API Error: {response.StatusCode}\",\n                        RawResponse = responseBody\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Exception while sending:\");\n                Console.WriteLine(ex.Message);\n\n                return new WhatsAppResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/AutoMapperProfile.cs",
      "sha256": "989f0b9b654be427f90cea952c56afc87d0c6b647e71bae60f9694b4e21bacf2",
      "language": "csharp",
      "size": 708,
      "content": "using AutoMapper;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Shared\n{\n    public class AutoMapperProfile : Profile\n    {\n        public AutoMapperProfile()\n        {\n            CreateMap<Contact, ContactDto>();\n            CreateMap<Campaign, CampaignDto>();\n            CreateMap<MessageLog, MessageLogDto>();\n            CreateMap<TrackingLog, TrackingLogDto>();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/BusinessControllerBase.cs",
      "sha256": "ae04266e74cbbdfb58a81d85d24db83b9151ebef9e42b000430e8853ac2aa32f",
      "language": "csharp",
      "size": 343,
      "content": "using System;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace xbytechat.api.Shared\n{\n    // Do NOT add [ApiController] here; keep it on concrete controllers.\n    public abstract class BusinessControllerBase : ControllerBase\n    {\n        protected Guid BusinessId => User.GetBusinessId();\n        protected Guid UserId => User.GetUserId();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/ClaimsBusinessDetails.cs",
      "sha256": "c2e6949a61ef96fc2c06636f297b8d8d033f3f29fa5d7b57230743db945ed0a2",
      "language": "csharp",
      "size": 939,
      "content": "using System;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Shared\n{\n    public static class ClaimsBusinessDetails\n    {\n        public static Guid GetBusinessId(this ClaimsPrincipal user)\n        {\n            var businessIdClaim = user.FindFirst(\"businessId\")?.Value; // lowercase only!\n            if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                throw new UnauthorizedAccessException(\"Invalid or missing businessId in token.\");\n            return businessId;\n        }\n\n        public static Guid GetUserId(this ClaimsPrincipal user)\n        {\n            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))\n                throw new UnauthorizedAccessException(\"Invalid or missing userId in token.\");\n            return userId;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/ClaimsPrincipalExtensions.cs",
      "sha256": "aceea513e3338cb16f3558e4dea2d6cafd833f7786da41a6c718b9b2c7294670",
      "language": "csharp",
      "size": 90,
      "content": "namespace xbytechat.api.Shared\n{\n    public class ClaimsPrincipalExtensions\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/PaginatedRequest.cs",
      "sha256": "af6fceb743c7fcb6bbb984e08b2bb8e696a447e38e61b6fc85a7b9dd48a0fb04",
      "language": "csharp",
      "size": 363,
      "content": "namespace xbytechat.api.Shared\n{\n    public class PaginatedRequest\n    {\n        public int Page { get; set; } = 1;       // Page number (1-based)\n        public int PageSize { get; set; } = 10;  // Items per page\n\n        // Optional filter (can be extended later)\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Shared/PaginatedResponse.cs",
      "sha256": "d59aca9b4129006df5c4ec39b4e6793672e9493f4581e7963b6c215465d1b113",
      "language": "csharp",
      "size": 296,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Shared\n{\n    public class PaginatedResponse<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n        public int Page { get; set; }\n        public int PageSize { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/DeviceHelper.cs",
      "sha256": "70ad5b3deb3b07358a3ce61a514b3a9c3f4bb78007752bd0f4106ef8a3f27b32",
      "language": "csharp",
      "size": 748,
      "content": "// File: Features/CTATracking/Utils/DeviceHelper.cs\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class DeviceHelper\n    {\n        public static string GetDeviceType(string userAgent)\n        {\n            if (string.IsNullOrEmpty(userAgent)) return \"Unknown\";\n\n            userAgent = userAgent.ToLower();\n\n            if (userAgent.Contains(\"mobile\") || userAgent.Contains(\"android\") || userAgent.Contains(\"iphone\"))\n                return \"Mobile\";\n\n            if (userAgent.Contains(\"ipad\") || userAgent.Contains(\"tablet\"))\n                return \"Tablet\";\n\n            if (userAgent.Contains(\"windows\") || userAgent.Contains(\"macintosh\"))\n                return \"Desktop\";\n\n            return \"Unknown\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/GeoHelper.cs",
      "sha256": "359da4b5f8939751d00d9137b41774e466af302ccaf60e203c1b0f0827a9eafd",
      "language": "csharp",
      "size": 952,
      "content": "// File: Features/CTATracking/Utils/GeoHelper.cs\n\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class GeoHelper\n    {\n        public static async Task<string> GetCountryFromIP(string ipAddress)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(ipAddress) || ipAddress == \"::1\")\n                    return \"Localhost\";\n\n                using var client = new HttpClient();\n                var response = await client.GetStringAsync($\"https://ipapi.co/{ipAddress}/json/\");\n\n                var doc = JsonDocument.Parse(response);\n                if (doc.RootElement.TryGetProperty(\"country_name\", out var countryProp))\n                    return countryProp.GetString() ?? \"Unknown\";\n            }\n            catch\n            {\n                // fallback\n            }\n\n            return \"Unknown\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/TrackingUrlBuilder.cs",
      "sha256": "d944abb54aa2863bcad184f9d8bbd42d683f5d0b0b07474ea3f26903e7cc13d5",
      "language": "csharp",
      "size": 1370,
      "content": "using System;\nusing System.Web;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class TrackingUrlBuilder\n    {\n        public static string BuildTrackingUrl(\n            Guid businessId,\n            string sourceType,\n            Guid sourceId,\n            string buttonText,\n            string redirectUrl,\n            Guid? messageId = null,\n            Guid? contactId = null,\n            string contactPhone = null,\n            string sessionId = null,\n            string threadId = null)\n        {\n            var query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"src\"] = sourceType;\n            query[\"id\"] = sourceId.ToString();\n            query[\"btn\"] = buttonText;\n            query[\"to\"] = redirectUrl;\n            query[\"type\"] = buttonText;\n            if (messageId != null) query[\"msg\"] = messageId.ToString();\n            if (contactId != null) query[\"contact\"] = contactId.ToString();\n            if (!string.IsNullOrEmpty(contactPhone)) query[\"phone\"] = contactPhone;\n            if (!string.IsNullOrEmpty(sessionId)) query[\"session\"] = sessionId;\n            if (!string.IsNullOrEmpty(threadId)) query[\"thread\"] = threadId;\n\n            var baseUrl = Environment.GetEnvironmentVariable(\"API_BASE_URL\") ?? \"https://yourdomain.com\";\n            return $\"{baseUrl}/api/tracking/redirect?{query}\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/utility/TemplateParameterHelper.cs",
      "sha256": "51753bdf8ce7b9964913d5a501bee92803cf58d23cc315def80b8c69561dfbe1",
      "language": "csharp",
      "size": 1252,
      "content": "using Newtonsoft.Json;\nusing System.Text.RegularExpressions;\n\nnamespace xbytechat.api.Shared.utility\n{\n    public static class TemplateParameterHelper\n    {\n        // ✅ Used when parsing stored JSON parameters\n        public static List<string> ParseTemplateParams(string? jsonString)\n        {\n            if (string.IsNullOrWhiteSpace(jsonString)) return new List<string>();\n            try\n            {\n                return JsonConvert.DeserializeObject<List<string>>(jsonString) ?? new List<string>();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        // ✅ NEW: Fills {{1}}, {{2}} with parameter values\n        public static string FillPlaceholders(string template, List<string> parameters)\n        {\n            if (string.IsNullOrWhiteSpace(template) || parameters == null || parameters.Count == 0)\n                return template;\n\n            // Replace {{1}}, {{2}} ... with values\n            return Regex.Replace(template, @\"\\{\\{(\\d+)\\}\\}\", match =>\n            {\n                var index = int.Parse(match.Groups[1].Value) - 1;\n                return index >= 0 && index < parameters.Count ? parameters[index] : match.Value;\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Validators/MessageTypeValidator.cs",
      "sha256": "a9accea936700f5fa40d270dffc11079bdce7a4ede1f30f968b41436460b80b2",
      "language": "csharp",
      "size": 871,
      "content": "namespace xbytechat.api.Validators\n{\n    /// <summary>\n    /// Centralized validator for supported message types (text, image, template, etc.)\n    /// </summary>\n    public static class MessageTypeValidator\n    {\n        private static readonly HashSet<string> SupportedTypes = new()\n        {\n            \"text\", \"image\", \"template\"\n        };\n\n        /// <summary>\n        /// Checks whether a messageType is supported.\n        /// </summary>\n        public static bool IsValid(string? messageType)\n        {\n            return !string.IsNullOrWhiteSpace(messageType) &&\n                   SupportedTypes.Contains(messageType.ToLower());\n        }\n\n        /// <summary>\n        /// Returns all supported message types.\n        /// </summary>\n        public static IEnumerable<string> GetSupportedTypes()\n        {\n            return SupportedTypes;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/ITemplateCatalogProvider.cs",
      "sha256": "013b4df521e161fb281c651f252a270d851bffe7b430900f96386d0c9b4ccf18",
      "language": "csharp",
      "size": 420,
      "content": "using xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public interface ITemplateCatalogProvider\n    {\n        Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity setting, CancellationToken ct = default);\n        Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity setting, string templateName, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/TemplateCatalogItem.cs",
      "sha256": "27edec7875c999037dd77d4d6af4a309baf8a5a1f130ec53f86f9dc12757ef76",
      "language": "csharp",
      "size": 414,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public record TemplateCatalogItem(\n       string Name,\n       string Language,\n       string Body,\n       int PlaceholderCount,\n       bool HasImageHeader,\n       IReadOnlyList<ButtonMetadataDto> Buttons,\n       string Status,\n       string? Category,\n       string? ExternalId,\n       string RawJson\n   );\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplatesController.cs",
      "sha256": "a505dfe53b9b5f41500a7e28228fa83350122924619b410517bc9d9bf2b67180",
      "language": "csharp",
      "size": 3185,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat_api.WhatsAppSettings.Models;\nnamespace xbytechat.api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ITemplateSyncService _sync;\n\n        public TemplatesController(AppDbContext db, ITemplateSyncService sync)\n        { _db = db; _sync = sync; }\n\n        [HttpPost(\"sync/{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> Sync(Guid businessId, [FromQuery] bool force = false)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { success = false, message = \"Invalid businessId\" });\n            var result = await _sync.SyncBusinessTemplatesAsync(businessId, force);\n            return Ok(new { success = true, result });\n        }\n\n        [HttpGet(\"{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> List(Guid businessId, [FromQuery] string? q = null,\n            [FromQuery] string? status = \"APPROVED\", [FromQuery] string? language = null,\n            [FromQuery] string? provider = null)\n        {\n            var query = _db.WhatsAppTemplates.AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(status))\n                query = query.Where(x => x.Status == status);\n\n            if (!string.IsNullOrWhiteSpace(language))\n                query = query.Where(x => x.Language == language);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                query = query.Where(x => x.Provider == provider);\n\n            if (!string.IsNullOrWhiteSpace(q))\n                query = query.Where(x => x.Name.Contains(q) || x.Body.Contains(q));\n\n            var items = await query\n                .OrderBy(x => x.Name)\n                .Select(x => new\n                {\n                    x.Name,\n                    x.Language,\n                    x.Status,\n                    x.Category,\n                    x.PlaceholderCount,\n                    x.HasImageHeader,\n                    x.ButtonsJson\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, templates = items });\n        }\n\n        [HttpGet(\"{businessId:guid}/{name}\")]\n        [Authorize]\n        public async Task<IActionResult> GetOne(Guid businessId, string name, [FromQuery] string? language = null)\n        {\n            var tpl = await _db.WhatsAppTemplates.AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.Name == name &&\n                                          (language == null || x.Language == language));\n            if (tpl == null) return NotFound();\n            return Ok(new\n            {\n                tpl.Name,\n                tpl.Language,\n                tpl.Status,\n                tpl.Category,\n                tpl.Body,\n                tpl.PlaceholderCount,\n                tpl.HasImageHeader,\n                tpl.ButtonsJson\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
      "sha256": "f9eecd20b323a755c386364f52b362f9faa22ce567c43993e980ae0ed50f5949",
      "language": "csharp",
      "size": 20303,
      "content": "// 📄 File: WhatsAppSettings/Controllers/WhatsAppSettingsController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _svc;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService svc,\n            ILogger<WhatsAppSettingsController> logger)\n        {\n            _svc = svc;\n            _logger = logger;\n        }\n\n        // ----------------------------\n        // Save/Update settings\n        // ----------------------------\n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            _logger.LogInformation(\"🔧 [UpdateSetting] Incoming payload for provider={Provider}\", dto?.Provider);\n\n            if (!ModelState.IsValid)\n            {\n                var errs = ModelState\n                    .Where(e => e.Value.Errors.Count > 0)\n                    .Select(e => new { Field = e.Key, Errors = e.Value.Errors.Select(x => x.ErrorMessage) });\n\n                _logger.LogWarning(\"❌ [UpdateSetting] Validation failed: {@Errors}\", errs);\n                return BadRequest(new { message = \"❌ Invalid input.\", errors = errs });\n            }\n\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId();\n                dto.BusinessId = businessId;\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                _logger.LogWarning(\"❌ [UpdateSetting] BusinessId claim missing/invalid: {Msg}\", ex.Message);\n                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n            }\n\n            try\n            {\n                // Normalize provider to our canonical set\n                dto.Provider = NormalizeProvider(dto.Provider);\n\n                await _svc.SaveOrUpdateSettingAsync(dto);\n                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [UpdateSetting] Exception while saving settings.\");\n                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Get the current user's saved settings\n        // ----------------------------\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n            var businessId = User.GetBusinessId();\n            var setting = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        // ----------------------------\n        // Test connection using values sent in the body (not necessarily saved)\n        // Accepts Provider = \"Pinnacle\" or \"Meta_cloud\"\n        // ----------------------------\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (dto is null)\n                return BadRequest(new { message = \"❌ Missing request body.\" });\n\n            var provider = NormalizeProvider(dto.Provider);\n            if (provider is null)\n                return BadRequest(new { message = \"❌ Provider is required (Pinnacle | Meta_cloud).\" });\n\n            dto.Provider = provider; // use canonical\n\n            // Minimal provider-specific validation (service will validate again)\n            if (provider == \"Meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiToken) ||\n                    string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                {\n                    return BadRequest(new { message = \"❌ API URL, Token and Phone Number ID are required for Meta Cloud test.\" });\n                }\n            }\n            else if (provider == \"Pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiKey) ||\n                    (string.IsNullOrWhiteSpace(dto.WabaId) && string.IsNullOrWhiteSpace(dto.PhoneNumberId)) ||\n                    string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                {\n                    return BadRequest(new\n                    {\n                        message = \"❌ API URL, API Key, (WABA ID or Phone Number ID), and Business Number are required for Pinnacle test.\"\n                    });\n                }\n            }\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n\n                // Convention: service returns a human string; we 200 on success (starts with ✅), 400 otherwise\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [TestConnection] Failed\");\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Test connection against the SAVED settings for this business\n        // ----------------------------\n        [HttpPost(\"test-connection/current\")]\n        public async Task<IActionResult> TestConnectionCurrent()\n        {\n            var businessId = User.GetBusinessId();\n            var saved = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (saved is null)\n                return NotFound(new { message = \"❌ No saved WhatsApp settings found.\" });\n\n            var dto = new SaveWhatsAppSettingDto\n            {\n                BusinessId = businessId,\n                Provider = NormalizeProvider(saved.Provider) ?? saved.Provider,\n                ApiUrl = saved.ApiUrl,\n                ApiKey = saved.ApiKey,\n                ApiToken = saved.ApiToken,\n                PhoneNumberId = saved.PhoneNumberId,\n                WabaId = saved.WabaId,\n                WhatsAppBusinessNumber = saved.WhatsAppBusinessNumber,\n                SenderDisplayName = saved.SenderDisplayName,\n                WebhookSecret = saved.WebhookSecret,\n                WebhookVerifyToken = saved.WebhookVerifyToken,\n                IsActive = saved.IsActive\n            };\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"✅\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"❌ Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [TestConnectionCurrent] Failed\");\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Delete current user's settings\n        // ----------------------------\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessId = User.GetBusinessId();\n            var deleted = await _svc.DeleteSettingsAsync(businessId);\n            if (!deleted) return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n        }\n\n        // Optional alias for FE routes that call /delete-current\n        [HttpDelete(\"delete-current\")]\n        public Task<IActionResult> DeleteSettingAlias() => DeleteSetting();\n\n        /// <summary>\n        /// Maps any incoming text to the canonical provider values we support.\n        /// Returns null if unrecognized.\n        /// </summary>\n        private static string? NormalizeProvider(string? providerRaw)\n        {\n            if (string.IsNullOrWhiteSpace(providerRaw)) return null;\n\n            var p = providerRaw.Trim();\n\n            // Accept canonical values exactly and a few common variants\n            if (string.Equals(p, \"Pinnacle\", StringComparison.Ordinal)) return \"Pinnacle\";\n            if (string.Equals(p, \"Meta_cloud\", StringComparison.Ordinal)) return \"Meta_cloud\";\n\n            // tolerate some user/legacy variants from older UIs\n            var lower = p.ToLowerInvariant();\n            if (lower is \"pinbot\" or \"pinnacle (official)\" or \"pinnacle (pinnacle)\" or \"pinnacle official\")\n                return \"Pinnacle\";\n            if (lower is \"meta cloud\" or \"meta\" or \"meta-cloud\")\n                return \"Meta_cloud\";\n\n            return null;\n        }\n\n        [HttpGet(\"callback-url\")]\n        public async Task<IActionResult> GetMyCallbackUrl([FromServices] IConfiguration cfg)\n        {\n            var businessId = User.GetBusinessId();\n            var baseUrl = cfg[\"App:PublicBaseUrl\"] ?? string.Empty;\n            var url = await _svc.GetCallbackUrlAsync(businessId, baseUrl);\n            return Ok(new { callbackUrl = url });\n        }\n\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.Extensions.Logging;\n//using System;\n//using System.Linq;\n//using System.Security.Claims;\n//using System.Threading.Tasks;\n//using xbytechat.api.Shared;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    [Authorize]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n//        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n//        public WhatsAppSettingsController(\n//            IWhatsAppSettingsService whatsAppSettingsService,\n//            ILogger<WhatsAppSettingsController> logger)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//            _logger = logger;\n//        }\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            _logger.LogInformation(\"🔧 [UpdateSetting] Request received for WhatsApp settings update.\");\n\n//            if (!ModelState.IsValid)\n//            {\n//                var validationErrors = ModelState\n//                    .Where(e => e.Value.Errors.Count > 0)\n//                    .Select(e => new\n//                    {\n//                        Field = e.Key,\n//                        Errors = e.Value.Errors.Select(x => x.ErrorMessage)\n//                    });\n\n//                _logger.LogWarning(\"❌ [UpdateSetting] Validation failed: {@Errors}\", validationErrors);\n//                return BadRequest(new { message = \"❌ Invalid input.\", errors = validationErrors });\n//            }\n\n//            Guid businessId;\n//            try\n//            {\n//                businessId = User.GetBusinessId(); // ✅ Cleaner using your helper\n//                dto.BusinessId = businessId;\n//            }\n//            catch (UnauthorizedAccessException ex)\n//            {\n//                _logger.LogWarning(\"❌ [UpdateSetting] BusinessId claim missing or invalid: {Message}\", ex.Message);\n//                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n//            }\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//            {\n//                _logger.LogWarning(\"❌ [UpdateSetting] Missing ApiToken or PhoneNumberId.\");\n//                return BadRequest(new { message = \"❌ API Token and Phone Number ID are required.\" });\n//            }\n\n//            try\n//            {\n//                _logger.LogInformation(\"💾 [UpdateSetting] Saving/updating WhatsApp settings for businessId={BusinessId}.\", businessId);\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                _logger.LogInformation(\"✅ [UpdateSetting] WhatsApp settings updated successfully.\");\n//                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"❌ [UpdateSetting] Exception occurred while saving settings.\");\n//                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        [HttpGet(\"me\")]\n//        public async Task<IActionResult> GetMySettings()\n//        {\n\n//            var businessId = User.GetBusinessId();\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n//        //[HttpPost(\"test-connection\")]\n//        //public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        //{\n//        //    if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//        //        return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n//        //    try\n//        //    {\n//        //        var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//        //        return Ok(new { message = result });\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n//        //    }\n//        //}\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        [HttpDelete(\"delete\")]\n//        public async Task<IActionResult> DeleteSetting()\n//        {\n//            var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n//            if (!Guid.TryParse(businessIdStr, out var businessId))\n//                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using System;\n//using System.Threading.Tasks;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n\n//        public WhatsAppSettingsController(IWhatsAppSettingsService whatsAppSettingsService)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//        }\n\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//                return BadRequest(new { message = \"❌ Invalid input.\", errors = ModelState });\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//                return BadRequest(new { message = \"❌ API Token and Phone Number ID are required.\" });\n\n//            try\n//            {\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Get WhatsApp Settings by BusinessId\n//        /// </summary>\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        /// <summary>\n//        /// Test WhatsApp Connection (API URL + Token)\n//        /// </summary>\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Delete WhatsApp Settings for a Business\n//        /// </summary>\n//        [HttpDelete(\"delete/{businessId}\")]\n//        public async Task<IActionResult> DeleteSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
      "sha256": "423175eb5cd31766ee4c3fe215cb17108c3cf6bc44948fc0f52a88e8a000ad39",
      "language": "csharp",
      "size": 3072,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ✅ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n\n      \n\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"❌ Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
      "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
      "language": "csharp",
      "size": 536,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
      "sha256": "c2b21c876df2c4019afb2d32e4bd1cf33fc232c2ce8359e4775bf0094df9e91e",
      "language": "csharp",
      "size": 1404,
      "content": "// 📄 File: WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n        public Guid BusinessId { get; set; }\n\n        // Which provider: \"pinnacle\" | \"meta_cloud\"\n        [Required, MaxLength(50)]\n        public string Provider { get; set; } = string.Empty;\n\n        [Required, MaxLength(500)]\n        public string ApiUrl { get; set; } = string.Empty;\n\n        [MaxLength(1000)]\n        public string? ApiKey { get; set; } // Pinnacle\n\n        [MaxLength(1000)]\n        public string? ApiToken { get; set; } // Meta Cloud\n\n        [MaxLength(100)]\n        public string? PhoneNumberId { get; set; } // Meta Cloud\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional (Pinnacle/Meta)\n\n        [MaxLength(50)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookVerifyToken { get; set; }\n\n        // 👇 NEW: per-provider callback URL (optional, stored in DB)\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "954d4bddaa8450da19f714aec8f819d5affa5edcee6a6e078759e3bcb04b47be",
      "language": "csharp",
      "size": 427,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class TemplateForUIResponseDto\n    {\n        public string Name { get; set; } = \"\";\n        public string Language { get; set; } = \"en_US\";\n        public string Body { get; set; } = \"\";\n        public int ParametersCount { get; set; }\n        public bool HasImageHeader { get; set; }\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
      "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
      "language": "csharp",
      "size": 911,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ✅ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
      "sha256": "f674f9fc1e4de25b661a9f133a52c0ebb09d79ad04e368c5d91bd080f18f1f83",
      "language": "csharp",
      "size": 2788,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        // NEW: which provider this row belongs to (\"pinnacle\", \"meta_cloud\", \"twilio\", etc.)\n        [Required]\n        [MaxLength(50)]\n        public string Provider { get; set; } //= \"pinnacle\";\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }  // e.g. https://partnersv1.pinbot.ai/v3\n\n        [MaxLength(1000)]\n        public string ApiKey { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; } // store encrypted\n\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } // used by Meta Cloud; Pinbot doesn't need it\n        public string? WabaId { get; set; } = string.Empty;\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        // Optional: for webhook signature/verification if provider supports it\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookVerifyToken { get; set; }\n\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n\n\n//using System;\n//using System.ComponentModel.DataAnnotations;\n\n//namespace xbytechat_api.WhatsAppSettings.Models\n//{\n//    public class WhatsAppSettingEntity\n//    {\n//        [Key]\n//        public Guid Id { get; set; }\n\n//        [Required]\n//        public Guid BusinessId { get; set; }\n\n//        [Required]\n//        [MaxLength(500)]\n//        public string ApiUrl { get; set; }\n\n//        [Required]\n//        [MaxLength(1000)]\n//        public string ApiToken { get; set; }\n\n//        [Required]\n//        [MaxLength(20)]\n//        public string? WhatsAppBusinessNumber { get; set; }\n\n//        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n//        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n//        [MaxLength(100)]\n//        public string? SenderDisplayName { get; set; }\n\n//        [Required]\n//        public bool IsActive { get; set; } = true;\n\n//        [Required]\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n//        public DateTime? UpdatedAt { get; set; }\n\n//        // string ApiVersion { get; set; } = \"v18.0\";\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/MetaTemplateCatalogProvider.cs",
      "sha256": "d2c2e1cd29b2abb71def8df8125e0d3dd90ec3fa146f6af4143cd23d5f5ce917",
      "language": "csharp",
      "size": 6494,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class MetaTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaTemplateCatalogProvider> _log;\n\n        public MetaTemplateCatalogProvider(HttpClient http, ILogger<MetaTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n            if (string.IsNullOrWhiteSpace(s.ApiToken) || string.IsNullOrWhiteSpace(s.WabaId))\n                return items;\n\n            var baseUrl = s.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\";\n            var next = $\"{baseUrl}/{s.WabaId}/message_templates?limit=100\";\n\n            _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", s.ApiToken);\n\n            while (!string.IsNullOrWhiteSpace(next))\n            {\n                var res = await _http.GetAsync(next, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n                if (!res.IsSuccessStatusCode) break;\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    // Filter APPROVED/ACTIVE\n                    string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                    if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    bool hasImageHeader = false;\n                    var buttons = new List<ButtonMetadataDto>();\n\n                    foreach (var comp in tpl.components)\n                    {\n                        string type = comp.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = comp.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (comp.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var b in comp.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = b.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? param = b.url != null ? b.url.ToString()\n                                                 : b.phone_number != null ? b.phone_number.ToString()\n                                                 : b.coupon_code != null ? b.coupon_code.ToString()\n                                                 : b.flow_id != null ? b.flow_id.ToString()\n                                                 : null;\n\n                                    bool hasExample = b.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(b.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n                                    if (subType == \"unknown\" || (param == null && needsRuntimeValue)) continue;\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = param ?? \"\"\n                                    });\n                                }\n                                catch (Exception ex)\n                                { _log.LogWarning(ex, \"Button parse failed for template {Name}\", (string)name); }\n                            }\n                        }\n                    }\n\n                    int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                    var raw = JsonConvert.SerializeObject(tpl);\n\n                    items.Add(new TemplateCatalogItem(\n                        Name: name,\n                        Language: language,\n                        Body: body,\n                        PlaceholderCount: placeholders,\n                        HasImageHeader: hasImageHeader,\n                        Buttons: buttons,\n                        Status: status,\n                        Category: tpl.category?.ToString(),\n                        ExternalId: tpl.id?.ToString(),\n                        RawJson: raw\n                    ));\n                }\n\n                next = parsed?.paging?.next?.ToString();\n            }\n\n            return items;\n        }\n\n        public async Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => (await ListAsync(s, ct)).FirstOrDefault(t => t.Name.Equals(templateName, StringComparison.OrdinalIgnoreCase));\n    }\n}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/PinnacleTemplateCatalogProvider.cs",
      "sha256": "3060d7531506978583fc9d7ca9ca3d2a2f4363a469846efcfcf97ae005ce30da",
      "language": "csharp",
      "size": 9679,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n\n            if (string.IsNullOrWhiteSpace(s.ApiKey))\n            {\n                _log.LogWarning(\"Pinnacle: missing ApiKey for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            var baseUrl = (s.ApiUrl ?? \"https://partnersv1.pinbot.ai/v3\").TrimEnd('/');\n            var pathId = !string.IsNullOrWhiteSpace(s.WabaId) ? s.WabaId!.Trim()\n                        : !string.IsNullOrWhiteSpace(s.PhoneNumberId) ? s.PhoneNumberId!.Trim()\n                        : null;\n\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                _log.LogWarning(\"Pinnacle: missing WabaId/PhoneNumberId for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            // set header\n            _http.DefaultRequestHeaders.Remove(\"apikey\");\n            _http.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", s.ApiKey);\n\n            string? nextUrl = $\"{baseUrl}/{pathId}/message_templates?limit=100\";\n\n            while (!string.IsNullOrWhiteSpace(nextUrl))\n            {\n                using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                var res = await _http.SendAsync(req, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    _log.LogError(\"❌ Pinnacle list failed ({Status}): {Body}\", (int)res.StatusCode, json);\n                    break;\n                }\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n                var collection = parsed?.data ?? parsed?.templates;\n                if (collection == null)\n                {\n                    _log.LogInformation(\"Pinnacle: no data/templates array.\");\n                    break;\n                }\n\n                foreach (var tpl in collection)\n                {\n                    try\n                    {\n                        string name = tpl.name?.ToString() ?? \"\";\n                        string language = tpl.language?.ToString() ?? \"en_US\";\n                        string status = (tpl.status?.ToString() ?? \"APPROVED\").ToUpperInvariant();\n                        string category = tpl.category?.ToString();\n                        string externalId = tpl.id?.ToString();\n\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        var components = tpl.components;\n                        if (components != null)\n                        {\n                            foreach (var c in components)\n                            {\n                                string type = c.type?.ToString()?.ToUpperInvariant();\n\n                                if (type == \"BODY\")\n                                    body = c.text?.ToString() ?? \"\";\n\n                                if (type == \"HEADER\" &&\n                                    (c.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                                    hasImageHeader = true;\n\n                                if (type == \"BUTTONS\" && c.buttons != null)\n                                {\n                                    foreach (var b in c.buttons)\n                                    {\n                                        string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                        string text = b.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? param =\n                                            b.url != null ? b.url.ToString() :\n                                            b.phone_number != null ? b.phone_number.ToString() :\n                                            b.coupon_code != null ? b.coupon_code.ToString() :\n                                            b.flow_id != null ? b.flow_id.ToString() :\n                                            null;\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = param ?? \"\"\n                                        });\n                                    }\n                                }\n                            }\n                        }\n\n                        int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                        var raw = JsonConvert.SerializeObject(tpl);\n\n                        // Only persist APPROVED/ACTIVE (match Meta behavior)\n                        if (status is \"APPROVED\" or \"ACTIVE\")\n                        {\n                            items.Add(new TemplateCatalogItem(\n                                Name: name,\n                                Language: language,\n                                Body: body,\n                                PlaceholderCount: placeholders,\n                                HasImageHeader: hasImageHeader,\n                                Buttons: buttons,\n                                Status: status,\n                                Category: category,\n                                ExternalId: externalId,\n                                RawJson: raw\n                            ));\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _log.LogWarning(ex, \"Pinnacle: failed to map a template item.\");\n                    }\n                }\n\n                // try to follow paging like Meta\n                nextUrl = parsed?.paging?.next?.ToString();\n                if (string.IsNullOrWhiteSpace(nextUrl))\n                    break;\n            }\n\n            return items;\n        }\n\n        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => Task.FromResult<TemplateCatalogItem?>(null); // not needed for sync path\n    }\n}\n\n\n//using xbytechat.api.WhatsAppSettings.Abstractions;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//namespace xbytechat.api.WhatsAppSettings.Providers\n//{\n//    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n//    {\n//        private readonly HttpClient _http;\n//        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n//        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n//        { _http = http; _log = log; }\n\n//        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n//        {\n//            // If your BSP supports listing:\n//            // var baseUrl = (s.ApiUrl ?? \"\").TrimEnd('/');\n//            // var url = $\"{baseUrl}/templates?limit=100\";\n//            // using var req = new HttpRequestMessage(HttpMethod.Get, url);\n//            // req.Headers.Add(\"x-api-key\", s.ApiKey);\n//            // var res = await _http.SendAsync(req, ct);\n//            // var json = await res.Content.ReadAsStringAsync(ct);\n//            // if (!res.IsSuccessStatusCode) return Array.Empty<TemplateCatalogItem>();\n//            // dynamic parsed = JsonConvert.DeserializeObject(json);\n//            // map to TemplateCatalogItem and return\n\n//            // If not supported (common): return empty to trigger UI fallback\n//            _log.LogInformation(\"Pinnacle does not expose template listing (returning empty).\");\n//            return Array.Empty<TemplateCatalogItem>();\n//        }\n\n//        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n//            => Task.FromResult<TemplateCatalogItem?>(null);\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
      "sha256": "9e97276f87619317bc5056f3d991fb9762589c52813c83ca54d10147a064e5d1",
      "language": "csharp",
      "size": 662,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n        Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
      "sha256": "b5885cf1f231339958b3654b05bafa3aceb5fcb78d7f4e8c650d39c3fa21973f",
      "language": "csharp",
      "size": 593,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // 🔹 (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplateSyncService.cs",
      "sha256": "ffae82d0e1386e24844de32fe374d0df6ed02bdec22771dcb32fbc458d248c34",
      "language": "csharp",
      "size": 4795,
      "content": "// 📄 Features/TemplateCatalog/Services/TemplateSyncService.cs\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.Providers;\nusing xbytechat_api.WhatsAppSettings.Models;\n\npublic record TemplateSyncResult(int Added, int Updated, int Skipped, DateTime SyncedAt);\n\npublic interface ITemplateSyncService\n{\n    Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default);\n}\n\npublic sealed class TemplateSyncService : ITemplateSyncService\n{\n    private readonly AppDbContext _db;\n    private readonly MetaTemplateCatalogProvider _meta;\n    private readonly PinnacleTemplateCatalogProvider _pinnacle;\n    private readonly ILogger<TemplateSyncService> _log;\n\n    private static readonly TimeSpan TTL = TimeSpan.FromHours(12);\n\n    public TemplateSyncService(AppDbContext db,\n        MetaTemplateCatalogProvider meta,\n        PinnacleTemplateCatalogProvider pinnacle,\n        ILogger<TemplateSyncService> log)\n    { _db = db; _meta = meta; _pinnacle = pinnacle; _log = log; }\n\n    public async Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default)\n    {\n        var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive, ct)\n                      ?? throw new InvalidOperationException(\"Active WhatsApp settings not found.\");\n\n        var now = DateTime.UtcNow;\n\n        // TTL short-circuit\n        if (!force)\n        {\n            var recent = await _db.WhatsAppTemplates\n                .Where(t => t.BusinessId == businessId)\n                .OrderByDescending(t => t.LastSyncedAt)\n                .Select(t => t.LastSyncedAt)\n                .FirstOrDefaultAsync(ct);\n\n            if (recent != default && now - recent < TTL)\n            {\n                _log.LogInformation(\"⏭️ Skipping sync for {BusinessId}; TTL not expired.\", businessId);\n                return new TemplateSyncResult(0, 0, 0, recent);\n            }\n        }\n\n        var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n        IReadOnlyList<TemplateCatalogItem> incoming = providerKey switch\n        {\n            \"meta_cloud\" => await _meta.ListAsync(setting, ct),\n            \"pinnacle\" => await _pinnacle.ListAsync(setting, ct),\n            _ => Array.Empty<TemplateCatalogItem>()\n        };\n\n        int added = 0, updated = 0, skipped = 0;\n\n        foreach (var it in incoming)\n        {\n            var existing = await _db.WhatsAppTemplates.FirstOrDefaultAsync(t =>\n                t.BusinessId == businessId &&\n                t.Provider == providerKey &&\n                t.Name == it.Name &&\n                t.Language == it.Language, ct);\n\n            var buttonsJson = JsonConvert.SerializeObject(it.Buttons);\n\n            if (existing == null)\n            {\n                await _db.WhatsAppTemplates.AddAsync(new WhatsAppTemplate\n                {\n                    BusinessId = businessId,\n                    Provider = providerKey,\n                    ExternalId = it.ExternalId,\n                    Name = it.Name,\n                    Language = it.Language,\n                    Status = string.IsNullOrWhiteSpace(it.Status) ? \"APPROVED\" : it.Status,\n                    Category = it.Category,\n                    Body = it.Body ?? \"\",\n                    HasImageHeader = it.HasImageHeader,\n                    PlaceholderCount = it.PlaceholderCount,\n                    ButtonsJson = buttonsJson,\n                    RawJson = it.RawJson,\n                    LastSyncedAt = now,\n                    CreatedAt = now,\n                    UpdatedAt = now,\n                    IsActive = true\n                }, ct);\n                added++;\n            }\n            else\n            {\n                existing.ExternalId = it.ExternalId ?? existing.ExternalId;\n                existing.Status = string.IsNullOrWhiteSpace(it.Status) ? existing.Status : it.Status;\n                existing.Category = it.Category ?? existing.Category;\n                existing.Body = it.Body ?? existing.Body;\n                existing.HasImageHeader = it.HasImageHeader;\n                existing.PlaceholderCount = it.PlaceholderCount;\n                existing.ButtonsJson = buttonsJson;\n                existing.RawJson = it.RawJson ?? existing.RawJson;\n                existing.LastSyncedAt = now;\n                existing.UpdatedAt = now;\n                existing.IsActive = true;\n                updated++;\n            }\n        }\n\n        await _db.SaveChangesAsync(ct);\n\n        return new TemplateSyncResult(added, updated, skipped, now);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
      "sha256": "eaee072b88337b67d2e4701921c91e515612988f17dae3dcfd3531484e4a8dab",
      "language": "csharp",
      "size": 10547,
      "content": "// 📄 xbytechat_api/WhatsAppSettings/Services/WhatsAppSettingsService.cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _http;                    // kept for any other callers you may have\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        public WhatsAppSettingsService(\n            AppDbContext dbContext,\n            HttpClient http,\n            IHttpClientFactory httpClientFactory)\n        {\n            _dbContext = dbContext;\n            _http = http;\n            _httpClientFactory = httpClientFactory;\n        }\n\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty)\n                throw new ArgumentException(\"Invalid BusinessId provided.\", nameof(dto.BusinessId));\n\n            // Normalize provider (store lower-case for consistency)\n            var provider = (dto.Provider ?? \"pinnacle\").Trim();\n            if (string.IsNullOrWhiteSpace(provider))\n                provider = \"pinnacle\";\n            var providerNorm = provider.ToLowerInvariant();\n\n            // Look up by BusinessId + Provider (case-insensitive)\n            var existing = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider.ToLower() == providerNorm);\n\n            if (existing != null)\n            {\n                // keep provider normalized\n                existing.Provider = providerNorm;\n\n                // Only overwrite when incoming value is non-empty (avoid wiping secrets/tokens accidentally)\n                if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.ApiToken)) existing.ApiToken = dto.ApiToken!.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId!.Trim();\n\n                // 🔐 Webhook auth fields (optional)\n                if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken!.Trim();\n\n                // 🌐 NEW: provider callback URL (optional)\n                if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl!.Trim();\n\n                existing.IsActive = dto.IsActive;\n                existing.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                var newSetting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Provider = providerNorm,\n                    ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),\n                    ApiKey = string.IsNullOrWhiteSpace(dto.ApiKey) ? null : dto.ApiKey!.Trim(),\n                    ApiToken = string.IsNullOrWhiteSpace(dto.ApiToken) ? null : dto.ApiToken!.Trim(),\n                    PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId!.Trim(),\n                    WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber!.Trim(),\n                    SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName!.Trim(),\n                    WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId!.Trim(),\n\n                    // 🔐 Webhook auth fields (optional)\n                    WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret!.Trim(),\n                    WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken!.Trim(),\n\n                    // 🌐 NEW: provider callback URL (optional)\n                    WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl!.Trim(),\n\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n            }\n\n            await _dbContext.SaveChangesAsync();\n        }\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null) return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        /// <summary>\n        /// Provider-aware test connection. Returns a short message (✅/❌ …).\n        /// The controller may convert non-✅ messages to 400, etc.\n        /// </summary>\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Provider))\n                throw new ArgumentException(\"Provider is required.\");\n\n            // normalize provider and baseUrl\n            var provider = dto.Provider.Trim();\n            var lower = provider.ToLowerInvariant();\n            var baseUrl = (dto.ApiUrl ?? string.Empty).Trim().TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(baseUrl))\n                throw new ArgumentException(\"ApiUrl is required.\");\n\n            var http = _httpClientFactory.CreateClient();\n\n            // ----- Meta Cloud -----\n            if (lower == \"meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiToken))\n                    throw new ArgumentException(\"ApiToken is required for Meta Cloud.\");\n                if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    throw new ArgumentException(\"PhoneNumberId is required for Meta Cloud.\");\n\n                http.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n                var url = $\"{baseUrl}/{dto.PhoneNumberId}\";\n                var res = await http.GetAsync(url);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                    return $\"❌ Meta Cloud test failed ({(int)res.StatusCode}). Body: {body}\";\n\n                return \"✅ Meta Cloud token & phone number ID are valid.\";\n            }\n\n            // ----- Pinnacle (formerly Pinbot) -----\n            if (lower == \"pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiKey))\n                    return \"❌ API Key is required for Pinnacle.\";\n\n                // Pinnacle requires either phone number id OR WABA id in the path\n                var pathId =\n                    !string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? dto.PhoneNumberId!.Trim() :\n                    !string.IsNullOrWhiteSpace(dto.WabaId) ? dto.WabaId!.Trim() :\n                    null;\n\n                if (string.IsNullOrWhiteSpace(pathId))\n                    return \"❌ Provide PhoneNumberId or WabaId for Pinnacle.\";\n\n                if (string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    return \"❌ WhatsApp Business Number is required for Pinnacle test.\";\n\n                var url = $\"{baseUrl}/{pathId}/messages\";\n                var payload = new\n                {\n                    to = dto.WhatsAppBusinessNumber,\n                    type = \"text\",\n                    text = new { body = \"Test message\" },\n                    messaging_product = \"whatsapp\"\n                };\n\n                using var req = new HttpRequestMessage(HttpMethod.Post, url);\n                req.Headers.TryAddWithoutValidation(\"apikey\", dto.ApiKey);\n                req.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                var res = await http.SendAsync(req);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    if ((int)res.StatusCode == 401 || (int)res.StatusCode == 403)\n                        return $\"❌ Pinnacle rejected the API key for id '{pathId}'. Verify the key and id. Body: {body}\";\n\n                    return $\"❌ Pinnacle test failed ({(int)res.StatusCode}). Body: {body}\";\n                }\n\n                return \"✅ Pinnacle API key and endpoint are reachable.\";\n            }\n\n            return $\"❌ Unsupported provider: {dto.Provider}\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            return setting?.WhatsAppBusinessNumber;\n        }\n\n        public async Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl)\n        {\n            var s = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(s?.WebhookCallbackUrl))\n                return s!.WebhookCallbackUrl!;\n\n            return $\"{appBaseUrl.TrimEnd('/')}/api/webhookcallback\";\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
      "sha256": "1771172160b243b1e4e994f9249f39dc28c595891d2c3db6bee45648ef3aebb9",
      "language": "csharp",
      "size": 32378,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System.Net.Http.Headers;\nusing System.Security.Claims;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.Shared;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            var provider = (setting.Provider ?? \"\").Trim().ToLowerInvariant();\n            var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"\";\n\n            try\n            {\n                if (provider == \"meta_cloud\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://graph.facebook.com/v22.0\" : baseUrl)}/{setting.WabaId}/message_templates?limit=100\";\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"📦 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Failed to fetch templates from Meta: {Response}\", json);\n                            break;\n                        }\n\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed));\n                        nextUrl = parsed?.paging?.next?.ToString();\n                    }\n\n                    return templates;\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                    {\n                        _logger.LogWarning(\"Pinnacle API key missing for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    // Pinnacle typically accepts either WABA ID or PhoneNumberId. Prefer WABA.\n                    var pathId = !string.IsNullOrWhiteSpace(setting.WabaId)\n                        ? setting.WabaId!.Trim()\n                        : setting.PhoneNumberId?.Trim();\n\n                    if (string.IsNullOrWhiteSpace(pathId))\n                    {\n                        _logger.LogWarning(\"Pinnacle path id missing (WabaId/PhoneNumberId) for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://partnersv1.pinbot.ai/v3\" : baseUrl)}/{pathId}/message_templates?limit=100\";\n\n                    // IMPORTANT: Pinnacle needs apikey header\n                    _httpClient.DefaultRequestHeaders.Remove(\"apikey\");\n                    _httpClient.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"📦 Pinnacle Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Failed to fetch templates from Pinnacle: {Response}\", json);\n                            break;\n                        }\n\n                        // Try to support both \"data\": [...] and \"templates\": [...] styles\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed)); // many BSPs mirror Meta's shape\n                        nextUrl = parsed?.paging?.next?.ToString(); // if their API paginates similarly\n                                                                    // If no paging in Pinnacle, set nextUrl = null to exit loop\n                        if (nextUrl == null) break;\n                    }\n\n                    return templates;\n                }\n                else\n                {\n                    _logger.LogInformation(\"Provider {Provider} does not support listing via API in this build.\", provider);\n                    return templates;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates for provider {Provider}.\", provider);\n                return templates;\n            }\n        }\n\n        private static IEnumerable<TemplateMetadataDto> ParseTemplatesFromMetaLikePayload(dynamic parsed)\n        {\n            var list = new List<TemplateMetadataDto>();\n            if (parsed == null) return list;\n\n            // Prefer parsed.data; fall back to parsed.templates\n            var collection = parsed.data ?? parsed.templates;\n            if (collection == null) return list;\n\n            foreach (var tpl in collection)\n            {\n                string name = tpl.name?.ToString() ?? \"\";\n                string language = tpl.language?.ToString() ?? \"en_US\";\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                // components may be null for some BSPs\n                var components = tpl.components;\n                if (components != null)\n                {\n                    foreach (var component in components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = component.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\" && component.buttons != null)\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue =\n                                        button.url != null ? button.url.ToString() :\n                                        button.phone_number != null ? button.phone_number.ToString() :\n                                        button.coupon_code != null ? button.coupon_code.ToString() :\n                                        button.flow_id != null ? button.flow_id.ToString() :\n                                        null;\n\n                                    // If BSP marks dynamic examples like Meta, respect them; otherwise be lenient\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch { /* ignore per-button parsing issues */ }\n                            }\n                        }\n                    }\n                }\n\n                int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                list.Add(new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body,\n                    PlaceholderCount = placeholderCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = buttons\n                });\n            }\n\n            return list;\n        }\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var result = new List<TemplateForUIResponseDto>();\n\n            var user = _httpContextAccessor.HttpContext.User;\n            var businessId = user.GetBusinessId();\n            _logger.LogInformation(\"🔎 Fetching templates for BusinessId {BusinessId}\", businessId);\n\n            // 1) Load this business's active setting (provider can be Meta or Pinnacle)\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(s =>\n                    s.IsActive &&\n                    s.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"⚠️ No active WhatsApp setting for BusinessId {BusinessId}\", businessId);\n                return result;\n            }\n\n            try\n            {\n                string provider = setting.Provider?.ToLowerInvariant() ?? \"\";\n\n                if (provider == \"meta_cloud\")\n                {\n                    // ✅ Meta Cloud path → ApiToken + WabaId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"⚠️ Missing ApiToken or WabaId for Meta Cloud (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates?limit=100\";\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                        req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                        using var res = await _httpClient.SendAsync(req);\n                        var json = await res.Content.ReadAsStringAsync();\n\n                        _logger.LogInformation(\"📦 Meta Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                        if (!res.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"❌ Meta template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                            break;\n                        }\n\n                        result.AddRange(ParseMetaTemplates(json));\n                        nextUrl = JsonConvert.DeserializeObject<dynamic>(json)?.paging?.next?.ToString();\n                    }\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    // ✅ Pinnacle path → ApiKey + PhoneNumberId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                    {\n                        _logger.LogWarning(\"⚠️ Missing ApiKey or PhoneNumberId for Pinnacle (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://partnersv1.pinbot.ai/v3\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                    req.Headers.Add(\"apikey\", setting.ApiKey);\n\n                    using var res = await _httpClient.SendAsync(req);\n                    var json = await res.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"📦 Pinnacle Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                    if (!res.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"❌ Pinnacle template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                        return result;\n                    }\n\n                    result.AddRange(ParsePinnacleTemplates(json));\n                }\n                else\n                {\n                    _logger.LogWarning(\"⚠️ Unknown provider '{Provider}' for Biz {BusinessId}\", provider, businessId);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while fetching templates for BusinessId {BusinessId}\", businessId);\n            }\n\n            return result;\n        }\n        private List<TemplateForUIResponseDto> ParseMetaTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            foreach (var tpl in parsed.data)\n            {\n                string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private List<TemplateForUIResponseDto> ParsePinnacleTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            if (parsed?.data == null) return list;\n\n            foreach (var tpl in parsed.data)\n            {\n                // Pinnacle may not use status like Meta, adjust filter if needed\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private TemplateForUIResponseDto BuildTemplateDtoFromComponents(dynamic tpl)\n        {\n            string name = tpl.name;\n            string language = tpl.language ?? \"en_US\";\n            string body = \"\";\n            bool hasImageHeader = false;\n            var buttons = new List<ButtonMetadataDto>();\n\n            foreach (var component in tpl.components)\n            {\n                string type = component.type?.ToString()?.ToUpperInvariant();\n\n                if (type == \"BODY\")\n                    body = component.text?.ToString() ?? \"\";\n\n                if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                    hasImageHeader = true;\n\n                if (type == \"BUTTONS\")\n                {\n                    foreach (var button in component.buttons)\n                    {\n                        string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                        string text = button.text?.ToString() ?? \"\";\n                        int index = buttons.Count;\n\n                        string subType = btnType switch\n                        {\n                            \"URL\" => \"url\",\n                            \"PHONE_NUMBER\" => \"voice_call\",\n                            \"QUICK_REPLY\" => \"quick_reply\",\n                            \"COPY_CODE\" => \"copy_code\",\n                            \"CATALOG\" => \"catalog\",\n                            \"FLOW\" => \"flow\",\n                            \"REMINDER\" => \"reminder\",\n                            \"ORDER_DETAILS\" => \"order_details\",\n                            _ => \"unknown\"\n                        };\n\n                        string? paramValue = button.url?.ToString() ?? button.phone_number?.ToString();\n\n                        if (subType == \"unknown\") continue;\n\n                        buttons.Add(new ButtonMetadataDto\n                        {\n                            Text = text,\n                            Type = btnType,\n                            SubType = subType,\n                            Index = index,\n                            ParameterValue = paramValue ?? \"\"\n                        });\n                    }\n                }\n            }\n\n            int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n            return new TemplateForUIResponseDto\n            {\n                Name = name,\n                Language = language,\n                Body = body,\n                ParametersCount = placeholderCount,\n                HasImageHeader = hasImageHeader,\n                ButtonParams = buttons\n            };\n        }\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"❌ WhatsApp settings not found for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            var provider = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n            var wabaId = setting.WabaId?.Trim();\n            if (string.IsNullOrWhiteSpace(wabaId))\n            {\n                _logger.LogWarning(\"❌ Missing WABA ID for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            // Build URL + request with per-request headers\n            string url;\n            using var req = new HttpRequestMessage(HttpMethod.Get, \"\");\n\n            if (provider == \"pinnacle\")\n            {\n                // Pinnacle: require ApiKey; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                {\n                    _logger.LogWarning(\"❌ ApiKey missing for Pinnacle provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://partnersv1.pinbot.ai/v3\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                // add header variants\n                req.Headers.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n                req.Headers.TryAddWithoutValidation(\"x-api-key\", setting.ApiKey);\n                // safety: also append as query (some edges require it)\n                url = url.Contains(\"apikey=\") ? url : $\"{url}&apikey={Uri.EscapeDataString(setting.ApiKey)}\";\n            }\n            else // meta_cloud\n            {\n                // Meta Cloud: require ApiToken; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiToken))\n                {\n                    _logger.LogWarning(\"❌ ApiToken missing for Meta provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://graph.facebook.com/v18.0\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n            }\n\n            req.RequestUri = new Uri(url);\n            var response = await _httpClient.SendAsync(req);\n            var json = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"❌ Failed to fetch templates (provider={Provider}) for BusinessId {BusinessId}: HTTP {Status} Body: {Body}\",\n                    provider, businessId, (int)response.StatusCode, json);\n                return null;\n            }\n\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n                var data = parsed?.data;\n                if (data == null)\n                {\n                    _logger.LogWarning(\"⚠️ No 'data' array in template response (provider={Provider})\", provider);\n                    return null;\n                }\n\n                foreach (var tpl in data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language != null ? (string)tpl.language : \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    // components loop\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            try { body = component.text?.ToString() ?? \"\"; }\n                            catch { body = \"\"; }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpperInvariant();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    // normalize sub-type for our app\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // Known dynamic param extraction\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // Skip truly invalid\n                                    if (subType == \"unknown\" ||\n                                        (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    // Count {{n}} placeholders in body\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{\\\\s*\\\\d+\\\\s*}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while parsing template response\");\n            }\n\n            return null;\n        }\n        private static TemplateMetadataDto? ExtractTemplateFromListJson(string json, string templateName, bool includeButtons)\n        {\n            var root = JObject.Parse(json);\n            var data = root[\"data\"] as JArray;\n            if (data == null) return null;\n\n            foreach (var tplToken in data.OfType<JObject>())\n            {\n                var name = tplToken.Value<string>(\"name\") ?? \"\";\n                if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var language = tplToken.Value<string>(\"language\") ?? \"en_US\";\n                var components = tplToken[\"components\"] as JArray;\n\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                if (components != null)\n                {\n                    foreach (var comp in components.OfType<JObject>())\n                    {\n                        var type = (comp.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            body = comp.Value<string>(\"text\") ?? body;\n                        }\n                        else if (type == \"HEADER\")\n                        {\n                            var fmt = (comp.Value<string>(\"format\") ?? \"\").ToUpperInvariant();\n                            if (fmt == \"IMAGE\") hasImageHeader = true;\n                        }\n                        else if (includeButtons && type == \"BUTTONS\")\n                        {\n                            var btns = comp[\"buttons\"] as JArray;\n                            if (btns == null) continue;\n\n                            var idx = 0;\n                            foreach (var b in btns.OfType<JObject>())\n                            {\n                                var btnTypeRaw = (b.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n                                var text = b.Value<string>(\"text\") ?? \"\";\n\n                                var subType = btnTypeRaw switch\n                                {\n                                    \"URL\" => \"url\",\n                                    \"PHONE_NUMBER\" => \"voice_call\",\n                                    \"QUICK_REPLY\" => \"quick_reply\",\n                                    \"COPY_CODE\" => \"copy_code\",\n                                    \"CATALOG\" => \"catalog\",\n                                    \"FLOW\" => \"flow\",\n                                    \"REMINDER\" => \"reminder\",\n                                    \"ORDER_DETAILS\" => \"order_details\",\n                                    _ => \"unknown\"\n                                };\n\n                                string? paramValue =\n                                    b.Value<string>(\"url\") ??\n                                    b.Value<string>(\"phone_number\") ??\n                                    b.Value<string>(\"coupon_code\") ??\n                                    b.Value<string>(\"flow_id\");\n\n                                // Skip unknown or missing required dynamic values\n                                if (subType == \"unknown\") continue;\n                                if ((subType is \"url\" or \"flow\" or \"copy_code\") && string.IsNullOrWhiteSpace(paramValue))\n                                    continue;\n\n                                buttons.Add(new ButtonMetadataDto\n                                {\n                                    Text = text,\n                                    Type = btnTypeRaw,\n                                    SubType = subType,\n                                    Index = idx++,\n                                    ParameterValue = paramValue ?? \"\"\n                                });\n                            }\n                        }\n                    }\n                }\n\n                var paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                return new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body ?? \"\",\n                    PlaceholderCount = paramCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                };\n            }\n\n            return null;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
      "sha256": "4101fd2ede7e1f3e47bbe18923020b99b11784aba7c3ba85f40fe7907bece593",
      "language": "csharp",
      "size": 1574,
      "content": "// 📄 File: WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs\nusing FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto>\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.Provider)\n                .NotEmpty().WithMessage(\"Provider is required.\")\n                .Must(p => p == \"pinnacle\" || p == \"meta_cloud\")\n                .WithMessage(\"Provider must be 'pinnacle' or 'meta_cloud'.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\");\n\n            // Meta Cloud requirements\n            When(x => x.Provider == \"meta_cloud\", () =>\n            {\n                RuleFor(x => x.ApiToken)\n                    .NotEmpty().WithMessage(\"API Token is required for Meta Cloud.\");\n                RuleFor(x => x.PhoneNumberId)\n                    .NotEmpty().WithMessage(\"Phone Number ID is required for Meta Cloud.\");\n            });\n\n            // Pinbot requirements\n            When(x => x.Provider == \"pinnacle\", () =>\n            {\n                RuleFor(x => x.ApiKey)\n                    .NotEmpty().WithMessage(\"API Key is required for Pinbot.\");\n                RuleFor(x => x)\n                    .Must(x => !string.IsNullOrWhiteSpace(x.PhoneNumberId) || !string.IsNullOrWhiteSpace(x.WabaId))\n                    .WithMessage(\"Provide Phone Number ID or WABA ID for Pinbot.\");\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api.http",
      "sha256": "1bbe81fafd8a4f5140ffd5c7e14b21f6d5537372ed3c3b6315b9db805b17f2a9",
      "language": "text",
      "size": 133,
      "content": "@xbytechat.api_HostAddress = http://localhost:5295\n\nGET {{xbytechat.api_HostAddress}}/weatherforecast/\nAccept: application/json\n\n###\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/AuditLoggingHelper.cs",
      "sha256": "c5b311d19b5c69b6b78d7ca335b984e43795ef1e140c2239dea1ed7190e188c6",
      "language": "csharp",
      "size": 1690,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\n\npublic static class AuditLoggingHelper\n{\n    private static IServiceProvider? _serviceProvider;\n\n    public static void Configure(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public static void Log(\n        string actionType,\n        string? entityName,\n        string? entityId,\n        string? description,\n        IHttpContextAccessor contextAccessor)\n    {\n        if (_serviceProvider == null) return;\n\n        var scope = _serviceProvider.CreateScope();\n        var auditLogService = scope.ServiceProvider.GetRequiredService<IAuditLogService>();\n\n        var httpContext = contextAccessor.HttpContext;\n        var user = httpContext?.User;\n        var claims = user?.Identities?.FirstOrDefault();\n\n        var log = new AuditLog\n        {\n            Id = Guid.NewGuid(),\n            ActionType = actionType,\n            Description = description,\n            BusinessId = TryParseGuid(claims?.FindFirst(\"businessId\")?.Value),\n            PerformedByUserId = TryParseGuid(claims?.FindFirst(\"sub\")?.Value),\n            PerformedByUserName = claims?.FindFirst(\"email\")?.Value,\n            RoleAtTime = claims?.FindFirst(\"role\")?.Value,\n            IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n            UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString(),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        _ = Task.Run(() => auditLogService.SaveLogAsync(log));\n    }\n\n    private static Guid TryParseGuid(string? input) =>\n        Guid.TryParse(input, out var guid) ? guid : Guid.Empty;\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/JwtCookieHelper.cs",
      "sha256": "50ed48ffead96168a429fe26398cbc9b3021ecfebafabcbba8dc8e59f9a12885",
      "language": "csharp",
      "size": 3279,
      "content": "// 📄 File: Helpers/JwtCookieHelper.cs\nusing Microsoft.AspNetCore.Http;\nusing System;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class JwtCookieHelper\n    {\n        // ✅ Set Access Token (short-lived)\n        public static void SetJwtCookie(HttpContext httpContext, string cookieName, string token, int expiryHours = 12)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, token, new CookieOptions\n            {\n                HttpOnly = true,\n                ///*Secure*/ = isProduction,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddHours(expiryHours)\n            }); ;\n        }\n\n        // ✅ Clear Access Token cookie\n        public static void ClearJwtCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n\n        // ✅ Set Refresh Token (long-lived)\n        public static void SetRefreshTokenCookie(HttpContext httpContext, string cookieName, string refreshToken, int expiryDays = 30)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, refreshToken, new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = isProduction,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(expiryDays)\n            });\n        }\n\n        // ✅ Clear Refresh Token cookie\n        public static void ClearRefreshTokenCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/ResponseResult.cs",
      "sha256": "e179ac827eca18c7316cf0dff9d2d9741653f9bde358cbda401ff1e978cd30ec",
      "language": "csharp",
      "size": 1743,
      "content": "namespace xbytechat.api.Helpers\n{\n    /// <summary>\n    /// Represents a standardized response structure for service layer results.\n    /// </summary>\n    public class ResponseResult\n    {\n        public bool Success { get; set; }                  // ✅ Whether operation succeeded\n        public string Message { get; set; }                // ✅ User-friendly message\n        public object? Data { get; set; }                  // Optional payload (if needed)\n\n        // ✅ WhatsApp-specific diagnostics\n        public string? ErrorMessage { get; set; }          // Error from API or exception\n        public string? RawResponse { get; set; }           // Full API raw response\n\n        public string? MessageId { get; set; } // 🌐 WhatsApp WAMID (Message ID)\n\n        public Guid? LogId { get; set; } // ✅ Unique ID of MessageLog for tracking\n                                         // ✅ Factory method for successful result\n\n        public string? Token { get; set; }\n\n        public string? RefreshToken { get; set; }\n        public static ResponseResult SuccessInfo(string message, object? data = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = true,\n                Message = message,\n                Data = data,\n                RawResponse = raw\n            };\n        }\n\n        // ❌ Factory method for error result\n        public static ResponseResult ErrorInfo(string message, string? error = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = false,\n                Message = message,\n                ErrorMessage = error,\n                RawResponse = raw\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/SendResultExtended.cs",
      "sha256": "d70ced23d36d879eb80982f4a2508398175f5a06bc3e524c5c426cfe59635a0a",
      "language": "csharp",
      "size": 252,
      "content": "using xbytechat.api.Helpers;\n\npublic class SendResultExtended : ResponseResult\n{\n   // public string? MessageId { get; set; }         // WAMID from WhatsApp\n    public Guid? MessageLogId { get; set; }        // Our DB log ID (from MessageLogs table)\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/UserContextHelper.cs",
      "sha256": "ebabfd85a8a344a40535bccbbdb67a5241b585ecca9f9688e3eb6201b71fda0d",
      "language": "csharp",
      "size": 1432,
      "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class UserContextHelper\n    {\n        /// <summary>\n        /// Returns the logged-in user's unique ID from JWT.\n        /// </summary>\n        public static Guid GetUserId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"sub\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the business ID (tenant) from JWT claims.\n        /// </summary>\n        public static Guid GetBusinessId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the role of the logged-in user.\n        /// </summary>\n        public static string GetRole(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"role\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns company name for UI display (optional).\n        /// </summary>\n        public static string GetCompanyName(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"companyName\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns plan info if needed for plan-based access control.\n        /// </summary>\n        public static string GetPlan(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"plan\")?.Value ?? \"\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat.api.csproj",
      "sha256": "9ab1faf8c6f13123dff24aba0a50357392bca8663bc7fcb76956a315f97101d6",
      "language": "text",
      "size": 3731,
      "content": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <RootNamespace>xbytechat.api</RootNamespace>\n    <UserSecretsId>54c16f50-f987-4162-a877-70088aa68997</UserSecretsId>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"Controllers\\BusinessLoginController.cs\" />\n    <Compile Remove=\"Controllers\\SendMessageController.cs\" />\n    <Compile Remove=\"Models\\MessageLog.cs\" />\n    <Compile Remove=\"Shared\\TemplateParameterHelper.cs\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.0\" />\n    <PackageReference Include=\"BCrypt.Net-Next\" Version=\"4.0.3\" />\n    <PackageReference Include=\"CsvHelper\" Version=\"33.0.1\" />\n    <PackageReference Include=\"EFCore.BulkExtensions\" Version=\"8.1.3\" />\n    <PackageReference Include=\"FluentValidation\" Version=\"11.11.0\" />\n    <PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" Version=\"1.2.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"8.0.18\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.15\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"8.0.15\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"8.0.15\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"8.0.11\" />\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL.Design\" Version=\"1.1.0\" />\n    <PackageReference Include=\"Serilog\" Version=\"4.2.0\" />\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.3\" />\n    <PackageReference Include=\"Serilog.Exceptions\" Version=\"8.4.0\" />\n    <PackageReference Include=\"Serilog.Sinks.File\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.6.2\" />\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"8.8.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Folder Include=\"Features\\AuditTrail\\Controllers\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Middleware\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Background\\\" />\n    <Folder Include=\"Features\\Automation\\Enums\\\" />\n    <Folder Include=\"Features\\Automation\\Runtime\\\" />\n    <Folder Include=\"Features\\AutoReplyBuilder\\Helpers\\\" />\n    <Folder Include=\"Features\\AutoReplyTemplates\\Restaurant\\Templates\\\" />\n    <Folder Include=\"Features\\CampaignTracking\\Repositories\\\" />\n    <Folder Include=\"Features\\Catalog\\Repositories\\\" />\n    <Folder Include=\"Features\\CrmAnalytics\\Models\\\" />\n    <Folder Include=\"Features\\CTAFlowBuilder\\Mappers\\\" />\n    <Folder Include=\"Features\\MessagesEngine\\Helpers\\\" />\n    <Folder Include=\"Features\\PlanManagement\\DTOs\\\" />\n    <Folder Include=\"Features\\TemplatesModule\\DTOs\\\" />\n    <Folder Include=\"Features\\TemplatesModule\\Models\\\" />\n    <Folder Include=\"Features\\xbTimelines\\Repositories\\\" />\n    <Folder Include=\"Models\\BusinessModel\\\" />\n    <Folder Include=\"Models\\UsersModel\\\" />\n    <Folder Include=\"WhatsAppSettings\\BackgroundService\\\" />\n  </ItemGroup>\n\n</Project>\n"
    }
  ]
}
