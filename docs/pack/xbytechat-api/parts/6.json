{
  "name": "xbytechat-api",
  "part": 6,
  "of": 6,
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Migrations/20250810122422_InitialCreateToNeon.Designer.cs",
      "sha256": "b6ad3c4f18b9393d7e38325a2a5719edaf0b70256efb0db28c6a20d03ef8544c",
      "language": "csharp",
      "size": 112002,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250810122422_InitialCreateToNeon\")]\n    partial class InitialCreateToNeon\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8372),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8380),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8382),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8385),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8387),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8390),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8392),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8394),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8397),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8400),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8401),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7678),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7680),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7681),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7682),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7684),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"8730c3e3-5f76-4acd-bba1-619e983d37d4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8700),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"48b591be-65f7-451f-b719-f327dada5ad4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8705),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b2178c98-9d0e-45f1-9e60-47f9763367e9\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8714),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"077411e5-1f1b-4e94-90b9-febb503d955a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8718),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"da299567-1c2c-4912-977f-70a7a102ffb4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8721),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"43751848-5176-482e-8854-cfe0c1fe1476\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8725),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ccd710e6-baf8-414e-b3ce-fdba41bb9692\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8776),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d2a22e67-99a2-4f6c-b042-38c9647d0ea0\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8780),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"106019ac-e3ba-47c5-aa3d-3de8459189f7\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8783),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2cd29bd3-f812-435e-bfa4-dcbe753c8a0a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8787),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a47785b3-34d7-43e2-a1ab-b9e91e987dfa\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8792),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9695b1ca-cf9e-4ba8-b608-25ba5ed6c578\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8802),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9efa0b93-4944-4e5c-b8a8-7d85661a26a3\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8805),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"89b52866-c0a4-4988-aee5-e5afb670f1db\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8807),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8988065d-f1a5-4e5c-aff1-36b30317c807\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8810),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b85669b0-d5f9-4b87-8a5b-617120e76679\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8817),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"348b34f4-6d0a-4505-a7f9-f67a64e867f6\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8820),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Migrations/AppDbContextModelSnapshot.cs",
      "sha256": "349e367cabd2c25a11dab71d3c96436aa9bb09e5afda148eda59667e869a933d",
      "language": "csharp",
      "size": 111889,
      "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    partial class AppDbContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8372),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8380),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8382),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8385),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8387),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8390),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8392),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8394),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8397),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8400),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8401),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7678),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7680),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7681),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7682),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7684),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"8730c3e3-5f76-4acd-bba1-619e983d37d4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8700),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"48b591be-65f7-451f-b719-f327dada5ad4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8705),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b2178c98-9d0e-45f1-9e60-47f9763367e9\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8714),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"077411e5-1f1b-4e94-90b9-febb503d955a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8718),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"da299567-1c2c-4912-977f-70a7a102ffb4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8721),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"43751848-5176-482e-8854-cfe0c1fe1476\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8725),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ccd710e6-baf8-414e-b3ce-fdba41bb9692\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8776),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d2a22e67-99a2-4f6c-b042-38c9647d0ea0\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8780),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"106019ac-e3ba-47c5-aa3d-3de8459189f7\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8783),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2cd29bd3-f812-435e-bfa4-dcbe753c8a0a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8787),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a47785b3-34d7-43e2-a1ab-b9e91e987dfa\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8792),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9695b1ca-cf9e-4ba8-b608-25ba5ed6c578\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8802),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9efa0b93-4944-4e5c-b8a8-7d85661a26a3\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8805),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"89b52866-c0a4-4988-aee5-e5afb670f1db\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8807),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8988065d-f1a5-4e5c-aff1-36b30317c807\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8810),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b85669b0-d5f9-4b87-8a5b-617120e76679\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8817),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"348b34f4-6d0a-4505-a7f9-f67a64e867f6\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8820),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Models/MessagesModel/MessageLog.cs",
      "sha256": "45d9f23504249cda4ca6119267f52c07de4eb971f9d0ec72465331ce4b38865d",
      "language": "csharp",
      "size": 1841,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\npublic class MessageLog\n{\n    public Guid Id { get; set; }\n\n    public string? MessageId { get; set; } // WAMID from WhatsApp — alternate key\n   // public ICollection<MessageStatusLog> StatusUpdates { get; set; } = new List<MessageStatusLog>();\n\n    // 🔗 FK to Business\n    public Guid BusinessId { get; set; }\n    public Business Business { get; set; }\n\n    // 📨 Message Info\n    public string RecipientNumber { get; set; }\n    public string MessageContent { get; set; }\n    public string? MediaUrl { get; set; }\n\n    // 🧾 Status Info\n    public string Status { get; set; } = \"Queued\";\n    public string? ErrorMessage { get; set; }\n    public string? RawResponse { get; set; }\n\n    // 🕒 Timestamps\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime? SentAt { get; set; }\n\n    // 🔗 Contact (optional)\n    public Guid? ContactId { get; set; }\n    public Contact? Contact { get; set; }\n\n    // 🔗 Campaign (optional)\n    public Guid? CampaignId { get; set; }\n\n    // 🔗 CTA Flow Tracking\n    public Guid? CTAFlowConfigId { get; set; }  // Which visual flow config this message belongs to\n    public Guid? CTAFlowStepId { get; set; }    // Which flow step (template) this message originated from\n    public Campaign? SourceCampaign { get; set; } // renamed from \"Campaign\" to avoid name conflict\n\n    public bool IsIncoming { get; set; }\n\n    public string? RenderedBody { get; set; } // actual resolved message with parameters\n\n    public Guid? RefMessageId { get; set; }\n    public string? Source { get; set; } // e.g., \"campaign\", \"flow\", \"manual\"\n}\n"
    },
    {
      "path": "xbytechat-api/Models/WhatsAppResult.cs",
      "sha256": "cd627fc7d90a4da1360bb14f8be3109068a83b746a1b782f257095f68ea5279d",
      "language": "csharp",
      "size": 220,
      "content": "namespace xbytechat.api.Models\n{\n    public class WhatsAppResult\n    {\n        public bool Success { get; set; }\n        public string? ErrorMessage { get; set; }\n        public string? RawResponse { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "71c13746d4e6cc70735324c5c2c755b80e4c7d032e71a97969c3efe007aa68ae",
      "language": "csharp",
      "size": 680,
      "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    /// <summary>\n    /// Builds payload for sending image messages with media URL.\n    /// </summary>\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var imageDto = dto as ImageMessageDto;\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = imageDto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = imageDto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "2a2ff0592129a93fea8aa20df5fe1e8454dbfbe1640d5a1e15963af93dcd7922",
      "language": "csharp",
      "size": 190,
      "content": "namespace xbytechat.api.PayloadBuilders\n{\n    using xbytechat.api.DTOs.Messages;\n\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(BaseMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "70f39daad2789c61f03ade184abdf96a43221189b751178dfa1955c123b5f884",
      "language": "csharp",
      "size": 2013,
      "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var templateDto = dto as TemplateMessageDto;\n            if (templateDto == null)\n                throw new InvalidCastException(\"DTO is not of type TemplateMessageDto.\");\n\n            var components = new List<object>();\n\n            // 🧠 Body parameters\n            if (templateDto.TemplateParameters != null && templateDto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateDto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToList()\n                });\n            }\n\n            // ✅ Add button placeholders (Meta requires them for static buttons too)\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"url\",\n                index = \"0\",\n                parameters = new object[] { }  // 👈 no parameters if static URL\n            });\n\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"phone_number\",\n                index = \"1\",\n                parameters = new object[] { }  // 👈 no parameters if static phone\n            });\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = templateDto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateDto.TemplateName,\n                    language = new\n                    {\n                        code = templateDto.LanguageCode ?? \"en_US\"\n                    },\n                    components\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "ce8e2e75c7865d9b08bebb267ceb84f7cdd0e77bd971c609576979b02726a590",
      "language": "csharp",
      "size": 750,
      "content": "// File: PayloadBuilders/TextMessagePayloadBuilder.cs\nusing xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var textDto = dto as TextMessageDto;\n\n            if (textDto == null)\n                throw new InvalidCastException(\"DTO is not of type TextMessageDto.\");\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = textDto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = textDto.MessageContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Program.cs",
      "sha256": "cbd0b2091feaea5ac7bc6b40d472b50be5e0b5f60c434bf95ab08444581385b4",
      "language": "csharp",
      "size": 31212,
      "content": "using FluentValidation;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Serilog;\nusing Serilog.Exceptions;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing xbytechat.api;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Features.TemplateModule.Services;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Middlewares;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Implementations;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services;\nusing xbytechat.api.Services.Messages.Implementations;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Validators;\nusing EnginePayloadBuilders = xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.CTAManagement.Services;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.BackgroundWorkers;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.FlowAnalytics.Services;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.SignalR;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing Npgsql;\nusing System.Net;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n#region 🔷 Serilog Configuration\nLog.Logger = new LoggerConfiguration()\n    .Enrich.WithExceptionDetails()\n    .Enrich.FromLogContext()\n    .MinimumLevel.Information()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\nbuilder.Host.UseSerilog();\n#endregion\n\n#region 🔷 Database Setup (PostgreSQL)\nvar connStr = builder.Configuration.GetConnectionString(\"DefaultConnection\");\nbuilder.Services.AddDbContext<AppDbContext>(options =>\n    options.UseNpgsql(connStr).EnableSensitiveDataLogging()\n);\nConsole.WriteLine($\"[DEBUG] Using Connection String: {connStr}\");\n#endregion\n\n#region 🔷 Generic Repository Pattern\nbuilder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));\n#endregion\n\n#region 🔷 Core Modules (Business/Auth)\nbuilder.Services.AddScoped<IBusinessService, BusinessService>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\nbuilder.Services.AddScoped<IJwtTokenService, JwtTokenService>();\n#endregion\n\n#region 🔷 Messaging Services & WhatsApp\nbuilder.Services.AddScoped<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddHttpClient<IMessageService, MessageService>();\nbuilder.Services.AddScoped<WhatsAppService>();\nbuilder.Services.AddScoped<IMessageStatusService, MessageStatusService>();\nbuilder.Services.AddScoped<ITemplateMessageSender, TemplateMessageSender>();\n#endregion\n\n#region 🔷 Payload Builders\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TemplateMessagePayloadBuilder>();\n#endregion\n\n#region 🔷 Catalog & CRM Modules\nbuilder.Services.AddScoped<IProductService, ProductService>();\nbuilder.Services.AddScoped<ICatalogTrackingService, CatalogTrackingService>();\nbuilder.Services.AddScoped<ICatalogDashboardService, CatalogDashboardService>();\nbuilder.Services.AddScoped<IContactService, ContactService>();\nbuilder.Services.AddScoped<ITagService, TagService>();\nbuilder.Services.AddScoped<IReminderService, ReminderService>();\nbuilder.Services.AddScoped<INoteService, NoteService>();\nbuilder.Services.AddScoped<ITimelineService, TimelineService>();\n#endregion\n\n#region 🔷 Campaign Management\nbuilder.Services.AddScoped<ICampaignService, CampaignService>();\nbuilder.Services.AddScoped<ICampaignSendLogService, CampaignSendLogService>();\nbuilder.Services.AddScoped<ICampaignSendLogEnricher, CampaignSendLogEnricher>();\nbuilder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\nbuilder.Services.AddScoped<ICampaignRetryService, CampaignRetryService>();\nbuilder.Services.AddHttpClient<IWhatsAppTemplateService, WhatsAppTemplateService>();\nbuilder.Services.AddScoped<ICampaignRecipientService, CampaignRecipientService>();\n#endregion\n\n#region 🔷 Webhook Management\nbuilder.Services.AddScoped<IWhatsAppWebhookService, WhatsAppWebhookService>();\nbuilder.Services.AddScoped<IWhatsAppWebhookDispatcher, WhatsAppWebhookDispatcher>();\nbuilder.Services.AddScoped<IStatusWebhookProcessor, StatusWebhookProcessor>();\nbuilder.Services.AddScoped<ITemplateWebhookProcessor, TemplateWebhookProcessor>();\nbuilder.Services.AddScoped<IMessageIdResolver, MessageIdResolver>();\nbuilder.Services.AddScoped<IClickWebhookProcessor, ClickWebhookProcessor>();\nbuilder.Services.AddScoped<ILeadTimelineService, LeadTimelineService>();\nbuilder.Services.AddScoped<IFailedWebhookLogService, FailedWebhookLogService>();\nbuilder.Services.AddSingleton<IWebhookQueueService, WebhookQueueService>();\nbuilder.Services.AddHostedService<WebhookQueueWorker>();\nbuilder.Services.AddHostedService<FailedWebhookLogCleanupService>();\nbuilder.Services.AddScoped<IMaintenanceService, MaintenanceService>();\nbuilder.Services.AddHostedService<WebhookAutoCleanupWorker>();\n#endregion\n\n#region 🔷 Access Control & Permission\nbuilder.Services.AddScoped<IAccessControlService, AccessControlService>();\nbuilder.Services.AddScoped<IFeatureAccessEvaluator, FeatureAccessEvaluator>();\nbuilder.Services.AddScoped<IFeatureAccessService, FeatureAccessService>();\n#endregion\n\n#region 🔷 Tracking\nbuilder.Services.AddScoped<ITrackingService, TrackingService>();\nbuilder.Services.AddScoped<IMessageAnalyticsService, MessageAnalyticsService>();\n#endregion\n\n#region 🔷 Flow Builder\nbuilder.Services.AddScoped<ICTAFlowService, CTAFlowService>();\n#endregion\n\n#region 🔷 Audit Trail Logging\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddScoped<IAuditLogService, AuditLogService>();\n#endregion\n\n#region 🔷 WhatsApp settings\nbuilder.Services.AddScoped<IWhatsAppSettingsService, WhatsAppSettingsService>();\nbuilder.Services.AddValidatorsFromAssemblyContaining<SaveWhatsAppSettingValidator>();\nbuilder.Services.AddHttpClient<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddScoped<IWhatsAppTemplateFetcherService, WhatsAppTemplateFetcherService>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TemplateMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.CtaMessagePayloadBuilder>();\nbuilder.Services.AddScoped<IPlanManager, PlanManager>();\nbuilder.Services.AddScoped<ICTAManagementService, CTAManagementService>();\n#endregion\n\n#region 🔷 Inbox\nbuilder.Services.AddScoped<IFlowAnalyticsService, FlowAnalyticsService>();\nbuilder.Services.AddScoped<IInboxService, InboxService>();\nbuilder.Services.AddScoped<IInboundMessageProcessor, InboundMessageProcessor>();\nbuilder.Services.AddScoped<IInboxRepository, InboxRepository>();\n#endregion\n\n#region 🔷 AutoReplyBuilder Module\nbuilder.Services.AddScoped<IAutoReplyRepository, AutoReplyRepository>();\nbuilder.Services.AddScoped<IAutoReplyService, AutoReplyService>();\nbuilder.Services.AddScoped<IAutoReplyFlowRepository, AutoReplyFlowRepository>();\nbuilder.Services.AddScoped<IAutoReplyFlowService, AutoReplyFlowService>();\nbuilder.Services.AddScoped<IAutoReplyRuntimeService, AutoReplyRuntimeService>();\nbuilder.Services.AddScoped<IChatSessionStateService, ChatSessionStateService>();\nbuilder.Services.AddScoped<IAgentAssignmentService, AgentAssignmentService>();\n#endregion\n\n#region 🔷 Automation Module\nbuilder.Services.AddScoped<IAutomationFlowRepository, AutomationFlowRepository>();\nbuilder.Services.AddScoped<IAutomationRunner, AutomationRunner>();\nbuilder.Services.AddScoped<IAutomationService, AutomationService>();\n#endregion\n\n#region 🔐 JWT Authentication (Bearer token only, no cookies)\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = jwtSettings[\"Issuer\"],\n            ValidAudience = jwtSettings[\"Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n            ClockSkew = TimeSpan.Zero\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnAuthenticationFailed = context =>\n            {\n                if (context.Exception is SecurityTokenExpiredException)\n                {\n                    context.Response.StatusCode = 401;\n                    context.Response.ContentType = \"application/json\";\n                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n                }\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n#endregion\n\n#region 🌐 CORS Setup (Bearer mode, no credentials)\n//var allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\n// 🌐 Read allowed origins (array or single string) + log them\n//var allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\n//if (allowedOrigins == null || allowedOrigins.Length == 0)\n//{\n//    var raw = builder.Configuration[\"Cors:AllowedOrigins\"]; // supports single string or comma/semicolon list\n//    if (!string.IsNullOrWhiteSpace(raw))\n//        allowedOrigins = raw.Split(new[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n//}\n//Console.WriteLine(\"[CORS] Allowed origins => \" + string.Join(\", \", allowedOrigins ?? Array.Empty<string>()));\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\nif (allowedOrigins == null || allowedOrigins.Length == 0)\n{\n    var raw = builder.Configuration[\"Cors:AllowedOrigins\"];\n    if (!string.IsNullOrWhiteSpace(raw))\n        allowedOrigins = raw.Split(new[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n}\nConsole.WriteLine(\"[CORS] Allowed origins => \" + string.Join(\", \", allowedOrigins ?? Array.Empty<string>()));\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy\n            .WithOrigins(allowedOrigins ?? Array.Empty<string>())\n            .AllowAnyHeader()\n            .AllowAnyMethod();\n    });\n});\n#endregion\n\n#region ✅ MVC + Swagger + Middleware\nbuilder.Services.AddControllers()\n    .AddJsonOptions(opts =>\n    {\n        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));\n    });\n\nbuilder.Services.AddEndpointsApiExplorer();\n\nbuilder.Services.AddSwaggerGen(options =>\n{\n    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n    {\n        Title = \"xByteChat API\",\n        Version = \"v1\",\n        Description = \"API documentation for xByteChat project\"\n    });\n});\n#endregion\n\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n#region SignalR\nbuilder.Services.AddSignalR();\nbuilder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n#endregion\n\nvar app = builder.Build();\n\napp.MapGet(\"/api/debug/cors\", () => Results.Ok(new\n{\n    Allowed = app.Services.GetRequiredService<IConfiguration>()\n              .GetSection(\"Cors:AllowedOrigins\").Get<string[]>()\n}));\napp.MapGet(\"/api/debug/db\", async (AppDbContext db) => {\n    try { await db.Database.OpenConnectionAsync(); await db.Database.CloseConnectionAsync(); return Results.Ok(\"ok\"); }\n    catch (Exception ex) { return Results.Problem(ex.Message); }\n});\napp.MapGet(\"/api/debug/conn\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    return Results.Ok(new\n    {\n        host = b.Host,\n        port = b.Port,\n        database = b.Database,\n        username = b.Username,\n        sslmode = b.SslMode.ToString(),\n        hasPassword = !string.IsNullOrEmpty(b.Password)\n    });\n});\n// Try DNS resolution of the DB host that /api/debug/conn reports\napp.MapGet(\"/api/debug/dns\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    try\n    {\n        var ips = Dns.GetHostAddresses(b.Host);\n        return Results.Ok(new { host = b.Host, addresses = ips.Select(i => i.ToString()).ToArray() });\n    }\n    catch (Exception ex)\n    {\n        return Results.Problem($\"DNS failed for host '{b.Host}': {ex.Message}\");\n    }\n});\n\n#region 🌐 Middleware Pipeline Setup\nAuditLoggingHelper.Configure(app.Services);\n\napp.UseMiddleware<GlobalExceptionMiddleware>();\n\nif (app.Environment.IsDevelopment())\n{\n    // Dev-specific configs\n}\n\napp.UseSwagger();\napp.UseSwaggerUI();\n\napp.UseHsts();\napp.UseHttpsRedirection();\n\n// Security headers\napp.Use(async (context, next) =>\n{\n    context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n    context.Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n    context.Response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n    context.Response.Headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\";\n    context.Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n    await next();\n});\n\napp.UseRouting();\napp.UseCors(\"AllowFrontend\");\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\napp.MapHub<InboxHub>(\"/hubs/inbox\");\n\napp.Run();\n#endregion\n\n\n\n//using FluentValidation;;\n//using Microsoft.AspNetCore.Authentication.JwtBearer;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.IdentityModel.Tokens;\n//using Serilog;\n//using Serilog.Exceptions;\n//using System.Text;\n//using System.Text.Json;\n//using System.Text.Json.Serialization;\n//using xbytechat.api;\n//using xbytechat.api.AuthModule.Services;\n//using xbytechat.api.CRM.Interfaces;\n//using xbytechat.api.CRM.Services;\n//using xbytechat.api.Features.AccessControl.Services;\n//using xbytechat.api.Features.AuditTrail.Services;\n//using xbytechat.api.Features.CampaignModule.Services;\n//using xbytechat.api.Features.CampaignTracking.Services;\n//using xbytechat.api.Features.Catalog.Services;\n//using xbytechat.api.Features.MessageManagement.Services;\n//using xbytechat.api.Features.MessagesEngine.PayloadBuilders;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Features.PlanManagement.Services;\n//using xbytechat.api.Features.TemplateModule.Services;\n//using xbytechat.api.Features.Webhooks.Services;\n//using xbytechat.api.Features.Webhooks.Services.Processors;\n//using xbytechat.api.Features.Webhooks.Services.Resolvers;\n//using xbytechat.api.Features.xbTimeline.Services;\n//using xbytechat.api.Features.xbTimelines.Services;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Middlewares;\n//using xbytechat.api.PayloadBuilders;\n//using xbytechat.api.Repositories.Implementations;\n//using xbytechat.api.Repositories.Interfaces;\n//using xbytechat.api.Services;\n//using xbytechat.api.Services.Messages.Implementations;\n//using xbytechat.api.Services.Messages.Interfaces;\n//using xbytechat_api.WhatsAppSettings.Services;\n//using xbytechat_api.WhatsAppSettings.Validators;\n//using EnginePayloadBuilders = xbytechat.api.Features.MessagesEngine.PayloadBuilders;\n//using xbytechat.api.Features.CTAManagement.Services;\n//using xbytechat.api.Features.Tracking.Services;\n//using xbytechat.api.Features.Webhooks.BackgroundWorkers;\n//using xbytechat.api.Features.CTAFlowBuilder.Services;\n//using xbytechat.api.Features.FlowAnalytics.Services;\n//using xbytechat.api.Features.Inbox.Repositories;\n//using xbytechat.api.Features.Inbox.Services;\n//using xbytechat.api.Features.Inbox.Hubs;\n//using Microsoft.AspNetCore.SignalR;\n//using xbytechat.api.SignalR;\n//using xbytechat.api.Features.AutoReplyBuilder.Repositories;\n//using xbytechat.api.Features.AutoReplyBuilder.Services;\n//using xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\n//using xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\n//using xbytechat.api.Features.BusinessModule.Services;\n//using xbytechat.api.Features.FeatureAccessModule.Services;\n//using xbytechat.api.Features.ReportingModule.Services;\n//using xbytechat.api.Features.Automation.Repositories;\n//using xbytechat.api.Features.Automation.Services;\n\n\n//var builder = WebApplication.CreateBuilder(args);\n\n//#region 🔷 Serilog Configuration\n//Log.Logger = new LoggerConfiguration()\n//    .Enrich.WithExceptionDetails()\n//    .Enrich.FromLogContext()\n//    .MinimumLevel.Information()\n//    .WriteTo.Console()\n//    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n//    .CreateLogger();\n//builder.Host.UseSerilog();\n//#endregion\n\n////#region 🔷 Database Setup (PostgreSQL)\n////var connStr = builder.Services.AddDbContext<AppDbContext>(options =>\n////    options.UseNpgsql(builder.Configuration.GetConnectionString(\"DefaultConnection\")).EnableSensitiveDataLogging());\n////Console.WriteLine($\"[DEBUG] Using Connection String: {connStr}\");\n////#endregion\n//#region Database Setup (PostgreSQL)\n//var connStr = builder.Configuration.GetConnectionString(\"DefaultConnection\");  // Get actual string\n//builder.Services.AddDbContext<AppDbContext>(options =>\n//    options.UseNpgsql(connStr).EnableSensitiveDataLogging()\n//);\n//Console.WriteLine($\"[DEBUG] Using Connection String: {connStr}\"); // This prints the REAL connection string\n//#endregion\n\n//#region 🔷 Generic Repository Pattern\n//builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));\n//#endregion\n\n//#region 🔷 Core Modules (Business/Auth)\n//builder.Services.AddScoped<IBusinessService, BusinessService>();\n//builder.Services.AddScoped<IAuthService, AuthService>();\n//builder.Services.AddScoped<IJwtTokenService, JwtTokenService>();\n//#endregion\n\n//#region 🔷 Messaging Services & WhatsApp\n//builder.Services.AddScoped<IMessageEngineService, MessageEngineService>(); // New\n\n//builder.Services.AddHttpClient<IMessageService, MessageService>();\n//builder.Services.AddScoped<WhatsAppService>();\n//builder.Services.AddScoped<IMessageStatusService, MessageStatusService>();\n//builder.Services.AddScoped<ITemplateMessageSender, TemplateMessageSender>();\n//#endregion\n\n//#region 🔷 Payload Builders\n//builder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TextMessagePayloadBuilder>();\n//builder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.ImageMessagePayloadBuilder>();\n//builder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TemplateMessagePayloadBuilder>();\n//#endregion\n\n//#region 🔷 Catalog & CRM Modules\n//builder.Services.AddScoped<IProductService, ProductService>();\n//builder.Services.AddScoped<ICatalogTrackingService, CatalogTrackingService>();\n//builder.Services.AddScoped<ICatalogDashboardService, CatalogDashboardService>();\n//builder.Services.AddScoped<IContactService, ContactService>();\n//builder.Services.AddScoped<ITagService, TagService>();\n//builder.Services.AddScoped<IReminderService, ReminderService>();\n//builder.Services.AddScoped<INoteService, NoteService>();\n//builder.Services.AddScoped<ITimelineService, TimelineService>();\n\n//#endregion\n\n//#region 🔷 Campaign Management\n//builder.Services.AddScoped<ICampaignService, CampaignService>();\n//builder.Services.AddScoped<ICampaignSendLogService, CampaignSendLogService>();\n//builder.Services.AddScoped<ICampaignSendLogEnricher, CampaignSendLogEnricher>();\n//builder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\n\n//builder.Services.AddScoped<ICampaignRetryService, CampaignRetryService>();\n//builder.Services.AddHttpClient<IWhatsAppTemplateService, WhatsAppTemplateService>();\n//builder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\n//builder.Services.AddScoped<ICampaignRecipientService, CampaignRecipientService>();\n\n//#endregion\n\n//#region 🔷 Webhook Management\n//builder.Services.AddScoped<IWhatsAppWebhookService, WhatsAppWebhookService>();\n//builder.Services.AddScoped<IWhatsAppWebhookDispatcher, WhatsAppWebhookDispatcher>();\n//builder.Services.AddScoped<IStatusWebhookProcessor, StatusWebhookProcessor>();\n//builder.Services.AddScoped<ITemplateWebhookProcessor, TemplateWebhookProcessor>();\n//builder.Services.AddScoped<IMessageIdResolver, MessageIdResolver>();\n//builder.Services.AddScoped<IClickWebhookProcessor, ClickWebhookProcessor>();\n//builder.Services.AddScoped<ILeadTimelineService, LeadTimelineService>();\n//builder.Services.AddScoped<IFailedWebhookLogService, FailedWebhookLogService>();\n//builder.Services.AddSingleton<IWebhookQueueService, WebhookQueueService>();\n//builder.Services.AddHostedService<WebhookQueueWorker>();\n//builder.Services.AddHostedService<FailedWebhookLogCleanupService>();\n//builder.Services.AddScoped<IMaintenanceService, MaintenanceService>();\n//builder.Services.AddHostedService<WebhookAutoCleanupWorker>();\n\n//#endregion\n\n//#region 🔷 Access Control & Permission\n//builder.Services.AddScoped<IAccessControlService, AccessControlService>();\n//builder.Services.AddScoped<IFeatureAccessEvaluator, FeatureAccessEvaluator>();\n//builder.Services.AddScoped<IFeatureAccessService, FeatureAccessService>();\n//#endregion\n\n//#region 🔷 Tracking \n//builder.Services.AddScoped<ITrackingService, TrackingService>();\n//builder.Services.AddScoped<IMessageAnalyticsService, MessageAnalyticsService>();\n\n//#endregion\n//#region 🔷 Flow Builder \n//builder.Services.AddScoped<ICTAFlowService, CTAFlowService>();\n\n//#endregion\n//#region 🔷 Audit Trail Logging\n//builder.Services.AddHttpContextAccessor(); // For Audit + Cookies\n//builder.Services.AddScoped<IAuditLogService, AuditLogService>();\n\n\n//#endregion\n//#region 🔷 WhatsApp settings\n//builder.Services.AddScoped<IWhatsAppSettingsService, WhatsAppSettingsService>();\n//builder.Services.AddValidatorsFromAssemblyContaining<SaveWhatsAppSettingValidator>();\n//builder.Services.AddHttpClient<IMessageEngineService, MessageEngineService>();\n//builder.Services.AddScoped<IWhatsAppTemplateFetcherService, WhatsAppTemplateFetcherService>();\n\n//// ✅ Force DI to use correct class from MessagesEngine.PayloadBuilders\n//builder.Services.AddScoped<EnginePayloadBuilders.TextMessagePayloadBuilder>();\n//builder.Services.AddScoped<EnginePayloadBuilders.ImageMessagePayloadBuilder>();\n//builder.Services.AddScoped<EnginePayloadBuilders.TemplateMessagePayloadBuilder>();\n//builder.Services.AddScoped<EnginePayloadBuilders.CtaMessagePayloadBuilder>();\n//builder.Services.AddScoped<IPlanManager, PlanManager>();\n//builder.Services.AddScoped<ICTAManagementService, CTAManagementService>();\n\n\n//#endregion\n//#region 🔷 Inbox \n//builder.Services.AddScoped<IFlowAnalyticsService, FlowAnalyticsService>();\n//builder.Services.AddScoped<IInboxService, InboxService>();\n//builder.Services.AddScoped<IInboundMessageProcessor, InboundMessageProcessor>();\n//builder.Services.AddScoped<IInboxRepository, InboxRepository>();\n//#endregion \n\n//// AutoReplyBuilder Module\n//builder.Services.AddScoped<IAutoReplyRepository, AutoReplyRepository>();\n//builder.Services.AddScoped<IAutoReplyService, AutoReplyService>();\n//builder.Services.AddScoped<IAutoReplyFlowRepository, AutoReplyFlowRepository>();\n//builder.Services.AddScoped<IAutoReplyFlowService, AutoReplyFlowService>();\n//builder.Services.AddScoped<IAutoReplyRuntimeService, AutoReplyRuntimeService>();\n//builder.Services.AddScoped<IChatSessionStateService, ChatSessionStateService>();\n//builder.Services.AddScoped<IAgentAssignmentService, AgentAssignmentService>();\n\n//// 🧠 Automation Module - Dependency Injection\n//builder.Services.AddScoped<IAutomationFlowRepository, AutomationFlowRepository>();\n//builder.Services.AddScoped<IAutomationRunner, AutomationRunner>();\n//builder.Services.AddScoped<IAutomationService, AutomationService>();\n\n\n//#region 🔐 JWT Authentication (Token + Cookie Based)\n//#region 🔐 JWT Authentication (Secure Cookie + Expiry Handling)\n//builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n//    .AddJwtBearer(options =>\n//    {\n//        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n//        options.TokenValidationParameters = new TokenValidationParameters\n//        {\n//            ValidateIssuer = true,\n//            ValidateAudience = true,\n//            ValidateLifetime = true,\n//            ValidateIssuerSigningKey = true,\n//            ValidIssuer = jwtSettings[\"Issuer\"],\n//            ValidAudience = jwtSettings[\"Audience\"],\n//            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n//            ClockSkew = TimeSpan.Zero // No token grace period\n//        };\n\n//        options.Events = new JwtBearerEvents\n//        {\n//            OnMessageReceived = context =>\n//            {\n//                var token = context.Request.Cookies[\"xbyte_token\"];\n//                if (!string.IsNullOrEmpty(token))\n//                {\n//                    context.Token = token;\n//                }\n//                return Task.CompletedTask;\n//            },\n//            OnAuthenticationFailed = context =>\n//            {\n//                if (context.Exception is SecurityTokenExpiredException)\n//                {\n//                    context.Response.StatusCode = 401;\n//                    context.Response.ContentType = \"application/json\";\n//                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n//                }\n//                return Task.CompletedTask;\n//            }\n//        };\n//    });\n\n\n\n//builder.Services.AddAuthorization();\n//#endregion\n//#endregion\n//#region 🌐 CORS Setup (Secure Cookie-Compatible)\n\n//var allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\n\n//builder.Services.AddCors(options =>\n//{\n//    options.AddPolicy(\"AllowFrontend\", policy =>\n//    {\n//        policy\n//            .WithOrigins(allowedOrigins ?? Array.Empty<string>())\n//            .AllowAnyHeader()\n//            .AllowAnyMethod()\n//            .AllowCredentials();\n//    });\n//});\n////builder.Services.AddCors(options =>\n////{\n////    options.AddPolicy(\"AllowFrontend\", policy =>\n////    {\n////        policy.WithOrigins(\"busiorbit-ui-c0dbc0crazd6bae4.centralindia-01.azurewebsites.net\") // ✅ React dev URL\n////              .AllowAnyHeader()\n////              .AllowAnyMethod()\n////              .AllowCredentials(); // ✅ Needed for httpOnly cookie\n////    });\n////});\n//#endregion\n\n//#region ✅ MVC + Swagger + Middleware\n//builder.Services.AddControllers()\n//    .AddJsonOptions(opts =>\n//    {\n//        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));\n//    });\n\n//builder.Services.AddEndpointsApiExplorer();\n////builder.Services.AddSwaggerGen(\n\n////    );\n//try\n//{\n//    builder.Services.AddSwaggerGen(options =>\n//{\n//    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n//    {\n//        Title = \"xByteChat API\",\n//        Version = \"v1\",\n//        Description = \"API documentation for xByteChat project\"\n//    });\n\n//    // Optional: include XML comments if enabled\n//    var xmlFile = $\"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n//    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n//    if (File.Exists(xmlPath))\n//        options.IncludeXmlComments(xmlPath);\n//});\n//}\n//catch (Exception ex)\n//{\n//    Console.WriteLine(\"⚠️ Swagger registration failed: \" + ex.Message);\n//}\n//#endregion\n//builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n//#region ✅ For output in visual studio code\n//builder.Logging.ClearProviders();         // Clear default log providers\n//builder.Logging.AddConsole();             // Add console logging\n\n//#region SignalR\n//builder.Services.AddSignalR();\n//builder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n\n\n//#endregion\n//var app = builder.Build();\n\n//#region 🌐 Middleware Pipeline Setup\n//AuditLoggingHelper.Configure(app.Services);\n\n//app.UseMiddleware<GlobalExceptionMiddleware>();\n///*/*app.UseMiddleware<JwtErrorHandlingMiddleware>();*/// ✅ Handle JWT Expired errors\n//#endregion\n//if (app.Environment.IsDevelopment())\n//{\n\n//}\n//app.UseSwagger();\n//app.UseSwaggerUI();\n//app.UseHttpsRedirection();\n//// ✅ Secure CORS policy applied BEFORE auth\n//app.Use(async (context, next) =>\n//{\n//    context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n//    context.Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n//    context.Response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n//    context.Response.Headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\";\n//    context.Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n//    await next();\n//});\n//app.UseCors(\"AllowFrontend\");\n\n//app.UseAuthentication();\n//app.UseAuthorization();\n\n//app.MapControllers();\n//app.MapHub<InboxHub>(\"/hubs/inbox\");\n//app.Run();\n//#endregion\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Properties/launchSettings.json",
      "sha256": "3374c65b7338b8a459db1242f356b2dd07d3dfd4cded988482a8f34fbe64e62e",
      "language": "json",
      "size": 1102,
      "content": "{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:18939\",\n      \"sslPort\": 44375\n    }\n  },\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5295;http://localhost:7113\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:7113;http://localhost:5295\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n"
    },
    {
      "path": "xbytechat-api/RepositoriesGen/Implementations/GenericRepository.cs",
      "sha256": "68fdbced75094ad69adcf2073501cec37b1745f7b4d6206826d6aedc33fe0a46",
      "language": "csharp",
      "size": 2091,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Repositories.Implementations\n{\n    public class GenericRepository<T> : IGenericRepository<T> where T : class\n    {\n        private readonly AppDbContext _context;\n        private readonly DbSet<T> _dbSet;\n\n        public GenericRepository(AppDbContext context)\n        {\n            _context = context;\n            _dbSet = _context.Set<T>();\n        }\n\n        public async Task<IEnumerable<T>> GetAllAsync()\n        {\n            return await _dbSet.ToListAsync();\n        }\n\n        public async Task<T?> FindByIdAsync(Guid id)\n        {\n            return await _dbSet.FindAsync(id);\n        }\n\n        public async Task AddAsync(T entity)\n        {\n            await _dbSet.AddAsync(entity);\n        }\n\n        public void Update(T entity)\n        {\n            _dbSet.Update(entity);\n        }\n\n        public void Delete(T entity)\n        {\n            _dbSet.Remove(entity);\n        }\n\n        public async Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.FirstOrDefaultAsync(predicate);\n        }\n\n        public async Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.Where(predicate).ToListAsync();\n        }\n\n        public async Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.AnyAsync(predicate);\n        }\n\n        public async Task SaveAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _context.Set<T>().Where(predicate).ToListAsync();\n        }\n\n        // ✅ NEW: Enables .Include(), .ThenInclude(), etc.\n        public IQueryable<T> AsQueryable()\n        {\n            return _dbSet.AsQueryable();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/RepositoriesGen/Interfaces/IGenericRepository.cs",
      "sha256": "dce9a4518c5e6db0da8996246969bbc864c23c5ec0eeb93ac053cc16a33bc920",
      "language": "csharp",
      "size": 941,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Repositories.Interfaces\n{\n    public interface IGenericRepository<T> where T : class\n    {\n        // 🔍 Basic Reads\n        Task<IEnumerable<T>> GetAllAsync();\n        Task<T?> FindByIdAsync(Guid id);\n        Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate);\n        Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate);\n\n        // 🔐 Checks\n        Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate);\n\n        // ✍️ Commands\n        Task AddAsync(T entity);\n        void Update(T entity);\n        void Delete(T entity);\n        Task SaveAsync();\n\n        Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate);\n\n        // ✅ New: Supports advanced LINQ operations like Include()\n        IQueryable<T> AsQueryable();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Implementations/MessageService.cs",
      "sha256": "4a9530274bcc8a60c09a984dfd7c120424ee9f5b32a1d430a4f393b0ebd5d45c",
      "language": "csharp",
      "size": 9833,
      "content": "using System.Text;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Services.Messages.Implementations\n{\n    public class MessageService : IMessageService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly IGenericRepository<MessageLog> _messageLogRepo;\n        private readonly Dictionary<string, IWhatsAppPayloadBuilder> _payloadBuilders;\n        private readonly ILogger<MessageService> _logger;\n\n        public MessageService(\n            AppDbContext dbContext,\n            HttpClient httpClient,\n            IConfiguration config,\n            IGenericRepository<MessageLog> messageLogRepo,\n            IEnumerable<IWhatsAppPayloadBuilder> builders,\n            ILogger<MessageService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _config = config;\n            _messageLogRepo = messageLogRepo;\n            _logger = logger;\n\n            _payloadBuilders = builders.ToDictionary(\n                b => b.GetType().Name.Replace(\"MessagePayloadBuilder\", \"\").ToLower(),\n                b => b\n            );\n        }\n\n        public async Task SendFollowUpAsync(string recipientNumber, string messageContent)\n        {\n            var dto = new TextMessageDto\n            {\n                RecipientNumber = recipientNumber,\n                MessageContent = messageContent,\n                BusinessId = Guid.Empty // Optional: Set dynamically if needed\n            };\n\n            await SendMessageAsync(dto); // ✅ You already have this method\n        }\n\n\n        public async Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto)\n        {\n            var messageType = dto.GetType().Name.Replace(\"MessageDto\", \"\").ToLower();\n\n            // 🧠 Get the right builder (e.g., for text, image)\n            if (!_payloadBuilders.TryGetValue(messageType, out var builder))\n            {\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Unsupported message type: \" + messageType\n                };\n            }\n\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = builder.BuildPayload(dto);\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"📦 Sending Payload: {Payload}\", json);\n\n            try\n\n\n            {\n                // 🛠️ Log the payload for debugging\n                _logger.LogInformation(\"📤 Final WhatsApp Payload:\\n\" + JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n\n                string? messageId = null;\n\n                // 🧾 Try extracting messageId (WAMID) from response\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        var jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"✅ Message sent but failed to parse WAMID: \" + ex.Message);\n                    }\n                }\n\n                // 📝 Log message for tracking\n                var log = new MessageLog\n                {\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto is TextMessageDto textDto && !string.IsNullOrEmpty(textDto.MessageContent)\n                        ? textDto.MessageContent\n                        : \"[Empty or Non-Text]\",\n                    MediaUrl = (dto as ImageMessageDto)?.MediaUrl,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ Message sent successfully\" : \"❌ Failed to send message\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception during message send\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending\",\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n        public async Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons)\n        {\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientPhone,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = bodyText },\n                    action = new\n                    {\n                        buttons = buttons.Select((text, index) => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = $\"cta_{index + 1}\",\n                                title = text\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"🚀 Sending CTA Message: \" + json);\n\n            try\n            {\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n                // Message send here successfully \n                string? messageId = null;\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        dynamic jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"⚠️ Sent, but failed to parse messageId: \" + ex.Message);\n                    }\n                }\n\n                // Log to MessageLogs table (optional: use a dummy entry)\n\n                var log = new MessageLog\n                {\n\n                    //BusinessId = Guid.Parse(\"put-a-valid-business-guid-here\"), //Guid.Empty, // set properly if you want to track\n                    BusinessId = Guid.TryParse(\"45262049-0127-4658-93e1-b3ffea645f4f\", out var parsedId)\n    ? parsedId\n    : throw new FormatException(\"❌ Invalid GUID format used for BusinessId.\"),\n                    RecipientNumber = recipientPhone,\n                    MessageContent = bodyText,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ CTA message sent\" : \"❌ Failed to send CTA\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while sending CTA\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending CTA\",\n                    ErrorMessage = ex.InnerException?.Message ?? ex.Message // ✅ this is critical\n                };\n            }\n\n        }\n\n    }\n}\n\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Services/MessageModule/Interfaces/IMessageService.cs",
      "sha256": "7592cb1c94c37bab95a7c1a34fbc22e00b2fa0428bc1a23a4c2626a437314c30",
      "language": "csharp",
      "size": 846,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Services.Messages.Interfaces\n{\n    public interface IMessageService\n    {\n        /// <summary>\n        /// Sends a message of any supported type (Text, Image, Template).\n        /// </summary>\n        /// <param name=\"dto\">Base DTO representing message details.</param>\n        /// <returns>Standardized result with status, error info, and raw response.</returns>\n        Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto);\n        //Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto);\n        Task SendFollowUpAsync(string recipientNumber, string messageContent);\n        Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Services/WhatsAppService.cs",
      "sha256": "239db95488943944c9836125a53c4ede14522f2bc4914748e07350d86cc0051f",
      "language": "csharp",
      "size": 2917,
      "content": "using System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Configuration;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Services\n{\n    public class WhatsAppService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _whatsAppToken;\n        private readonly string _whatsAppPhoneId;\n\n        public WhatsAppService(IConfiguration configuration)\n        {\n            _httpClient = new HttpClient();\n\n            _whatsAppToken = configuration[\"WhatsApp:apiToken\"];\n            _whatsAppPhoneId = configuration[\"WhatsApp:PhoneNumberId\"];\n\n            if (string.IsNullOrEmpty(_whatsAppToken))\n                Console.WriteLine(\"❌ Token is NULL or EMPTY from config!\");\n\n            if (string.IsNullOrEmpty(_whatsAppPhoneId))\n                Console.WriteLine(\"❌ Phone ID is NULL or EMPTY from config!\");\n        }\n\n        public async Task<WhatsAppResult> SendMessageAsync(string recipientPhone, string messageText)\n        {\n            try\n            {\n                Console.WriteLine(\"👉 Preparing to send WhatsApp message...\");\n                var url = $\"https://graph.facebook.com/v22.0/{_whatsAppPhoneId}/messages\";\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = recipientPhone,\n                    type = \"text\",\n                    text = new { body = messageText }\n                };\n\n                var json = JsonSerializer.Serialize(payload);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _whatsAppToken);\n\n                var response = await _httpClient.PostAsync(url, content);\n                var responseBody = await response.Content.ReadAsStringAsync();\n\n                Console.WriteLine($\"✅ Status: {response.StatusCode}\");\n                Console.WriteLine($\"📥 Response: {responseBody}\");\n\n                if (response.IsSuccessStatusCode)\n                {\n                    return new WhatsAppResult { Success = true, RawResponse = responseBody };\n                }\n                else\n                {\n                    return new WhatsAppResult\n                    {\n                        Success = false,\n                        ErrorMessage = $\"Meta API Error: {response.StatusCode}\",\n                        RawResponse = responseBody\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Exception while sending:\");\n                Console.WriteLine(ex.Message);\n\n                return new WhatsAppResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/AutoMapperProfile.cs",
      "sha256": "989f0b9b654be427f90cea952c56afc87d0c6b647e71bae60f9694b4e21bacf2",
      "language": "csharp",
      "size": 708,
      "content": "using AutoMapper;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Shared\n{\n    public class AutoMapperProfile : Profile\n    {\n        public AutoMapperProfile()\n        {\n            CreateMap<Contact, ContactDto>();\n            CreateMap<Campaign, CampaignDto>();\n            CreateMap<MessageLog, MessageLogDto>();\n            CreateMap<TrackingLog, TrackingLogDto>();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/ClaimsBusinessDetails.cs",
      "sha256": "c2e6949a61ef96fc2c06636f297b8d8d033f3f29fa5d7b57230743db945ed0a2",
      "language": "csharp",
      "size": 939,
      "content": "using System;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Shared\n{\n    public static class ClaimsBusinessDetails\n    {\n        public static Guid GetBusinessId(this ClaimsPrincipal user)\n        {\n            var businessIdClaim = user.FindFirst(\"businessId\")?.Value; // lowercase only!\n            if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                throw new UnauthorizedAccessException(\"Invalid or missing businessId in token.\");\n            return businessId;\n        }\n\n        public static Guid GetUserId(this ClaimsPrincipal user)\n        {\n            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))\n                throw new UnauthorizedAccessException(\"Invalid or missing userId in token.\");\n            return userId;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/PaginatedRequest.cs",
      "sha256": "af6fceb743c7fcb6bbb984e08b2bb8e696a447e38e61b6fc85a7b9dd48a0fb04",
      "language": "csharp",
      "size": 363,
      "content": "namespace xbytechat.api.Shared\n{\n    public class PaginatedRequest\n    {\n        public int Page { get; set; } = 1;       // Page number (1-based)\n        public int PageSize { get; set; } = 10;  // Items per page\n\n        // Optional filter (can be extended later)\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Shared/PaginatedResponse.cs",
      "sha256": "d59aca9b4129006df5c4ec39b4e6793672e9493f4581e7963b6c215465d1b113",
      "language": "csharp",
      "size": 296,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Shared\n{\n    public class PaginatedResponse<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n        public int Page { get; set; }\n        public int PageSize { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/DeviceHelper.cs",
      "sha256": "70ad5b3deb3b07358a3ce61a514b3a9c3f4bb78007752bd0f4106ef8a3f27b32",
      "language": "csharp",
      "size": 748,
      "content": "// File: Features/CTATracking/Utils/DeviceHelper.cs\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class DeviceHelper\n    {\n        public static string GetDeviceType(string userAgent)\n        {\n            if (string.IsNullOrEmpty(userAgent)) return \"Unknown\";\n\n            userAgent = userAgent.ToLower();\n\n            if (userAgent.Contains(\"mobile\") || userAgent.Contains(\"android\") || userAgent.Contains(\"iphone\"))\n                return \"Mobile\";\n\n            if (userAgent.Contains(\"ipad\") || userAgent.Contains(\"tablet\"))\n                return \"Tablet\";\n\n            if (userAgent.Contains(\"windows\") || userAgent.Contains(\"macintosh\"))\n                return \"Desktop\";\n\n            return \"Unknown\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/GeoHelper.cs",
      "sha256": "359da4b5f8939751d00d9137b41774e466af302ccaf60e203c1b0f0827a9eafd",
      "language": "csharp",
      "size": 952,
      "content": "// File: Features/CTATracking/Utils/GeoHelper.cs\n\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class GeoHelper\n    {\n        public static async Task<string> GetCountryFromIP(string ipAddress)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(ipAddress) || ipAddress == \"::1\")\n                    return \"Localhost\";\n\n                using var client = new HttpClient();\n                var response = await client.GetStringAsync($\"https://ipapi.co/{ipAddress}/json/\");\n\n                var doc = JsonDocument.Parse(response);\n                if (doc.RootElement.TryGetProperty(\"country_name\", out var countryProp))\n                    return countryProp.GetString() ?? \"Unknown\";\n            }\n            catch\n            {\n                // fallback\n            }\n\n            return \"Unknown\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/TrackingUtils/TrackingUrlBuilder.cs",
      "sha256": "d944abb54aa2863bcad184f9d8bbd42d683f5d0b0b07474ea3f26903e7cc13d5",
      "language": "csharp",
      "size": 1370,
      "content": "using System;\nusing System.Web;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class TrackingUrlBuilder\n    {\n        public static string BuildTrackingUrl(\n            Guid businessId,\n            string sourceType,\n            Guid sourceId,\n            string buttonText,\n            string redirectUrl,\n            Guid? messageId = null,\n            Guid? contactId = null,\n            string contactPhone = null,\n            string sessionId = null,\n            string threadId = null)\n        {\n            var query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"src\"] = sourceType;\n            query[\"id\"] = sourceId.ToString();\n            query[\"btn\"] = buttonText;\n            query[\"to\"] = redirectUrl;\n            query[\"type\"] = buttonText;\n            if (messageId != null) query[\"msg\"] = messageId.ToString();\n            if (contactId != null) query[\"contact\"] = contactId.ToString();\n            if (!string.IsNullOrEmpty(contactPhone)) query[\"phone\"] = contactPhone;\n            if (!string.IsNullOrEmpty(sessionId)) query[\"session\"] = sessionId;\n            if (!string.IsNullOrEmpty(threadId)) query[\"thread\"] = threadId;\n\n            var baseUrl = Environment.GetEnvironmentVariable(\"API_BASE_URL\") ?? \"https://yourdomain.com\";\n            return $\"{baseUrl}/api/tracking/redirect?{query}\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Shared/utility/TemplateParameterHelper.cs",
      "sha256": "51753bdf8ce7b9964913d5a501bee92803cf58d23cc315def80b8c69561dfbe1",
      "language": "csharp",
      "size": 1252,
      "content": "using Newtonsoft.Json;\nusing System.Text.RegularExpressions;\n\nnamespace xbytechat.api.Shared.utility\n{\n    public static class TemplateParameterHelper\n    {\n        // ✅ Used when parsing stored JSON parameters\n        public static List<string> ParseTemplateParams(string? jsonString)\n        {\n            if (string.IsNullOrWhiteSpace(jsonString)) return new List<string>();\n            try\n            {\n                return JsonConvert.DeserializeObject<List<string>>(jsonString) ?? new List<string>();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        // ✅ NEW: Fills {{1}}, {{2}} with parameter values\n        public static string FillPlaceholders(string template, List<string> parameters)\n        {\n            if (string.IsNullOrWhiteSpace(template) || parameters == null || parameters.Count == 0)\n                return template;\n\n            // Replace {{1}}, {{2}} ... with values\n            return Regex.Replace(template, @\"\\{\\{(\\d+)\\}\\}\", match =>\n            {\n                var index = int.Parse(match.Groups[1].Value) - 1;\n                return index >= 0 && index < parameters.Count ? parameters[index] : match.Value;\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Validators/MessageTypeValidator.cs",
      "sha256": "a9accea936700f5fa40d270dffc11079bdce7a4ede1f30f968b41436460b80b2",
      "language": "csharp",
      "size": 871,
      "content": "namespace xbytechat.api.Validators\n{\n    /// <summary>\n    /// Centralized validator for supported message types (text, image, template, etc.)\n    /// </summary>\n    public static class MessageTypeValidator\n    {\n        private static readonly HashSet<string> SupportedTypes = new()\n        {\n            \"text\", \"image\", \"template\"\n        };\n\n        /// <summary>\n        /// Checks whether a messageType is supported.\n        /// </summary>\n        public static bool IsValid(string? messageType)\n        {\n            return !string.IsNullOrWhiteSpace(messageType) &&\n                   SupportedTypes.Contains(messageType.ToLower());\n        }\n\n        /// <summary>\n        /// Returns all supported message types.\n        /// </summary>\n        public static IEnumerable<string> GetSupportedTypes()\n        {\n            return SupportedTypes;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
      "sha256": "6afee1d3a9680e97d33644eb9415cbdfdd9b34d14f56727d201f7621d46bddd0",
      "language": "csharp",
      "size": 10116,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService whatsAppSettingsService,\n            ILogger<WhatsAppSettingsController> logger)\n        {\n            _whatsAppSettingsService = whatsAppSettingsService;\n            _logger = logger;\n        }\n\n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            _logger.LogInformation(\"🔧 [UpdateSetting] Request received for WhatsApp settings update.\");\n\n            if (!ModelState.IsValid)\n            {\n                var validationErrors = ModelState\n                    .Where(e => e.Value.Errors.Count > 0)\n                    .Select(e => new\n                    {\n                        Field = e.Key,\n                        Errors = e.Value.Errors.Select(x => x.ErrorMessage)\n                    });\n\n                _logger.LogWarning(\"❌ [UpdateSetting] Validation failed: {@Errors}\", validationErrors);\n                return BadRequest(new { message = \"❌ Invalid input.\", errors = validationErrors });\n            }\n\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ✅ Cleaner using your helper\n                dto.BusinessId = businessId;\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                _logger.LogWarning(\"❌ [UpdateSetting] BusinessId claim missing or invalid: {Message}\", ex.Message);\n                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n            }\n\n            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n            {\n                _logger.LogWarning(\"❌ [UpdateSetting] Missing ApiToken or PhoneNumberId.\");\n                return BadRequest(new { message = \"❌ API Token and Phone Number ID are required.\" });\n            }\n\n            try\n            {\n                _logger.LogInformation(\"💾 [UpdateSetting] Saving/updating WhatsApp settings for businessId={BusinessId}.\", businessId);\n                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n                _logger.LogInformation(\"✅ [UpdateSetting] WhatsApp settings updated successfully.\");\n                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [UpdateSetting] Exception occurred while saving settings.\");\n                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n            }\n        }\n\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n  \n            var businessId = User.GetBusinessId();\n            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        [HttpGet(\"{businessId}\")]\n        public async Task<IActionResult> GetSetting(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n        //[HttpPost(\"test-connection\")]\n        //public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        //{\n        //    if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n        //        return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n        //    try\n        //    {\n        //        var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n        //        return Ok(new { message = result });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n        //    }\n        //}\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n                return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n            try\n            {\n                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n                return Ok(new { message = result });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n            if (!Guid.TryParse(businessIdStr, out var businessId))\n                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n\n            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n            if (!result)\n                return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n\n            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using System;\n//using System.Threading.Tasks;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n\n//        public WhatsAppSettingsController(IWhatsAppSettingsService whatsAppSettingsService)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//        }\n\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//                return BadRequest(new { message = \"❌ Invalid input.\", errors = ModelState });\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//                return BadRequest(new { message = \"❌ API Token and Phone Number ID are required.\" });\n\n//            try\n//            {\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Get WhatsApp Settings by BusinessId\n//        /// </summary>\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        /// <summary>\n//        /// Test WhatsApp Connection (API URL + Token)\n//        /// </summary>\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Delete WhatsApp Settings for a Business\n//        /// </summary>\n//        [HttpDelete(\"delete/{businessId}\")]\n//        public async Task<IActionResult> DeleteSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
      "sha256": "6a64af207ecc08df8ddba5f9b04afb58816cc87a04c8e74ad693655fe5fab584",
      "language": "csharp",
      "size": 3063,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ✅ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"❌ Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
      "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
      "language": "csharp",
      "size": 536,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
      "sha256": "2ae3c96b70b9bd13834e6fe68cd66fe7f7be3336385574f56d0489cccf053c6f",
      "language": "csharp",
      "size": 935,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n       \n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string PhoneNumberId { get; set; }  // ✅ NEW: Needed to send messages\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; } = \"https://graph.facebook.com/v18.0/\";\n\n        [Required]\n        [MaxLength(50)]\n        public string WhatsAppBusinessNumber { get; set; }  // ✅ Still used for testing via `/me` or WABA ID\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
      "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
      "language": "csharp",
      "size": 911,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ✅ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
      "sha256": "86a9eeecdc03ce1f55e7057e15e38a1e82a136efb5adb1a16ec2e8de605a83dd",
      "language": "csharp",
      "size": 1082,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        // string ApiVersion { get; set; } = \"v18.0\";\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
      "sha256": "efcd668cb54b466be5f66ebf202f4e32ce48c8d1e8f6404a0d2366c0ec186549",
      "language": "csharp",
      "size": 584,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
      "sha256": "b5885cf1f231339958b3654b05bafa3aceb5fcb78d7f4e8c650d39c3fa21973f",
      "language": "csharp",
      "size": 593,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // 🔹 (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
      "sha256": "ae214f0b9c67e280aded7d9d70930b9bc4e77e40cf9de8e5944787f072a23d74",
      "language": "csharp",
      "size": 6024,
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n\n        public WhatsAppSettingsService(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty)\n                throw new ArgumentException(\"Invalid BusinessId provided.\");\n\n            var existingSetting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId);\n\n            if (existingSetting != null)\n            {\n                // 🔁 Update existing record with null-safety\n                existingSetting.ApiUrl = dto.ApiUrl?.Trim() ?? existingSetting.ApiUrl;\n                existingSetting.ApiToken = dto.ApiToken?.Trim() ?? existingSetting.ApiToken;\n\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    existingSetting.PhoneNumberId = dto.PhoneNumberId.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    existingSetting.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName))\n                    existingSetting.SenderDisplayName = dto.SenderDisplayName.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.WabaId))\n                    existingSetting.WabaId = dto.WabaId.Trim();\n\n                existingSetting.IsActive = dto.IsActive;\n                existingSetting.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // ➕ Insert new record\n                var newSetting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ApiUrl = dto.ApiUrl.Trim(),\n                    ApiToken = dto.ApiToken.Trim(),\n                    PhoneNumberId = dto.PhoneNumberId?.Trim(),\n                    WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber?.Trim(),\n                    SenderDisplayName = dto.SenderDisplayName?.Trim(),\n                    WabaId = dto.WabaId?.Trim(),\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n            }\n\n            try\n            {\n                await _dbContext.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(\"Error saving WhatsApp settings: \" + ex.InnerException?.Message ?? ex.Message);\n            }\n        }\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            // 🔎 Find active WhatsApp setting for the business\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            // 🗑 Delete settings based on businessId\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null)\n                return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        //public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    using var client = new HttpClient();\n        //    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n        //    var baseUrl = dto.ApiUrl.TrimEnd('/');\n        //    var testUrl = $\"{baseUrl}/me\"; // 📡 Lightweight endpoint for connection test\n\n        //    var response = await client.GetAsync(testUrl);\n        //    var content = await response.Content.ReadAsStringAsync();\n\n        //    if (!response.IsSuccessStatusCode)\n        //        throw new Exception($\"❌ WhatsApp API Error: {content}\");\n\n        //    return \"WhatsApp API token is valid and connection was successful.\";\n        //}\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            using var client = new HttpClient();\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n            var baseUrl = dto.ApiUrl.TrimEnd('/');\n            if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                throw new Exception(\"PhoneNumberId is required to test WhatsApp Cloud API connection.\");\n\n            // This is the official endpoint for checking the number\n            var testUrl = $\"{baseUrl}/{dto.PhoneNumberId}\";\n\n            var response = await client.GetAsync(testUrl);\n            var content = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n                throw new Exception($\"❌ WhatsApp API Error: {content}\");\n\n            return \"WhatsApp API token is valid and connection was successful.\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                throw new Exception($\"❌ WhatsApp settings not found for BusinessId: {businessId}\");\n            }\n\n            return setting.WhatsAppBusinessNumber;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
      "sha256": "c2ae93048c8cd03b7e28e4d0360bd8c2bf24bdfd80d3353ad8c2352244f38188",
      "language": "csharp",
      "size": 25242,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n        }\n\n        //public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        //{\n        //    var templates = new List<TemplateMetadataDto>();\n\n        //    var setting = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n        //    if (setting == null)\n        //    {\n        //        _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n        //        return templates;\n        //    }\n\n        //    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n        //    {\n        //        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n        //        return templates;\n        //    }\n\n        //    try\n        //    {\n        //        var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n        //        var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n        //        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n        //        var response = await _httpClient.GetAsync(url);\n        //        var json = await response.Content.ReadAsStringAsync();\n        //        _logger.LogInformation(\"🧪 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n\n\n        //        if (!response.IsSuccessStatusCode)\n        //        {\n        //            _logger.LogError(\"Failed to fetch templates from Meta: {Response}\", json);\n        //            return templates;\n        //        }\n\n        //        var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n        //        foreach (var tpl in parsed.data)\n        //        {\n        //            string name = tpl.name;\n        //            string language = tpl.language ?? \"en_US\";\n        //            string body = \"\";\n\n        //            foreach (var component in tpl.components)\n        //            {\n        //                if (component.type == \"BODY\")\n        //                {\n        //                    body = component.text;\n        //                    break;\n        //                }\n        //            }\n\n        //            int placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n        //            templates.Add(new TemplateMetadataDto\n        //            {\n        //                Name = name,\n        //                Language = language,\n        //                Body = body,\n        //                PlaceholderCount = placeholderCount\n        //            });\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Exception while fetching WhatsApp templates.\");\n        //    }\n\n        //    return templates;\n        //}\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n            {\n                _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            try\n            {\n                var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n                _logger.LogInformation(\"🧪 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch templates from Meta: {Response}\", json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpper();\n\n                        if (type == \"BODY\")\n                        {\n                            body = component.text?.ToString() ?? \"\";\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpper();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    bool hasExample = button.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(button.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n\n                                    if (subType == \"unknown\" || (paramValue == null && needsRuntimeValue))\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button for template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = buttons\n                    });\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates.\");\n            }\n\n            return templates;\n        }\n\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var allTemplates = new List<TemplateForUIResponseDto>();\n\n            var settingsList = await _dbContext.WhatsAppSettings\n                .Where(x => x.IsActive)\n                .ToListAsync();\n\n            foreach (var setting in settingsList)\n            {\n                if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                {\n                    _logger.LogWarning(\"⏭️ Skipping BusinessId {BusinessId} due to missing token or phone ID\", setting.BusinessId);\n                    continue;\n                }\n\n                try\n                {\n                    var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                    var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                    var response = await _httpClient.GetAsync(url);\n                    var json = await response.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"📦 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                    if (!response.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"❌ Failed to fetch templates for BusinessId {BusinessId}: {Response}\", setting.BusinessId, json);\n                        continue;\n                    }\n\n                    var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                    foreach (var tpl in parsed.data)\n                    {\n                        string name = tpl.name;\n                        string language = tpl.language ?? \"en_US\";\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        foreach (var component in tpl.components)\n                        {\n                            string type = component.type?.ToString()?.ToUpper();\n\n                            if (type == \"BODY\")\n                            {\n                                try\n                                {\n                                    body = component.text?.ToString() ?? \"\";\n                                }\n                                catch\n                                {\n                                    _logger.LogWarning(\"⚠️ Could not read BODY component text for template: {TemplateName}\", name);\n                                    body = \"\";\n                                }\n                            }\n\n                            if (type == \"HEADER\")\n                            {\n                                string format = component.format?.ToString()?.ToUpper();\n                                if (format == \"IMAGE\")\n                                {\n                                    hasImageHeader = true;\n                                }\n                            }\n\n                            if (type == \"BUTTONS\")\n                            {\n                                foreach (var button in component.buttons)\n                                {\n                                    try\n                                    {\n                                        string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                        string text = button.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? paramValue = null;\n                                        if (button.url != null)\n                                            paramValue = button.url.ToString();\n                                        else if (button.phone_number != null)\n                                            paramValue = button.phone_number.ToString();\n                                        else if (button.coupon_code != null)\n                                            paramValue = button.coupon_code.ToString();\n                                        else if (button.flow_id != null)\n                                            paramValue = button.flow_id.ToString();\n\n                                        // 🧠 Meta injects static values — no need to enforce paramValue if STATIC\n                                        bool hasExample = button.example != null;\n                                        bool isDynamic = hasExample && Regex.IsMatch(button.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n\n                                        bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                        bool needsRuntimeValue = requiresParam && isDynamic;\n\n                                        // ❌ Skip if invalid OR dynamic + missing runtime param\n                                        if (subType == \"unknown\" || (paramValue == null && needsRuntimeValue))\n                                        {\n                                            _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                            continue;\n                                        }\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = paramValue ?? \"\" // ✅ Always safe for static\n                                        });\n                                    }\n                                    catch (Exception exBtn)\n                                    {\n                                        _logger.LogWarning(exBtn, \"⚠️ Failed to parse button for template {TemplateName}\", name);\n                                    }\n                                }\n\n                            }\n                        }\n\n                        int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                        allTemplates.Add(new TemplateForUIResponseDto\n                        {\n                            Name = name,\n                            Language = language,\n                            Body = body,\n                            ParametersCount = placeholderCount,\n                            HasImageHeader = hasImageHeader,\n                            ButtonParams = buttons\n                        });\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Exception while fetching templates for BusinessId {BusinessId}\", setting.BusinessId);\n                }\n            }\n\n            return allTemplates;\n        }\n\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null ||\n                string.IsNullOrWhiteSpace(setting.ApiToken) ||\n                string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n            {\n                _logger.LogWarning(\"❌ Missing WhatsApp config for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            try\n            {\n                var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                _httpClient.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"❌ Failed to fetch templates for BusinessId {BusinessId}: {Json}\", businessId, json);\n                    return null;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpper();\n\n                        if (type == \"BODY\")\n                        {\n                            try\n                            {\n                                body = component.text?.ToString() ?? \"\";\n                            }\n                            catch\n                            {\n                                body = \"\";\n                            }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpper();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // ✅ Extract known dynamic values\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // ✅ Skip truly invalid (unknown + missing value for dynamic)\n                                    if (subType == \"unknown\" || (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // ✅ Default to empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception in GetTemplateByNameAsync\");\n            }\n\n            return null;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
      "sha256": "0514de8678bd403897fb43017b8857bf209000360de191805c741c17965c1112",
      "language": "csharp",
      "size": 1277,
      "content": "using FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto> // ✅ Inherit properly\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.BusinessId)\n                .NotEmpty().WithMessage(\"BusinessId is required.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\")\n                .MaximumLength(500).WithMessage(\"API URL must not exceed 500 characters.\");\n\n            RuleFor(x => x.ApiToken)\n                .NotEmpty().WithMessage(\"API Token is required.\")\n                .MaximumLength(1000).WithMessage(\"API Token must not exceed 1000 characters.\");\n\n            RuleFor(x => x.WhatsAppBusinessNumber)\n                .NotEmpty().WithMessage(\"WhatsApp Business Number is required.\")\n                .MaximumLength(20).WithMessage(\"WhatsApp Business Number must not exceed 20 characters.\");\n\n            RuleFor(x => x.SenderDisplayName)\n                .MaximumLength(100).WithMessage(\"Sender Display Name must not exceed 100 characters.\")\n                .When(x => !string.IsNullOrEmpty(x.SenderDisplayName));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api.http",
      "sha256": "1bbe81fafd8a4f5140ffd5c7e14b21f6d5537372ed3c3b6315b9db805b17f2a9",
      "language": "text",
      "size": 133,
      "content": "@xbytechat.api_HostAddress = http://localhost:5295\n\nGET {{xbytechat.api_HostAddress}}/weatherforecast/\nAccept: application/json\n\n###\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/AuditLoggingHelper.cs",
      "sha256": "c5b311d19b5c69b6b78d7ca335b984e43795ef1e140c2239dea1ed7190e188c6",
      "language": "csharp",
      "size": 1690,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\n\npublic static class AuditLoggingHelper\n{\n    private static IServiceProvider? _serviceProvider;\n\n    public static void Configure(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public static void Log(\n        string actionType,\n        string? entityName,\n        string? entityId,\n        string? description,\n        IHttpContextAccessor contextAccessor)\n    {\n        if (_serviceProvider == null) return;\n\n        var scope = _serviceProvider.CreateScope();\n        var auditLogService = scope.ServiceProvider.GetRequiredService<IAuditLogService>();\n\n        var httpContext = contextAccessor.HttpContext;\n        var user = httpContext?.User;\n        var claims = user?.Identities?.FirstOrDefault();\n\n        var log = new AuditLog\n        {\n            Id = Guid.NewGuid(),\n            ActionType = actionType,\n            Description = description,\n            BusinessId = TryParseGuid(claims?.FindFirst(\"businessId\")?.Value),\n            PerformedByUserId = TryParseGuid(claims?.FindFirst(\"sub\")?.Value),\n            PerformedByUserName = claims?.FindFirst(\"email\")?.Value,\n            RoleAtTime = claims?.FindFirst(\"role\")?.Value,\n            IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n            UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString(),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        _ = Task.Run(() => auditLogService.SaveLogAsync(log));\n    }\n\n    private static Guid TryParseGuid(string? input) =>\n        Guid.TryParse(input, out var guid) ? guid : Guid.Empty;\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/JwtCookieHelper.cs",
      "sha256": "50ed48ffead96168a429fe26398cbc9b3021ecfebafabcbba8dc8e59f9a12885",
      "language": "csharp",
      "size": 3279,
      "content": "// 📄 File: Helpers/JwtCookieHelper.cs\nusing Microsoft.AspNetCore.Http;\nusing System;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class JwtCookieHelper\n    {\n        // ✅ Set Access Token (short-lived)\n        public static void SetJwtCookie(HttpContext httpContext, string cookieName, string token, int expiryHours = 12)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, token, new CookieOptions\n            {\n                HttpOnly = true,\n                ///*Secure*/ = isProduction,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddHours(expiryHours)\n            }); ;\n        }\n\n        // ✅ Clear Access Token cookie\n        public static void ClearJwtCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n\n        // ✅ Set Refresh Token (long-lived)\n        public static void SetRefreshTokenCookie(HttpContext httpContext, string cookieName, string refreshToken, int expiryDays = 30)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, refreshToken, new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = isProduction,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(expiryDays)\n            });\n        }\n\n        // ✅ Clear Refresh Token cookie\n        public static void ClearRefreshTokenCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/ResponseResult.cs",
      "sha256": "e179ac827eca18c7316cf0dff9d2d9741653f9bde358cbda401ff1e978cd30ec",
      "language": "csharp",
      "size": 1743,
      "content": "namespace xbytechat.api.Helpers\n{\n    /// <summary>\n    /// Represents a standardized response structure for service layer results.\n    /// </summary>\n    public class ResponseResult\n    {\n        public bool Success { get; set; }                  // ✅ Whether operation succeeded\n        public string Message { get; set; }                // ✅ User-friendly message\n        public object? Data { get; set; }                  // Optional payload (if needed)\n\n        // ✅ WhatsApp-specific diagnostics\n        public string? ErrorMessage { get; set; }          // Error from API or exception\n        public string? RawResponse { get; set; }           // Full API raw response\n\n        public string? MessageId { get; set; } // 🌐 WhatsApp WAMID (Message ID)\n\n        public Guid? LogId { get; set; } // ✅ Unique ID of MessageLog for tracking\n                                         // ✅ Factory method for successful result\n\n        public string? Token { get; set; }\n\n        public string? RefreshToken { get; set; }\n        public static ResponseResult SuccessInfo(string message, object? data = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = true,\n                Message = message,\n                Data = data,\n                RawResponse = raw\n            };\n        }\n\n        // ❌ Factory method for error result\n        public static ResponseResult ErrorInfo(string message, string? error = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = false,\n                Message = message,\n                ErrorMessage = error,\n                RawResponse = raw\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/SendResultExtended.cs",
      "sha256": "d70ced23d36d879eb80982f4a2508398175f5a06bc3e524c5c426cfe59635a0a",
      "language": "csharp",
      "size": 252,
      "content": "using xbytechat.api.Helpers;\n\npublic class SendResultExtended : ResponseResult\n{\n   // public string? MessageId { get; set; }         // WAMID from WhatsApp\n    public Guid? MessageLogId { get; set; }        // Our DB log ID (from MessageLogs table)\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/UserContextHelper.cs",
      "sha256": "ebabfd85a8a344a40535bccbbdb67a5241b585ecca9f9688e3eb6201b71fda0d",
      "language": "csharp",
      "size": 1432,
      "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class UserContextHelper\n    {\n        /// <summary>\n        /// Returns the logged-in user's unique ID from JWT.\n        /// </summary>\n        public static Guid GetUserId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"sub\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the business ID (tenant) from JWT claims.\n        /// </summary>\n        public static Guid GetBusinessId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the role of the logged-in user.\n        /// </summary>\n        public static string GetRole(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"role\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns company name for UI display (optional).\n        /// </summary>\n        public static string GetCompanyName(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"companyName\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns plan info if needed for plan-based access control.\n        /// </summary>\n        public static string GetPlan(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"plan\")?.Value ?? \"\";\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat.api.csproj",
      "sha256": "5d0d8813ee89ea9d68676b7f92203f5df1de03497199aabde3b36ec6f20b5263",
      "language": "text",
      "size": 3520,
      "content": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <RootNamespace>xbytechat.api</RootNamespace>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"Controllers\\BusinessLoginController.cs\" />\n    <Compile Remove=\"Controllers\\SendMessageController.cs\" />\n    <Compile Remove=\"Models\\MessageLog.cs\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"AutoMapper.Extensions.Microsoft.DependencyInjection\" Version=\"12.0.0\" />\n    <PackageReference Include=\"BCrypt.Net-Next\" Version=\"4.0.3\" />\n    <PackageReference Include=\"CsvHelper\" Version=\"33.0.1\" />\n    <PackageReference Include=\"FluentValidation\" Version=\"11.11.0\" />\n    <PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"11.3.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"8.0.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" Version=\"1.2.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"8.0.18\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.15\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"8.0.15\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"8.0.15\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"8.0.11\" />\n    <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL.Design\" Version=\"1.1.0\" />\n    <PackageReference Include=\"Serilog\" Version=\"4.2.0\" />\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"8.0.3\" />\n    <PackageReference Include=\"Serilog.Exceptions\" Version=\"8.4.0\" />\n    <PackageReference Include=\"Serilog.Sinks.File\" Version=\"6.0.0\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"6.6.2\" />\n    <PackageReference Include=\"System.IdentityModel.Tokens.Jwt\" Version=\"8.8.0\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Folder Include=\"Features\\AccessControl\\DTOs\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Controllers\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Middleware\\\" />\n    <Folder Include=\"Features\\AuditTrail\\Background\\\" />\n    <Folder Include=\"Features\\Automation\\Enums\\\" />\n    <Folder Include=\"Features\\Automation\\Runtime\\\" />\n    <Folder Include=\"Features\\AutoReplyBuilder\\Helpers\\\" />\n    <Folder Include=\"Features\\AutoReplyTemplates\\Restaurant\\Templates\\\" />\n    <Folder Include=\"Features\\CampaignTracking\\Repositories\\\" />\n    <Folder Include=\"Features\\Catalog\\Repositories\\\" />\n    <Folder Include=\"Features\\CrmAnalytics\\Models\\\" />\n    <Folder Include=\"Features\\CTAFlowBuilder\\Mappers\\\" />\n    <Folder Include=\"Features\\MessagesEngine\\Helpers\\\" />\n    <Folder Include=\"Features\\PlanManagement\\DTOs\\\" />\n    <Folder Include=\"Features\\TemplatesModule\\DTOs\\\" />\n    <Folder Include=\"Features\\TemplatesModule\\Models\\\" />\n    <Folder Include=\"Features\\xbTimelines\\Repositories\\\" />\n    <Folder Include=\"Models\\BusinessModel\\\" />\n    <Folder Include=\"Models\\UsersModel\\\" />\n  </ItemGroup>\n\n</Project>\n"
    }
  ]
}
