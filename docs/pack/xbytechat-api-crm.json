{
  "name": "xbytechat-api/CRM",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/CRM/Controllers/ContactsController.cs",
      "sha256": "2d74dc1fdc1740f3002c6187d7dfe3031721d374c9e4e061492a35e3456508b3",
      "language": "csharp",
      "size": 8394,
      "content": "using CsvHelper.Configuration;\nusing CsvHelper;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Globalization;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;  // <-- For GetBusinessId extension\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ContactsController : ControllerBase\n    {\n        private readonly IContactService _contactService;\n        private readonly ILogger<ContactsController> _logger;\n        public ContactsController(IContactService contactService, ILogger<ContactsController> logger)\n        {\n            _contactService = contactService;\n            _logger = logger;\n        }\n\n        // POST: api/contacts\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> AddContact([FromBody] ContactDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid contact payload.\"));\n\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _contactService.AddContactAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result); // Already ResponseResult.ErrorInfo\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"üö® Unexpected error in AddContact\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while creating contact.\", ex.ToString()));\n            }\n        }\n\n\n\n\n        // GET: api/contacts/{id}\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetContactById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var contact = await _contactService.GetContactByIdAsync(businessId, id);\n            if (contact == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact loaded.\", contact));\n        }\n\n        // PUT: api/contacts/{id}\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateContact(Guid id, [FromBody] ContactDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            dto.Id = id;\n            var success = await _contactService.UpdateContactAsync(businessId, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact updated.\"));\n        }\n\n        // DELETE: api/contacts/{id}\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteContact(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.DeleteContactAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact deleted.\"));\n        }\n\n        // POST: api/contacts/parse-csv\n        [ApiExplorerSettings(IgnoreApi = true)]\n        [HttpPost(\"parse-csv\")]\n        [Consumes(\"multipart/form-data\")]\n        public async Task<IActionResult> ParseCsvToContactsAsync([FromForm] IFormFile file)\n        {\n            if (file == null || file.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n            using var stream = file.OpenReadStream();\n\n            try\n            {\n                var parseResult = await _contactService.ParseCsvToContactsAsync(businessId, stream);\n                return Ok(ResponseResult.SuccessInfo(\"CSV parsed with detailed results.\", parseResult));\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV parsing failed: \" + ex.Message));\n            }\n        }\n\n        // PATCH: /api/contacts/{id}/favorite\n        [HttpPatch(\"{id}/favorite\")]\n        public async Task<IActionResult> ToggleFavorite(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.ToggleFavoriteAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Favorite toggled.\"));\n        }\n\n        // PATCH: /api/contacts/{id}/archive\n        [HttpPatch(\"{id}/archive\")]\n        public async Task<IActionResult> ToggleArchive(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.ToggleArchiveAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Archive toggled.\"));\n        }\n\n        // POST: api/contacts/bulk-assign-tag\n        [HttpPost(\"bulk-assign-tag\")]\n        public async Task<IActionResult> AssignTagToContacts([FromBody] AssignTagToContactsDto dto)\n        {\n            if (dto.ContactIds == null || !dto.ContactIds.Any())\n                return BadRequest(ResponseResult.ErrorInfo(\"No contact IDs provided.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n            await _contactService.AssignTagToContactsAsync(businessId, dto.ContactIds, dto.TagId);\n\n            return Ok(ResponseResult.SuccessInfo(\"Tag assigned to selected contacts.\"));\n        }\n\n        //[HttpGet(\"contacts\")]\n        [HttpGet]\n        public async Task<IActionResult> GetAllContacts(\n        [FromQuery] string? tab = \"all\",\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 25)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var pagedResult = await _contactService.GetPagedContactsAsync(businessId, tab, page, pageSize);\n            return Ok(ResponseResult.SuccessInfo(\"Contacts loaded.\", pagedResult));\n        }\n        // GET: api/contacts/all\n        [HttpGet(\"all\")]\n        public async Task<IActionResult> GetAllContactsFlat()\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var allContacts = await _contactService.GetAllContactsAsync(businessId); // This returns IEnumerable<ContactDto>\n            return Ok(allContacts); // Returns plain array!\n        }\n\n        [HttpPost(\"filter-by-tags\")]\n        public async Task<IActionResult> GetContactsByTags([FromBody] List<string> tags)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n\n            // ‚úÖ Convert to Guid list safely\n            var tagGuids = tags\n                .Where(x => Guid.TryParse(x, out _))\n                .Select(Guid.Parse)\n                .ToList();\n\n            var contacts = await _contactService.GetContactsByTagsAsync(businessId, tagGuids);\n\n            return Ok(ResponseResult.SuccessInfo(\"Contacts filtered successfully\", contacts));\n        }\n\n        [HttpPost(\"bulk-import\")]\n        [Consumes(\"multipart/form-data\")]\n        public async Task<IActionResult> BulkImportContactsAsync(IFormFile file)\n        {\n            if (file == null || file.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n\n            try\n            {\n                var result = await _contactService.BulkImportAsync(businessId, file.OpenReadStream());\n                return Ok(ResponseResult.SuccessInfo(\"Contacts imported successfully.\", result));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Bulk import failed.\");\n                return BadRequest(ResponseResult.ErrorInfo(\"Import failed: \" + ex.Message));\n            }\n        }\n       \n        [HttpGet(\"by-tags\")]\n        public async Task<IActionResult> GetContactsByTags([FromQuery] List<Guid> tagIds)\n        {\n            var businessId = User.GetBusinessId();  // Your tenant logic\n            var contacts = await _contactService.GetContactsByTagsAsync(businessId, tagIds);\n            return Ok(contacts);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/NotesController.cs",
      "sha256": "f1a804500703b68b36ff3c8de61e939660f5c9f400d5e65588af1cb135b7f87f",
      "language": "csharp",
      "size": 2925,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Helpers; \nusing xbytechat.api.Shared; \nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class NotesController : ControllerBase\n    {\n        private readonly INoteService _noteService;\n\n        public NotesController(INoteService noteService)\n        {\n            _noteService = noteService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddNote([FromBody] NoteDto dto)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _noteService.AddNoteAsync(businessId, dto);\n                return Ok(ResponseResult.SuccessInfo(\"Note created.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Error creating note\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"contact/{contactId}\")]\n        public async Task<IActionResult> GetNotesByContact(Guid contactId)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _noteService.GetNotesByContactAsync(businessId, contactId);\n                return Ok(ResponseResult.SuccessInfo(\"Notes loaded.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Error fetching notes\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetNoteById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _noteService.GetNoteByIdAsync(businessId, id);\n            if (result == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note loaded.\", result));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateNote(Guid id, [FromBody] NoteDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _noteService.UpdateNoteAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note updated.\"));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteNote(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _noteService.DeleteNoteAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note deleted.\"));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/RemindersController.cs",
      "sha256": "66418c8f0a9fa94a869653029f08e5c16243f5d8e83b36b884bb9c33d8448f29",
      "language": "csharp",
      "size": 3205,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RemindersController : ControllerBase\n    {\n        private readonly IReminderService _reminderService;\n\n        public RemindersController(IReminderService reminderService)\n        {\n            _reminderService = reminderService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddReminder(ReminderDto dto)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                if (dto == null)\n                    return BadRequest(ResponseResult.ErrorInfo(\"Reminder data is missing.\"));\n\n                var result = await _reminderService.AddReminderAsync(businessId, dto);\n                return Ok(ResponseResult.SuccessInfo(\"Reminder created.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"An error occurred while adding the reminder.\", ex.Message));\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllReminders()\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var reminders = await _reminderService.GetAllRemindersAsync(businessId);\n                return Ok(ResponseResult.SuccessInfo(\"Reminders loaded.\", reminders));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"An error occurred while fetching reminders.\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetReminderById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var reminder = await _reminderService.GetReminderByIdAsync(businessId, id);\n            if (reminder == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder loaded.\", reminder));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateReminder(Guid id, [FromBody] ReminderDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _reminderService.UpdateReminderAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder updated.\"));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteReminder(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _reminderService.DeleteReminderAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder deleted.\"));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Controllers/TagsController.cs",
      "sha256": "987b5679067710f05ca13825f2ae57be4ee9b4452a415b3b477bb0234956c6d9",
      "language": "csharp",
      "size": 1975,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Helpers; \nusing xbytechat.api.Shared;  \n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TagsController : ControllerBase\n    {\n        private readonly ITagService _tagService;\n\n        public TagsController(ITagService tagService)\n        {\n            _tagService = tagService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddTag([FromBody] TagDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _tagService.AddTagAsync(businessId, dto);\n            return Ok(ResponseResult.SuccessInfo(\"Tag created.\", result));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateTag(Guid id, [FromBody] TagDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _tagService.UpdateTagAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Tag not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Tag updated.\"));\n        }\n\n        [HttpGet(\"get-tags\")]\n        public async Task<IActionResult> GetAllTags()\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var tags = await _tagService.GetAllTagsAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"Tags loaded.\", tags));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteTag(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _tagService.DeleteTagAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Tag not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Tag deleted.\"));\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/AssignTagToContactsDto.cs",
      "sha256": "69c9b7fc83bbaf32fab62812c210f204eca0b723301878252850f6527f71a7f3",
      "language": "csharp",
      "size": 189,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class AssignTagToContactsDto\n    {\n        public List<Guid> ContactIds { get; set; } = new();\n        public Guid TagId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/BulkImportResultDto.cs",
      "sha256": "05392f5b522d34ba8069854727ab513053a529252f41be0f45e827f4df613eac",
      "language": "csharp",
      "size": 333,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class BulkImportResultDto\n    {\n        public int Imported { get; set; }\n        public List<CsvImportError> Errors { get; set; } = new();\n    }\n\n    public class CsvImportErrorMsg\n    {\n        public int RowNumber { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ContactDto.cs",
      "sha256": "218a964e202fd90d764b7a4deccc1466eb7d4d35cdb1472bf4a808c1304df08a",
      "language": "csharp",
      "size": 1199,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ContactDto\n    {\n        public Guid? Id { get; set; } // Nullable for Create (used in PUT)\n\n        public string Name { get; set; } // Contact full name\n\n        public string PhoneNumber { get; set; } // WhatsApp-compatible number\n\n        public string? Email { get; set; } // Optional email address\n\n        public string? LeadSource { get; set; } // e.g., \"WhatsApp\", \"Facebook\", \"Landing Page\"\n\n        public DateTime? LastContactedAt { get; set; } // Last WhatsApp or CRM interaction\n\n        public DateTime? NextFollowUpAt { get; set; } // For scheduling reminders\n\n        public string? Notes { get; set; } // Internal notes for the contact\n\n        public DateTime? CreatedAt { get; set; } // Read-only timestamp\n\n        // ‚úÖ NEW: Structured Tags (replaces comma-separated strings)\n        // Example: [{ id: 1, name: \"VIP\" }, { id: 2, name: \"Follow-up\" }]\n        public List<ContactTagDto> Tags { get; set; } = new();\n\n        public bool IsFavorite { get; set; } = false;\n        public bool IsArchived { get; set; } = false;\n        public string? Group { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ContactDtoCsvMap.cs",
      "sha256": "5dd22482c7625ce4ada21b1595015bd0273b921d8a5ac8787486b4f2ad874570",
      "language": "csharp",
      "size": 473,
      "content": "using CsvHelper.Configuration;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ContactDtoCsvMap : ClassMap<ContactDto>\n    {\n        public ContactDtoCsvMap()\n        {\n            Map(m => m.Name).Name(\"name\", \"Name\", \"full name\");\n            Map(m => m.PhoneNumber).Name(\"phone\", \"Phone\", \"mobile\", \"mobile number\");\n            Map(m => m.Email).Name(\"email\", \"Email\").Optional();\n            Map(m => m.Notes).Name(\"notes\", \"Notes\").Optional();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ContactTagDto.cs",
      "sha256": "4b81638e7806bd28b702637f4d9e379725b86e63045e558d2abbdc54663b7650",
      "language": "csharp",
      "size": 272,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class ContactTagDto\n    {\n        public Guid TagId { get; set; }\n        public string TagName { get; set; } = string.Empty;\n        public string? ColorHex { get; set; }\n        public string? Category { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/CsvImportResult.cs",
      "sha256": "7e0d39bb56ef6fa9d80f69f7c37ece658407016ae68b838cd425050ed5f31680",
      "language": "csharp",
      "size": 364,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class CsvImportResult<T>\n    {\n        public List<T> SuccessRecords { get; set; } = new();\n        public List<CsvImportError> Errors { get; set; } = new();\n    }\n\n    public class CsvImportError\n    {\n        public int RowNumber { get; set; }\n        public string ErrorMessage { get; set; } = string.Empty;\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/NoteDto.cs",
      "sha256": "a324df31b2679d4db34a15ec6a647792e8a9456a0684e01787d9baeff44f3c8f",
      "language": "csharp",
      "size": 515,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class NoteDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public string Source { get; set; }\n        public string CreatedBy { get; set; }\n        public bool IsPinned { get; set; }\n        public bool IsInternal { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? EditedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/PagedResult.cs",
      "sha256": "8219de3f57c89361d316f109fd9372741ed6702c71d6dfbe7d7850dbf3a585b7",
      "language": "csharp",
      "size": 342,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class PagedResult<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n\n        public int Page { get; set; }\n        public int PageSize { get; set; }\n        public int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/ReminderDto.cs",
      "sha256": "9d68d6f7f4b48cada2f4160bc381166930f0fdfb5212ad239fe27abf981f5d0f",
      "language": "csharp",
      "size": 946,
      "content": "using System;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ReminderDto\n    {\n        public Guid? Id { get; set; }  // Null when creating, present when updating\n\n        public Guid? ContactId { get; set; }\n\n        public string Title { get; set; } = default!;\n\n        public string? Description { get; set; }\n\n        public DateTime DueAt { get; set; }\n\n        public string? Status { get; set; } = \"Pending\";\n\n        public string? ReminderType { get; set; }\n\n        public int? Priority { get; set; }\n\n        public bool IsRecurring { get; set; }\n\n        public string? RecurrencePattern { get; set; }\n\n        public bool SendWhatsappNotification { get; set; }\n\n        public string? LinkedCampaign { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime? CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public DateTime? CompletedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Dtos/TagDto.cs",
      "sha256": "c13472528bbecc527f9c37b069e6b80729380492eb7126891fe189c354298a04",
      "language": "csharp",
      "size": 512,
      "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class TagDto\n    {\n        public Guid? Id { get; set; }\n\n        public string Name { get; set; } = default!;\n\n        public string? ColorHex { get; set; }\n\n        public string? Category { get; set; }\n\n        public string? Notes { get; set; }\n\n        public bool IsSystemTag { get; set; } = false;\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime? CreatedAt { get; set; }\n\n        public DateTime? LastUsedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/IContactService.cs",
      "sha256": "cd965fba71ad33d2cd884288f207914e0e6aa24233a777136295ed2ca86040d6",
      "language": "csharp",
      "size": 1835,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    /// <summary>\n    /// Defines the contract for all operations related to managing contacts.\n    /// </summary>\n    public interface IContactService\n    {\n\n        Task<ResponseResult> AddContactAsync(Guid businessId, ContactDto dto);\n        Task<ContactDto> GetContactByIdAsync(Guid businessId, Guid contactId);\n        Task<bool> UpdateContactAsync(Guid businessId, ContactDto dto);\n        Task<bool> DeleteContactAsync(Guid businessId, Guid contactId);\n        Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream);\n        Task<Contact> FindOrCreateAsync(Guid businessId, string phoneNumber);\n        Task<bool> ToggleFavoriteAsync(Guid businessId, Guid contactId);\n        Task<bool> ToggleArchiveAsync(Guid businessId, Guid contactId);\n        Task<IEnumerable<ContactDto>> GetAllContactsAsync(Guid businessId, string? tab = \"all\");\n        Task AssignTagToContactsAsync(Guid businessId, List<Guid> contactIds, Guid tagId);\n        Task<PagedResult<ContactDto>> GetPagedContactsAsync(\n             Guid businessId,\n             string? tab = \"all\",\n             int page = 1,\n             int pageSize = 25,\n             string? searchTerm = null\n            );\n        // ‚úÖ Tag-based filtering support\n        Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<Guid> tags);\n\n        Task<BulkImportResultDto> BulkImportAsync(Guid businessId, Stream csvStream);\n        // üìå New method to support flow node ‚Üí tag assignment\n        Task<bool> AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tags);\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/INoteService.cs",
      "sha256": "c7f3f36ea21a7508514c9054225df94aef67048fa1290fb84f860cd103764e87",
      "language": "csharp",
      "size": 687,
      "content": "using xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface INoteService\n    {\n        // For creating new note\n        Task<NoteDto> AddNoteAsync(Guid businessId, NoteDto dto);\n\n        // List all notes for dashboard view\n        Task<IEnumerable<NoteDto>> GetNotesByContactAsync(Guid businessId, Guid contactId);\n\n        // For loading note in edit mode\n        Task<NoteDto?> GetNoteByIdAsync(Guid businessId, Guid noteId);\n        // Handles editing\n        Task<bool> UpdateNoteAsync(Guid businessId, Guid noteId, NoteDto dto);\n        // Soft delete ‚Üí IsActive = false\n        Task<bool> DeleteNoteAsync(Guid businessId, Guid noteId);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/IReminderService.cs",
      "sha256": "b495104def7199c6e12aa28db2fad8c0c13dc551ab0cba0f8c0797361e14d8c3",
      "language": "csharp",
      "size": 806,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface IReminderService\n    {\n        //For creating new reminder\n        Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto);\n\n        //List all reminders for dashboard view\n        Task<IEnumerable<ReminderDto>> GetAllRemindersAsync(Guid businessId);\n\n        //For loading reminder in edit mode\n        Task<ReminderDto?> GetReminderByIdAsync(Guid businessId, Guid reminderId);\n\n        //Handles editing\n        Task<bool> UpdateReminderAsync(Guid businessId, Guid reminderId, ReminderDto dto);\n        //Soft delete ‚Üí IsActive = false\n        Task<bool> DeleteReminderAsync(Guid businessId, Guid reminderId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Interfaces/ITagService.cs",
      "sha256": "bf7f3ea814c33020416ac25cd9d3b6f600c58c7dc849701f93e8093bf2949681",
      "language": "csharp",
      "size": 633,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface ITagService\n    {\n        Task<TagDto> AddTagAsync(Guid businessId, TagDto dto);\n\n        Task<IEnumerable<TagDto>> GetAllTagsAsync(Guid businessId);\n        Task<bool> UpdateTagAsync(Guid businessId, Guid tagId, TagDto dto);\n        Task<bool> DeleteTagAsync(Guid businessId, Guid tagId);\n       // Task AssignTagAsync(Guid businessId, string phone, string tag);\n        Task AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tagNames);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Mappers/ContactDtoCsvMap.cs",
      "sha256": "41e1be6be963984ed9a757aa1575fd03a556851cdea04c287a91c4358696e166",
      "language": "csharp",
      "size": 387,
      "content": "using CsvHelper.Configuration;\nusing xbytechat.api.CRM.Dtos;\n\npublic sealed class ContactDtoCsvMap : ClassMap<ContactDto>\n{\n    public ContactDtoCsvMap()\n    {\n        Map(m => m.Name).Name(\"Name\");\n        Map(m => m.PhoneNumber).Name(\"Phone\");\n        Map(m => m.Email).Name(\"Email\");\n        Map(m => m.LeadSource).Name(\"LeadSource\");\n        Map(m => m.Notes).Name(\"Notes\");\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Mappers/NoteMapper.cs",
      "sha256": "e26b6156b9aca01214bd18633cce4bee5e8ce187f220ff8857ab6c496e4fb933",
      "language": "csharp",
      "size": 1238,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Mappers\n{\n    public static class NoteMapper\n    {\n        public static NoteDto MapToDto(Note note)\n        {\n            return new NoteDto\n            {\n                Id = note.Id,\n                ContactId = note.ContactId,\n                Title = note.Title,\n                Content = note.Content,\n                Source = note.Source,\n                CreatedBy = note.CreatedBy,\n                IsPinned = note.IsPinned,\n                IsInternal = note.IsInternal,\n                CreatedAt = note.CreatedAt,\n                EditedAt = note.EditedAt\n            };\n        }\n\n        public static Note MapToEntity(NoteDto dto, Guid businessId)\n        {\n            return new Note\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                Title = dto.Title,\n                Content = dto.Content,\n                Source = dto.Source,\n                CreatedBy = dto.CreatedBy,\n                IsPinned = dto.IsPinned,\n                IsInternal = dto.IsInternal,\n                CreatedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Mappers/ReminderMapper.cs",
      "sha256": "53c9d6d5cbdcb101f0bfc0225af4e6afc6b29111d75fb565263bf55135999e2d",
      "language": "csharp",
      "size": 865,
      "content": "namespace xbytechat.api.CRM.Mappers\n{\n    using xbytechat.api.CRM.Models;\n    using xbytechat.api.CRM.Dtos;\n\n    public static class ReminderMapper\n    {\n        public static ReminderDto MapToDto(Reminder r)\n        {\n            return new ReminderDto\n            {\n                Id = r.Id,\n                Title = r.Title,\n                Description = r.Description,\n                DueAt = r.DueAt,\n                ReminderType = r.ReminderType,\n                Priority = r.Priority,\n                IsRecurring = r.IsRecurring,\n                RecurrencePattern = r.RecurrencePattern,\n                SendWhatsappNotification = r.SendWhatsappNotification,\n                LinkedCampaign = r.LinkedCampaign,\n                Status = r.Status,\n                CreatedAt = r.CreatedAt,\n                ContactId = r.ContactId\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/Contact.cs",
      "sha256": "3d14b66f4de55b9c4de89fedbfd11849b1856950b7b87af1f6dda1771ac640da",
      "language": "csharp",
      "size": 2035,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Contact\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; } = null!;\n        // üîó FK to Business\n        [Required]\n        [MaxLength(100)]\n        public string Name { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PhoneNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? Email { get; set; }\n\n        [MaxLength(50)]\n        public string? LeadSource { get; set; }\n\n        [MaxLength(200)]\n        public string? Tags { get; set; } // Legacy, will be deprecated after ContactTag rollout\n\n        public DateTime? LastContactedAt { get; set; }\n        public DateTime? NextFollowUpAt { get; set; }\n\n        [MaxLength(500)]\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // üß© NEW: Link to Tags\n        public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>();\n        // ‚úÖ New: Navigation property for many-to-many tags\n        //public ICollection<ContactTag> TagsLink { get; set; } = new List<ContactTag>();\n\n        public DateTime? LastCTAInteraction { get; set; }\n        public string? LastCTAType { get; set; }\n        public Guid? LastClickedProductId { get; set; }\n\n        // üö¶ If true, skip automation flows (manually or programmatically paused)\n        public bool IsAutomationPaused { get; set; } = false;\n\n        // üë§ If agent assigned, automation should pause (runtime check)\n        public Guid? AssignedAgentId { get; set; }\n\n        public bool IsFavorite { get; set; } = false;\n        public bool IsArchived { get; set; } = false;\n        public string? Group { get; set; }\n        public bool IsActive { get; set; } = true;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/ContactTag.cs",
      "sha256": "422118f780b163abab39572c97ce858dcf1288cc05ae98138b8bdb3dc4329322",
      "language": "csharp",
      "size": 501,
      "content": "using System.ComponentModel.DataAnnotations;\nusing xbytechat.api.CRM.Models;\n\npublic class ContactTag\n{\n    [Key]\n    public Guid Id { get; set; }\n\n    [Required]\n    public Guid ContactId { get; set; }\n\n    public Contact Contact { get; set; }\n\n    [Required]\n    public Guid TagId { get; set; }\n\n    public Tag Tag { get; set; }\n\n    [Required]\n    public Guid BusinessId { get; set; }\n\n    public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n\n    public string? AssignedBy { get; set; }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/Note.cs",
      "sha256": "200a2bd5f7ef4bb6ed3fa7cf3dc7403ea1b2e236a843b985dfc1c02c4fe75112",
      "language": "csharp",
      "size": 914,
      "content": "namespace xbytechat.api.CRM.Models\n{\n    public class Note\n    {\n        public Guid Id { get; set; }\n\n        // üîó Ownership & Association\n        public Guid? BusinessId { get; set; }\n        public Guid? ContactId { get; set; }\n\n        // üìù Core Content\n        public string Title { get; set; } // Optional short title (for pinning or preview)\n        public string Content { get; set; }\n\n        // üîñ Contextual Intelligence\n        public string Source { get; set; } // e.g., \"Manual\", \"Call Log\", \"WhatsApp\", \"LeadForm\"\n        public string CreatedBy { get; set; } // Store agent/user name or userId\n\n        // üìå UX Flags\n        public bool IsPinned { get; set; } = false;\n        public bool IsInternal { get; set; } = false; // if true, only visible to team\n\n        // üïì Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? EditedAt { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Models/Reminder.cs",
      "sha256": "bc1e21ef857422a3ea4524863c8adefe038dc7cd43c474ae463ca6ca5379a830",
      "language": "csharp",
      "size": 1719,
      "content": "using System;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Reminder\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }   // For multi-tenant isolation\n\n        public Guid ContactId { get; set; }    // Which contact this reminder is for\n\n        public string Title { get; set; } = default!; // Main reminder title (e.g., \"Call back about invoice\")\n\n        public string? Description { get; set; } // Longer notes, optional (for internal detail)\n\n        public DateTime DueAt { get; set; }    // When reminder should notify\n\n        public string Status { get; set; } = \"Pending\"; // \"Pending\", \"Done\", \"Overdue\"\n\n        public string? ReminderType { get; set; } // e.g., \"Call\", \"Email\", \"Follow-up\", \"Meeting\"\n\n        public int? Priority { get; set; } // e.g., 1 (High), 2 (Medium), 3 (Low)\n\n        public bool IsRecurring { get; set; } = false; // For future ‚Üí repeat reminder\n\n        public string? RecurrencePattern { get; set; } // e.g., \"Weekly\", \"Monthly\" (optional)\n\n        public bool SendWhatsappNotification { get; set; } = false; // Future: auto-WA message trigger\n\n        public string? LinkedCampaign { get; set; } // Optional: which campaign this reminder relates to\n\n        public bool IsActive { get; set; } = true;  // Soft delete support\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public DateTime? CompletedAt { get; set; } // Track when it was marked Done\n\n        public string? LastCTAType { get; set; } // e.g., Confirm, Reschedule\n        public DateTime? LastClickedAt { get; set; }\n        public bool FollowUpSent { get; set; } = false;\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Models/Tag.cs",
      "sha256": "e654598a682f6c55d536da4b9e18ace295abe7d611603fd18eaf61f4a5baff54",
      "language": "csharp",
      "size": 1108,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Tag\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }             // Multi-tenant isolation\n\n        public string Name { get; set; } = default!;     // e.g., \"VIP\", \"Follow-up\"\n\n        public string? ColorHex { get; set; }            // For UI tag styling (e.g., #FF5733)\n\n        public string? Category { get; set; }            // e.g., \"Priority\", \"Campaign\", \"Stage\"\n\n        public string? Notes { get; set; }               // Admin/internal notes about this tag\n\n        public bool IsSystemTag { get; set; } = false;   // Reserved tags like \"New\", \"Subscribed\"\n\n        public bool IsActive { get; set; } = true;       // For soft-deactivation (future bulk ops)\n\n        public DateTime CreatedAt { get; set; }          // For analytics / sorting\n\n        public DateTime? LastUsedAt { get; set; }        // Useful for CRM insights later\n\n        public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>(); // Linked contacts\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/ContactService.cs",
      "sha256": "8d878c77a65acb2340d4f634b9cc4c3ca3906e9569553273b32450293c27ea6f",
      "language": "csharp",
      "size": 36933,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing CsvHelper;\nusing CsvHelper.Configuration;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class ContactService : IContactService\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<ContactService> _logger;\n\n        public ContactService(AppDbContext db, ILogger<ContactService> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        //public async Task<ContactDto> AddContactAsync(Guid businessId, ContactDto dto)\n        //{\n        //    _logger.LogInformation(\"AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n        //    var contact = new Contact\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = businessId,\n        //        Name = dto.Name,\n        //        PhoneNumber = dto.PhoneNumber,\n        //        Email = dto.Email,\n        //        LeadSource = dto.LeadSource,\n        //        LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n        //        NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n        //        Notes = dto.Notes,\n        //        CreatedAt = DateTime.UtcNow,\n        //        IsFavorite = dto.IsFavorite,\n        //        IsArchived = dto.IsArchived,\n        //        Group = dto.Group\n        //    };\n\n        //    if (dto.Tags != null && dto.Tags.Any())\n        //    {\n        //        contact.ContactTags = dto.Tags.Select(t => new ContactTag\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            ContactId = contact.Id,\n        //            TagId = t.TagId,\n        //            BusinessId = businessId,\n        //            AssignedAt = DateTime.UtcNow,\n        //            AssignedBy = \"system\"\n        //        }).ToList();\n        //    }\n\n        //    _db.Contacts.Add(contact);\n\n        //    try\n        //    {\n        //        await _db.SaveChangesAsync();\n        //        _logger.LogInformation(\"Contact added: {ContactId} for businessId={BusinessId}\", contact.Id, businessId);\n        //    }\n        //    catch (DbUpdateException ex)\n        //    {\n        //        _logger.LogError(ex, \"DB error in AddContactAsync (Contact: {Contact}, BusinessId={BusinessId})\", contact, businessId);\n        //        var innerMessage = ex.InnerException?.Message ?? ex.Message;\n        //        throw new Exception(\"‚ùå DB save error (Contact): \" + innerMessage, ex);\n        //    }\n\n        //    return new ContactDto\n        //    {\n        //        Id = contact.Id,\n        //        Name = contact.Name,\n        //        PhoneNumber = contact.PhoneNumber,\n        //        Email = contact.Email,\n        //        LeadSource = contact.LeadSource,\n        //        LastContactedAt = contact.LastContactedAt,\n        //        NextFollowUpAt = contact.NextFollowUpAt,\n        //        Notes = contact.Notes,\n        //        CreatedAt = contact.CreatedAt,\n        //        Tags = dto.Tags ?? new List<ContactTagDto>()\n        //    };\n        //}\n\n        //public async Task<ResponseResult> AddContactAsync(Guid businessId, ContactDto dto)\n        //{\n        //    _logger.LogInformation(\"üì© AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n        //    try\n        //    {\n        //        // 1. Duplicate check\n        //        if (!string.IsNullOrWhiteSpace(dto.PhoneNumber))\n        //        {\n        //            var existingContact = await _db.Contacts.FirstOrDefaultAsync(c =>\n        //                c.BusinessId == businessId && c.PhoneNumber == dto.PhoneNumber);\n\n        //            if (existingContact != null)\n        //            {\n        //                _logger.LogWarning(\"‚ö†Ô∏è Duplicate contact attempt for phone {Phone}\", dto.PhoneNumber);\n        //                return ResponseResult.ErrorInfo(\n        //                    $\"‚ùå A contact with the phone number '{dto.PhoneNumber}' already exists.\"\n        //                );\n        //            }\n        //        }\n\n        //        // 2. Build entity\n        //        var contact = new Contact\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = businessId,\n        //            Name = dto.Name,\n        //            PhoneNumber = dto.PhoneNumber,\n        //            Email = dto.Email,\n        //            LeadSource = dto.LeadSource,\n        //            LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n        //            NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n        //            Notes = dto.Notes,\n        //            CreatedAt = DateTime.UtcNow,\n        //            IsFavorite = dto.IsFavorite,\n        //            IsArchived = dto.IsArchived,\n        //            Group = dto.Group\n        //        };\n\n        //        // 3. Tags mapping\n        //        if (dto.Tags != null && dto.Tags.Any())\n        //        {\n        //            contact.ContactTags = dto.Tags.Select(t => new ContactTag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                ContactId = contact.Id,\n        //                TagId = t.TagId,\n        //                BusinessId = businessId,\n        //                AssignedAt = DateTime.UtcNow,\n        //                AssignedBy = \"system\"\n        //            }).ToList();\n        //        }\n\n        //        _db.Contacts.Add(contact);\n\n        //        // 4. Save\n        //        try\n        //        {\n        //            await _db.SaveChangesAsync();\n        //            _logger.LogInformation(\"‚úÖ Contact added successfully: {ContactId} (BusinessId={BusinessId})\", contact.Id, businessId);\n        //        }\n        //        catch (DbUpdateException ex)\n        //        {\n        //            _logger.LogError(ex, \"‚ùå DB error in AddContactAsync (BusinessId={BusinessId})\", businessId);\n        //            var innerMessage = ex.InnerException?.Message ?? ex.Message;\n        //            return ResponseResult.ErrorInfo(\"‚ùå Database save error (Contact): \" + innerMessage);\n        //        }\n\n        //        // 5. Map back to DTO\n        //        var resultDto = new ContactDto\n        //        {\n        //            Id = contact.Id,\n        //            Name = contact.Name,\n        //            PhoneNumber = contact.PhoneNumber,\n        //            Email = contact.Email,\n        //            LeadSource = contact.LeadSource,\n        //            LastContactedAt = contact.LastContactedAt,\n        //            NextFollowUpAt = contact.NextFollowUpAt,\n        //            Notes = contact.Notes,\n        //            CreatedAt = contact.CreatedAt,\n        //            IsFavorite = contact.IsFavorite,\n        //            IsArchived = contact.IsArchived,\n        //            Group = contact.Group,\n        //            Tags = dto.Tags ?? new List<ContactTagDto>()\n        //        };\n\n        //        return ResponseResult.SuccessInfo(\"‚úÖ Contact created successfully.\", resultDto);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"üö® Unexpected error in AddContactAsync (BusinessId={BusinessId})\", businessId);\n        //        return ResponseResult.ErrorInfo(\"üö® A server error occurred while creating the contact.\", ex.Message);\n        //    }\n        //}\n\n        public async Task<ResponseResult> AddContactAsync(Guid businessId, ContactDto dto)\n        {\n            _logger.LogInformation(\"üì© AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n            try\n            {\n                // 1. Normalize the phone number using your private method first.\n                var normalizedPhone = NormalizePhone(dto.PhoneNumber);\n\n                // 2. Validate the normalized number.\n                // Your NormalizePhone method returns an empty string for invalid numbers.\n                if (string.IsNullOrWhiteSpace(normalizedPhone))\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå Phone number is invalid. It must contain exactly 10 digits.\");\n                }\n\n                // 3. Use the clean, normalized number for the duplicate check.\n                var existingContact = await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.BusinessId == businessId && c.PhoneNumber == normalizedPhone);\n\n                if (existingContact != null)\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è Duplicate contact attempt for phone {Phone}\", dto.PhoneNumber);\n                    return ResponseResult.ErrorInfo(\n                        $\"‚ùå A contact with the phone number '{dto.PhoneNumber}' already exists.\"\n                    );\n                }\n\n                // 4. Build the new contact entity, SAVING the normalized number.\n                var contact = new Contact\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = dto.Name,\n                    PhoneNumber = normalizedPhone, // Save the standardized number\n                    Email = dto.Email,\n                    LeadSource = dto.LeadSource,\n                    LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n                    NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n                    Notes = dto.Notes,\n                    CreatedAt = DateTime.UtcNow,\n                    IsFavorite = dto.IsFavorite,\n                    IsArchived = dto.IsArchived,\n                    Group = dto.Group\n                };\n\n                // Map tags if they are provided\n                if (dto.Tags != null && dto.Tags.Any())\n                {\n                    contact.ContactTags = dto.Tags.Select(t => new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        ContactId = contact.Id,\n                        TagId = t.TagId,\n                        BusinessId = businessId,\n                        AssignedAt = DateTime.UtcNow,\n                        AssignedBy = \"system\"\n                    }).ToList();\n                }\n\n                _db.Contacts.Add(contact);\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"‚úÖ Contact added successfully: {ContactId}\", contact.Id);\n\n                // Map the created entity back to a DTO for the response\n                var resultDto = new ContactDto\n                {\n                    Id = contact.Id,\n                    Name = contact.Name,\n                    PhoneNumber = contact.PhoneNumber,\n                    Email = contact.Email,\n                    LeadSource = contact.LeadSource,\n                    CreatedAt = contact.CreatedAt,\n                    Tags = contact.ContactTags?.Select(ct => new ContactTagDto { TagId = ct.TagId }).ToList() ?? new List<ContactTagDto>()\n                };\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Contact created successfully.\", resultDto);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"üö® Unexpected error in AddContactAsync for business {BusinessId}\", businessId);\n                return ResponseResult.ErrorInfo(\"üö® A server error occurred while creating the contact.\", ex.Message);\n            }\n        }\n        public async Task<ContactDto> GetContactByIdAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"GetContactByIdAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts\n                     .Where(c => c.BusinessId == businessId && c.Id == contactId && c.IsActive)\n                    .Include(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync();\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return null;\n                }\n\n                return new ContactDto\n                {\n                    Id = contact.Id,\n                    Name = contact.Name,\n                    PhoneNumber = contact.PhoneNumber,\n                    Email = contact.Email,\n                    LeadSource = contact.LeadSource,\n                    LastContactedAt = contact.LastContactedAt,\n                    NextFollowUpAt = contact.NextFollowUpAt,\n                    Notes = contact.Notes,\n                    CreatedAt = contact.CreatedAt,\n                    Tags = contact.ContactTags?\n                        .Where(ct => ct.Tag != null)\n                        .Select(ct => new ContactTagDto\n                        {\n                            TagId = ct.TagId,\n                            TagName = ct.Tag.Name\n                        })\n                        .ToList() ?? new List<ContactTagDto>()\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error fetching contact by id: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task<bool> UpdateContactAsync(Guid businessId, ContactDto dto)\n        {\n            _logger.LogInformation(\"UpdateContactAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n            try\n            {\n                var contact = await _db.Contacts\n                    .Include(c => c.ContactTags)\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == dto.Id);\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for update: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n                    return false;\n                }\n\n                contact.Name = dto.Name;\n                contact.PhoneNumber = dto.PhoneNumber;\n                contact.Email = dto.Email;\n                contact.LeadSource = dto.LeadSource;\n                contact.LastContactedAt = dto.LastContactedAt?.ToUniversalTime();\n                contact.NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime();\n                contact.Notes = dto.Notes;\n\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact updated: {ContactId}\", contact.Id);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error updating contact: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n                throw;\n            }\n        }\n\n        public async Task<bool> DeleteContactAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"DeleteContactAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId && c.IsActive);\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for delete: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsActive = false; // üëà Soft delete\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact soft-deleted: {ContactId}\", contactId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error deleting contact: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        \n        public async Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream)\n        {\n            _logger.LogInformation(\"ParseCsvToContactsAsync: businessId={BusinessId}\", businessId);\n\n            var result = new CsvImportResult<ContactDto>();\n\n            var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n            {\n                HeaderValidated = null,\n                MissingFieldFound = null\n            };\n\n            using var reader = new StreamReader(csvStream);\n            using var csv = new CsvReader(reader, config);\n\n            // Register custom column mapping for ContactDto\n            csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n            int rowNumber = 1;\n\n            await csv.ReadAsync();     // Move to first row\n            csv.ReadHeader();          // Read header row\n\n            while (await csv.ReadAsync())\n            {\n                rowNumber++;\n                try\n                {\n                    var record = csv.GetRecord<ContactDto>();\n                    record.CreatedAt = DateTime.UtcNow;\n\n                    result.SuccessRecords.Add(record);\n                }\n                catch (Exception ex)\n                {\n                    // Avoid ambiguity by using explicit object instantiation\n                    var error = new CsvImportError\n                    {\n                        RowNumber = rowNumber,\n                        ErrorMessage = ex.Message\n                    };\n                    result.Errors.Add(error);\n                }\n            }\n\n            _logger.LogInformation(\"CSV parsed with {SuccessCount} successes and {ErrorCount} errors.\",\n                result.SuccessRecords.Count, result.Errors.Count);\n\n            return result;\n        }\n\n        //private string NormalizePhone(string phoneNumber)\n        //{\n        //    if (string.IsNullOrWhiteSpace(phoneNumber))\n        //        return phoneNumber;\n\n        //    var digits = new string(phoneNumber.Where(char.IsDigit).ToArray());\n\n        //    // If it starts with \"91\" and length = 12 ‚Üí add +\n        //    if (digits.StartsWith(\"91\") && digits.Length == 12)\n        //        return \"+\" + digits;\n\n        //    // If it starts with \"91\" and length = 10 (missing country code) ‚Üí add +91\n        //    if (digits.Length == 10)\n        //        return \"+91\" + digits;\n\n        //    // If it already includes country code with + (13 digits for India)\n        //    if (digits.StartsWith(\"91\") && digits.Length == 12)\n        //        return \"+\" + digits;\n\n        //    // Fallback ‚Üí return with +\n        //    if (!digits.StartsWith(\"+\"))\n        //        return \"+\" + digits;\n\n        //    return digits;\n        //}\n\n        private string NormalizePhone(string phoneNumber)\n        {\n            // 1. Handle empty or null input\n            if (string.IsNullOrWhiteSpace(phoneNumber))\n            {\n                return string.Empty;\n            }\n\n            // 2. Extract only the numeric digits from the string\n            var digits = new string(phoneNumber.Where(char.IsDigit).ToArray());\n\n            // 3. If the number starts with India's country code (91) and is 12 digits long,\n            //    strip the country code to get the core 10-digit number.\n            if (digits.StartsWith(\"91\") && digits.Length == 12)\n            {\n                digits = digits.Substring(2);\n            }\n\n            // 4. NEW: Strictly validate that the result is 10 digits long.\n            if (digits.Length != 10)\n            {\n                // If the number of digits is not exactly 10, it's invalid.\n                // Return an empty string to signal that it could not be normalized.\n                return string.Empty;\n            }\n\n            // 5. If the number is a valid 10 digits, return it in the standard +91 format.\n            return \"+91\" + digits;\n        }\n        public async Task<Contact> FindOrCreateAsync(Guid businessId, string phoneNumber)\n        {\n            var normalized = NormalizePhone(phoneNumber);\n            _logger.LogInformation(\"FindOrCreateAsync: businessId={BusinessId}, rawPhone={PhoneNumber}, normalized={Normalized}\",\n                businessId, phoneNumber, normalized);\n\n            try\n            {\n                var contact = await _db.Contacts\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == normalized);\n\n                if (contact != null)\n                {\n                    _logger.LogInformation(\"Contact already exists: contactId={ContactId}\", contact.Id);\n                    return contact;\n                }\n\n                var newContact = new Contact\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = \"WhatsApp User\",\n                    PhoneNumber = normalized,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _db.Contacts.Add(newContact);\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact created: {ContactId}\", newContact.Id);\n\n                return newContact;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in FindOrCreateAsync: businessId={BusinessId}, phoneNumber={PhoneNumber}\", businessId, phoneNumber);\n                throw;\n            }\n        }\n\n        public async Task<bool> ToggleFavoriteAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"ToggleFavoriteAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for favorite toggle: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsFavorite = !contact.IsFavorite;\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact favorite toggled: {ContactId} -> {IsFavorite}\", contactId, contact.IsFavorite);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error toggling favorite: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task AssignTagToContactsAsync(Guid businessId, List<Guid> contactIds, Guid tagId)\n        {\n            _logger.LogInformation(\"AssignTagToContactsAsync: businessId={BusinessId}, tagId={TagId}, contactIds={ContactIds}\", businessId, tagId, contactIds);\n            try\n            {\n                var contacts = await _db.Contacts\n                    .Where(c => c.BusinessId == businessId && contactIds.Contains(c.Id))\n                    .Include(c => c.ContactTags)\n                    .ToListAsync();\n\n                foreach (var contact in contacts)\n                {\n                    bool alreadyAssigned = contact.ContactTags.Any(link => link.TagId == tagId);\n                    if (!alreadyAssigned)\n                    {\n                        contact.ContactTags.Add(new ContactTag\n                        {\n                            ContactId = contact.Id,\n                            TagId = tagId\n                        });\n                    }\n                }\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Tags assigned to contacts\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error assigning tag: businessId={BusinessId}, tagId={TagId}\", businessId, tagId);\n                throw;\n            }\n        }\n\n        public async Task<bool> ToggleArchiveAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"ToggleArchiveAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for archive toggle: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsArchived = !contact.IsArchived;\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact archive toggled: {ContactId} -> {IsArchived}\", contactId, contact.IsArchived);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error toggling archive: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task<IEnumerable<ContactDto>> GetAllContactsAsync(Guid businessId, string? tab = \"all\")\n        {\n            _logger.LogInformation(\"GetAllContactsAsync: businessId={BusinessId}, tab={Tab}\", businessId, tab);\n            try\n            {\n                var baseQuery = _db.Contacts\n                    .Where(c => c.BusinessId == businessId && c.IsActive);\n\n                if (tab == \"favourites\")\n                    baseQuery = baseQuery.Where(c => c.IsFavorite);\n                else if (tab == \"archived\")\n                    baseQuery = baseQuery.Where(c => c.IsArchived);\n                else if (tab == \"groups\")\n                    baseQuery = baseQuery.Where(c => !string.IsNullOrEmpty(c.Group));\n\n                var query = baseQuery\n                    .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag);\n\n                var contacts = await query.ToListAsync();\n\n                var result = contacts.Select(c => new ContactDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    PhoneNumber = c.PhoneNumber,\n                    Email = c.Email,\n                    LeadSource = c.LeadSource,\n                    LastContactedAt = c.LastContactedAt,\n                    NextFollowUpAt = c.NextFollowUpAt,\n                    Notes = c.Notes,\n                    CreatedAt = c.CreatedAt,\n                    IsFavorite = c.IsFavorite,\n                    IsArchived = c.IsArchived,\n                    Group = c.Group,\n                    Tags = c.ContactTags?\n                        .Where(ct => ct.Tag != null)\n                        .Select(ct => new ContactTagDto\n                        {\n                            TagId = ct.TagId,\n                            TagName = ct.Tag.Name,\n                            ColorHex = ct.Tag.ColorHex,\n                            Category = ct.Tag.Category\n                        })\n                        .ToList() ?? new List<ContactTagDto>()\n                });\n\n                _logger.LogInformation(\"GetAllContactsAsync returned {Count} contacts\", contacts.Count);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in GetAllContactsAsync: businessId={BusinessId}\", businessId);\n                throw;\n            }\n        }\n        public async Task<PagedResult<ContactDto>> GetPagedContactsAsync(Guid businessId, string? tab, int page, int pageSize, string? searchTerm)\n        {\n            _logger.LogInformation(\"GetPagedContactsAsync: businessId={BusinessId}, tab={Tab}, page={Page}, pageSize={PageSize}\",\n                businessId, tab, page, pageSize);\n\n            if (page < 1) page = 1;\n            if (pageSize < 1) pageSize = 25;\n            if (pageSize > 100) pageSize = 100; // max limit\n\n            var baseQuery = _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.IsActive);\n\n            if (tab == \"favourites\")\n                baseQuery = baseQuery.Where(c => c.IsFavorite);\n            else if (tab == \"archived\")\n                baseQuery = baseQuery.Where(c => c.IsArchived);\n            else if (tab == \"groups\")\n                baseQuery = baseQuery.Where(c => !string.IsNullOrEmpty(c.Group));\n\n            var totalCount = await baseQuery.CountAsync();\n\n            var contacts = await baseQuery\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag)\n                .OrderBy(c => c.Name) // or any order preferred\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .ToListAsync();\n\n            var items = contacts.Select(c => new ContactDto\n            {\n                Id = c.Id,\n                Name = c.Name,\n                PhoneNumber = c.PhoneNumber,\n                Email = c.Email,\n                LeadSource = c.LeadSource,\n                LastContactedAt = c.LastContactedAt,\n                NextFollowUpAt = c.NextFollowUpAt,\n                Notes = c.Notes,\n                CreatedAt = c.CreatedAt,\n                IsFavorite = c.IsFavorite,\n                IsArchived = c.IsArchived,\n                Group = c.Group,\n                Tags = c.ContactTags?\n                    .Where(ct => ct.Tag != null)\n                    .Select(ct => new ContactTagDto\n                    {\n                        TagId = ct.TagId,\n                        TagName = ct.Tag.Name,\n                        ColorHex = ct.Tag.ColorHex,\n                        Category = ct.Tag.Category\n                    })\n                    .ToList() ?? new List<ContactTagDto>()\n            }).ToList();\n\n            return new PagedResult<ContactDto>\n            {\n                Items = items,\n                TotalCount = totalCount\n            };\n        }\n\n        public async Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<string> tags)\n        {\n            var contacts = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && !c.IsArchived)\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag)\n                .Where(c => c.ContactTags.Any(ct => tags.Contains(ct.Tag.Name))) // üîç Filter by tag names\n                .OrderBy(c => c.Name)\n                .Select(c => new ContactDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    PhoneNumber = c.PhoneNumber,\n                    Email = c.Email,\n                    Notes = c.Notes,\n                    Tags = c.ContactTags.Select(ct => new ContactTagDto\n                    {\n                        TagId = ct.Tag.Id,\n                        TagName = ct.Tag.Name,\n                        ColorHex = ct.Tag.ColorHex,\n                        Category = ct.Tag.Category\n                    }).ToList()\n                })\n                .ToListAsync();\n\n            return contacts;\n        }\n        public async Task<BulkImportResultDto> BulkImportAsync(Guid businessId, Stream csvStream)\n        {\n            _logger.LogInformation(\"Bulk import started for businessId={BusinessId}\", businessId);\n\n            var result = new BulkImportResultDto();\n            var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n            {\n                HeaderValidated = null,\n                MissingFieldFound = null\n            };\n\n            using var reader = new StreamReader(csvStream);\n            using var csv = new CsvReader(reader, config);\n            csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n            await csv.ReadAsync();\n            csv.ReadHeader();\n\n            var contactsToAdd = new List<Contact>();\n            int row = 1;\n\n            while (await csv.ReadAsync())\n            {\n                row++;\n                try\n                {\n                    var dto = csv.GetRecord<ContactDto>();\n                    if (string.IsNullOrWhiteSpace(dto.PhoneNumber)) continue;\n\n                    var contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        Name = dto.Name?.Trim() ?? \"Unnamed\",\n                        PhoneNumber = dto.PhoneNumber.Trim(),\n                        Email = dto.Email?.Trim(),\n                        Notes = dto.Notes,\n                        BusinessId = businessId,\n                        CreatedAt = DateTime.UtcNow\n                    };\n\n                    contactsToAdd.Add(contact);\n                    result.Imported++;\n                }\n                catch (Exception ex)\n                {\n                    result.Errors.Add(new CsvImportError\n                    {\n                        RowNumber = row,\n                        ErrorMessage = ex.Message\n                    });\n                }\n            }\n\n            await _db.Contacts.AddRangeAsync(contactsToAdd);\n            await _db.SaveChangesAsync();\n\n            _logger.LogInformation(\"Bulk import completed: {Imported} contacts, {Errors} errors\",\n                result.Imported, result.Errors.Count);\n\n            return result;\n        }\n        public async Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<Guid> tagIds)\n        {\n            // Step 1: Prepare base query (without Include yet)\n            var baseQuery = _db.Contacts\n                .Where(c => c.BusinessId == businessId && !c.IsArchived);\n\n            // Step 2: Apply tag filter only if tagIds are provided\n            if (tagIds?.Any() == true)\n            {\n                baseQuery = baseQuery.Where(c =>\n                    c.ContactTags.Any(ct =>\n                        tagIds.Contains(ct.TagId)\n                    )\n                );\n            }\n\n            // Step 3: Add Includes after filtering to avoid cast issue\n            var queryWithIncludes = baseQuery\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag);\n\n            // Step 4: Fetch data\n            var contacts = await queryWithIncludes.ToListAsync();\n\n            // Step 5: Project to DTO\n            return contacts.Select(c => new ContactDto\n            {\n                Id = c.Id,\n                Name = c.Name,\n                PhoneNumber = c.PhoneNumber,\n                Tags = c.ContactTags.Select(ct => new ContactTagDto\n                {\n                    TagId = ct.Tag.Id,\n                    TagName = ct.Tag.Name,\n                    ColorHex = ct.Tag.ColorHex,\n                    Category = ct.Tag.Category\n                }).ToList()\n            });\n        }\n        public async Task<bool> AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tags)\n        {\n            if (tags == null || tags.Count == 0)\n                return false;\n\n            // üß† Step 1: Find the contact by phone\n            var contact = await _db.Contacts\n                .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber && !c.IsArchived);\n\n            if (contact == null)\n                return false;\n\n            foreach (var tagName in tags)\n            {\n                if (string.IsNullOrWhiteSpace(tagName))\n                    continue;\n\n                // ‚úÖ Step 2: Find or create the tag (by name)\n                var tag = await _db.Tags\n                    .FirstOrDefaultAsync(t => t.BusinessId == businessId && t.Name == tagName && t.IsActive);\n\n                if (tag == null)\n                {\n                    tag = new Tag\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = tagName,\n                        ColorHex = \"#8c8c8c\", // default gray if not assigned\n                        IsActive = true,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    _db.Tags.Add(tag);\n                }\n\n                // üß™ Step 3: Check if contact already has this tag\n                var alreadyTagged = await _db.ContactTags.AnyAsync(ct =>\n                    ct.ContactId == contact.Id && ct.TagId == tag.Id);\n\n                if (!alreadyTagged)\n                {\n                    _db.ContactTags.Add(new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        ContactId = contact.Id,\n                        TagId = tag.Id\n                    });\n                }\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/IPermissionService.cs.cs",
      "sha256": "336362e66dcb2a7882cb5cd48537a7105d5c7460adea2dfe2f6e563f57d6bb1a",
      "language": "csharp",
      "size": 338,
      "content": "using xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public interface IPermissionService\n    {\n       // Task<IEnumerable<object>> GetGroupedPermissionsAsync();\n        Task<IEnumerable<GroupedPermissionDto>> GetGroupedPermissionsAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/NoteService.cs",
      "sha256": "b2087e02e5275e90dced5ed8e2b0c1cffcbca20c8c11ad2c68fe22cad1adb2fc",
      "language": "csharp",
      "size": 4411,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Mappers;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Services;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class NoteService : INoteService\n    {\n        private readonly AppDbContext _db;\n        private readonly ITimelineService _timelineService; // ‚úÖ Injected Timeline Service\n\n        // ‚úÖ Constructor: Inject AppDbContext + TimelineService\n        public NoteService(AppDbContext db, ITimelineService timelineService)\n        {\n            _db = db;\n            _timelineService = timelineService;\n        }\n\n        // üìù Add a new Note + Log into LeadTimeline\n        public async Task<NoteDto> AddNoteAsync(Guid businessId, NoteDto dto)\n        {\n            // 1Ô∏è‚É£ Map incoming DTO to Note entity\n            var note = NoteMapper.MapToEntity(dto, businessId);\n\n            // 2Ô∏è‚É£ Save the Note into database\n            _db.Notes.Add(note);\n            await _db.SaveChangesAsync();\n\n            // 3Ô∏è‚É£ Log this Note creation into LeadTimeline (only if ContactId is present)\n            if (dto.ContactId.HasValue)\n            {\n                try\n                {\n                    await _timelineService.LogNoteAddedAsync(new CRMTimelineLogDto\n                    {\n                        ContactId = dto.ContactId.Value,       // ‚ûî Which contact the note is related to\n                        BusinessId = businessId,               // ‚ûî Which business created this\n                        EventType = \"NoteAdded\",                // ‚ûî Timeline event type\n                        Description = $\"üìù Note added: {dto.Title ?? \"(Untitled)\"}\", // ‚ûî Friendly description\n                        ReferenceId = note.Id,                  // ‚ûî Link back to Note Id\n                        CreatedBy = dto.CreatedBy,              // ‚ûî Who created it\n                        Timestamp = DateTime.UtcNow             // ‚ûî When created\n                    });\n                }\n                catch (Exception ex)\n                {\n                    // üõ° Timeline saving failure should not break note creation\n                    Console.WriteLine($\"‚ö†Ô∏è Timeline log failed for NoteId {note.Id}: {ex.Message}\");\n                }\n            }\n\n            // 4Ô∏è‚É£ Return the saved note as DTO\n            return NoteMapper.MapToDto(note);\n        }\n\n        // üìã List all Notes by Contact\n        public async Task<IEnumerable<NoteDto>> GetNotesByContactAsync(Guid businessId, Guid contactId)\n        {\n            return await _db.Notes\n                .AsNoTracking()\n                .Where(n => n.BusinessId == businessId && n.ContactId == contactId)\n                .OrderByDescending(n => n.CreatedAt)\n                .Select(n => NoteMapper.MapToDto(n))\n                .ToListAsync();\n        }\n\n        // üìã Get a single Note by Id\n        public async Task<NoteDto?> GetNoteByIdAsync(Guid businessId, Guid noteId)\n        {\n            var note = await _db.Notes\n                .AsNoTracking()\n                .FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n\n            return note == null ? null : NoteMapper.MapToDto(note);\n        }\n\n        // ‚úèÔ∏è Update an existing Note\n        public async Task<bool> UpdateNoteAsync(Guid businessId, Guid noteId, NoteDto dto)\n        {\n            var note = await _db.Notes.FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n            if (note == null) return false;\n\n            note.Title = dto.Title;\n            note.Content = dto.Content;\n            note.IsPinned = dto.IsPinned;\n            note.IsInternal = dto.IsInternal;\n            note.EditedAt = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc); // Always UTC timestamp\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        // üóëÔ∏è Soft delete (actually remove) a Note\n        public async Task<bool> DeleteNoteAsync(Guid businessId, Guid noteId)\n        {\n            var note = await _db.Notes.FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n            if (note == null) return false;\n\n            _db.Notes.Remove(note);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/PermissionService.cs",
      "sha256": "a3b02a9b61aceffef079138a9d8df67bb6973a51a233b2538f82bb1096a184cc",
      "language": "csharp",
      "size": 999,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class PermissionService : IPermissionService\n    {\n        private readonly AppDbContext _context;\n\n        public PermissionService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<IEnumerable<GroupedPermissionDto>> GetGroupedPermissionsAsync()\n        {\n            return await _context.Permissions\n                .Where(p => p.IsActive)\n                .GroupBy(p => p.Group ?? \"Ungrouped\")\n                .Select(g => new GroupedPermissionDto\n                {\n                    Group = g.Key,\n                    Features = g.ToList()\n                })\n                .ToListAsync();\n        }\n       \n\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/CRM/Services/ReminderService.cs",
      "sha256": "3ad4d8d834b958a925554f6aadbc8360ec657324fee3f939680f3c37df7076a0",
      "language": "csharp",
      "size": 5904,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Mappers;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class ReminderService : IReminderService\n    {\n        private readonly AppDbContext _db;\n\n        public ReminderService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        //public async Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto)\n        //{\n        //    var reminder = new Reminder\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = businessId,\n        //        //ContactId = dto.ContactId,\n        //        Title = dto.Title,\n        //        Description = dto.Description,\n        //        DueAt = dto.DueAt,\n        //        Status = dto.Status ?? \"Pending\",\n        //        ReminderType = dto.ReminderType,\n        //        Priority = dto.Priority,\n        //        IsRecurring = dto.IsRecurring,\n        //        RecurrencePattern = dto.RecurrencePattern,\n        //        SendWhatsappNotification = dto.SendWhatsappNotification,\n        //        LinkedCampaign = dto.LinkedCampaign,\n        //        CreatedAt = DateTime.UtcNow,\n        //        IsActive = true\n        //    };\n\n        //    _db.Reminders.Add(reminder);\n        //    await _db.SaveChangesAsync();\n\n        //    return MapToDto(reminder);\n        //}\n        public async Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto)\n        {\n            try\n            {\n                var reminder = new Reminder\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = dto.ContactId ?? Guid.Empty, // add default fallback\n                    Title = dto.Title,\n                    Description = dto.Description,\n                    DueAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc),\n                    Status = dto.Status ?? \"Pending\",\n                    ReminderType = dto.ReminderType,\n                    Priority = dto.Priority,\n                    IsRecurring = dto.IsRecurring,\n                    RecurrencePattern = dto.RecurrencePattern,\n                    SendWhatsappNotification = dto.SendWhatsappNotification,\n                    LinkedCampaign = dto.LinkedCampaign,\n                    CreatedAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc),\n                    IsActive = true\n                };\n\n                _db.Reminders.Add(reminder);\n                await _db.SaveChangesAsync();\n\n                return MapToDto(reminder);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error in AddReminderAsync: \" + ex.Message);\n                throw;\n            }\n        }\n\n        public async Task<IEnumerable<ReminderDto>> GetAllRemindersAsync(Guid businessId)\n        {\n            return await _db.Reminders\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.DueAt)\n                .Select(r => ReminderMapper.MapToDto(r))\n                .ToListAsync();\n        }\n\n\n        public async Task<ReminderDto?> GetReminderByIdAsync(Guid businessId, Guid reminderId)\n        {\n            var reminder = await _db.Reminders\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n\n            return reminder == null ? null : MapToDto(reminder);\n        }\n\n        public async Task<bool> UpdateReminderAsync(Guid businessId, Guid reminderId, ReminderDto dto)\n        {\n            var reminder = await _db.Reminders.FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n            if (reminder == null) return false;\n\n            reminder.Title = dto.Title;\n            reminder.Description = dto.Description;\n            reminder.DueAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc);\n            reminder.Status = dto.Status ?? reminder.Status;\n            reminder.ReminderType = dto.ReminderType;\n            reminder.Priority = dto.Priority;\n            reminder.IsRecurring = dto.IsRecurring;\n            reminder.RecurrencePattern = dto.RecurrencePattern;\n            reminder.SendWhatsappNotification = dto.SendWhatsappNotification;\n            reminder.LinkedCampaign = dto.LinkedCampaign;\n            reminder.UpdatedAt = DateTime.UtcNow;\n\n            if (dto.Status?.ToLower() == \"done\")\n                reminder.CompletedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteReminderAsync(Guid businessId, Guid reminderId)\n        {\n            var reminder = await _db.Reminders.FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n            if (reminder == null) return false;\n\n            reminder.IsActive = false;\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        private ReminderDto MapToDto(Reminder r)\n        {\n            return new ReminderDto\n            {\n                Id = r.Id,\n                ContactId = r.ContactId,\n                Title = r.Title,\n                Description = r.Description,\n                DueAt = r.DueAt,\n                Status = r.Status,\n                ReminderType = r.ReminderType,\n                Priority = r.Priority,\n                IsRecurring = r.IsRecurring,\n                RecurrencePattern = r.RecurrencePattern,\n                SendWhatsappNotification = r.SendWhatsappNotification,\n                LinkedCampaign = r.LinkedCampaign,\n                CreatedAt = r.CreatedAt,\n                UpdatedAt = r.UpdatedAt,\n                CompletedAt = r.CompletedAt,\n                IsActive = r.IsActive\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/CRM/Services/TagService.cs",
      "sha256": "e6319aeaf570d7b97052cbcabccb0de70ab4649b141cea3a48e625b620caa0c1",
      "language": "csharp",
      "size": 8676,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Services;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class TagService : ITagService\n    {\n        private readonly AppDbContext _db;\n        private readonly ITimelineService _timelineService; // ‚úÖ Injected TimelineService\n        private readonly ILogger<TagService> _logger;\n        public TagService(AppDbContext db, ITimelineService timelineService, ILogger<TagService> logger)\n        {\n            _db = db;\n            _timelineService = timelineService;\n            _logger = logger;\n        }\n\n        public async Task<TagDto> AddTagAsync(Guid businessId, TagDto dto)\n        {\n            var tag = new Tag\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = dto.Name,\n                ColorHex = dto.ColorHex,\n                Category = dto.Category,\n                Notes = dto.Notes,\n                IsSystemTag = dto.IsSystemTag,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow,\n                LastUsedAt = null\n            };\n\n            _db.Tags.Add(tag);\n            await _db.SaveChangesAsync();\n\n            // ‚úÖ After saving tag ‚Üí try logging into Timeline (non-blocking)\n            try\n            {\n                await _timelineService.LogTagAppliedAsync(new CRMTimelineLogDto\n                {\n                    ContactId = Guid.Empty,    // ‚û°Ô∏è No specific contact, general event\n                    BusinessId = businessId,\n                    EventType = \"TagCreated\",\n                    Description = $\"üè∑Ô∏è New tag created: {dto.Name}\",\n                    ReferenceId = tag.Id,\n                    CreatedBy = \"System\",\n                    Timestamp = DateTime.UtcNow,\n                    Category = \"CRM\"\n                });\n            }\n            catch (Exception ex)\n            {\n                // üõ° Fail-safe: Do not block tag creation if timeline fails\n                Console.WriteLine($\"‚ö†Ô∏è Timeline log failed for TagId {tag.Id}: {ex.Message}\");\n            }\n\n            return new TagDto\n            {\n                Id = tag.Id,\n                Name = tag.Name,\n                ColorHex = tag.ColorHex,\n                Category = tag.Category,\n                Notes = tag.Notes,\n                IsSystemTag = tag.IsSystemTag,\n                IsActive = tag.IsActive,\n                CreatedAt = tag.CreatedAt,\n                LastUsedAt = tag.LastUsedAt\n            };\n        }\n\n        public async Task<IEnumerable<TagDto>> GetAllTagsAsync(Guid businessId)\n        {\n            return await _db.Tags\n                .Where(t => t.BusinessId == businessId && t.IsActive)\n                .OrderByDescending(t => t.CreatedAt)\n                .Select(t => new TagDto\n                {\n                    Id = t.Id,\n                    Name = t.Name,\n                    ColorHex = t.ColorHex,\n                    Category = t.Category,\n                    Notes = t.Notes,\n                    IsSystemTag = t.IsSystemTag,\n                    IsActive = t.IsActive,\n                    CreatedAt = t.CreatedAt,\n                    LastUsedAt = t.LastUsedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<bool> UpdateTagAsync(Guid businessId, Guid tagId, TagDto dto)\n        {\n            var tag = await _db.Tags.FirstOrDefaultAsync(t => t.Id == tagId && t.BusinessId == businessId);\n            if (tag == null) return false;\n\n            tag.Name = dto.Name;\n            tag.ColorHex = dto.ColorHex;\n            tag.Category = dto.Category;\n            tag.Notes = dto.Notes;\n            tag.IsSystemTag = dto.IsSystemTag;\n            tag.IsActive = dto.IsActive;\n            tag.LastUsedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteTagAsync(Guid businessId, Guid tagId)\n        {\n            var tag = await _db.Tags.FirstOrDefaultAsync(t => t.Id == tagId && t.BusinessId == businessId);\n            if (tag == null) return false;\n\n            tag.IsActive = false;\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        //public async Task AssignTagAsync(Guid businessId, string phone, string tag)\n        //{\n        //    try\n        //    {\n        //        // ‚úÖ Step 1: Lookup contact\n        //        var contact = await _db.Contacts\n        //            .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phone);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Contact not found for phone: {Phone}\", phone);\n        //            return;\n        //        }\n\n        //        // ‚úÖ Step 2: Check if tag exists\n        //        var existingTag = await _db.Tags\n        //            .FirstOrDefaultAsync(t => t.BusinessId == businessId && t.Name == tag);\n\n        //        if (existingTag == null)\n        //        {\n        //            existingTag = new Tag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Name = tag,\n        //                CreatedAt = DateTime.UtcNow\n        //            };\n\n        //            await _db.Tags.AddAsync(existingTag);\n        //        }\n\n        //        // ‚úÖ Step 3: Associate tag with contact if not already\n        //        var alreadyTagged = await _db.ContactTags\n        //            .AnyAsync(ct => ct.ContactId == contact.Id && ct.TagId == existingTag.Id);\n\n        //        if (!alreadyTagged)\n        //        {\n        //            await _db.ContactTags.AddAsync(new ContactTag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                ContactId = contact.Id,\n        //                TagId = existingTag.Id,\n        //                AssignedAt = DateTime.UtcNow\n        //            });\n\n        //            _logger.LogInformation(\"üè∑ Tag '{Tag}' assigned to contact {ContactId}\", tag, contact.Id);\n        //        }\n\n        //        await _db.SaveChangesAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"‚ùå Error assigning tag to contact.\");\n        //        throw;\n        //    }\n        //}\n        public async Task AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tagNames)\n        {\n            if (tagNames == null || !tagNames.Any())\n                return;\n\n            // üîç Fetch the contact and existing tag links\n            var contact = await _db.Contacts\n             .Include(c => c.ContactTags)\n             .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber);\n\n\n            if (contact == null) return;\n\n            var existingTagIds = contact.ContactTags.Select(t => t.TagId).ToHashSet();\n\n            // üîç Ensure tags exist or create them\n            var tags = await _db.Tags\n                .Where(t => t.BusinessId == businessId && tagNames.Contains(t.Name))\n                .ToListAsync();\n\n            var existingNames = tags.Select(t => t.Name).ToHashSet(StringComparer.OrdinalIgnoreCase);\n            var missingNames = tagNames.Where(t => !existingNames.Contains(t)).Distinct().ToList();\n\n            foreach (var name in missingNames)\n            {\n                var newTag = new Tag\n                {\n                    Id = Guid.NewGuid(),\n                    Name = name,\n                    BusinessId = businessId,\n                    CreatedAt = DateTime.UtcNow\n                };\n                _db.Tags.Add(newTag);\n                tags.Add(newTag);\n            }\n\n            await _db.SaveChangesAsync(); // Save new tags before linking\n\n            // ‚úÖ Link new tags to contact\n            foreach (var tag in tags)\n            {\n                if (!existingTagIds.Contains(tag.Id))\n                {\n                    contact.ContactTags.Add(new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        TagId = tag.Id,\n                        ContactId = contact.Id,\n                        BusinessId = businessId,\n                        AssignedAt = DateTime.UtcNow,\n                        AssignedBy = \"automation\" // optional: set to flow name\n                    });\n                }\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
    }
  ]
}
