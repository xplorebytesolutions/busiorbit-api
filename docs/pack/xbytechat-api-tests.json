{
  "name": "xbytechat.api.Tests",
  "generatedAt": "2025-08-11 14:00:55 +00:00",
  "files": [
    {
      "path": "xbytechat.api.Tests/GlobalUsings.cs",
      "sha256": "e8de9b91579ba661cbfebd3912328c2dc917d2a519cc565b717446c7f39e6d33",
      "language": "csharp",
      "size": 19,
      "content": "global using Xunit;"
    },
    {
      "path": "xbytechat.api.Tests/Services/ContactServiceTests.cs",
      "sha256": "bcfde56fde1c9181ec689605d776a040579d145a8bbc9dad95a559d4c1167c96",
      "language": "csharp",
      "size": 6839,
      "content": "using System;\nusing System.Threading.Tasks;\nusing FluentAssertions;\nusing Microsoft.EntityFrameworkCore;\nusing Xunit;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.CRM.Services;\n\n\nnamespace xbytechat.api.Tests.Services\n{\n    public class ContactServiceTests\n    {\n        private readonly DbContextOptions<AppDbContext> _dbOptions;\n\n        public ContactServiceTests()\n        {\n            _dbOptions = new DbContextOptionsBuilder<AppDbContext>()\n                .UseInMemoryDatabase(databaseName: $\"ContactTestDb_{Guid.NewGuid()}\")\n                .Options;\n        }\n\n        [Fact]\n        public async Task AddContactAsync_ShouldAddNewContact()\n        {\n            // Arrange\n            var businessId = Guid.NewGuid();\n            var dto = new ContactDto\n            {\n                Name = \"John Tester\",\n                PhoneNumber = \"9876543210\",\n                Email = \"john@example.com\",\n                LeadSource = \"WhatsApp\",\n                Tags = \"lead,new\"\n            };\n\n            using var context = new AppDbContext(_dbOptions);\n            var service = new ContactService(context);\n\n            // Act\n            var result = await service.AddContactAsync(businessId, dto);\n\n            // Assert\n            result.Should().NotBeNull();\n            result.Name.Should().Be(\"John Tester\");\n            result.PhoneNumber.Should().Be(\"9876543210\");\n\n            var saved = await context.Contacts.FirstOrDefaultAsync();\n            saved.Should().NotBeNull();\n            saved.BusinessId.Should().Be(businessId);\n            saved.Email.Should().Be(\"john@example.com\");\n        }\n\n        [Fact]\n        public async Task GetAllContactsAsync_ShouldReturnAllContactsForBusiness()\n        {\n            // Arrange\n            var businessId1 = Guid.NewGuid();\n            var businessId2 = Guid.NewGuid();\n\n            var contact1 = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId1,\n                Name = \"Alice\",\n                PhoneNumber = \"1111111111\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var contact2 = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId1,\n                Name = \"Bob\",\n                PhoneNumber = \"2222222222\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var contactOtherBusiness = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId2,\n                Name = \"Charlie\",\n                PhoneNumber = \"3333333333\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            using (var context = new AppDbContext(_dbOptions))\n            {\n                await context.Contacts.AddRangeAsync(contact1, contact2, contactOtherBusiness);\n                await context.SaveChangesAsync();\n            }\n\n            using (var context = new AppDbContext(_dbOptions))\n            {\n                var service = new ContactService(context);\n\n                // Act\n                var result = await service.GetAllContactsAsync(businessId1);\n\n                // Assert\n                result.Should().NotBeNull();\n                result.Should().HaveCount(2);\n                result.Should().OnlyContain(c => c.PhoneNumber == \"1111111111\" || c.PhoneNumber == \"2222222222\");\n            }\n        }\n\n        [Fact]\n        public async Task UpdateContactAsync_ShouldUpdateFields()\n        {\n            // Arrange\n            var businessId = Guid.NewGuid();\n            var originalContact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Old Name\",\n                PhoneNumber = \"9999999999\",\n                Email = \"old@example.com\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            using (var context = new AppDbContext(_dbOptions))\n            {\n                // Seed the original contact into the database\n                await context.Contacts.AddAsync(originalContact);\n                await context.SaveChangesAsync();\n            }\n\n            // Create a DTO with updated data to simulate what frontend sends\n            var updatedDto = new ContactDto\n            {\n                Id = originalContact.Id,\n                Name = \"New Name\",\n                PhoneNumber = \"1234567890\",\n                Email = \"new@example.com\",\n                LeadSource = \"Google\",\n                Tags = \"priority,updated\",\n                LastContactedAt = DateTime.UtcNow,\n                Notes = \"This is a test update\"\n            };\n\n            using (var context = new AppDbContext(_dbOptions))\n            {\n                var service = new ContactService(context);\n\n                // Act: Call the update method\n                var success = await service.UpdateContactAsync(businessId, updatedDto);\n\n                // Assert 1: Ensure the method returns true\n                success.Should().BeTrue();\n\n                // Fetch the updated contact\n\n\n            }\n        }\n\n\n        // Step 1: Seed the DB with one contact to delete\n        // This simulates a real record in the system\n        // Step 2: Call the DeleteContactAsync method from the service\n        // This should remove the record with the matching ID + BusinessId\n        // Step 3: Assert deletion was successful (true returned)\n        // Then re-query the DB to ensure the contact no longer exists\n\n        [Fact]\n        public async Task DeleteContactAsync_ShouldRemoveRecord()\n        {\n            // Arrange\n            var businessId = Guid.NewGuid();\n            var contactToDelete = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Delete Me\",\n                PhoneNumber = \"7777777777\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            using (var context = new AppDbContext(_dbOptions))\n            {\n                // Add the contact to the in-memory DB\n                await context.Contacts.AddAsync(contactToDelete);\n                await context.SaveChangesAsync();\n            }\n\n            using (var context = new AppDbContext(_dbOptions))\n            {\n                var service = new ContactService(context);\n\n                // Act: Attempt to delete the contact\n                var result = await service.DeleteContactAsync(businessId, contactToDelete.Id);\n\n                // Assert 1: Deletion should return true\n                result.Should().BeTrue();\n\n                // Assert 2: Contact should not exist in the database anymore\n                var deleted = await context.Contacts.FindAsync(contactToDelete.Id);\n                deleted.Should().BeNull();\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat.api.Tests/UnitTest1.cs",
      "sha256": "e4887eea12465555ff9b67daf8fdc27a4c56145330fb3efbecafe9cf58cee3c6",
      "language": "csharp",
      "size": 688,
      "content": "using System.Net.Http;\nusing System.Threading.Tasks;\nusing Xunit;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing Microsoft.VisualStudio.TestPlatform.TestHost;\n\nnamespace xbytechat.api.Tests\n{\n    public class ProductApiTests : IClassFixture<WebApplicationFactory<Program>>\n    {\n        private readonly HttpClient _client;\n\n        public ProductApiTests(WebApplicationFactory<Program> factory)\n        {\n            _client = factory.CreateClient();\n        }\n\n        [Fact]\n        public async Task GetAllProducts_ShouldReturnSuccess()\n        {\n            var response = await _client.GetAsync(\"/api/products\");\n            response.EnsureSuccessStatusCode();\n\n\n        }\n \n    }\n}\n"
    },
    {
      "path": "xbytechat.api.Tests/xbytechat.api.Tests.csproj",
      "sha256": "3bae7ce510c3b41d574b03a977a14157b4a8b8423132a3a503b8a70026e67ada",
      "language": "text",
      "size": 1336,
      "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"UnitTest1.cs\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"FluentAssertions\" Version=\"8.2.0\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" Version=\"8.0.15\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"8.0.15\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"6.0.0\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\xbytechat-api\\xbytechat.api.csproj\" />\n  </ItemGroup>\n\n</Project>\n"
    }
  ]
}
