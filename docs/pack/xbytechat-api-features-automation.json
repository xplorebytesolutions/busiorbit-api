{
  "name": "xbytechat-api/Features/Automation",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/Automation/Config/ChoiceConfig.cs",
      "sha256": "0d09e0bc40325856d625ab31e93694e661b6df532e5de78f2a55254783e40c1c",
      "language": "csharp",
      "size": 354,
      "content": "namespace xbytechat.api.Features.Automation.Config\n{\n    public class ChoiceConfig\n    {\n        public List<ChoiceCondition> Conditions { get; set; } = new();\n        public string FallbackNodeId { get; set; }\n    }\n\n    public class ChoiceCondition\n    {\n        public string Match { get; set; }\n        public string NextNodeId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/MessageConfig.cs",
      "sha256": "564fbd35e79d9ef3f8b48ed54e15d55a9d0226b7d6ea72315d81b562a7a4ecae",
      "language": "csharp",
      "size": 225,
      "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Future: Add support for media, buttons, templates\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/TagNodeConfig.cs",
      "sha256": "81144c1418ba70285c6af13bf7aee6346f8f6674416ffc9ab79614bceb3be4d0",
      "language": "csharp",
      "size": 197,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/WaitConfig.cs",
      "sha256": "d13667732f9e18370123b10c2881aa385e8d11a33bc01acaf0f7eb96f4903bd6",
      "language": "csharp",
      "size": 170,
      "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 2; // Default wait time\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Controllers/AutomationController.cs",
      "sha256": "3a2f3e472a351808592f6357f3e907d20c118e1e0f86f035a76e49697013e4ff",
      "language": "csharp",
      "size": 2144,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Automation.DTOs;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Controllers\n{\n    [ApiController]\n    [Route(\"api/automation\")]\n    [Authorize]\n    public class AutomationController : ControllerBase\n    {\n        private readonly IAutomationFlowRepository _automationRepository;\n        private readonly IAutomationRunner _automationRunner;\n        private readonly IContactService _contactService;\n\n        public AutomationController(\n            IAutomationFlowRepository automationRepository,\n            IAutomationRunner automationRunner,\n            IContactService contactService)\n        {\n            _automationRepository = automationRepository;\n            _automationRunner = automationRunner;\n            _contactService = contactService;\n        }\n\n        [HttpPost(\"trigger\")]\n        public async Task<IActionResult> TriggerByKeyword([FromBody] AutomationTriggerRequest request)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n\n            if (string.IsNullOrWhiteSpace(request.Keyword) || string.IsNullOrWhiteSpace(request.Phone))\n                return BadRequest(\"Keyword and phone are required.\");\n\n            var flow = await _automationRepository.GetFlowByKeywordAsync(businessId, request.Keyword);\n            if (flow == null || !flow.IsActive)\n                return NotFound(\"⚠️ No matching active automation flow found.\");\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, request.Phone);\n\n            var result = await _automationRunner.RunFlowAsync(\n                flow,\n                businessId,\n                contact.Id,\n                request.Phone,\n                request.SourceChannel ?? \"manual\",\n                request.IndustryTag ?? \"manual\"\n            );\n\n            return Ok(result);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/AutomationEdgeDto.cs",
      "sha256": "d9093a43a35fa0c12238f7c78daec3980190c4160320cfe73c6b93ff2d41c5ce",
      "language": "csharp",
      "size": 450,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    /// <summary>\n    /// Represents a connection (edge) between two automation nodes.\n    /// </summary>\n    public class AutomationEdgeDto\n    {\n        public Guid SourceNodeId { get; set; }\n\n        public Guid TargetNodeId { get; set; }\n\n        public string? Condition { get; set; }  // Optional: for future conditional routing (e.g., \"if clicked\", \"if not responded\")\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/AutomationTriggerRequest.cs",
      "sha256": "aeca572a0bab580b70dddd50cb6f4e1b282f17508311aaeb9beaefef34d8fa46",
      "language": "csharp",
      "size": 296,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class AutomationTriggerRequest\n    {\n        public string Keyword { get; set; }\n\n        public string Phone { get; set; }\n\n        public string? SourceChannel { get; set; }\n\n        public string? IndustryTag { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/MessageNodeConfig.cs",
      "sha256": "8fdadb2bb6457b35ed85d89655b1f6d1d9bc5028a0ec212d9dd7eaa70b1a8e0d",
      "language": "csharp",
      "size": 218,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class MessageNodeConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Optional: Later you can add buttons, media, etc.\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/TagNodeConfig.cs",
      "sha256": "2feaf9902643a6bb0e59b019cfca34a41ada3abf9f66afffcac065c6bb545b6c",
      "language": "csharp",
      "size": 199,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    public class TagNodeConfig\n    {\n        public List<Guid> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/WaitNodeConfig.cs",
      "sha256": "f520007158ae72db229b2a23f437666e64d34fcc96cdd728ad57a4320f152b75",
      "language": "csharp",
      "size": 143,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class WaitNodeConfig\n    {\n        public int Seconds { get; set; } = 3;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlow.cs",
      "sha256": "7dd5063615cfa824960a08fdd88d9fdf500a3c0461151b27e09fcaa7d97b45fe",
      "language": "csharp",
      "size": 803,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents a saved automation flow with nodes and edges.\n    /// </summary>\n    public class AutomationFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n\n        public string TriggerKeyword { get; set; } = string.Empty; // ✅ Better naming\n\n        public string NodesJson { get; set; } = \"[]\";\n\n        public string EdgesJson { get; set; } = \"[]\";\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowEdge.cs",
      "sha256": "ad1f63ff8580807f996a658e2a95652c94370929e8dd75eac9f1fdc98c398105",
      "language": "csharp",
      "size": 280,
      "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowEdge\n    {\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string? Condition { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowNode.cs",
      "sha256": "c18876f0d4c8fdf851da8df67ddff902fee66217b804a6765a9b533f8402e76d",
      "language": "csharp",
      "size": 354,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowNode\n    {\n        public string Id { get; set; } = Guid.NewGuid().ToString(\"N\");\n        public string Label { get; set; } = string.Empty;\n        public NodeTypeEnum NodeType { get; set; }\n        public string ConfigJson { get; set; } = \"{}\";\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowRunResult.cs",
      "sha256": "61407553e4f66fbfdc8c0a51868372170e58411cd6c74e857e8e9cab13e27b6b",
      "language": "csharp",
      "size": 403,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } = null;\n\n        public string? Notes { get; set; }  // Optional: track execution info (e.g., exit reason)\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/FlowExecutionContext.cs",
      "sha256": "aef2132567e314889ae4d98f06dd96c43873ab3513b6c02cd8553346e3e7ff57",
      "language": "csharp",
      "size": 523,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Context required to run an automation flow.\n    /// </summary>\n    public class FlowExecutionContext\n    {\n        public AutomationFlow Flow { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        public string ContactPhone { get; set; }\n\n        public string SourceChannel { get; set; } = \"manual\";\n\n        public string IndustryTag { get; set; } = \"manual\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/FlowRunResult.cs",
      "sha256": "64baa95c50dc4528fa36e8ad36a12ac82a0528c8c640797d16b58e17455d6125",
      "language": "csharp",
      "size": 345,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents the result of running an automation flow.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } // If agent handoff requested\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/NodeConfigs.cs",
      "sha256": "0e8b3fb72dd676ec59568e34b569e1302a621a35a6efca4553736f89b15b21c4",
      "language": "csharp",
      "size": 167,
      "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/NodeTypeEnum.cs",
      "sha256": "ac2b60c1ffd633136ef56df710b0cf7f141496e92e30cd1c4bd42f201f4d85d3",
      "language": "csharp",
      "size": 223,
      "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public enum NodeTypeEnum\n    {\n        Message,\n        Wait,\n        Tag,\n        AgentHandoff,\n        Choice,\n        Condition,\n        Loop,\n        End\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/TagNodeConfig.cs",
      "sha256": "9cec10f188aea021e4b186075bf0f84e18cb4071046ade7098c2658d077559f5",
      "language": "csharp",
      "size": 201,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/WaitConfig.cs",
      "sha256": "641533b56ae811de7505263f827bc5f89cc405f67645b053fd06737f1e5fa621",
      "language": "csharp",
      "size": 153,
      "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 1;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Repositories/AutomationFlowRepository.cs",
      "sha256": "0e6a38673480db7c067e41901c2725f6c93683975ffaacfdcefb67bcfe90820e",
      "language": "csharp",
      "size": 3297,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public class AutomationFlowRepository : IAutomationFlowRepository\n    {\n        private readonly AppDbContext _db;\n\n        public AutomationFlowRepository(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                    f.BusinessId == businessId &&\n                    f.TriggerKeyword.ToLower() == keyword.ToLower() &&\n                    f.IsActive);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderBy(f => f.Name)\n                .ToListAsync();\n        }\n\n        public async Task<AutomationFlow> CreateAsync(AutomationFlow flow)\n        {\n            flow.Id = Guid.NewGuid();\n            flow.CreatedAt = DateTime.UtcNow;\n            flow.IsActive = true;\n\n            _db.AutomationFlows.Add(flow);\n            await _db.SaveChangesAsync();\n            return flow;\n        }\n\n        public async Task<AutomationFlow> UpdateAsync(AutomationFlow flow)\n        {\n            var existing = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flow.Id && f.BusinessId == flow.BusinessId && f.IsActive);\n\n            if (existing == null)\n                throw new KeyNotFoundException(\"Automation flow not found.\");\n\n            existing.Name = flow.Name;\n            existing.TriggerKeyword = flow.TriggerKeyword;\n            existing.NodesJson = flow.NodesJson;\n            existing.EdgesJson = flow.EdgesJson;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(existing);\n            await _db.SaveChangesAsync();\n\n            return existing;\n        }\n\n        public async Task<bool> DeleteAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null)\n                return false;\n\n            flow.IsActive = false;\n            flow.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(flow);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                f.BusinessId == businessId &&\n                EF.Functions.ILike(f.TriggerKeyword, keyword) &&\n                f.IsActive);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Repositories/IAutomationFlowRepository.cs",
      "sha256": "3c0e87413a797f0b2cb7de16b419204f9f84555fd58a4435ca5bffc5f570b2fe",
      "language": "csharp",
      "size": 1022,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public interface IAutomationFlowRepository\n    {\n        // 🔍 Get flow by unique FlowId + BusinessId (strict filtering)\n        Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n\n        // 🔍 Get flow by keyword for auto-trigger\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // 📋 List all flows for business\n        Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId);\n\n        // ➕ Create flow\n        Task<AutomationFlow> CreateAsync(AutomationFlow flow);\n\n        // ✏️ Update flow\n        Task<AutomationFlow> UpdateAsync(AutomationFlow flow);\n\n        // ❌ Delete flow\n        Task<bool> DeleteAsync(Guid flowId, Guid businessId);\n        Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword);\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/AutomationRunner.cs",
      "sha256": "3f1cb7807540e05fcd7092da474d3784a3f5c6065fd4c98ca22abc2753b97765",
      "language": "csharp",
      "size": 12633,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Models.Configs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.Automation.Config;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationRunner : IAutomationRunner\n    {\n        private readonly IMessageEngineService _messageService;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationRunner> _logger;\n        private readonly AppDbContext _appDbContext;\n        public AutomationRunner(\n            IMessageEngineService messageService,\n            IContactService contactService,\n            ILogger<AutomationRunner> logger, AppDbContext appDbContext)\n        {\n            _messageService = messageService;\n            _contactService = contactService;\n            _logger = logger;\n            _appDbContext = appDbContext;\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string contactPhone,\n            string sourceChannel,\n            string industryTag)\n        {\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var result = new AutomationFlowRunResult();\n            var currentNode = nodes.FirstOrDefault(); // Start from first node\n\n            if (currentNode == null)\n            {\n                _logger.LogWarning(\"🚫 Flow has no start node.\");\n                result.NeedsAgent = true;\n                result.Notes = \"No start node found.\";\n                return result;\n            }\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"➡️ Running node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        _logger.LogInformation(\"📤 Sending message: {Text}\", msgCfg.Text);\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"⏳ Waiting {Seconds}s\", waitCfg.Seconds);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"🏷️ Assigning tags: {Tags}\", string.Join(\", \", tagCfg.Tags));\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.AgentHandoff:\n                        result.NeedsAgent = true;\n                        if (Guid.TryParse(currentNode.Id, out var parsedId))\n                        {\n                            result.HandoffNodeId = parsedId;\n                        }\n                        else\n                        {\n                            _logger.LogWarning(\"⚠️ Invalid node ID format for AgentHandoff node: {Id}\", currentNode.Id);\n                            result.HandoffNodeId = null;\n                        }\n                        result.Notes = \"Flow routed to human agent.\";\n                        return result;\n\n                    case NodeTypeEnum.End:\n                        _logger.LogInformation(\"✅ End node reached.\");\n                        currentNode = null;\n                        continue;\n\n                    case NodeTypeEnum.Choice:\n                        _logger.LogInformation(\"🧠 Reached Choice node. Saving session state to wait for user input...\");\n\n                        var session = await _appDbContext.ChatSessionStates.FirstOrDefaultAsync(s =>\n                            s.BusinessId == businessId && s.ContactId == contactId);\n\n                        if (session == null)\n                        {\n                            session = new ChatSessionState\n                            {\n                                Id = Guid.NewGuid(),\n                                BusinessId = businessId,\n                                ContactId = contactId\n                            };\n                            _appDbContext.ChatSessionStates.Add(session);\n                        }\n\n                        session.Mode = \"awaiting_choice\";\n                        session.UpdatedBy = currentNode.Id.ToString();\n                        session.LastUpdatedAt = DateTime.UtcNow;\n\n                        await _appDbContext.SaveChangesAsync();\n\n                        result.Notes = \"Choice node reached. Flow paused.\";\n                        return result;\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            result.Notes = \"Flow completed.\";\n            return result;\n        }\n        public async Task<AutomationFlowRunResult> ResumeFlowAsync(\n           Guid businessId,\n           Guid contactId,\n           string contactPhone,\n           string incomingMessage)\n        {\n            var session = await _appDbContext.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (session == null || session.Mode != \"awaiting_choice\")\n            {\n                _logger.LogWarning(\"❌ No active automation session found or mode not awaiting_choice.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active automation session.\" };\n            }\n\n            var flow = await _appDbContext.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderByDescending(f => f.UpdatedAt)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n            {\n                _logger.LogWarning(\"❌ No active automation flow found for business.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active flow found.\" };\n            }\n\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var choiceNode = nodes.FirstOrDefault(n => n.Id == session.UpdatedBy && n.NodeType == NodeTypeEnum.Choice);\n            if (choiceNode == null)\n            {\n                _logger.LogWarning(\"❌ Stored session node not found or not a Choice node.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice node in session.\" };\n            }\n\n            var cfg = JsonConvert.DeserializeObject<ChoiceConfig>(choiceNode.ConfigJson);\n            if (cfg?.Conditions == null)\n            {\n                _logger.LogWarning(\"❌ Choice config is null or empty.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice config.\" };\n            }\n\n            var match = cfg.Conditions.FirstOrDefault(c =>\n                string.Equals(c.Match.Trim(), incomingMessage.Trim(), StringComparison.OrdinalIgnoreCase));\n\n            string nextNodeId = match?.NextNodeId ?? cfg.FallbackNodeId;\n            if (match == null)\n            {\n                _logger.LogWarning(\"🔁 No matching condition found. Using fallback: {Fallback}\", nextNodeId);\n            }\n\n            var nextNode = nodes.FirstOrDefault(n => n.Id == nextNodeId);\n            if (nextNode == null)\n            {\n                _logger.LogWarning(\"❌ Next node after choice not found.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Next node not found.\" };\n            }\n\n            // ✅ Clear session after resume\n            _appDbContext.ChatSessionStates.Remove(session);\n            await _appDbContext.SaveChangesAsync();\n\n            // ✅ Resume from the matched node using shared loop\n            return await ExecuteNodeLoopAsync(flow, nextNode, nodes, edges, businessId, contactId, contactPhone);\n        }\n\n\n        private async Task<AutomationFlowRunResult> ExecuteNodeLoopAsync(\n    AutomationFlow flow,\n    AutomationFlowNode startNode,\n    List<AutomationFlowNode> nodes,\n    List<AutomationFlowEdge> edges,\n    Guid businessId,\n    Guid contactId,\n    string contactPhone)\n        {\n            var result = new AutomationFlowRunResult();\n            var currentNode = startNode;\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"➡️ Executing node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.End:\n                        return new AutomationFlowRunResult { Notes = \"✅ Flow ended.\" };\n\n                    case NodeTypeEnum.AgentHandoff:\n                        return new AutomationFlowRunResult\n                        {\n                            NeedsAgent = true,\n                            Notes = \"Routed to human agent.\"\n                        };\n\n                    case NodeTypeEnum.Choice:\n                        var session = new ChatSessionState\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            Mode = \"awaiting_choice\",\n                            UpdatedBy = currentNode.Id.ToString(),\n                            LastUpdatedAt = DateTime.UtcNow\n                        };\n                        _appDbContext.ChatSessionStates.Add(session);\n                        await _appDbContext.SaveChangesAsync();\n\n                        return new AutomationFlowRunResult { Notes = \"Paused at Choice node.\" };\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            return new AutomationFlowRunResult { Notes = \"Flow completed.\" };\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/AutomationService.cs",
      "sha256": "c42e37b6d7f110e3f94e15cae67213a79f8219feb763ecb1ba4ca86c636e423c",
      "language": "csharp",
      "size": 5101,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationService : IAutomationService\n    {\n        private readonly IAutomationFlowRepository _flowRepository;\n        private readonly IAutomationRunner _runner;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public AutomationService(\n            IAutomationFlowRepository flowRepository,\n            IAutomationRunner runner,\n            IContactService contactService,\n            ILogger<AutomationService> logger,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _flowRepository = flowRepository;\n            _runner = runner;\n            _contactService = contactService;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.GetByIdAsync(flowId, businessId);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _flowRepository.GetByKeywordAsync(businessId, keyword);\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag)\n        {\n            return await _runner.RunFlowAsync(flow, businessId, contactId, phone, sourceChannel, industryTag);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId)\n        {\n            return await _flowRepository.GetAllByBusinessAsync(businessId);\n        }\n\n        public async Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow)\n        {\n            flow.BusinessId = businessId;\n            return await _flowRepository.CreateAsync(flow);\n        }\n\n        public async Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.DeleteAsync(flowId, businessId);\n        }\n\n        public async Task RunByKeywordAsync(string messageText, string phoneNumber, string sourceChannel = \"whatsapp\")\n        {\n            var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                ?? throw new UnauthorizedAccessException(\"BusinessId could not be resolved from context.\");\n\n            var flow = await _flowRepository.GetByKeywordAsync(businessId, messageText);\n            if (flow == null)\n            {\n                _logger.LogInformation(\"No matching automation flow for keyword: {Keyword}\", messageText);\n                return;\n            }\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, phoneNumber);\n            await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag: \"default\");\n        }\n\n        public async Task<bool> TryRunFlowByKeywordAsync(\n         Guid businessId,\n         string messageText,\n         string userPhone,\n         string sourceChannel,\n         string industryTag)\n        {\n            try\n            {\n                // 🔍 Normalize keyword\n                var normalizedKeyword = messageText.Trim().ToLower();\n\n                // ✅ Fetch flow by trigger keyword\n                var flow = await _flowRepository.GetByKeywordAsync(businessId, normalizedKeyword);\n                if (flow == null)\n                {\n                    _logger.LogInformation(\"TryRun: No matching automation flow found for keyword: '{Keyword}'\", normalizedKeyword);\n                    return false;\n                }\n\n                // 👤 Ensure contact exists\n                var contact = await _contactService.FindOrCreateAsync(businessId, userPhone);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"❌ TryRun: Failed to resolve or create contact for phone: {Phone}\", userPhone);\n                    return false;\n                }\n\n                // ▶️ Run automation flow\n                _logger.LogInformation(\"🚀 Running flow '{FlowName}' for keyword '{Keyword}'\", flow.Name, normalizedKeyword);\n                await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ TryRun: Exception while executing flow for keyword '{Keyword}'\", messageText);\n                return false;\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/IAutomationRunner.cs",
      "sha256": "0aa081c7006bb76ff84c8cee9da21e51a021a69c4e0b6d191ffdc1356b5e4001",
      "language": "csharp",
      "size": 453,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationRunner\n    {\n        Task<AutomationFlowRunResult> RunFlowAsync(\n             AutomationFlow flow,\n             Guid businessId,\n             Guid contactId,\n             string contactPhone,\n             string sourceChannel,\n             string industryTag\n );\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/IAutomationService.cs",
      "sha256": "fd32d83e0e970571048b14fb8805162a0b1139c917ed0bf99ad84b4a244ce609",
      "language": "csharp",
      "size": 1688,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationService\n    {\n        // 📌 Get flow by FlowId (for admin UI or debugging)\n        Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n\n        // 📌 Get flow by keyword match (used for auto-triggering)\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // 🛠️ Execute a flow with contact and channel info\n        Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag\n        );\n\n        // 📋 List all flows (for admin or dashboard)\n        Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId);\n\n        // ➕ Create new flow\n        Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow);\n\n        // ❌ Delete existing flow\n        Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId);\n\n        // ⚡ Runtime entry point – called when a message arrives\n        Task RunByKeywordAsync(\n            string messageText,\n            string phoneNumber,\n            string sourceChannel = \"whatsapp\"\n        );\n\n        // ✅ Returns true if flow matched and executed\n        Task<bool> TryRunFlowByKeywordAsync(\n            Guid businessId,\n            string messageText,\n            string userPhone,\n            string sourceChannel,\n            string industryTag\n        );\n    }\n}\n"
    }
  ]
}
