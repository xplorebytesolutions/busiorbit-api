{
  "name": "xbytechat-api/Middlewares",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Middlewares/GlobalExceptionMiddleware.cs",
      "sha256": "81f92c798910995fdc5e81622269bc30f14971bf74da00e5b27af3bfe4a04a79",
      "language": "csharp",
      "size": 3497,
      "content": "using System.Net;\nusing Serilog;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.AspNetCore.Hosting;\n\npublic class GlobalExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n    private readonly IWebHostEnvironment _env;\n\n    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n    {\n        _next = next;\n        _logger = logger;\n        _env = env;\n    }\n    public class ErrorResponse\n    {\n        public int StatusCode { get; set; }\n        public string Message { get; set; }\n        public string? StackTrace { get; set; }\n        public string Path { get; set; }\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            Log.Error(ex, \"‚ùå An unhandled exception occurred\");\n\n            // üö© Prevent double-write/headers-already-sent error!\n            if (context.Response.HasStarted)\n            {\n                _logger.LogError(\"Response has already started, unable to write error response for path: {Path}\", context.Request.Path);\n                return;\n            }\n\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n            var response = new ErrorResponse\n            {\n                StatusCode = context.Response.StatusCode,\n                Message = ex.Message,\n                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n                Path = context.Request.Path\n            };\n            await context.Response.WriteAsJsonAsync(response);\n        }\n    }\n}\n\n\n//using System.Net;\n//using Serilog;\n//using System.Net;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Http;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.AspNetCore.Hosting;\n\n//public class GlobalExceptionMiddleware\n//{\n//    private readonly RequestDelegate _next;\n//    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n//    private readonly IWebHostEnvironment _env;\n\n//    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n//    {\n//        _next = next;\n//        _logger = logger;\n//        _env = env;\n//    }\n//    public class ErrorResponse\n//    {\n//        public int StatusCode { get; set; }\n//        public string Message { get; set; }\n//        public string? StackTrace { get; set; }\n//        public string Path { get; set; }\n//    }\n\n//    public async Task Invoke(HttpContext context)\n//    {\n//        try\n//        {\n//            await _next(context);\n//        }\n//        catch (Exception ex)\n//        {\n//            Log.Error(ex, \"‚ùå An unhandled exception occurred\");\n\n//            context.Response.ContentType = \"application/json\";\n//            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n//            var response = new ErrorResponse\n//            {\n//                StatusCode = context.Response.StatusCode,\n//                Message = ex.Message,\n//                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n//                Path = context.Request.Path\n//            };\n//            await context.Response.WriteAsJsonAsync(response);\n//        }\n//    }\n\n//}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/JwtErrorHandlingMiddleware.cs",
      "sha256": "d35104606ec5c8b08c106f2499d4962349d1c9c99465f0772fe1a92366cdcfac",
      "language": "csharp",
      "size": 2000,
      "content": "using Microsoft.AspNetCore.Http;\nusing System.Net;\nusing System.Text.Json;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace xbytechat.api.Middlewares\n{\n    public class JwtErrorHandlingMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public JwtErrorHandlingMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context); // Proceed to next middleware\n            }\n            catch (SecurityTokenExpiredException)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = \"‚ùå Token expired. Please login again.\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (SecurityTokenException ex)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = $\"‚ùå Token invalid: {ex.Message}\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (Exception)\n            {\n                // Pass unhandled exceptions to global exception middleware\n                throw;\n            }\n        }\n    }\n\n    // Extension method for clean registration\n    public static class JwtErrorHandlingMiddlewareExtensions\n    {\n        public static IApplicationBuilder UseJwtErrorHandling(this IApplicationBuilder builder)\n        {\n            return builder.UseMiddleware<JwtErrorHandlingMiddleware>();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequirePermissionAttribute.cs",
      "sha256": "a6d3aaceba78295b73d29b3f7b0c72837f08e7f8cb0004a15f1f77f1066dc3c2",
      "language": "csharp",
      "size": 1156,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Middleware.Attributes\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePermissionAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string _requiredPermission;\n\n        public RequirePermissionAttribute(string requiredPermission)\n        {\n            _requiredPermission = requiredPermission;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var user = context.HttpContext.User;\n\n            if (!user.Identity.IsAuthenticated)\n            {\n                context.Result = new UnauthorizedResult();\n                return;\n            }\n\n            var permissionsClaim = user.Claims.FirstOrDefault(c => c.Type == \"permissions\")?.Value;\n\n            if (permissionsClaim == null || !permissionsClaim.Split(',').Contains(_requiredPermission))\n            {\n                context.Result = new ForbidResult();\n            }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequirePlanAttribute.cs",
      "sha256": "3e7d8fc23618708b9d4ae5351012eb53f013b2ab0f579426c3d4c9091ed06251",
      "language": "csharp",
      "size": 887,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePlanAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _allowedPlans;\n\n        public RequirePlanAttribute(params string[] allowedPlans)\n        {\n            _allowedPlans = allowedPlans;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var plan = context.HttpContext.User.FindFirst(\"plan\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(plan) || !_allowedPlans.Any(p => p.ToLowerInvariant() == plan))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Middlewares/RequireRoleAttribute.cs",
      "sha256": "b8ca70695e176a36191713cb6b179e1f5097d9077227a77b8658f86392b98b6b",
      "language": "csharp",
      "size": 852,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequireRoleAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _roles;\n\n        public RequireRoleAttribute(params string[] roles)\n        {\n            _roles = roles;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var role = context.HttpContext.User.FindFirst(\"role\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(role) || !_roles.Any(r => r.ToLowerInvariant() == role))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
    }
  ]
}
