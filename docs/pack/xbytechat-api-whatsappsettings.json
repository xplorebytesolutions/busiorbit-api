{
  "name": "xbytechat-api/WhatsAppSettings",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/ITemplateCatalogProvider.cs",
      "sha256": "013b4df521e161fb281c651f252a270d851bffe7b430900f96386d0c9b4ccf18",
      "language": "csharp",
      "size": 420,
      "content": "using xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public interface ITemplateCatalogProvider\n    {\n        Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity setting, CancellationToken ct = default);\n        Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity setting, string templateName, CancellationToken ct = default);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Abstractions/TemplateCatalogItem.cs",
      "sha256": "27edec7875c999037dd77d4d6af4a309baf8a5a1f130ec53f86f9dc12757ef76",
      "language": "csharp",
      "size": 414,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.WhatsAppSettings.Abstractions\n{\n    public record TemplateCatalogItem(\n       string Name,\n       string Language,\n       string Body,\n       int PlaceholderCount,\n       bool HasImageHeader,\n       IReadOnlyList<ButtonMetadataDto> Buttons,\n       string Status,\n       string? Category,\n       string? ExternalId,\n       string RawJson\n   );\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/TemplatesController.cs",
      "sha256": "a505dfe53b9b5f41500a7e28228fa83350122924619b410517bc9d9bf2b67180",
      "language": "csharp",
      "size": 3185,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat_api.WhatsAppSettings.Models;\nnamespace xbytechat.api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n        private readonly ITemplateSyncService _sync;\n\n        public TemplatesController(AppDbContext db, ITemplateSyncService sync)\n        { _db = db; _sync = sync; }\n\n        [HttpPost(\"sync/{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> Sync(Guid businessId, [FromQuery] bool force = false)\n        {\n            if (businessId == Guid.Empty) return BadRequest(new { success = false, message = \"Invalid businessId\" });\n            var result = await _sync.SyncBusinessTemplatesAsync(businessId, force);\n            return Ok(new { success = true, result });\n        }\n\n        [HttpGet(\"{businessId:guid}\")]\n        [Authorize]\n        public async Task<IActionResult> List(Guid businessId, [FromQuery] string? q = null,\n            [FromQuery] string? status = \"APPROVED\", [FromQuery] string? language = null,\n            [FromQuery] string? provider = null)\n        {\n            var query = _db.WhatsAppTemplates.AsNoTracking()\n                .Where(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(status))\n                query = query.Where(x => x.Status == status);\n\n            if (!string.IsNullOrWhiteSpace(language))\n                query = query.Where(x => x.Language == language);\n\n            if (!string.IsNullOrWhiteSpace(provider))\n                query = query.Where(x => x.Provider == provider);\n\n            if (!string.IsNullOrWhiteSpace(q))\n                query = query.Where(x => x.Name.Contains(q) || x.Body.Contains(q));\n\n            var items = await query\n                .OrderBy(x => x.Name)\n                .Select(x => new\n                {\n                    x.Name,\n                    x.Language,\n                    x.Status,\n                    x.Category,\n                    x.PlaceholderCount,\n                    x.HasImageHeader,\n                    x.ButtonsJson\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, templates = items });\n        }\n\n        [HttpGet(\"{businessId:guid}/{name}\")]\n        [Authorize]\n        public async Task<IActionResult> GetOne(Guid businessId, string name, [FromQuery] string? language = null)\n        {\n            var tpl = await _db.WhatsAppTemplates.AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.Name == name &&\n                                          (language == null || x.Language == language));\n            if (tpl == null) return NotFound();\n            return Ok(new\n            {\n                tpl.Name,\n                tpl.Language,\n                tpl.Status,\n                tpl.Category,\n                tpl.Body,\n                tpl.PlaceholderCount,\n                tpl.HasImageHeader,\n                tpl.ButtonsJson\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
      "sha256": "f9eecd20b323a755c386364f52b362f9faa22ce567c43993e980ae0ed50f5949",
      "language": "csharp",
      "size": 20303,
      "content": "// üìÑ File: WhatsAppSettings/Controllers/WhatsAppSettingsController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared; // for User.GetBusinessId()\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _svc;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService svc,\n            ILogger<WhatsAppSettingsController> logger)\n        {\n            _svc = svc;\n            _logger = logger;\n        }\n\n        // ----------------------------\n        // Save/Update settings\n        // ----------------------------\n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            _logger.LogInformation(\"üîß [UpdateSetting] Incoming payload for provider={Provider}\", dto?.Provider);\n\n            if (!ModelState.IsValid)\n            {\n                var errs = ModelState\n                    .Where(e => e.Value.Errors.Count > 0)\n                    .Select(e => new { Field = e.Key, Errors = e.Value.Errors.Select(x => x.ErrorMessage) });\n\n                _logger.LogWarning(\"‚ùå [UpdateSetting] Validation failed: {@Errors}\", errs);\n                return BadRequest(new { message = \"‚ùå Invalid input.\", errors = errs });\n            }\n\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId();\n                dto.BusinessId = businessId;\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                _logger.LogWarning(\"‚ùå [UpdateSetting] BusinessId claim missing/invalid: {Msg}\", ex.Message);\n                return Unauthorized(new { message = \"‚ùå BusinessId missing or invalid in token.\" });\n            }\n\n            try\n            {\n                // Normalize provider to our canonical set\n                dto.Provider = NormalizeProvider(dto.Provider);\n\n                await _svc.SaveOrUpdateSettingAsync(dto);\n                return Ok(new { message = \"‚úÖ WhatsApp settings saved/updated successfully.\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå [UpdateSetting] Exception while saving settings.\");\n                return StatusCode(500, new { message = \"‚ùå Error while saving settings.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Get the current user's saved settings\n        // ----------------------------\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n            var businessId = User.GetBusinessId();\n            var setting = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        // ----------------------------\n        // Test connection using values sent in the body (not necessarily saved)\n        // Accepts Provider = \"Pinnacle\" or \"Meta_cloud\"\n        // ----------------------------\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (dto is null)\n                return BadRequest(new { message = \"‚ùå Missing request body.\" });\n\n            var provider = NormalizeProvider(dto.Provider);\n            if (provider is null)\n                return BadRequest(new { message = \"‚ùå Provider is required (Pinnacle | Meta_cloud).\" });\n\n            dto.Provider = provider; // use canonical\n\n            // Minimal provider-specific validation (service will validate again)\n            if (provider == \"Meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiToken) ||\n                    string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                {\n                    return BadRequest(new { message = \"‚ùå API URL, Token and Phone Number ID are required for Meta Cloud test.\" });\n                }\n            }\n            else if (provider == \"Pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiUrl) ||\n                    string.IsNullOrWhiteSpace(dto.ApiKey) ||\n                    (string.IsNullOrWhiteSpace(dto.WabaId) && string.IsNullOrWhiteSpace(dto.PhoneNumberId)) ||\n                    string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                {\n                    return BadRequest(new\n                    {\n                        message = \"‚ùå API URL, API Key, (WABA ID or Phone Number ID), and Business Number are required for Pinnacle test.\"\n                    });\n                }\n            }\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n\n                // Convention: service returns a human string; we 200 on success (starts with ‚úÖ), 400 otherwise\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"‚úÖ\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"‚ùå Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå [TestConnection] Failed\");\n                return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Test connection against the SAVED settings for this business\n        // ----------------------------\n        [HttpPost(\"test-connection/current\")]\n        public async Task<IActionResult> TestConnectionCurrent()\n        {\n            var businessId = User.GetBusinessId();\n            var saved = await _svc.GetSettingsByBusinessIdAsync(businessId);\n            if (saved is null)\n                return NotFound(new { message = \"‚ùå No saved WhatsApp settings found.\" });\n\n            var dto = new SaveWhatsAppSettingDto\n            {\n                BusinessId = businessId,\n                Provider = NormalizeProvider(saved.Provider) ?? saved.Provider,\n                ApiUrl = saved.ApiUrl,\n                ApiKey = saved.ApiKey,\n                ApiToken = saved.ApiToken,\n                PhoneNumberId = saved.PhoneNumberId,\n                WabaId = saved.WabaId,\n                WhatsAppBusinessNumber = saved.WhatsAppBusinessNumber,\n                SenderDisplayName = saved.SenderDisplayName,\n                WebhookSecret = saved.WebhookSecret,\n                WebhookVerifyToken = saved.WebhookVerifyToken,\n                IsActive = saved.IsActive\n            };\n\n            try\n            {\n                var message = await _svc.TestConnectionAsync(dto);\n                if (!string.IsNullOrEmpty(message) && message.StartsWith(\"‚úÖ\"))\n                    return Ok(new { message });\n\n                return BadRequest(new { message = string.IsNullOrEmpty(message) ? \"‚ùå Test failed.\" : message });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå [TestConnectionCurrent] Failed\");\n                return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        // ----------------------------\n        // Delete current user's settings\n        // ----------------------------\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessId = User.GetBusinessId();\n            var deleted = await _svc.DeleteSettingsAsync(businessId);\n            if (!deleted) return NotFound(new { message = \"‚ùå No WhatsApp settings found to delete.\" });\n            return Ok(new { message = \"üóëÔ∏è WhatsApp settings deleted successfully.\" });\n        }\n\n        // Optional alias for FE routes that call /delete-current\n        [HttpDelete(\"delete-current\")]\n        public Task<IActionResult> DeleteSettingAlias() => DeleteSetting();\n\n        /// <summary>\n        /// Maps any incoming text to the canonical provider values we support.\n        /// Returns null if unrecognized.\n        /// </summary>\n        private static string? NormalizeProvider(string? providerRaw)\n        {\n            if (string.IsNullOrWhiteSpace(providerRaw)) return null;\n\n            var p = providerRaw.Trim();\n\n            // Accept canonical values exactly and a few common variants\n            if (string.Equals(p, \"Pinnacle\", StringComparison.Ordinal)) return \"Pinnacle\";\n            if (string.Equals(p, \"Meta_cloud\", StringComparison.Ordinal)) return \"Meta_cloud\";\n\n            // tolerate some user/legacy variants from older UIs\n            var lower = p.ToLowerInvariant();\n            if (lower is \"pinbot\" or \"pinnacle (official)\" or \"pinnacle (pinnacle)\" or \"pinnacle official\")\n                return \"Pinnacle\";\n            if (lower is \"meta cloud\" or \"meta\" or \"meta-cloud\")\n                return \"Meta_cloud\";\n\n            return null;\n        }\n\n        [HttpGet(\"callback-url\")]\n        public async Task<IActionResult> GetMyCallbackUrl([FromServices] IConfiguration cfg)\n        {\n            var businessId = User.GetBusinessId();\n            var baseUrl = cfg[\"App:PublicBaseUrl\"] ?? string.Empty;\n            var url = await _svc.GetCallbackUrlAsync(businessId, baseUrl);\n            return Ok(new { callbackUrl = url });\n        }\n\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.Extensions.Logging;\n//using System;\n//using System.Linq;\n//using System.Security.Claims;\n//using System.Threading.Tasks;\n//using xbytechat.api.Shared;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    [Authorize]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n//        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n//        public WhatsAppSettingsController(\n//            IWhatsAppSettingsService whatsAppSettingsService,\n//            ILogger<WhatsAppSettingsController> logger)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//            _logger = logger;\n//        }\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            _logger.LogInformation(\"üîß [UpdateSetting] Request received for WhatsApp settings update.\");\n\n//            if (!ModelState.IsValid)\n//            {\n//                var validationErrors = ModelState\n//                    .Where(e => e.Value.Errors.Count > 0)\n//                    .Select(e => new\n//                    {\n//                        Field = e.Key,\n//                        Errors = e.Value.Errors.Select(x => x.ErrorMessage)\n//                    });\n\n//                _logger.LogWarning(\"‚ùå [UpdateSetting] Validation failed: {@Errors}\", validationErrors);\n//                return BadRequest(new { message = \"‚ùå Invalid input.\", errors = validationErrors });\n//            }\n\n//            Guid businessId;\n//            try\n//            {\n//                businessId = User.GetBusinessId(); // ‚úÖ Cleaner using your helper\n//                dto.BusinessId = businessId;\n//            }\n//            catch (UnauthorizedAccessException ex)\n//            {\n//                _logger.LogWarning(\"‚ùå [UpdateSetting] BusinessId claim missing or invalid: {Message}\", ex.Message);\n//                return Unauthorized(new { message = \"‚ùå BusinessId missing or invalid in token.\" });\n//            }\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//            {\n//                _logger.LogWarning(\"‚ùå [UpdateSetting] Missing ApiToken or PhoneNumberId.\");\n//                return BadRequest(new { message = \"‚ùå API Token and Phone Number ID are required.\" });\n//            }\n\n//            try\n//            {\n//                _logger.LogInformation(\"üíæ [UpdateSetting] Saving/updating WhatsApp settings for businessId={BusinessId}.\", businessId);\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                _logger.LogInformation(\"‚úÖ [UpdateSetting] WhatsApp settings updated successfully.\");\n//                return Ok(new { message = \"‚úÖ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"‚ùå [UpdateSetting] Exception occurred while saving settings.\");\n//                return StatusCode(500, new { message = \"‚ùå Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        [HttpGet(\"me\")]\n//        public async Task<IActionResult> GetMySettings()\n//        {\n\n//            var businessId = User.GetBusinessId();\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"‚ùå Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n//        //[HttpPost(\"test-connection\")]\n//        //public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        //{\n//        //    if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//        //        return BadRequest(new { message = \"‚ùå API Token and API URL are required for testing connection.\" });\n\n//        //    try\n//        //    {\n//        //        var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//        //        return Ok(new { message = result });\n//        //    }\n//        //    catch (Exception ex)\n//        //    {\n//        //        return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n//        //    }\n//        //}\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"‚ùå API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        [HttpDelete(\"delete\")]\n//        public async Task<IActionResult> DeleteSetting()\n//        {\n//            var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n//            if (!Guid.TryParse(businessIdStr, out var businessId))\n//                return Unauthorized(new { message = \"‚ùå BusinessId missing or invalid in token.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"‚ùå No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"üóëÔ∏è WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using System;\n//using System.Threading.Tasks;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n\n//        public WhatsAppSettingsController(IWhatsAppSettingsService whatsAppSettingsService)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//        }\n\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//                return BadRequest(new { message = \"‚ùå Invalid input.\", errors = ModelState });\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//                return BadRequest(new { message = \"‚ùå API Token and Phone Number ID are required.\" });\n\n//            try\n//            {\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                return Ok(new { message = \"‚úÖ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"‚ùå Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Get WhatsApp Settings by BusinessId\n//        /// </summary>\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"‚ùå Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        /// <summary>\n//        /// Test WhatsApp Connection (API URL + Token)\n//        /// </summary>\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"‚ùå API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Delete WhatsApp Settings for a Business\n//        /// </summary>\n//        [HttpDelete(\"delete/{businessId}\")]\n//        public async Task<IActionResult> DeleteSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"‚ùå Invalid businessId.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"‚ùå No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"üóëÔ∏è WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
      "sha256": "423175eb5cd31766ee4c3fe215cb17108c3cf6bc44948fc0f52a88e8a000ad39",
      "language": "csharp",
      "size": 3072,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ‚úÖ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"‚ùå Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n\n      \n\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"‚ùå Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
      "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
      "language": "csharp",
      "size": 536,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
      "sha256": "c2b21c876df2c4019afb2d32e4bd1cf33fc232c2ce8359e4775bf0094df9e91e",
      "language": "csharp",
      "size": 1404,
      "content": "// üìÑ File: WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n        public Guid BusinessId { get; set; }\n\n        // Which provider: \"pinnacle\" | \"meta_cloud\"\n        [Required, MaxLength(50)]\n        public string Provider { get; set; } = string.Empty;\n\n        [Required, MaxLength(500)]\n        public string ApiUrl { get; set; } = string.Empty;\n\n        [MaxLength(1000)]\n        public string? ApiKey { get; set; } // Pinnacle\n\n        [MaxLength(1000)]\n        public string? ApiToken { get; set; } // Meta Cloud\n\n        [MaxLength(100)]\n        public string? PhoneNumberId { get; set; } // Meta Cloud\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional (Pinnacle/Meta)\n\n        [MaxLength(50)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookVerifyToken { get; set; }\n\n        // üëá NEW: per-provider callback URL (optional, stored in DB)\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "954d4bddaa8450da19f714aec8f819d5affa5edcee6a6e078759e3bcb04b47be",
      "language": "csharp",
      "size": 427,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class TemplateForUIResponseDto\n    {\n        public string Name { get; set; } = \"\";\n        public string Language { get; set; } = \"en_US\";\n        public string Body { get; set; } = \"\";\n        public int ParametersCount { get; set; }\n        public bool HasImageHeader { get; set; }\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
      "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
      "language": "csharp",
      "size": 911,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ‚úÖ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
      "sha256": "f674f9fc1e4de25b661a9f133a52c0ebb09d79ad04e368c5d91bd080f18f1f83",
      "language": "csharp",
      "size": 2788,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        // NEW: which provider this row belongs to (\"pinnacle\", \"meta_cloud\", \"twilio\", etc.)\n        [Required]\n        [MaxLength(50)]\n        public string Provider { get; set; } //= \"pinnacle\";\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }  // e.g. https://partnersv1.pinbot.ai/v3\n\n        [MaxLength(1000)]\n        public string ApiKey { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; } // store encrypted\n\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } // used by Meta Cloud; Pinbot doesn't need it\n        public string? WabaId { get; set; } = string.Empty;\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        // Optional: for webhook signature/verification if provider supports it\n        [MaxLength(200)]\n        public string? WebhookSecret { get; set; }\n\n        [MaxLength(200)]\n        public string? WebhookVerifyToken { get; set; }\n\n        [MaxLength(1000)]\n        public string? WebhookCallbackUrl { get; set; }\n\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n\n\n//using System;\n//using System.ComponentModel.DataAnnotations;\n\n//namespace xbytechat_api.WhatsAppSettings.Models\n//{\n//    public class WhatsAppSettingEntity\n//    {\n//        [Key]\n//        public Guid Id { get; set; }\n\n//        [Required]\n//        public Guid BusinessId { get; set; }\n\n//        [Required]\n//        [MaxLength(500)]\n//        public string ApiUrl { get; set; }\n\n//        [Required]\n//        [MaxLength(1000)]\n//        public string ApiToken { get; set; }\n\n//        [Required]\n//        [MaxLength(20)]\n//        public string? WhatsAppBusinessNumber { get; set; }\n\n//        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n//        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n//        [MaxLength(100)]\n//        public string? SenderDisplayName { get; set; }\n\n//        [Required]\n//        public bool IsActive { get; set; } = true;\n\n//        [Required]\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n//        public DateTime? UpdatedAt { get; set; }\n\n//        // string ApiVersion { get; set; } = \"v18.0\";\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/MetaTemplateCatalogProvider.cs",
      "sha256": "d2c2e1cd29b2abb71def8df8125e0d3dd90ec3fa146f6af4143cd23d5f5ce917",
      "language": "csharp",
      "size": 6494,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class MetaTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaTemplateCatalogProvider> _log;\n\n        public MetaTemplateCatalogProvider(HttpClient http, ILogger<MetaTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n            if (string.IsNullOrWhiteSpace(s.ApiToken) || string.IsNullOrWhiteSpace(s.WabaId))\n                return items;\n\n            var baseUrl = s.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\";\n            var next = $\"{baseUrl}/{s.WabaId}/message_templates?limit=100\";\n\n            _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", s.ApiToken);\n\n            while (!string.IsNullOrWhiteSpace(next))\n            {\n                var res = await _http.GetAsync(next, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n                if (!res.IsSuccessStatusCode) break;\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    // Filter APPROVED/ACTIVE\n                    string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                    if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    bool hasImageHeader = false;\n                    var buttons = new List<ButtonMetadataDto>();\n\n                    foreach (var comp in tpl.components)\n                    {\n                        string type = comp.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = comp.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (comp.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var b in comp.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = b.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? param = b.url != null ? b.url.ToString()\n                                                 : b.phone_number != null ? b.phone_number.ToString()\n                                                 : b.coupon_code != null ? b.coupon_code.ToString()\n                                                 : b.flow_id != null ? b.flow_id.ToString()\n                                                 : null;\n\n                                    bool hasExample = b.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(b.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n                                    if (subType == \"unknown\" || (param == null && needsRuntimeValue)) continue;\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = param ?? \"\"\n                                    });\n                                }\n                                catch (Exception ex)\n                                { _log.LogWarning(ex, \"Button parse failed for template {Name}\", (string)name); }\n                            }\n                        }\n                    }\n\n                    int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                    var raw = JsonConvert.SerializeObject(tpl);\n\n                    items.Add(new TemplateCatalogItem(\n                        Name: name,\n                        Language: language,\n                        Body: body,\n                        PlaceholderCount: placeholders,\n                        HasImageHeader: hasImageHeader,\n                        Buttons: buttons,\n                        Status: status,\n                        Category: tpl.category?.ToString(),\n                        ExternalId: tpl.id?.ToString(),\n                        RawJson: raw\n                    ));\n                }\n\n                next = parsed?.paging?.next?.ToString();\n            }\n\n            return items;\n        }\n\n        public async Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => (await ListAsync(s, ct)).FirstOrDefault(t => t.Name.Equals(templateName, StringComparison.OrdinalIgnoreCase));\n    }\n}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Providers/PinnacleTemplateCatalogProvider.cs",
      "sha256": "3060d7531506978583fc9d7ca9ca3d2a2f4363a469846efcfcf97ae005ce30da",
      "language": "csharp",
      "size": 9679,
      "content": "using Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.WhatsAppSettings.Providers\n{\n    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n        { _http = http; _log = log; }\n\n        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n        {\n            var items = new List<TemplateCatalogItem>();\n\n            if (string.IsNullOrWhiteSpace(s.ApiKey))\n            {\n                _log.LogWarning(\"Pinnacle: missing ApiKey for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            var baseUrl = (s.ApiUrl ?? \"https://partnersv1.pinbot.ai/v3\").TrimEnd('/');\n            var pathId = !string.IsNullOrWhiteSpace(s.WabaId) ? s.WabaId!.Trim()\n                        : !string.IsNullOrWhiteSpace(s.PhoneNumberId) ? s.PhoneNumberId!.Trim()\n                        : null;\n\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                _log.LogWarning(\"Pinnacle: missing WabaId/PhoneNumberId for BusinessId {BusinessId}\", s.BusinessId);\n                return items;\n            }\n\n            // set header\n            _http.DefaultRequestHeaders.Remove(\"apikey\");\n            _http.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", s.ApiKey);\n\n            string? nextUrl = $\"{baseUrl}/{pathId}/message_templates?limit=100\";\n\n            while (!string.IsNullOrWhiteSpace(nextUrl))\n            {\n                using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                var res = await _http.SendAsync(req, ct);\n                var json = await res.Content.ReadAsStringAsync(ct);\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    _log.LogError(\"‚ùå Pinnacle list failed ({Status}): {Body}\", (int)res.StatusCode, json);\n                    break;\n                }\n\n                dynamic parsed = JsonConvert.DeserializeObject(json);\n                var collection = parsed?.data ?? parsed?.templates;\n                if (collection == null)\n                {\n                    _log.LogInformation(\"Pinnacle: no data/templates array.\");\n                    break;\n                }\n\n                foreach (var tpl in collection)\n                {\n                    try\n                    {\n                        string name = tpl.name?.ToString() ?? \"\";\n                        string language = tpl.language?.ToString() ?? \"en_US\";\n                        string status = (tpl.status?.ToString() ?? \"APPROVED\").ToUpperInvariant();\n                        string category = tpl.category?.ToString();\n                        string externalId = tpl.id?.ToString();\n\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        var components = tpl.components;\n                        if (components != null)\n                        {\n                            foreach (var c in components)\n                            {\n                                string type = c.type?.ToString()?.ToUpperInvariant();\n\n                                if (type == \"BODY\")\n                                    body = c.text?.ToString() ?? \"\";\n\n                                if (type == \"HEADER\" &&\n                                    (c.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                                    hasImageHeader = true;\n\n                                if (type == \"BUTTONS\" && c.buttons != null)\n                                {\n                                    foreach (var b in c.buttons)\n                                    {\n                                        string btnType = b.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                        string text = b.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? param =\n                                            b.url != null ? b.url.ToString() :\n                                            b.phone_number != null ? b.phone_number.ToString() :\n                                            b.coupon_code != null ? b.coupon_code.ToString() :\n                                            b.flow_id != null ? b.flow_id.ToString() :\n                                            null;\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = param ?? \"\"\n                                        });\n                                    }\n                                }\n                            }\n                        }\n\n                        int placeholders = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n                        var raw = JsonConvert.SerializeObject(tpl);\n\n                        // Only persist APPROVED/ACTIVE (match Meta behavior)\n                        if (status is \"APPROVED\" or \"ACTIVE\")\n                        {\n                            items.Add(new TemplateCatalogItem(\n                                Name: name,\n                                Language: language,\n                                Body: body,\n                                PlaceholderCount: placeholders,\n                                HasImageHeader: hasImageHeader,\n                                Buttons: buttons,\n                                Status: status,\n                                Category: category,\n                                ExternalId: externalId,\n                                RawJson: raw\n                            ));\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        _log.LogWarning(ex, \"Pinnacle: failed to map a template item.\");\n                    }\n                }\n\n                // try to follow paging like Meta\n                nextUrl = parsed?.paging?.next?.ToString();\n                if (string.IsNullOrWhiteSpace(nextUrl))\n                    break;\n            }\n\n            return items;\n        }\n\n        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n            => Task.FromResult<TemplateCatalogItem?>(null); // not needed for sync path\n    }\n}\n\n\n//using xbytechat.api.WhatsAppSettings.Abstractions;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//namespace xbytechat.api.WhatsAppSettings.Providers\n//{\n//    public sealed class PinnacleTemplateCatalogProvider : ITemplateCatalogProvider\n//    {\n//        private readonly HttpClient _http;\n//        private readonly ILogger<PinnacleTemplateCatalogProvider> _log;\n\n//        public PinnacleTemplateCatalogProvider(HttpClient http, ILogger<PinnacleTemplateCatalogProvider> log)\n//        { _http = http; _log = log; }\n\n//        public async Task<IReadOnlyList<TemplateCatalogItem>> ListAsync(WhatsAppSettingEntity s, CancellationToken ct = default)\n//        {\n//            // If your BSP supports listing:\n//            // var baseUrl = (s.ApiUrl ?? \"\").TrimEnd('/');\n//            // var url = $\"{baseUrl}/templates?limit=100\";\n//            // using var req = new HttpRequestMessage(HttpMethod.Get, url);\n//            // req.Headers.Add(\"x-api-key\", s.ApiKey);\n//            // var res = await _http.SendAsync(req, ct);\n//            // var json = await res.Content.ReadAsStringAsync(ct);\n//            // if (!res.IsSuccessStatusCode) return Array.Empty<TemplateCatalogItem>();\n//            // dynamic parsed = JsonConvert.DeserializeObject(json);\n//            // map to TemplateCatalogItem and return\n\n//            // If not supported (common): return empty to trigger UI fallback\n//            _log.LogInformation(\"Pinnacle does not expose template listing (returning empty).\");\n//            return Array.Empty<TemplateCatalogItem>();\n//        }\n\n//        public Task<TemplateCatalogItem?> GetByNameAsync(WhatsAppSettingEntity s, string templateName, CancellationToken ct = default)\n//            => Task.FromResult<TemplateCatalogItem?>(null);\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
      "sha256": "9e97276f87619317bc5056f3d991fb9762589c52813c83ca54d10147a064e5d1",
      "language": "csharp",
      "size": 662,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n        Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
      "sha256": "b5885cf1f231339958b3654b05bafa3aceb5fcb78d7f4e8c650d39c3fa21973f",
      "language": "csharp",
      "size": 593,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // üîπ (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/TemplateSyncService.cs",
      "sha256": "ffae82d0e1386e24844de32fe374d0df6ed02bdec22771dcb32fbc458d248c34",
      "language": "csharp",
      "size": 4795,
      "content": "// üìÑ Features/TemplateCatalog/Services/TemplateSyncService.cs\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api;\nusing xbytechat.api.WhatsAppSettings.Abstractions;\nusing xbytechat.api.WhatsAppSettings.Providers;\nusing xbytechat_api.WhatsAppSettings.Models;\n\npublic record TemplateSyncResult(int Added, int Updated, int Skipped, DateTime SyncedAt);\n\npublic interface ITemplateSyncService\n{\n    Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default);\n}\n\npublic sealed class TemplateSyncService : ITemplateSyncService\n{\n    private readonly AppDbContext _db;\n    private readonly MetaTemplateCatalogProvider _meta;\n    private readonly PinnacleTemplateCatalogProvider _pinnacle;\n    private readonly ILogger<TemplateSyncService> _log;\n\n    private static readonly TimeSpan TTL = TimeSpan.FromHours(12);\n\n    public TemplateSyncService(AppDbContext db,\n        MetaTemplateCatalogProvider meta,\n        PinnacleTemplateCatalogProvider pinnacle,\n        ILogger<TemplateSyncService> log)\n    { _db = db; _meta = meta; _pinnacle = pinnacle; _log = log; }\n\n    public async Task<TemplateSyncResult> SyncBusinessTemplatesAsync(Guid businessId, bool force = false, CancellationToken ct = default)\n    {\n        var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive, ct)\n                      ?? throw new InvalidOperationException(\"Active WhatsApp settings not found.\");\n\n        var now = DateTime.UtcNow;\n\n        // TTL short-circuit\n        if (!force)\n        {\n            var recent = await _db.WhatsAppTemplates\n                .Where(t => t.BusinessId == businessId)\n                .OrderByDescending(t => t.LastSyncedAt)\n                .Select(t => t.LastSyncedAt)\n                .FirstOrDefaultAsync(ct);\n\n            if (recent != default && now - recent < TTL)\n            {\n                _log.LogInformation(\"‚è≠Ô∏è Skipping sync for {BusinessId}; TTL not expired.\", businessId);\n                return new TemplateSyncResult(0, 0, 0, recent);\n            }\n        }\n\n        var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n        IReadOnlyList<TemplateCatalogItem> incoming = providerKey switch\n        {\n            \"meta_cloud\" => await _meta.ListAsync(setting, ct),\n            \"pinnacle\" => await _pinnacle.ListAsync(setting, ct),\n            _ => Array.Empty<TemplateCatalogItem>()\n        };\n\n        int added = 0, updated = 0, skipped = 0;\n\n        foreach (var it in incoming)\n        {\n            var existing = await _db.WhatsAppTemplates.FirstOrDefaultAsync(t =>\n                t.BusinessId == businessId &&\n                t.Provider == providerKey &&\n                t.Name == it.Name &&\n                t.Language == it.Language, ct);\n\n            var buttonsJson = JsonConvert.SerializeObject(it.Buttons);\n\n            if (existing == null)\n            {\n                await _db.WhatsAppTemplates.AddAsync(new WhatsAppTemplate\n                {\n                    BusinessId = businessId,\n                    Provider = providerKey,\n                    ExternalId = it.ExternalId,\n                    Name = it.Name,\n                    Language = it.Language,\n                    Status = string.IsNullOrWhiteSpace(it.Status) ? \"APPROVED\" : it.Status,\n                    Category = it.Category,\n                    Body = it.Body ?? \"\",\n                    HasImageHeader = it.HasImageHeader,\n                    PlaceholderCount = it.PlaceholderCount,\n                    ButtonsJson = buttonsJson,\n                    RawJson = it.RawJson,\n                    LastSyncedAt = now,\n                    CreatedAt = now,\n                    UpdatedAt = now,\n                    IsActive = true\n                }, ct);\n                added++;\n            }\n            else\n            {\n                existing.ExternalId = it.ExternalId ?? existing.ExternalId;\n                existing.Status = string.IsNullOrWhiteSpace(it.Status) ? existing.Status : it.Status;\n                existing.Category = it.Category ?? existing.Category;\n                existing.Body = it.Body ?? existing.Body;\n                existing.HasImageHeader = it.HasImageHeader;\n                existing.PlaceholderCount = it.PlaceholderCount;\n                existing.ButtonsJson = buttonsJson;\n                existing.RawJson = it.RawJson ?? existing.RawJson;\n                existing.LastSyncedAt = now;\n                existing.UpdatedAt = now;\n                existing.IsActive = true;\n                updated++;\n            }\n        }\n\n        await _db.SaveChangesAsync(ct);\n\n        return new TemplateSyncResult(added, updated, skipped, now);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
      "sha256": "eaee072b88337b67d2e4701921c91e515612988f17dae3dcfd3531484e4a8dab",
      "language": "csharp",
      "size": 10547,
      "content": "// üìÑ xbytechat_api/WhatsAppSettings/Services/WhatsAppSettingsService.cs\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _http;                    // kept for any other callers you may have\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        public WhatsAppSettingsService(\n            AppDbContext dbContext,\n            HttpClient http,\n            IHttpClientFactory httpClientFactory)\n        {\n            _dbContext = dbContext;\n            _http = http;\n            _httpClientFactory = httpClientFactory;\n        }\n\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty)\n                throw new ArgumentException(\"Invalid BusinessId provided.\", nameof(dto.BusinessId));\n\n            // Normalize provider (store lower-case for consistency)\n            var provider = (dto.Provider ?? \"pinnacle\").Trim();\n            if (string.IsNullOrWhiteSpace(provider))\n                provider = \"pinnacle\";\n            var providerNorm = provider.ToLowerInvariant();\n\n            // Look up by BusinessId + Provider (case-insensitive)\n            var existing = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId && x.Provider.ToLower() == providerNorm);\n\n            if (existing != null)\n            {\n                // keep provider normalized\n                existing.Provider = providerNorm;\n\n                // Only overwrite when incoming value is non-empty (avoid wiping secrets/tokens accidentally)\n                if (!string.IsNullOrWhiteSpace(dto.ApiUrl)) existing.ApiUrl = dto.ApiUrl.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.ApiKey)) existing.ApiKey = dto.ApiKey.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.ApiToken)) existing.ApiToken = dto.ApiToken!.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId)) existing.PhoneNumberId = dto.PhoneNumberId!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber)) existing.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName)) existing.SenderDisplayName = dto.SenderDisplayName!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WabaId)) existing.WabaId = dto.WabaId!.Trim();\n\n                // üîê Webhook auth fields (optional)\n                if (!string.IsNullOrWhiteSpace(dto.WebhookSecret)) existing.WebhookSecret = dto.WebhookSecret!.Trim();\n                if (!string.IsNullOrWhiteSpace(dto.WebhookVerifyToken)) existing.WebhookVerifyToken = dto.WebhookVerifyToken!.Trim();\n\n                // üåê NEW: provider callback URL (optional)\n                if (!string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl)) existing.WebhookCallbackUrl = dto.WebhookCallbackUrl!.Trim();\n\n                existing.IsActive = dto.IsActive;\n                existing.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                var newSetting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Provider = providerNorm,\n                    ApiUrl = (dto.ApiUrl ?? string.Empty).Trim(),\n                    ApiKey = string.IsNullOrWhiteSpace(dto.ApiKey) ? null : dto.ApiKey!.Trim(),\n                    ApiToken = string.IsNullOrWhiteSpace(dto.ApiToken) ? null : dto.ApiToken!.Trim(),\n                    PhoneNumberId = string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? null : dto.PhoneNumberId!.Trim(),\n                    WhatsAppBusinessNumber = string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber) ? null : dto.WhatsAppBusinessNumber!.Trim(),\n                    SenderDisplayName = string.IsNullOrWhiteSpace(dto.SenderDisplayName) ? null : dto.SenderDisplayName!.Trim(),\n                    WabaId = string.IsNullOrWhiteSpace(dto.WabaId) ? null : dto.WabaId!.Trim(),\n\n                    // üîê Webhook auth fields (optional)\n                    WebhookSecret = string.IsNullOrWhiteSpace(dto.WebhookSecret) ? null : dto.WebhookSecret!.Trim(),\n                    WebhookVerifyToken = string.IsNullOrWhiteSpace(dto.WebhookVerifyToken) ? null : dto.WebhookVerifyToken!.Trim(),\n\n                    // üåê NEW: provider callback URL (optional)\n                    WebhookCallbackUrl = string.IsNullOrWhiteSpace(dto.WebhookCallbackUrl) ? null : dto.WebhookCallbackUrl!.Trim(),\n\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n            }\n\n            await _dbContext.SaveChangesAsync();\n        }\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null) return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        /// <summary>\n        /// Provider-aware test connection. Returns a short message (‚úÖ/‚ùå ‚Ä¶).\n        /// The controller may convert non-‚úÖ messages to 400, etc.\n        /// </summary>\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Provider))\n                throw new ArgumentException(\"Provider is required.\");\n\n            // normalize provider and baseUrl\n            var provider = dto.Provider.Trim();\n            var lower = provider.ToLowerInvariant();\n            var baseUrl = (dto.ApiUrl ?? string.Empty).Trim().TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(baseUrl))\n                throw new ArgumentException(\"ApiUrl is required.\");\n\n            var http = _httpClientFactory.CreateClient();\n\n            // ----- Meta Cloud -----\n            if (lower == \"meta_cloud\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiToken))\n                    throw new ArgumentException(\"ApiToken is required for Meta Cloud.\");\n                if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    throw new ArgumentException(\"PhoneNumberId is required for Meta Cloud.\");\n\n                http.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n                var url = $\"{baseUrl}/{dto.PhoneNumberId}\";\n                var res = await http.GetAsync(url);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                    return $\"‚ùå Meta Cloud test failed ({(int)res.StatusCode}). Body: {body}\";\n\n                return \"‚úÖ Meta Cloud token & phone number ID are valid.\";\n            }\n\n            // ----- Pinnacle (formerly Pinbot) -----\n            if (lower == \"pinnacle\")\n            {\n                if (string.IsNullOrWhiteSpace(dto.ApiKey))\n                    return \"‚ùå API Key is required for Pinnacle.\";\n\n                // Pinnacle requires either phone number id OR WABA id in the path\n                var pathId =\n                    !string.IsNullOrWhiteSpace(dto.PhoneNumberId) ? dto.PhoneNumberId!.Trim() :\n                    !string.IsNullOrWhiteSpace(dto.WabaId) ? dto.WabaId!.Trim() :\n                    null;\n\n                if (string.IsNullOrWhiteSpace(pathId))\n                    return \"‚ùå Provide PhoneNumberId or WabaId for Pinnacle.\";\n\n                if (string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    return \"‚ùå WhatsApp Business Number is required for Pinnacle test.\";\n\n                var url = $\"{baseUrl}/{pathId}/messages\";\n                var payload = new\n                {\n                    to = dto.WhatsAppBusinessNumber,\n                    type = \"text\",\n                    text = new { body = \"Test message\" },\n                    messaging_product = \"whatsapp\"\n                };\n\n                using var req = new HttpRequestMessage(HttpMethod.Post, url);\n                req.Headers.TryAddWithoutValidation(\"apikey\", dto.ApiKey);\n                req.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                var res = await http.SendAsync(req);\n                var body = await res.Content.ReadAsStringAsync();\n\n                if (!res.IsSuccessStatusCode)\n                {\n                    if ((int)res.StatusCode == 401 || (int)res.StatusCode == 403)\n                        return $\"‚ùå Pinnacle rejected the API key for id '{pathId}'. Verify the key and id. Body: {body}\";\n\n                    return $\"‚ùå Pinnacle test failed ({(int)res.StatusCode}). Body: {body}\";\n                }\n\n                return \"‚úÖ Pinnacle API key and endpoint are reachable.\";\n            }\n\n            return $\"‚ùå Unsupported provider: {dto.Provider}\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            return setting?.WhatsAppBusinessNumber;\n        }\n\n        public async Task<string> GetCallbackUrlAsync(Guid businessId, string appBaseUrl)\n        {\n            var s = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (!string.IsNullOrWhiteSpace(s?.WebhookCallbackUrl))\n                return s!.WebhookCallbackUrl!;\n\n            return $\"{appBaseUrl.TrimEnd('/')}/api/webhookcallback\";\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
      "sha256": "1771172160b243b1e4e994f9249f39dc28c595891d2c3db6bee45648ef3aebb9",
      "language": "csharp",
      "size": 32378,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing System.Net.Http.Headers;\nusing System.Security.Claims;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.Shared;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            var provider = (setting.Provider ?? \"\").Trim().ToLowerInvariant();\n            var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"\";\n\n            try\n            {\n                if (provider == \"meta_cloud\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://graph.facebook.com/v22.0\" : baseUrl)}/{setting.WabaId}/message_templates?limit=100\";\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"üì¶ Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"‚ùå Failed to fetch templates from Meta: {Response}\", json);\n                            break;\n                        }\n\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed));\n                        nextUrl = parsed?.paging?.next?.ToString();\n                    }\n\n                    return templates;\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                    {\n                        _logger.LogWarning(\"Pinnacle API key missing for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    // Pinnacle typically accepts either WABA ID or PhoneNumberId. Prefer WABA.\n                    var pathId = !string.IsNullOrWhiteSpace(setting.WabaId)\n                        ? setting.WabaId!.Trim()\n                        : setting.PhoneNumberId?.Trim();\n\n                    if (string.IsNullOrWhiteSpace(pathId))\n                    {\n                        _logger.LogWarning(\"Pinnacle path id missing (WabaId/PhoneNumberId) for BusinessId: {BusinessId}\", businessId);\n                        return templates;\n                    }\n\n                    var nextUrl = $\"{(string.IsNullOrWhiteSpace(baseUrl) ? \"https://partnersv1.pinbot.ai/v3\" : baseUrl)}/{pathId}/message_templates?limit=100\";\n\n                    // IMPORTANT: Pinnacle needs apikey header\n                    _httpClient.DefaultRequestHeaders.Remove(\"apikey\");\n                    _httpClient.DefaultRequestHeaders.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        var response = await _httpClient.GetAsync(nextUrl);\n                        var json = await response.Content.ReadAsStringAsync();\n                        _logger.LogInformation(\"üì¶ Pinnacle Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                        if (!response.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"‚ùå Failed to fetch templates from Pinnacle: {Response}\", json);\n                            break;\n                        }\n\n                        // Try to support both \"data\": [...] and \"templates\": [...] styles\n                        dynamic parsed = JsonConvert.DeserializeObject(json);\n                        templates.AddRange(ParseTemplatesFromMetaLikePayload(parsed)); // many BSPs mirror Meta's shape\n                        nextUrl = parsed?.paging?.next?.ToString(); // if their API paginates similarly\n                                                                    // If no paging in Pinnacle, set nextUrl = null to exit loop\n                        if (nextUrl == null) break;\n                    }\n\n                    return templates;\n                }\n                else\n                {\n                    _logger.LogInformation(\"Provider {Provider} does not support listing via API in this build.\", provider);\n                    return templates;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates for provider {Provider}.\", provider);\n                return templates;\n            }\n        }\n\n        private static IEnumerable<TemplateMetadataDto> ParseTemplatesFromMetaLikePayload(dynamic parsed)\n        {\n            var list = new List<TemplateMetadataDto>();\n            if (parsed == null) return list;\n\n            // Prefer parsed.data; fall back to parsed.templates\n            var collection = parsed.data ?? parsed.templates;\n            if (collection == null) return list;\n\n            foreach (var tpl in collection)\n            {\n                string name = tpl.name?.ToString() ?? \"\";\n                string language = tpl.language?.ToString() ?? \"en_US\";\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                // components may be null for some BSPs\n                var components = tpl.components;\n                if (components != null)\n                {\n                    foreach (var component in components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                            body = component.text?.ToString() ?? \"\";\n\n                        if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                            hasImageHeader = true;\n\n                        if (type == \"BUTTONS\" && component.buttons != null)\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue =\n                                        button.url != null ? button.url.ToString() :\n                                        button.phone_number != null ? button.phone_number.ToString() :\n                                        button.coupon_code != null ? button.coupon_code.ToString() :\n                                        button.flow_id != null ? button.flow_id.ToString() :\n                                        null;\n\n                                    // If BSP marks dynamic examples like Meta, respect them; otherwise be lenient\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch { /* ignore per-button parsing issues */ }\n                            }\n                        }\n                    }\n                }\n\n                int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                list.Add(new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body,\n                    PlaceholderCount = placeholderCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = buttons\n                });\n            }\n\n            return list;\n        }\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var result = new List<TemplateForUIResponseDto>();\n\n            var user = _httpContextAccessor.HttpContext.User;\n            var businessId = user.GetBusinessId();\n            _logger.LogInformation(\"üîé Fetching templates for BusinessId {BusinessId}\", businessId);\n\n            // 1) Load this business's active setting (provider can be Meta or Pinnacle)\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(s =>\n                    s.IsActive &&\n                    s.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è No active WhatsApp setting for BusinessId {BusinessId}\", businessId);\n                return result;\n            }\n\n            try\n            {\n                string provider = setting.Provider?.ToLowerInvariant() ?? \"\";\n\n                if (provider == \"meta_cloud\")\n                {\n                    // ‚úÖ Meta Cloud path ‚Üí ApiToken + WabaId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.WabaId))\n                    {\n                        _logger.LogWarning(\"‚ö†Ô∏è Missing ApiToken or WabaId for Meta Cloud (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v22.0\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates?limit=100\";\n\n                    while (!string.IsNullOrWhiteSpace(nextUrl))\n                    {\n                        using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                        req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                        using var res = await _httpClient.SendAsync(req);\n                        var json = await res.Content.ReadAsStringAsync();\n\n                        _logger.LogInformation(\"üì¶ Meta Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                        if (!res.IsSuccessStatusCode)\n                        {\n                            _logger.LogError(\"‚ùå Meta template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                            break;\n                        }\n\n                        result.AddRange(ParseMetaTemplates(json));\n                        nextUrl = JsonConvert.DeserializeObject<dynamic>(json)?.paging?.next?.ToString();\n                    }\n                }\n                else if (provider == \"pinnacle\")\n                {\n                    // ‚úÖ Pinnacle path ‚Üí ApiKey + PhoneNumberId required\n                    if (string.IsNullOrWhiteSpace(setting.ApiKey) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                    {\n                        _logger.LogWarning(\"‚ö†Ô∏è Missing ApiKey or PhoneNumberId for Pinnacle (Biz {BusinessId})\", businessId);\n                        return result;\n                    }\n\n                    var baseUrl = (setting.ApiUrl?.TrimEnd('/') ?? \"https://partnersv1.pinbot.ai/v3\");\n                    var nextUrl = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    using var req = new HttpRequestMessage(HttpMethod.Get, nextUrl);\n                    req.Headers.Add(\"apikey\", setting.ApiKey);\n\n                    using var res = await _httpClient.SendAsync(req);\n                    var json = await res.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"üì¶ Pinnacle Template API (Biz {BusinessId}) payload:\\n{Json}\", businessId, json);\n\n                    if (!res.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"‚ùå Pinnacle template fetch failed (Biz {BusinessId}): {Json}\", businessId, json);\n                        return result;\n                    }\n\n                    result.AddRange(ParsePinnacleTemplates(json));\n                }\n                else\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è Unknown provider '{Provider}' for Biz {BusinessId}\", provider, businessId);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception while fetching templates for BusinessId {BusinessId}\", businessId);\n            }\n\n            return result;\n        }\n        private List<TemplateForUIResponseDto> ParseMetaTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            foreach (var tpl in parsed.data)\n            {\n                string status = (tpl.status?.ToString() ?? \"\").ToUpperInvariant();\n                if (status != \"APPROVED\" && status != \"ACTIVE\") continue;\n\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private List<TemplateForUIResponseDto> ParsePinnacleTemplates(string json)\n        {\n            var list = new List<TemplateForUIResponseDto>();\n            dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n            if (parsed?.data == null) return list;\n\n            foreach (var tpl in parsed.data)\n            {\n                // Pinnacle may not use status like Meta, adjust filter if needed\n                list.Add(BuildTemplateDtoFromComponents(tpl));\n            }\n\n            return list;\n        }\n\n        private TemplateForUIResponseDto BuildTemplateDtoFromComponents(dynamic tpl)\n        {\n            string name = tpl.name;\n            string language = tpl.language ?? \"en_US\";\n            string body = \"\";\n            bool hasImageHeader = false;\n            var buttons = new List<ButtonMetadataDto>();\n\n            foreach (var component in tpl.components)\n            {\n                string type = component.type?.ToString()?.ToUpperInvariant();\n\n                if (type == \"BODY\")\n                    body = component.text?.ToString() ?? \"\";\n\n                if (type == \"HEADER\" && (component.format?.ToString()?.ToUpperInvariant() == \"IMAGE\"))\n                    hasImageHeader = true;\n\n                if (type == \"BUTTONS\")\n                {\n                    foreach (var button in component.buttons)\n                    {\n                        string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                        string text = button.text?.ToString() ?? \"\";\n                        int index = buttons.Count;\n\n                        string subType = btnType switch\n                        {\n                            \"URL\" => \"url\",\n                            \"PHONE_NUMBER\" => \"voice_call\",\n                            \"QUICK_REPLY\" => \"quick_reply\",\n                            \"COPY_CODE\" => \"copy_code\",\n                            \"CATALOG\" => \"catalog\",\n                            \"FLOW\" => \"flow\",\n                            \"REMINDER\" => \"reminder\",\n                            \"ORDER_DETAILS\" => \"order_details\",\n                            _ => \"unknown\"\n                        };\n\n                        string? paramValue = button.url?.ToString() ?? button.phone_number?.ToString();\n\n                        if (subType == \"unknown\") continue;\n\n                        buttons.Add(new ButtonMetadataDto\n                        {\n                            Text = text,\n                            Type = btnType,\n                            SubType = subType,\n                            Index = index,\n                            ParameterValue = paramValue ?? \"\"\n                        });\n                    }\n                }\n            }\n\n            int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n            return new TemplateForUIResponseDto\n            {\n                Name = name,\n                Language = language,\n                Body = body,\n                ParametersCount = placeholderCount,\n                HasImageHeader = hasImageHeader,\n                ButtonParams = buttons\n            };\n        }\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"‚ùå WhatsApp settings not found for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            var provider = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n            var wabaId = setting.WabaId?.Trim();\n            if (string.IsNullOrWhiteSpace(wabaId))\n            {\n                _logger.LogWarning(\"‚ùå Missing WABA ID for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            // Build URL + request with per-request headers\n            string url;\n            using var req = new HttpRequestMessage(HttpMethod.Get, \"\");\n\n            if (provider == \"pinnacle\")\n            {\n                // Pinnacle: require ApiKey; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiKey))\n                {\n                    _logger.LogWarning(\"‚ùå ApiKey missing for Pinnacle provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://partnersv1.pinbot.ai/v3\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                // add header variants\n                req.Headers.TryAddWithoutValidation(\"apikey\", setting.ApiKey);\n                req.Headers.TryAddWithoutValidation(\"x-api-key\", setting.ApiKey);\n                // safety: also append as query (some edges require it)\n                url = url.Contains(\"apikey=\") ? url : $\"{url}&apikey={Uri.EscapeDataString(setting.ApiKey)}\";\n            }\n            else // meta_cloud\n            {\n                // Meta Cloud: require ApiToken; use WabaId for template listing\n                if (string.IsNullOrWhiteSpace(setting.ApiToken))\n                {\n                    _logger.LogWarning(\"‚ùå ApiToken missing for Meta provider (BusinessId {BusinessId})\", businessId);\n                    return null;\n                }\n\n                var baseUrl = string.IsNullOrWhiteSpace(setting.ApiUrl)\n                    ? \"https://graph.facebook.com/v18.0\"\n                    : setting.ApiUrl.TrimEnd('/');\n\n                url = $\"{baseUrl}/{wabaId}/message_templates?limit=200\";\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n            }\n\n            req.RequestUri = new Uri(url);\n            var response = await _httpClient.SendAsync(req);\n            var json = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                _logger.LogError(\"‚ùå Failed to fetch templates (provider={Provider}) for BusinessId {BusinessId}: HTTP {Status} Body: {Body}\",\n                    provider, businessId, (int)response.StatusCode, json);\n                return null;\n            }\n\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(json);\n                var data = parsed?.data;\n                if (data == null)\n                {\n                    _logger.LogWarning(\"‚ö†Ô∏è No 'data' array in template response (provider={Provider})\", provider);\n                    return null;\n                }\n\n                foreach (var tpl in data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language != null ? (string)tpl.language : \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    // components loop\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            try { body = component.text?.ToString() ?? \"\"; }\n                            catch { body = \"\"; }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpperInvariant();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpperInvariant() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    // normalize sub-type for our app\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // Known dynamic param extraction\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // Skip truly invalid\n                                    if (subType == \"unknown\" ||\n                                        (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n                                    {\n                                        _logger.LogWarning(\"‚ö†Ô∏è Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"‚ö†Ô∏è Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    // Count {{n}} placeholders in body\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{\\\\s*\\\\d+\\\\s*}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception while parsing template response\");\n            }\n\n            return null;\n        }\n        private static TemplateMetadataDto? ExtractTemplateFromListJson(string json, string templateName, bool includeButtons)\n        {\n            var root = JObject.Parse(json);\n            var data = root[\"data\"] as JArray;\n            if (data == null) return null;\n\n            foreach (var tplToken in data.OfType<JObject>())\n            {\n                var name = tplToken.Value<string>(\"name\") ?? \"\";\n                if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var language = tplToken.Value<string>(\"language\") ?? \"en_US\";\n                var components = tplToken[\"components\"] as JArray;\n\n                string body = \"\";\n                bool hasImageHeader = false;\n                var buttons = new List<ButtonMetadataDto>();\n\n                if (components != null)\n                {\n                    foreach (var comp in components.OfType<JObject>())\n                    {\n                        var type = (comp.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n\n                        if (type == \"BODY\")\n                        {\n                            body = comp.Value<string>(\"text\") ?? body;\n                        }\n                        else if (type == \"HEADER\")\n                        {\n                            var fmt = (comp.Value<string>(\"format\") ?? \"\").ToUpperInvariant();\n                            if (fmt == \"IMAGE\") hasImageHeader = true;\n                        }\n                        else if (includeButtons && type == \"BUTTONS\")\n                        {\n                            var btns = comp[\"buttons\"] as JArray;\n                            if (btns == null) continue;\n\n                            var idx = 0;\n                            foreach (var b in btns.OfType<JObject>())\n                            {\n                                var btnTypeRaw = (b.Value<string>(\"type\") ?? \"\").ToUpperInvariant();\n                                var text = b.Value<string>(\"text\") ?? \"\";\n\n                                var subType = btnTypeRaw switch\n                                {\n                                    \"URL\" => \"url\",\n                                    \"PHONE_NUMBER\" => \"voice_call\",\n                                    \"QUICK_REPLY\" => \"quick_reply\",\n                                    \"COPY_CODE\" => \"copy_code\",\n                                    \"CATALOG\" => \"catalog\",\n                                    \"FLOW\" => \"flow\",\n                                    \"REMINDER\" => \"reminder\",\n                                    \"ORDER_DETAILS\" => \"order_details\",\n                                    _ => \"unknown\"\n                                };\n\n                                string? paramValue =\n                                    b.Value<string>(\"url\") ??\n                                    b.Value<string>(\"phone_number\") ??\n                                    b.Value<string>(\"coupon_code\") ??\n                                    b.Value<string>(\"flow_id\");\n\n                                // Skip unknown or missing required dynamic values\n                                if (subType == \"unknown\") continue;\n                                if ((subType is \"url\" or \"flow\" or \"copy_code\") && string.IsNullOrWhiteSpace(paramValue))\n                                    continue;\n\n                                buttons.Add(new ButtonMetadataDto\n                                {\n                                    Text = text,\n                                    Type = btnTypeRaw,\n                                    SubType = subType,\n                                    Index = idx++,\n                                    ParameterValue = paramValue ?? \"\"\n                                });\n                            }\n                        }\n                    }\n                }\n\n                var paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                return new TemplateMetadataDto\n                {\n                    Name = name,\n                    Language = language,\n                    Body = body ?? \"\",\n                    PlaceholderCount = paramCount,\n                    HasImageHeader = hasImageHeader,\n                    ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                };\n            }\n\n            return null;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
      "sha256": "4101fd2ede7e1f3e47bbe18923020b99b11784aba7c3ba85f40fe7907bece593",
      "language": "csharp",
      "size": 1574,
      "content": "// üìÑ File: WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs\nusing FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto>\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.Provider)\n                .NotEmpty().WithMessage(\"Provider is required.\")\n                .Must(p => p == \"pinnacle\" || p == \"meta_cloud\")\n                .WithMessage(\"Provider must be 'pinnacle' or 'meta_cloud'.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\");\n\n            // Meta Cloud requirements\n            When(x => x.Provider == \"meta_cloud\", () =>\n            {\n                RuleFor(x => x.ApiToken)\n                    .NotEmpty().WithMessage(\"API Token is required for Meta Cloud.\");\n                RuleFor(x => x.PhoneNumberId)\n                    .NotEmpty().WithMessage(\"Phone Number ID is required for Meta Cloud.\");\n            });\n\n            // Pinbot requirements\n            When(x => x.Provider == \"pinnacle\", () =>\n            {\n                RuleFor(x => x.ApiKey)\n                    .NotEmpty().WithMessage(\"API Key is required for Pinbot.\");\n                RuleFor(x => x)\n                    .Must(x => !string.IsNullOrWhiteSpace(x.PhoneNumberId) || !string.IsNullOrWhiteSpace(x.WabaId))\n                    .WithMessage(\"Provide Phone Number ID or WABA ID for Pinbot.\");\n            });\n        }\n    }\n}\n"
    }
  ]
}
