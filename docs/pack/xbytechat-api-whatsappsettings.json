{
  "name": "xbytechat-api/WhatsAppSettings",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
      "sha256": "6afee1d3a9680e97d33644eb9415cbdfdd9b34d14f56727d201f7621d46bddd0",
      "language": "csharp",
      "size": 10116,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService whatsAppSettingsService,\n            ILogger<WhatsAppSettingsController> logger)\n        {\n            _whatsAppSettingsService = whatsAppSettingsService;\n            _logger = logger;\n        }\n\n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            _logger.LogInformation(\"üîß [UpdateSetting] Request received for WhatsApp settings update.\");\n\n            if (!ModelState.IsValid)\n            {\n                var validationErrors = ModelState\n                    .Where(e => e.Value.Errors.Count > 0)\n                    .Select(e => new\n                    {\n                        Field = e.Key,\n                        Errors = e.Value.Errors.Select(x => x.ErrorMessage)\n                    });\n\n                _logger.LogWarning(\"‚ùå [UpdateSetting] Validation failed: {@Errors}\", validationErrors);\n                return BadRequest(new { message = \"‚ùå Invalid input.\", errors = validationErrors });\n            }\n\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ‚úÖ Cleaner using your helper\n                dto.BusinessId = businessId;\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                _logger.LogWarning(\"‚ùå [UpdateSetting] BusinessId claim missing or invalid: {Message}\", ex.Message);\n                return Unauthorized(new { message = \"‚ùå BusinessId missing or invalid in token.\" });\n            }\n\n            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n            {\n                _logger.LogWarning(\"‚ùå [UpdateSetting] Missing ApiToken or PhoneNumberId.\");\n                return BadRequest(new { message = \"‚ùå API Token and Phone Number ID are required.\" });\n            }\n\n            try\n            {\n                _logger.LogInformation(\"üíæ [UpdateSetting] Saving/updating WhatsApp settings for businessId={BusinessId}.\", businessId);\n                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n                _logger.LogInformation(\"‚úÖ [UpdateSetting] WhatsApp settings updated successfully.\");\n                return Ok(new { message = \"‚úÖ WhatsApp settings saved/updated successfully.\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå [UpdateSetting] Exception occurred while saving settings.\");\n                return StatusCode(500, new { message = \"‚ùå Error while saving settings.\", details = ex.Message });\n            }\n        }\n\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n  \n            var businessId = User.GetBusinessId();\n            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        [HttpGet(\"{businessId}\")]\n        public async Task<IActionResult> GetSetting(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"‚ùå Invalid businessId.\" });\n\n            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n        //[HttpPost(\"test-connection\")]\n        //public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        //{\n        //    if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n        //        return BadRequest(new { message = \"‚ùå API Token and API URL are required for testing connection.\" });\n\n        //    try\n        //    {\n        //        var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n        //        return Ok(new { message = result });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n        //    }\n        //}\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n                return BadRequest(new { message = \"‚ùå API Token and API URL are required for testing connection.\" });\n\n            try\n            {\n                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n                return Ok(new { message = result });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n            if (!Guid.TryParse(businessIdStr, out var businessId))\n                return Unauthorized(new { message = \"‚ùå BusinessId missing or invalid in token.\" });\n\n            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n            if (!result)\n                return NotFound(new { message = \"‚ùå No WhatsApp settings found to delete.\" });\n\n            return Ok(new { message = \"üóëÔ∏è WhatsApp settings deleted successfully.\" });\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using System;\n//using System.Threading.Tasks;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n\n//        public WhatsAppSettingsController(IWhatsAppSettingsService whatsAppSettingsService)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//        }\n\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//                return BadRequest(new { message = \"‚ùå Invalid input.\", errors = ModelState });\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//                return BadRequest(new { message = \"‚ùå API Token and Phone Number ID are required.\" });\n\n//            try\n//            {\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                return Ok(new { message = \"‚úÖ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"‚ùå Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Get WhatsApp Settings by BusinessId\n//        /// </summary>\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"‚ùå Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"‚ùå WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        /// <summary>\n//        /// Test WhatsApp Connection (API URL + Token)\n//        /// </summary>\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"‚ùå API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"‚ùå Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Delete WhatsApp Settings for a Business\n//        /// </summary>\n//        [HttpDelete(\"delete/{businessId}\")]\n//        public async Task<IActionResult> DeleteSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"‚ùå Invalid businessId.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"‚ùå No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"üóëÔ∏è WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
      "sha256": "6a64af207ecc08df8ddba5f9b04afb58816cc87a04c8e74ad693655fe5fab584",
      "language": "csharp",
      "size": 3063,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ‚úÖ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"‚ùå Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"‚ùå Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
      "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
      "language": "csharp",
      "size": 536,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
      "sha256": "2ae3c96b70b9bd13834e6fe68cd66fe7f7be3336385574f56d0489cccf053c6f",
      "language": "csharp",
      "size": 935,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n       \n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string PhoneNumberId { get; set; }  // ‚úÖ NEW: Needed to send messages\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; } = \"https://graph.facebook.com/v18.0/\";\n\n        [Required]\n        [MaxLength(50)]\n        public string WhatsAppBusinessNumber { get; set; }  // ‚úÖ Still used for testing via `/me` or WABA ID\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
      "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
      "language": "csharp",
      "size": 911,
      "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ‚úÖ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
      "sha256": "86a9eeecdc03ce1f55e7057e15e38a1e82a136efb5adb1a16ec2e8de605a83dd",
      "language": "csharp",
      "size": 1082,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        // string ApiVersion { get; set; } = \"v18.0\";\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
      "sha256": "efcd668cb54b466be5f66ebf202f4e32ce48c8d1e8f6404a0d2366c0ec186549",
      "language": "csharp",
      "size": 584,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
      "sha256": "b5885cf1f231339958b3654b05bafa3aceb5fcb78d7f4e8c650d39c3fa21973f",
      "language": "csharp",
      "size": 593,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // üîπ (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
      "sha256": "ae214f0b9c67e280aded7d9d70930b9bc4e77e40cf9de8e5944787f072a23d74",
      "language": "csharp",
      "size": 6024,
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n\n        public WhatsAppSettingsService(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty)\n                throw new ArgumentException(\"Invalid BusinessId provided.\");\n\n            var existingSetting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId);\n\n            if (existingSetting != null)\n            {\n                // üîÅ Update existing record with null-safety\n                existingSetting.ApiUrl = dto.ApiUrl?.Trim() ?? existingSetting.ApiUrl;\n                existingSetting.ApiToken = dto.ApiToken?.Trim() ?? existingSetting.ApiToken;\n\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    existingSetting.PhoneNumberId = dto.PhoneNumberId.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    existingSetting.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName))\n                    existingSetting.SenderDisplayName = dto.SenderDisplayName.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.WabaId))\n                    existingSetting.WabaId = dto.WabaId.Trim();\n\n                existingSetting.IsActive = dto.IsActive;\n                existingSetting.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // ‚ûï Insert new record\n                var newSetting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ApiUrl = dto.ApiUrl.Trim(),\n                    ApiToken = dto.ApiToken.Trim(),\n                    PhoneNumberId = dto.PhoneNumberId?.Trim(),\n                    WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber?.Trim(),\n                    SenderDisplayName = dto.SenderDisplayName?.Trim(),\n                    WabaId = dto.WabaId?.Trim(),\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n            }\n\n            try\n            {\n                await _dbContext.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(\"Error saving WhatsApp settings: \" + ex.InnerException?.Message ?? ex.Message);\n            }\n        }\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            // üîé Find active WhatsApp setting for the business\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            // üóë Delete settings based on businessId\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null)\n                return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        //public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    using var client = new HttpClient();\n        //    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n        //    var baseUrl = dto.ApiUrl.TrimEnd('/');\n        //    var testUrl = $\"{baseUrl}/me\"; // üì° Lightweight endpoint for connection test\n\n        //    var response = await client.GetAsync(testUrl);\n        //    var content = await response.Content.ReadAsStringAsync();\n\n        //    if (!response.IsSuccessStatusCode)\n        //        throw new Exception($\"‚ùå WhatsApp API Error: {content}\");\n\n        //    return \"WhatsApp API token is valid and connection was successful.\";\n        //}\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            using var client = new HttpClient();\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n            var baseUrl = dto.ApiUrl.TrimEnd('/');\n            if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                throw new Exception(\"PhoneNumberId is required to test WhatsApp Cloud API connection.\");\n\n            // This is the official endpoint for checking the number\n            var testUrl = $\"{baseUrl}/{dto.PhoneNumberId}\";\n\n            var response = await client.GetAsync(testUrl);\n            var content = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n                throw new Exception($\"‚ùå WhatsApp API Error: {content}\");\n\n            return \"WhatsApp API token is valid and connection was successful.\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                throw new Exception($\"‚ùå WhatsApp settings not found for BusinessId: {businessId}\");\n            }\n\n            return setting.WhatsAppBusinessNumber;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
      "sha256": "c2ae93048c8cd03b7e28e4d0360bd8c2bf24bdfd80d3353ad8c2352244f38188",
      "language": "csharp",
      "size": 25242,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n        }\n\n        //public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        //{\n        //    var templates = new List<TemplateMetadataDto>();\n\n        //    var setting = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n        //    if (setting == null)\n        //    {\n        //        _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n        //        return templates;\n        //    }\n\n        //    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n        //    {\n        //        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n        //        return templates;\n        //    }\n\n        //    try\n        //    {\n        //        var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n        //        var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n        //        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n        //        var response = await _httpClient.GetAsync(url);\n        //        var json = await response.Content.ReadAsStringAsync();\n        //        _logger.LogInformation(\"üß™ Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n\n\n        //        if (!response.IsSuccessStatusCode)\n        //        {\n        //            _logger.LogError(\"Failed to fetch templates from Meta: {Response}\", json);\n        //            return templates;\n        //        }\n\n        //        var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n        //        foreach (var tpl in parsed.data)\n        //        {\n        //            string name = tpl.name;\n        //            string language = tpl.language ?? \"en_US\";\n        //            string body = \"\";\n\n        //            foreach (var component in tpl.components)\n        //            {\n        //                if (component.type == \"BODY\")\n        //                {\n        //                    body = component.text;\n        //                    break;\n        //                }\n        //            }\n\n        //            int placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n        //            templates.Add(new TemplateMetadataDto\n        //            {\n        //                Name = name,\n        //                Language = language,\n        //                Body = body,\n        //                PlaceholderCount = placeholderCount\n        //            });\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Exception while fetching WhatsApp templates.\");\n        //    }\n\n        //    return templates;\n        //}\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n            {\n                _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            try\n            {\n                var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n                _logger.LogInformation(\"üß™ Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch templates from Meta: {Response}\", json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpper();\n\n                        if (type == \"BODY\")\n                        {\n                            body = component.text?.ToString() ?? \"\";\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpper();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    bool hasExample = button.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(button.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n\n                                    if (subType == \"unknown\" || (paramValue == null && needsRuntimeValue))\n                                    {\n                                        _logger.LogWarning(\"‚ö†Ô∏è Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"‚ö†Ô∏è Failed to parse button for template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = buttons\n                    });\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates.\");\n            }\n\n            return templates;\n        }\n\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var allTemplates = new List<TemplateForUIResponseDto>();\n\n            var settingsList = await _dbContext.WhatsAppSettings\n                .Where(x => x.IsActive)\n                .ToListAsync();\n\n            foreach (var setting in settingsList)\n            {\n                if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                {\n                    _logger.LogWarning(\"‚è≠Ô∏è Skipping BusinessId {BusinessId} due to missing token or phone ID\", setting.BusinessId);\n                    continue;\n                }\n\n                try\n                {\n                    var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                    var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                    var response = await _httpClient.GetAsync(url);\n                    var json = await response.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"üì¶ Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                    if (!response.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"‚ùå Failed to fetch templates for BusinessId {BusinessId}: {Response}\", setting.BusinessId, json);\n                        continue;\n                    }\n\n                    var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                    foreach (var tpl in parsed.data)\n                    {\n                        string name = tpl.name;\n                        string language = tpl.language ?? \"en_US\";\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        foreach (var component in tpl.components)\n                        {\n                            string type = component.type?.ToString()?.ToUpper();\n\n                            if (type == \"BODY\")\n                            {\n                                try\n                                {\n                                    body = component.text?.ToString() ?? \"\";\n                                }\n                                catch\n                                {\n                                    _logger.LogWarning(\"‚ö†Ô∏è Could not read BODY component text for template: {TemplateName}\", name);\n                                    body = \"\";\n                                }\n                            }\n\n                            if (type == \"HEADER\")\n                            {\n                                string format = component.format?.ToString()?.ToUpper();\n                                if (format == \"IMAGE\")\n                                {\n                                    hasImageHeader = true;\n                                }\n                            }\n\n                            if (type == \"BUTTONS\")\n                            {\n                                foreach (var button in component.buttons)\n                                {\n                                    try\n                                    {\n                                        string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                        string text = button.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? paramValue = null;\n                                        if (button.url != null)\n                                            paramValue = button.url.ToString();\n                                        else if (button.phone_number != null)\n                                            paramValue = button.phone_number.ToString();\n                                        else if (button.coupon_code != null)\n                                            paramValue = button.coupon_code.ToString();\n                                        else if (button.flow_id != null)\n                                            paramValue = button.flow_id.ToString();\n\n                                        // üß† Meta injects static values ‚Äî no need to enforce paramValue if STATIC\n                                        bool hasExample = button.example != null;\n                                        bool isDynamic = hasExample && Regex.IsMatch(button.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n\n                                        bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                        bool needsRuntimeValue = requiresParam && isDynamic;\n\n                                        // ‚ùå Skip if invalid OR dynamic + missing runtime param\n                                        if (subType == \"unknown\" || (paramValue == null && needsRuntimeValue))\n                                        {\n                                            _logger.LogWarning(\"‚ö†Ô∏è Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                            continue;\n                                        }\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = paramValue ?? \"\" // ‚úÖ Always safe for static\n                                        });\n                                    }\n                                    catch (Exception exBtn)\n                                    {\n                                        _logger.LogWarning(exBtn, \"‚ö†Ô∏è Failed to parse button for template {TemplateName}\", name);\n                                    }\n                                }\n\n                            }\n                        }\n\n                        int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                        allTemplates.Add(new TemplateForUIResponseDto\n                        {\n                            Name = name,\n                            Language = language,\n                            Body = body,\n                            ParametersCount = placeholderCount,\n                            HasImageHeader = hasImageHeader,\n                            ButtonParams = buttons\n                        });\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"‚ùå Exception while fetching templates for BusinessId {BusinessId}\", setting.BusinessId);\n                }\n            }\n\n            return allTemplates;\n        }\n\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null ||\n                string.IsNullOrWhiteSpace(setting.ApiToken) ||\n                string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n            {\n                _logger.LogWarning(\"‚ùå Missing WhatsApp config for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            try\n            {\n                var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                _httpClient.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"‚ùå Failed to fetch templates for BusinessId {BusinessId}: {Json}\", businessId, json);\n                    return null;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpper();\n\n                        if (type == \"BODY\")\n                        {\n                            try\n                            {\n                                body = component.text?.ToString() ?? \"\";\n                            }\n                            catch\n                            {\n                                body = \"\";\n                            }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpper();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // ‚úÖ Extract known dynamic values\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // ‚úÖ Skip truly invalid (unknown + missing value for dynamic)\n                                    if (subType == \"unknown\" || (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n\n                                    {\n                                        _logger.LogWarning(\"‚ö†Ô∏è Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // ‚úÖ Default to empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"‚ö†Ô∏è Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Exception in GetTemplateByNameAsync\");\n            }\n\n            return null;\n        }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
      "sha256": "0514de8678bd403897fb43017b8857bf209000360de191805c741c17965c1112",
      "language": "csharp",
      "size": 1277,
      "content": "using FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto> // ‚úÖ Inherit properly\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.BusinessId)\n                .NotEmpty().WithMessage(\"BusinessId is required.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\")\n                .MaximumLength(500).WithMessage(\"API URL must not exceed 500 characters.\");\n\n            RuleFor(x => x.ApiToken)\n                .NotEmpty().WithMessage(\"API Token is required.\")\n                .MaximumLength(1000).WithMessage(\"API Token must not exceed 1000 characters.\");\n\n            RuleFor(x => x.WhatsAppBusinessNumber)\n                .NotEmpty().WithMessage(\"WhatsApp Business Number is required.\")\n                .MaximumLength(20).WithMessage(\"WhatsApp Business Number must not exceed 20 characters.\");\n\n            RuleFor(x => x.SenderDisplayName)\n                .MaximumLength(100).WithMessage(\"Sender Display Name must not exceed 100 characters.\")\n                .When(x => !string.IsNullOrEmpty(x.SenderDisplayName));\n        }\n    }\n}\n"
    }
  ]
}
