{
  "name": "xbytechat-api/Features/FlowAnalytics",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Controllers/FlowAnalyticsController.cs",
      "sha256": "18a260235767524c70c33a6a49f8929060e94415ee98ff743590d207242020e3",
      "language": "csharp",
      "size": 2196,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.FlowAnalytics.Services;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Controllers\n{\n    [ApiController]\n    [Route(\"api/flow-analytics\")]\n    public class FlowAnalyticsController : ControllerBase\n    {\n        private readonly IFlowAnalyticsService _analyticsService;\n\n        public FlowAnalyticsController(IFlowAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        // ‚úÖ GET /api/flow-analytics/summary\n        [HttpGet(\"summary\")]\n        [Authorize]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var result = await _analyticsService.GetAnalyticsSummaryAsync(businessId);\n            return Ok(result);\n        }\n\n        // ‚úÖ GET /api/flow-analytics/most-triggered-steps\n        [HttpGet(\"most-triggered-steps\")]\n        [Authorize]\n        public async Task<IActionResult> GetMostTriggeredSteps()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var data = await _analyticsService.GetMostTriggeredStepsAsync(businessId);\n            return Ok(data);\n        }\n\n        // ‚úÖ GET /api/flow-analytics/step-journey-breakdown?startDate=...&endDate=...\n        [HttpGet(\"step-journey-breakdown\")]\n        [Authorize]\n        public async Task<IActionResult> GetStepJourneyBreakdown([FromQuery] DateTime? startDate, [FromQuery] DateTime? endDate)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var data = await _analyticsService.GetStepJourneyBreakdownAsync(businessId, startDate, endDate);\n            return Ok(data);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsStepJourneyDto.cs",
      "sha256": "25c17b6d295eb4faf667e982e2878b32a18af8a759791962286f17eec9163f6f",
      "language": "csharp",
      "size": 889,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsStepJourneyDto\n    {\n        public Guid StepId { get; set; }\n\n        public string TemplateName { get; set; } = string.Empty;\n\n        public int TotalReached { get; set; }\n\n        public int ClickedNext { get; set; }\n\n        public Guid? NextStepId { get; set; }\n\n        // ‚úÖ Auto-calculated: number of users who dropped off at this step\n        public int DropOff => TotalReached - ClickedNext;\n\n        // ‚úÖ Auto-calculated: percentage of users who clicked \"next\"\n        public double ConversionRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)ClickedNext / TotalReached * 100, 2);\n\n        // ‚úÖ Optional: percentage of users who dropped off\n        public double DropOffRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)DropOff / TotalReached * 100, 2);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsSummaryDto.cs",
      "sha256": "5298f0c920ce53f68b8113de057d804750e1a3afd39d3a24e965ae120275118a",
      "language": "csharp",
      "size": 369,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsSummaryDto\n    {\n        public int TotalExecutions { get; set; }\n        public int UniqueContacts { get; set; }\n        public string TopStepTriggered { get; set; } = \"N/A\";\n        public int TopStepCount { get; set; }\n        public DateTime? LastExecutedAt { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowStepAnalyticsDto.cs",
      "sha256": "538b4b71cb5a0a82ee36ec0147c0014d4f6570b635eb2ce711cb7e8de3119a09",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowStepAnalyticsDto\n    {\n        public Guid StepId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public int TotalReached { get; set; }\n        public int ClickedNext { get; set; }\n        public int DropOff => TotalReached - ClickedNext;\n        public Guid? NextStepId { get; set; }\n        public DateTime ExecutedAtUtc { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/MostTriggeredStepDto.cs",
      "sha256": "18dc2f8497fae7508358e8556503db073d057061d1892fed2882208fa6653588",
      "language": "csharp",
      "size": 310,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class MostTriggeredStepDto\n    {\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n        public int TriggerCount { get; set; }\n        public DateTime? LastTriggeredAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/FlowAnalyticsService.cs",
      "sha256": "b832767451b9f0161f931082a45a698407bf4cfaa6c5077edef8a2f6d30385cb",
      "language": "csharp",
      "size": 5128,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public class FlowAnalyticsService : IFlowAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public FlowAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ‚úÖ Summary cards (executions, unique contacts, top step)\n        public async Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId)\n        {\n            try\n            {\n                Log.Information(\"üìä Generating Flow Analytics Summary for BusinessId: {BusinessId}\", businessId);\n\n                var recentExecutions = await _context.FlowExecutionLogs\n                    .Where(e => e.BusinessId == businessId)\n                    .ToListAsync();\n\n                var totalExecutions = recentExecutions.Count;\n                var uniqueContacts = recentExecutions.Select(e => e.ContactPhone).Distinct().Count();\n                var mostTriggeredStep = recentExecutions\n                    .GroupBy(e => e.StepName)\n                    .OrderByDescending(g => g.Count())\n                    .Select(g => new { Step = g.Key, Count = g.Count() })\n                    .FirstOrDefault();\n\n                return new FlowAnalyticsSummaryDto\n                {\n                    TotalExecutions = totalExecutions,\n                    UniqueContacts = uniqueContacts,\n                    TopStepTriggered = mostTriggeredStep?.Step ?? \"N/A\",\n                    TopStepCount = mostTriggeredStep?.Count ?? 0,\n                    LastExecutedAt = recentExecutions\n                        .OrderByDescending(e => e.ExecutedAt)\n                        .FirstOrDefault()?.ExecutedAt\n                };\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to generate flow analytics summary\");\n                return new FlowAnalyticsSummaryDto();\n            }\n        }\n\n        // ‚úÖ Top triggered steps leaderboard\n        public async Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId)\n        {\n            return await _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId)\n                .GroupBy(e => new { e.StepId, e.StepName })\n                .Select(g => new MostTriggeredStepDto\n                {\n                    StepId = g.Key.StepId,\n                    StepName = g.Key.StepName,\n                    TriggerCount = g.Count(),\n                    LastTriggeredAt = g.Max(e => e.ExecutedAt)\n                })\n                .OrderByDescending(x => x.TriggerCount)\n                .Take(5)\n                .ToListAsync();\n        }\n\n        // ‚úÖ Step-by-step journey breakdown (with date filter)\n        public async Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate)\n        {\n            var query = _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId);\n\n            if (startDate.HasValue)\n                query = query.Where(e => e.ExecutedAt >= startDate.Value.Date);\n\n            if (endDate.HasValue)\n                query = query.Where(e => e.ExecutedAt <= endDate.Value.Date.AddDays(1).AddTicks(-1));\n\n            var logs = await query.ToListAsync();\n\n            // Group by StepId\n            var grouped = logs\n                .GroupBy(e => new { e.StepId, e.TemplateName, e.TriggeredByButton, e.FlowId })\n                .Select(g => new\n                {\n                    StepId = g.Key.StepId,\n                    TemplateName = g.Key.TemplateName,\n                    TotalReached = g.Count(),\n                    ClickedNext = logs.Count(x =>\n                        x.TriggeredByButton != null &&\n                        x.FlowId == g.Key.FlowId &&\n                        x.StepId != g.Key.StepId &&\n                        x.TriggeredByButton == g.Key.TriggeredByButton\n                    ),\n                    FlowId = g.Key.FlowId,\n                    TriggeredByButton = g.Key.TriggeredByButton\n                })\n                .ToList();\n\n            // Build final breakdown\n            var breakdown = grouped.Select(g => new FlowAnalyticsStepJourneyDto\n            {\n                StepId = g.StepId,\n                TemplateName = g.TemplateName,\n                TotalReached = g.TotalReached,\n                ClickedNext = g.ClickedNext,\n              //  DropOff = g.TotalReached - g.ClickedNext,\n                NextStepId = _context.FlowButtonLinks\n                    .Where(bl =>\n                        bl.CTAFlowStepId == g.StepId &&\n                        bl.ButtonText == g.TriggeredByButton)\n                    .Select(bl => bl.NextStepId)\n                    .FirstOrDefault()\n            }).ToList();\n\n            return breakdown;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/IFlowAnalyticsService.cs",
      "sha256": "65a623c78188e9581eee608e1e5e53404f8431fb317139d50a4caadd86b074ae",
      "language": "csharp",
      "size": 512,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public interface IFlowAnalyticsService\n    {\n        Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId);\n        Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId);\n        Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate);\n\n    }\n}\n"
    }
  ]
}
