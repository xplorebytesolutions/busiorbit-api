{
  "name": "xbytechat-api/Infrastructure",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Infrastructure/Flows/FlowClickTokenOptions.cs",
      "sha256": "77072ad81d2853a2fd79e3d9e38138f6adfdf21eea5558d5771531d9dde4eb9d",
      "language": "csharp",
      "size": 421,
      "content": "// ðŸ“„ Infrastructure/Flows/FlowClickTokenOptions.cs\nnamespace xbytechat.api.Infrastructure.Flows\n{\n    public class FlowClickTokenOptions\n    {\n        public string Secret { get; set; } = \"\";   // long random string (256-bit recommended)\n        public string BaseUrl { get; set; } = \"\";  // e.g. https://app.yourdomain.com\n        public int TtlHours { get; set; } = 72;    // token lifetime (default 3 days)\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Infrastructure/Flows/FlowClickTokenService.cs",
      "sha256": "a259df299ffe015927cc0dfc8bf0818b0e45222cd93cfb2dfb5879f2658e0dfb",
      "language": "csharp",
      "size": 3570,
      "content": "// ðŸ“„ Infrastructure/Flows/FlowClickTokenService.cs\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Security.Claims;\nusing System.Text;\nusing Microsoft.Extensions.Options;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace xbytechat.api.Infrastructure.Flows\n{\n    public record FlowClickPayload(\n        Guid biz, Guid fid, int ver, Guid sid, short bi,\n        Guid mlid, string cp, long iat, long exp\n    );\n\n    public interface IFlowClickTokenService\n    {\n        string Create(FlowClickPayload p);\n        FlowClickPayload Validate(string token);\n        string BuildUrl(FlowClickPayload p);\n    }\n\n    public class FlowClickTokenService : IFlowClickTokenService\n    {\n        private readonly FlowClickTokenOptions _opt;\n        private readonly JwtSecurityTokenHandler _handler = new();\n\n        public FlowClickTokenService(IOptions<FlowClickTokenOptions> opt)\n        {\n            _opt = opt.Value;\n        }\n\n        public string Create(FlowClickPayload p)\n        {\n            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_opt.Secret));\n            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n            var claims = new[]\n            {\n                new Claim(\"biz\", p.biz.ToString()),\n                new Claim(\"fid\", p.fid.ToString()),\n                new Claim(\"ver\", p.ver.ToString()),\n                new Claim(\"sid\", p.sid.ToString()),\n                new Claim(\"bi\",  p.bi.ToString()),\n                new Claim(\"mlid\",p.mlid.ToString()),\n                new Claim(\"cp\",  p.cp),\n                new Claim(\"iat\", p.iat.ToString()),\n                new Claim(\"exp\", p.exp.ToString())\n            };\n\n            var token = new JwtSecurityToken(claims: claims, signingCredentials: creds);\n            return _handler.WriteToken(token);\n        }\n\n        public FlowClickPayload Validate(string token)\n        {\n            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_opt.Secret));\n\n            var parameters = new TokenValidationParameters\n            {\n                ValidateIssuer = false,\n                ValidateAudience = false,\n                ValidateLifetime = false, // weâ€™ll check manually\n                ValidateIssuerSigningKey = true,\n                IssuerSigningKey = key\n            };\n\n            _handler.ValidateToken(token, parameters, out var validated);\n            var jwt = (JwtSecurityToken)validated;\n\n            long iat = long.Parse(jwt.Claims.First(c => c.Type == \"iat\").Value);\n            long exp = long.Parse(jwt.Claims.First(c => c.Type == \"exp\").Value);\n            var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n            if (now > exp) throw new SecurityTokenExpiredException(\"Token expired\");\n\n            return new FlowClickPayload(\n                biz: Guid.Parse(jwt.Claims.First(c => c.Type == \"biz\").Value),\n                fid: Guid.Parse(jwt.Claims.First(c => c.Type == \"fid\").Value),\n                ver: int.Parse(jwt.Claims.First(c => c.Type == \"ver\").Value),\n                sid: Guid.Parse(jwt.Claims.First(c => c.Type == \"sid\").Value),\n                bi: short.Parse(jwt.Claims.First(c => c.Type == \"bi\").Value),\n                mlid: Guid.Parse(jwt.Claims.First(c => c.Type == \"mlid\").Value),\n                cp: jwt.Claims.First(c => c.Type == \"cp\").Value,\n                iat: iat,\n                exp: exp\n            );\n        }\n\n        public string BuildUrl(FlowClickPayload p)\n        {\n            var token = Create(p);\n            return $\"{_opt.BaseUrl.TrimEnd('/')}/r/flow/{token}\";\n        }\n    }\n}\n"
    }
  ]
}
