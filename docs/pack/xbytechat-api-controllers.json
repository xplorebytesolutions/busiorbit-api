{
  "name": "xbytechat-api/Controllers",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Controllers/BusinessLoginController.cs",
      "sha256": "7eda997e4bb632f6a487b52c57910c7c83ca50c17597d2a02e818cb3ed2459be",
      "language": "csharp",
      "size": 1158,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.DTOs;\nusing xbytechat.api.DTOs.Tenants;\nusing xbytechat.api.Services.Interfaces;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/tenants\")]\n    public class BusinessLoginController : ControllerBase\n    {\n        private readonly IBusinessService _tenantService;\n\n        public BusinessLoginController(IBusinessService tenantService)\n        {\n            _tenantService = tenantService;\n        }\n\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] BusinessLoginRequest request)\n        {\n            try\n            {\n                var tenant = await _tenantService.LoginAsync(request);\n\n                return Ok(new\n                {\n                    tenant.Id,\n                    tenant.Email,\n                    tenant.CompanyName,\n                    //tenant.Role,\n                    //tenant.Plan,\n                    Message = \"Login successful\"\n                });\n            }\n            catch (Exception ex)\n            {\n                return Unauthorized(new { Message = ex.Message });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/DevSeedController.cs",
      "sha256": "e42997ea8140347d4c505532f1a7a654901109f62e13ac56dc8622ae0a20b3d8",
      "language": "csharp",
      "size": 2166,
      "content": "#if DEBUG\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Linq;\nusing System.Threading.Tasks;\n\n[ApiController]\n[Route(\"api/dev-seed\")]\n[ApiExplorerSettings(IgnoreApi = true)]\npublic class DevSeedController : ControllerBase\n{\n    private readonly UserManager<IdentityUser> _users;\n    private readonly RoleManager<IdentityRole> _roles;\n    private readonly IWebHostEnvironment _env;\n\n    public DevSeedController(\n        UserManager<IdentityUser> users,\n        RoleManager<IdentityRole> roles,\n        IWebHostEnvironment env)\n    {\n        _users = users;\n        _roles = roles;\n        _env = env;\n    }\n\n    [AllowAnonymous]\n    [HttpPost(\"e2e-user\")]\n    public async Task<IActionResult> SeedE2E([FromBody] SeedReq req)\n    {\n        // Only allow in Development\n        if (!_env.IsDevelopment())\n            return Forbid();\n\n        var email = (req.Email ?? \"\").Trim();\n        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(req.Password))\n            return BadRequest(new { message = \"email/password required\" });\n\n        // Idempotent create/update\n        var user = await _users.FindByEmailAsync(email);\n        if (user == null)\n        {\n            user = new IdentityUser { UserName = email, Email = email, EmailConfirmed = true };\n            var create = await _users.CreateAsync(user, req.Password);\n            if (!create.Succeeded)\n                return BadRequest(new { message = \"create failed\", errors = create.Errors.Select(e => e.Description) });\n        }\n\n        // Ensure role (use \"superadmin\" or a minimal CRM role your app understands)\n        var role = string.IsNullOrWhiteSpace(req.Role) ? \"superadmin\" : req.Role.Trim();\n        if (!await _roles.RoleExistsAsync(role))\n            await _roles.CreateAsync(new IdentityRole(role));\n        if (!await _users.IsInRoleAsync(user, role))\n            await _users.AddToRoleAsync(user, role);\n\n        return Ok(new { ok = true, email, role });\n    }\n\n    public record SeedReq(string Email, string Password, string Role = \"superadmin\");\n}\n#endif\n"
    },
    {
      "path": "xbytechat-api/Controllers/HealthCheckController.cs",
      "sha256": "52d69ec41e8cd4fc50bc1281507a30e39bc629677df7bbd0e1cfb876e2623086",
      "language": "csharp",
      "size": 799,
      "content": "// xbytechat-api/Controllers/HealthCheckController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Reflection;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class HealthCheckController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult Get() => Ok(\"‚úÖ xByteChat backend is running üöÄ\");\n\n        [AllowAnonymous]\n        [HttpGet(\"ping\")]\n        public IActionResult Ping()\n        {\n            var version = Assembly.GetExecutingAssembly()?.GetName()?.Version?.ToString() ?? \"0.0.0\";\n            return Ok(new\n            {\n                status = \"ok\",\n                version,\n                serverTimeUtc = DateTime.UtcNow.ToString(\"o\")\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/MessageLogsController.cs",
      "sha256": "e36c308f0d6e42ec75e8db9797ab4ea5e68366e503e0bb04a51824491c22620a",
      "language": "csharp",
      "size": 648,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessageLogsController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public MessageLogsController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Get()\n        {\n            var logs = await _db.MessageLogs\n                .OrderByDescending(log => log.CreatedAt)\n                .ToListAsync();\n\n            return Ok(logs);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/MessagesController.cs",
      "sha256": "c23a3ca95ebcc60cdb6a1762b7c1d9605de6427a56dd4b91332e15eecfbb4500",
      "language": "csharp",
      "size": 6940,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Services.Messages.Interfaces;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessagesController : ControllerBase\n    {\n        private readonly IMessageService _messageService;\n\n        public MessagesController(IMessageService messageService)\n        {\n            _messageService = messageService;\n        }\n\n        /// ‚úÖ SEND TEXT MESSAGE\n        [HttpPost(\"send-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ‚úÖ SEND IMAGE MESSAGE\n        [HttpPost(\"send-image\")]\n        public async Task<IActionResult> SendImageMessage([FromBody] ImageMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ‚úÖ SEND TEMPLATE MESSAGE\n        [HttpPost(\"send-template\")]\n        public async Task<IActionResult> SendTemplateMessage([FromBody] TemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ‚úÖ SEND CTA BUTTON MESSAGE (Free-form Interactive)\n        [HttpPost(\"send-cta\")]\n        public async Task<IActionResult> SendCtaMessage([FromBody] CtaMessageDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.RecipientPhone) || string.IsNullOrWhiteSpace(dto.BodyText) || dto.Buttons == null || dto.Buttons.Count == 0)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"‚ùå Invalid request ‚Äî phone, body text and buttons are required\"\n                });\n            }\n\n            // Optional tracking\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _messageService.SendInteractiveMessageAsync(dto.RecipientPhone, dto.BodyText, dto.Buttons);\n\n            return result.Success\n                ? Ok(new\n                {\n                    success = true,\n                    message = result.Message,\n                    messageId = result.MessageId,\n                    logId = result.MessageLogId,\n                    raw = result.RawResponse\n                })\n                : StatusCode(500, new\n                {\n                    success = false,\n                    message = result.Message,\n                    error = result.ErrorMessage\n                });\n        }\n\n        /// ‚úÖ SEND BULK MESSAGES\n        //[HttpPost(\"send-bulk\")]\n        //public async Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto)\n        //{\n        //    var result = new SendResultExtended\n        //    {\n        //        Success = true,\n        //        Message = \"‚úÖ All messages processed.\",\n        //        LogId = null,\n        //        MessageId = null\n        //    };\n\n        //    try\n        //    {\n        //        foreach (var contactId in dto.ContactIds)\n        //        {\n        //            var contact = await _dbContext.Contacts\n        //                .Include(c => c.Business)\n        //                .FirstOrDefaultAsync(c => c.Id == contactId);\n\n        //            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n        //                continue;\n\n        //            BaseMessageDto message;\n\n        //            if (dto.MessageType.ToLower() == \"template\")\n        //            {\n        //                message = new TemplateMessageDto\n        //                {\n        //                    RecipientNumber = contact.PhoneNumber,\n        //                    MessageContent = dto.MessageTemplate,\n        //                    MessageType = \"template\",\n        //                    TemplateName = dto.TemplateName!,\n        //                    TemplateParameters = dto.TemplateParams ?? new List<string>(),\n        //                    BusinessId = contact.BusinessId\n        //                };\n        //            }\n        //            else\n        //            {\n        //                message = new TextMessageDto\n        //                {\n        //                    RecipientNumber = contact.PhoneNumber,\n        //                    MessageContent = dto.MessageTemplate,\n        //                    MessageType = \"text\",\n        //                    BusinessId = contact.BusinessId\n        //                };\n        //            }\n\n        //            await SendMessageAsync(message); // already returns SendResultExtended\n        //        }\n\n        //        return result;\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return new SendResultExtended\n        //        {\n        //            Success = false,\n        //            Message = \"‚ùå Bulk send failed.\",\n        //            ErrorMessage = ex.Message\n        //        };\n        //    }\n        //}\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Controllers/SendMessageController.cs",
      "sha256": "f2cf8e138d7177000e595b752d8da0ab54cec8a56df32328388c4a4f58f328d9",
      "language": "csharp",
      "size": 1919,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Services;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppController : ControllerBase\n    {\n        private readonly WhatsAppService _whatsAppService;\n\n        public WhatsAppController(WhatsAppService whatsAppService)\n        {\n            _whatsAppService = whatsAppService;\n        }\n\n        /// <summary>\n        /// Endpoint to send a WhatsApp message.\n        /// </summary>\n        /// <param name=\"recipientPhone\">Recipient's phone number (including country code).</param>\n        /// <param name=\"messageText\">Text message to send.</param>\n        /// <returns>Response with the result of the send operation.</returns>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromQuery] string recipientPhone, [FromQuery] string messageText)\n        {\n            if (string.IsNullOrEmpty(recipientPhone) || string.IsNullOrEmpty(messageText))\n            {\n                return BadRequest(new { success = false, message = \"Phone number and message text are required.\" });\n            }\n\n            // Call WhatsApp service to send the message\n            var result = await _whatsAppService.SendMessageAsync(recipientPhone, messageText);\n\n            if (result.Success)\n            {\n                return Ok(new\n                {\n                    success = true,\n                    message = \"‚úÖ Message sent successfully.\",\n                    response = result.RawResponse\n                });\n            }\n            else\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = result.ErrorMessage ?? \"‚ùå Failed to send message.\",\n                    response = result.RawResponse\n                });\n            }\n        }\n    }\n}\n"
    }
  ]
}
