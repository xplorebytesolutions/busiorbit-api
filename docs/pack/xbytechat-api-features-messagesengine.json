{
  "name": "xbytechat-api/Features/MessagesEngine",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/IWhatsAppProvider.cs",
      "sha256": "25a1b1105d245abb3cf620574e2cca3c0da007884f8ba8a062c2cd4724b88022",
      "language": "csharp",
      "size": 1124,
      "content": "// üìÑ File: Features/MessagesEngine/Abstractions/IWhatsAppProvider.cs\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n   \n    public interface IWhatsAppProvider\n    {\n        Task<WaSendResult> SendTextAsync(string to, string body);\n        Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components);\n        Task<WaSendResult> SendInteractiveAsync(object fullPayload); // prebuilt object (e.g., image + CTA)\n    }\n}\n\n\n\n//namespace xbytechat.api.Features.MessagesEngine.Abstractions\n//{\n//    public interface IWhatsAppProvider\n//    {\n//        string Provider { get; }\n\n//        Task<WaSendResult> SendTextAsync(string to, string body, CancellationToken ct = default);\n\n//        Task<WaSendResult> SendTemplateAsync(string to, string templateName, string language, object? components, CancellationToken ct = default);\n\n//        // Optional: interactive/image+CTA\n//        Task<WaSendResult> SendInteractiveAsync(object payload, CancellationToken ct = default);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendResult.cs",
      "sha256": "cbdf2f4ea14dafdbfd281c92d4701d11b385c52c89785faa04d1848b6af5bd8f",
      "language": "csharp",
      "size": 320,
      "content": "using System.Net;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public record WaSendResult(\n        bool Success,\n        string Provider,\n        string? ProviderMessageId = null,\n        HttpStatusCode? StatusCode = null,\n        string? RawResponse = null,\n        string? Error = null\n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendTemplate.cs",
      "sha256": "ce04cfc0e5abaca6ef42cf5593159791a9ae093be9b7399eae4442252b2362bd",
      "language": "csharp",
      "size": 378,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public class WaSendTemplate\n    {\n        public Guid BusinessId { get; init; }\n        public string To { get; init; } = \"\";\n        public string TemplateName { get; init; } = \"\";\n        public string Language { get; init; } = \"en_US\";\n        public object? Components { get; init; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Abstractions/WaSendText.cs",
      "sha256": "192ded7365dc037581055e12a8e00816487953e786e107447465183e8e0f83a7",
      "language": "csharp",
      "size": 260,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Abstractions\n{\n    public class WaSendText\n    {\n        public Guid BusinessId { get; init; }\n        public string To { get; init; } = \"\";\n        public string Body { get; init; } = \"\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Contracts/MessageEnvelope.cs",
      "sha256": "7d9a3c2180154a34b5c48dbcc92d2b9ce3affbcadaacba097bba0eae1af2925e",
      "language": "csharp",
      "size": 648,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.Contracts\n{\n    /// <summary>\n    /// Provider-agnostic message envelope. Maps to Meta/Pinbot under the hood.\n    /// </summary>\n    public sealed record MessageEnvelope(\n        string To,\n        string Kind,                       // \"text\" | \"template\" | \"interactive\"\n        string? TemplateName = null,\n        string LanguageCode = \"en_US\",\n        List<object>? Components = null,    // template components\n        object? Interactive = null,         // interactive payload (if any)\n        string? TextBody = null,\n        string? ImageUrl = null\n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Controllers/MessageEngineController.cs",
      "sha256": "dd1f769411eade4245311c0d7c29700ca7075eae0ba54277ccfc6be641537e74",
      "language": "csharp",
      "size": 5639,
      "content": "\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.MessagesEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class MessageEngineController : ControllerBase\n    {\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IMessageAnalyticsService _messageAnalyticsServiceervice;\n\n\n        public MessageEngineController(IMessageEngineService messageService, IMessageAnalyticsService messageAnalyticsService)\n        {\n            _messageEngineService = messageService;\n            _messageAnalyticsServiceervice = messageAnalyticsService;\n        }\n        [HttpPost(\"send-contentfree-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid text message payload.\"));\n\n            try\n            {\n                var result = await _messageEngineService.SendTextDirectAsync(dto); // üëà New direct method\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message, result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending text message: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending text message.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-template-simple\")]\n        public async Task<IActionResult> SendTemplateMessageSimple([FromBody] SimpleTemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid template message request.\"));\n\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out Guid businessId))\n                    return Unauthorized(ResponseResult.ErrorInfo(\"‚ùå Business ID not found in token.\"));\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message ?? \"‚ùå Failed to send template.\", result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending template: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-image-campaign/{campaignId}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid campaignId)\n        {\n            try\n            {\n                var businessId = UserClaimHelper.GetBusinessId(User); // ‚úÖ from\n                                                                      // claims\n                var userName = UserClaimHelper.GetUserName(User);     // for logging (if needed)\n\n                var result = await _messageEngineService.SendImageCampaignAsync(campaignId, businessId, userName);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error while sending image campaign: \" + ex.Message);\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Server error while sending campaign.\", ex.ToString()));\n            }\n        }\n        public static class UserClaimHelper\n        {\n            public static Guid GetBusinessId(ClaimsPrincipal user)\n            {\n                var claim = user.Claims.FirstOrDefault(c => c.Type == \"businessId\");\n                return claim != null ? Guid.Parse(claim.Value) : Guid.Empty;\n            }\n\n            public static string GetUserName(ClaimsPrincipal user)\n            {\n                return user?.Identity?.Name ?? \"Unknown\";\n            }\n        }\n\n        [HttpPost(\"send-image-template\")]\n        public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // Uses your extension method!\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return Unauthorized(new { message = ex.Message });\n            }\n\n            var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n            if (result.Success)\n                return Ok(new { message = result.Message, raw = result.RawResponse });\n\n            return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _messageAnalyticsServiceervice.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/AutoSendTemplateMessageDto.cs",
      "sha256": "99519bdaed8df38337d3485148cfc53b4972c2616ebb386417321455ad582576",
      "language": "csharp",
      "size": 422,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class AutoSendTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string PhoneNumber { get; set; }\n        public Guid TemplateId { get; set; }\n        public string TemplateName { get; set; }\n        public Dictionary<string, string> Placeholders { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/CtaButtonDto.cs",
      "sha256": "60ecf5aa33d787f635ef05f11c48b8f9f6a11d48b2d7322f7f2ef575b91f9657",
      "language": "csharp",
      "size": 307,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class CtaButtonDto\n    {\n        public string Title { get; set; } = string.Empty; // e.g., \"Buy Now\", \"View Details\"\n        public string Type { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/ImageTemplateMessageDto.cs",
      "sha256": "97564675c3c457ff71f51a241ad4cbca69ec60eaab2b81b81c14fb2360ae34f0",
      "language": "csharp",
      "size": 652,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class ImageTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; }\n    public string TemplateName { get; set; }\n    public string LanguageCode { get; set; } = \"en_US\";\n    public string HeaderImageUrl { get; set; }\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // ‚úÖ Add these two for flow tracking\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/MessageTypeEnum.cs",
      "sha256": "d3120f117dc16b8ab9901ba3726defab664b2a9b4a5414eff586e7e27f55062a",
      "language": "csharp",
      "size": 286,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [JsonConverter(typeof(JsonStringEnumConverter))] // Enables string parsing in JSON\n    public enum MessageTypeEnum\n    {\n        Text,\n        Image,\n        Template,\n        Cta\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendMessageDto.cs",
      "sha256": "1c45c09fda3fbb66ba843912c7617fe09447ec841b82f4b0f5c2a08cf8341fc1",
      "language": "csharp",
      "size": 1889,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs.Validation;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [ValidateMessageDto] // ‚úÖ Custom validator will enforce conditional field rules\n    public class SendMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; } = string.Empty;\n\n        [Required]\n        public MessageTypeEnum MessageType { get; set; }\n\n        // üìù Text Message\n        public string? TextContent { get; set; }\n\n        // üñºÔ∏è Image Message\n        public string? MediaUrl { get; set; }\n\n        // üìã Template Message\n        public string? TemplateName { get; set; }\n        public Dictionary<string, string>? TemplateParameters { get; set; }\n\n        // üõí CTA Message\n        public List<CtaButtonDto>? CtaButtons { get; set; }\n\n        // ‚úÖ Required: this was missing [Optional but needed for CTA/Template message sending]\n        public List<string>? ButtonParams { get; set; }\n\n        // üìä Optional Metadata\n        public Guid? CampaignId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n\n        public string? SourceModule { get; set; }\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n        public string? BotId { get; set; }\n        public string? RefMessageId { get; set; }\n        public string? CTATriggeredFrom { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n\n        // ‚úÖ Add these two for flow tracking\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendTemplateMessageSimpleDto.cs",
      "sha256": "00dc74bb6a1b396bab6fcd63f93454cfd59671260c4da8b0afd8754e83e10ce8",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SendTemplateMessageSimpleDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string TemplateName { get; set; }\n        public List<string> TemplateParameters { get; set; } = new();\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SimpleTemplateMessageDto.cs",
      "sha256": "13b09ae3db26e3770de01db13a5f5dabff0f7e5b09c9ed73dc44272e47699ac2",
      "language": "csharp",
      "size": 703,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SimpleTemplateMessageDto\n    {\n        //public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TemplateName { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public bool HasStaticButtons { get; set; } = false;\n\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "9b7be7ee8b48ca30422fe6b4ee2eb6af563f79ae7abad04aaaab9fdb4658612b",
      "language": "csharp",
      "size": 434,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\npublic class TemplateForUIResponseDto\n{\n    public string Name { get; set; }\n    public string Language { get; set; }\n    public string Body { get; set; }\n\n    // ‚úÖ Correct naming for frontend\n    public int ParametersCount { get; set; }\n\n    public List<ButtonMetadataDto> ButtonParams { get; set; }\n    public bool HasImageHeader { get; set; } // üÜï Used to detect image templates\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TextMessageSendDto.cs",
      "sha256": "d7fa4ec175e1c0d95b0bf1d4a4e9c6c6afc1b616bbb4d487c263c4033b8fb331",
      "language": "csharp",
      "size": 610,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class TextMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        // ‚úÖ NEW: Optional source indicator (e.g., \"campaign\", \"auto-reply\", etc.)\n        public string? Source { get; set; }\n\n        // ‚úÖ NEW: Optional message ID for campaign tracing\n        public string? MessageId { get; set; }\n\n        public bool IsSaveContact { get; set; } = false; // default true\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Factory/IWhatsAppProviderFactory.cs",
      "sha256": "6707eef3d5eb2cdc04483a137ae4fe1df2386dfe964f87eae6af3d0889f06a08",
      "language": "csharp",
      "size": 389,
      "content": "using System.Threading;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\n\nnamespace xbytechat.api.Features.MessagesEngine.Factory\n{\n    public interface IWhatsAppProviderFactory\n    {\n        //Task<IWhatsAppProvider> CreateAsync(Guid businessId, CancellationToken ct = default);\n        Task<IWhatsAppProvider> CreateAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Factory/WhatsAppProviderFactory.cs",
      "sha256": "b62ff4b12855bab644146b65059c457c6a19b562014228259bb3a22de9d63db5",
      "language": "csharp",
      "size": 4344,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Providers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Factory\n{\n    public class WhatsAppProviderFactory : IWhatsAppProviderFactory\n    {\n        private readonly IServiceProvider _sp;\n        private readonly AppDbContext _db;\n        private readonly ILogger<WhatsAppProviderFactory> _logger;\n\n        public WhatsAppProviderFactory(IServiceProvider sp, AppDbContext db, ILogger<WhatsAppProviderFactory> logger)\n        {\n            _sp = sp;\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId)\n        {\n            var setting = await _db.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n                ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n            var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n            using var scope = _sp.CreateScope();\n\n            var httpClientFactory = scope.ServiceProvider.GetService<IHttpClientFactory>();\n            var http =\n                httpClientFactory != null\n                    ? httpClientFactory.CreateClient(providerKey == \"meta_cloud\" ? \"wa:meta_cloud\" : \"wa:pinnacle\")\n                    : scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n            return providerKey switch\n            {\n                //\"pinnacle\" =>\n                //            new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"pinnacle\" => new PinnacleProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinnacleProvider>>(), setting),\n                \"meta_cloud\" =>\n                    new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n\n                _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n            };\n        }\n    }\n}\n\n\n//// üìÑ File: Features/MessagesEngine/Factory/WhatsAppProviderFactory.cs\n//using System;\n//using System.Threading.Tasks;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.Extensions.DependencyInjection;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api;\n//using xbytechat.api.Features.MessagesEngine.Abstractions;\n//using xbytechat.api.Features.MessagesEngine.Providers;\n\n//namespace xbytechat.api.Features.MessagesEngine.Factory\n//{\n\n//    public class WhatsAppProviderFactory : IWhatsAppProviderFactory\n//    {\n//        private readonly IServiceProvider _sp;\n//        private readonly AppDbContext _db;\n//        private readonly ILogger<WhatsAppProviderFactory> _logger;\n\n//        public WhatsAppProviderFactory(IServiceProvider sp, AppDbContext db, ILogger<WhatsAppProviderFactory> logger)\n//        {\n//            _sp = sp;\n//            _db = db;\n//            _logger = logger;\n//        }\n\n//        public async Task<IWhatsAppProvider> CreateAsync(Guid businessId)\n//        {\n//            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive)\n//                          ?? throw new InvalidOperationException(\"WhatsApp settings not found for this business.\");\n\n//            var providerKey = (setting.Provider ?? \"meta_cloud\").Trim().ToLowerInvariant();\n\n//            // Create a new scope to inject the per-tenant setting into provider constructor\n//            var scope = _sp.CreateScope();\n//            var http = scope.ServiceProvider.GetRequiredService<HttpClient>();\n\n//            return providerKey switch\n//            {\n//                \"pinnacle\" => new PinbotProvider(http, scope.ServiceProvider.GetRequiredService<ILogger<PinbotProvider>>(), setting),\n//                \"meta_cloud\" => new MetaCloudProvider(_db, http, scope.ServiceProvider.GetRequiredService<ILogger<MetaCloudProvider>>(), setting),\n//                _ => throw new NotSupportedException($\"Unsupported WhatsApp provider: {providerKey}\")\n//            };\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Outbox/OutboxMessage.cs",
      "sha256": "caa5c09bc7c28e6aaa5bb1aa93cd76f38c41f5c2754790d9c45f6af037ed1a25",
      "language": "csharp",
      "size": 1109,
      "content": "using System;\n\nnamespace xbytechat.api.Features.MessagesEngine.Outbox\n{\n    public enum OutboxStatus\n    {\n        Queued = 0,\n        Sending = 1,\n        Sent = 2,\n        Failed = 3\n    }\n\n    public class OutboxMessage\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Guid? ContactId { get; set; }\n\n        public string RecipientNumber { get; set; } = \"\";\n        public string ProviderKey { get; set; } = \"\"; // \"meta_cloud\" | \"pinnacle\" (optional hint)\n        public string PayloadJson { get; set; } = \"\"; // serialized MessageEnvelope\n        public string CorrelationId { get; set; } = \"\"; // for idempotency & tracing\n\n        public OutboxStatus Status { get; set; } = OutboxStatus.Queued;\n        public int AttemptCount { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? NextAttemptAt { get; set; } = DateTime.UtcNow;\n        public string? LastError { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/CtaMessagePayloadBuilder.cs",
      "sha256": "f23794fdb8775eff63c5d249f23e74b7ff5e4497daa7b255ce94693b3ba9a6f7",
      "language": "csharp",
      "size": 1063,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class CtaMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = dto.TextContent },\n                    action = new\n                    {\n                        buttons = dto.CtaButtons?.Select(b => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = b.Value,\n                                title = b.Title\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "1400148a9ed0b32af7ece6c87b111a1407feda0f5b651819257c5b740bb01106",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = dto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "89d6b688ba597eb931cd71401717698a692f3e3b645a02d60c1d73dae24731d3",
      "language": "csharp",
      "size": 225,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(SendMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs",
      "sha256": "5f3fdb0eec9de51853f33783973029ee43bf803491c0679c460374e2816f0d01",
      "language": "csharp",
      "size": 2574,
      "content": "using xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared.utility;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public static class MessagePayloadBuilder\n    {\n        /// <summary>\n        /// Builds a WhatsApp template message payload for image header + buttons.\n        /// </summary>\n        public static object BuildImageTemplatePayload(\n            string templateName,\n            string languageCode,\n            string recipientNumber,\n            List<string> templateParams,\n            string? imageUrl,\n            List<CampaignButton>? buttons\n        )\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Body with template params\n            if (templateParams != null && templateParams.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // ‚úÖ Header image if present\n            if (!string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                    new { type = \"image\", image = new { link = imageUrl } }\n                }\n                });\n            }\n\n            // ‚úÖ CTA buttons\n            if (buttons != null && buttons.Any())\n            {\n                var buttonComponents = buttons\n                    .OrderBy(b => b.Position)\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type, // \"url\" or \"phone_number\"\n                        index = index.ToString(),\n                        parameters = new[]\n                        {\n                        new { type = \"text\", text = btn.Value }\n                        }\n                    });\n\n                components.AddRange(buttonComponents);\n            }\n\n            // ‚úÖ Final WhatsApp Template Payload\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components = components\n                }\n            };\n        }\n    }\n\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "1beb36776f57bf30bf67df07af07052f4d5fe2609dfe6a4015bf512dff64aee8",
      "language": "csharp",
      "size": 5342,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                throw new ArgumentException(\"TemplateName is required.\");\n            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n                throw new ArgumentException(\"TemplateParameters are required for template messages.\");\n\n            // Sort by placeholder index like {{1}}, {{2}}, guarding against bad keys\n            var bodyParams = dto.TemplateParameters\n                .Select(kvp =>\n                {\n                    var key = kvp.Key?.Trim('{', '}');\n                    _ = int.TryParse(key, out var idx);\n                    return (idx, kvp.Value);\n                })\n                .OrderBy(t => t.idx)\n                .Select(t => new { type = \"text\", text = t.Value })\n                .ToArray();\n\n            var components = new List<object>\n            {\n                new { type = \"body\", parameters = bodyParams }\n            };\n\n            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n            {\n                for (int i = 0; i < dto.ButtonParams.Count; i++)\n                {\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i.ToString(),\n                        parameters = new[]\n                        {\n                            new { type = \"text\", text = dto.ButtonParams[i] }\n                        }\n                    });\n                }\n            }\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components\n                }\n            };\n        }\n    }\n}\n\n\n//using xbytechat.api.Features.MessagesEngine.DTOs;\n//using xbytechat.api.Helpers;\n\n//namespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n//{\n//    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n//    {\n//        public object BuildPayload(SendMessageDto dto)\n//        {\n//            var components = new List<object>();\n\n//            // ‚úÖ BODY PARAMETERS: Insert dynamic values into the template body\n//            // WhatsApp expects these to be in order ({{1}}, {{2}}, etc.)\n//            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n//                return ResponseResult.ErrorInfo(\"‚ùå Missing template parameters.\");\n//            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n//                {\n//                var bodyParams = dto.TemplateParameters\n//                    .OrderBy(kvp => int.Parse(kvp.Key.Trim('{', '}'))) // üî¢ Extract and sort by index\n//                    .Select(kvp => new\n//                    {\n//                        type = \"text\",\n//                        text = kvp.Value\n//                    }).ToArray();\n\n//                components.Add(new\n//                {\n//                    type = \"body\",\n//                    parameters = bodyParams\n//                });\n//            }\n\n//            // ‚úÖ BUTTON PARAMETERS: For templates with dynamic URL buttons (index-based)\n//            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n//            {\n//                for (int i = 0; i < dto.ButtonParams.Count; i++)\n//                {\n//                    components.Add(new\n//                    {\n//                        type = \"button\",\n//                        sub_type = \"url\",\n//                        index = i.ToString(), // WhatsApp requires index as a string\n//                        parameters = new[]\n//                        {\n//                            new\n//                            {\n//                                type = \"text\",\n//                                text = dto.ButtonParams[i]\n//                            }\n//                        }\n//                    });\n//                }\n//            }\n\n//            // ‚úÖ FINAL WHATSAPP TEMPLATE PAYLOAD\n//            var payload = new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to = dto.RecipientNumber,\n//                type = \"template\",\n//                template = new\n//                {\n//                    name = dto.TemplateName,\n//                    language = new { code = \"en_US\" },\n//                    components = components\n//                }\n//            };\n\n//            // ü™µ Debug log for developer console (optional)\n//            Console.WriteLine(\"üì¶ Built WhatsApp Template Payload:\");\n//            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(payload, new System.Text.Json.JsonSerializerOptions\n//            {\n//                WriteIndented = true\n//            }));\n\n//            return payload;\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateStaticButtonPayloadBuilder.cs",
      "sha256": "68979e5fa2d53ce3fa319c20377ca2022bf9e46b7244c817fb53f84594392f72",
      "language": "csharp",
      "size": 1397,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateStaticButtonPayloadBuilder\n    {\n        public static object Build(SendTemplateMessageSimpleDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Add Body Params\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n\n            // ‚ö†Ô∏è DO NOT add button components for static buttons\n            // Meta will render them automatically if template has static buttons defined\n            // You can later add logic here for dynamic buttons if needed\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "abc17e5a60e2f58ba07c610db126262040f598a15aca27d2f85d52afc2fb4766",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = dto.TextContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/MetaCloudProvider.cs",
      "sha256": "bae23942587c9e571ac05f14833da096c1404e3b3983410cbc045e427c48d9b7",
      "language": "csharp",
      "size": 9915,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/MetaCloudProvider.cs\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class MetaCloudProvider : IWhatsAppProvider\n    {\n        private readonly AppDbContext _db; // kept for future auditing/log enrichment\n        private readonly HttpClient _http;\n        private readonly ILogger<MetaCloudProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        // ‚úÖ Ignore nulls to avoid sending \"components\": null etc.\n        private static readonly JsonSerializerOptions _jsonOpts = new()\n        {\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n\n        public MetaCloudProvider(\n            AppDbContext db,\n            HttpClient http,\n            ILogger<MetaCloudProvider> logger,\n            WhatsAppSettingEntity setting)\n        {\n            _db = db;\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        private string BuildUrl()\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://graph.facebook.com/v18.0\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (string.IsNullOrWhiteSpace(_setting.PhoneNumberId))\n            {\n                _logger.LogError(\"MetaCloudProvider: PhoneNumberId is missing for BusinessId {BusinessId}\", _setting.BusinessId);\n                return $\"{baseUrl}/-/messages\"; // inert path; will fail fast with clear logs\n            }\n\n            return $\"{baseUrl}/{_setting.PhoneNumberId}/messages\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var url = BuildUrl();\n            var json = JsonSerializer.Serialize(payload, _jsonOpts);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            if (!string.IsNullOrWhiteSpace(_setting.ApiToken))\n            {\n                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", _setting.ApiToken);\n            }\n            else\n            {\n                _logger.LogWarning(\"MetaCloudProvider: ApiToken is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n            }\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"MetaCloud send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"MetaCloud\",\n                    ProviderMessageId: null,\n                    StatusCode: res.StatusCode,\n                    RawResponse: body,\n                    Error: res.ReasonPhrase\n                );\n            }\n\n            string? id = null;\n            try\n            {\n                var root = JsonNode.Parse(body);\n                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>();\n            }\n            catch\n            {\n                // Keep raw; ID stays null\n            }\n\n            return new WaSendResult(\n                Success: true,\n                Provider: \"MetaCloud\",\n                ProviderMessageId: id,\n                StatusCode: res.StatusCode,\n                RawResponse: body,\n                Error: null\n            );\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { preview_url = false, body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },      // ‚úÖ Meta needs { code: \"en_US\" }\n                    components = components ?? System.Linq.Enumerable.Empty<object>() // ‚úÖ never null\n                }\n            });\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n            => PostAsync(fullPayload);\n    }\n}\n\n\n//// üìÑ File: Features/MessagesEngine/Providers/MetaCloudProvider.cs\n//using System.Collections.Generic;\n//using System.Net;\n//using System.Net.Http;\n//using System.Net.Http.Headers;\n//using System.Text;\n//using System.Text.Json;\n//using System.Text.Json.Nodes;\n//using System.Threading.Tasks;\n//using Microsoft.Extensions.Logging;\n//using xbytechat.api;\n//using xbytechat.api.Features.MessagesEngine.Abstractions;\n//using xbytechat_api.WhatsAppSettings.Models;\n\n//namespace xbytechat.api.Features.MessagesEngine.Providers\n//{\n//    public class MetaCloudProvider : IWhatsAppProvider\n//    {\n//        private readonly AppDbContext _db; // kept for future auditing/log enrichment\n//        private readonly HttpClient _http;\n//        private readonly ILogger<MetaCloudProvider> _logger;\n//        private readonly WhatsAppSettingEntity _setting;\n\n//        public MetaCloudProvider(\n//            AppDbContext db,\n//            HttpClient http,\n//            ILogger<MetaCloudProvider> logger,\n//            WhatsAppSettingEntity setting)\n//        {\n//            _db = db;\n//            _http = http;\n//            _logger = logger;\n//            _setting = setting;\n//        }\n\n//        private string BuildUrl()\n//        {\n//            // Minimal defensive checks ‚Äì fail fast with clear logs\n//            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n//                ? \"https://graph.facebook.com/v18.0\"\n//                : _setting.ApiUrl.TrimEnd('/');\n\n//            if (string.IsNullOrWhiteSpace(_setting.PhoneNumberId))\n//            {\n//                _logger.LogError(\"MetaCloudProvider: PhoneNumberId is missing for BusinessId {BusinessId}\", _setting.BusinessId);\n//                // We return an error result instead of throwing (provider contract returns WaSendResult)\n//                // Caller will translate to ResponseResult.ErrorInfo.\n//                return $\"{baseUrl}/-/messages\"; // inert path; PostAsync will still be called and return error\n//            }\n\n//            return $\"{baseUrl}/{_setting.PhoneNumberId}/messages\";\n//        }\n\n//        private async Task<WaSendResult> PostAsync(object payload)\n//        {\n//            var url = BuildUrl();\n//            var json = JsonSerializer.Serialize(payload);\n\n//            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n//            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n//            if (!string.IsNullOrWhiteSpace(_setting.ApiToken))\n//            {\n//                req.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", _setting.ApiToken);\n//            }\n//            else\n//            {\n//                _logger.LogWarning(\"MetaCloudProvider: ApiToken is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n//            }\n\n//            var res = await _http.SendAsync(req);\n//            var body = await res.Content.ReadAsStringAsync();\n\n//            if (!res.IsSuccessStatusCode)\n//            {\n//                _logger.LogWarning(\"MetaCloud send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n\n//                return new WaSendResult(\n//                    Success: false,\n//                    Provider: \"MetaCloud\",\n//                    ProviderMessageId: null,\n//                    StatusCode: res.StatusCode,\n//                    RawResponse: body,\n//                    Error: res.ReasonPhrase\n//                );\n//            }\n\n//            string? id = null;\n//            try\n//            {\n//                var root = JsonNode.Parse(body);\n//                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>();\n//            }\n//            catch\n//            {\n//                // Keep raw; ID stays null\n//            }\n\n//            return new WaSendResult(\n//                Success: true,\n//                Provider: \"MetaCloud\",\n//                ProviderMessageId: id,\n//                StatusCode: res.StatusCode,\n//                RawResponse: body,\n//                Error: null\n//            );\n//        }\n\n//        public Task<WaSendResult> SendTextAsync(string to, string body)\n//            => PostAsync(new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to,\n//                type = \"text\",\n//                text = new { preview_url = false, body }\n//            });\n\n//        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n//            => PostAsync(new\n//            {\n//                messaging_product = \"whatsapp\",\n//                to,\n//                type = \"template\",\n//                template = new\n//                {\n//                    name = templateName,\n//                    language = new { code = languageCode },\n//                    components\n//                }\n//            });\n\n//        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n//            => PostAsync(fullPayload);\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/PinbotProvider.cs",
      "sha256": "b42150f90c8705aa4742bab8ec5351c66edd98d9a0572bc128ae03635d3eed0c",
      "language": "csharp",
      "size": 5193,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/PinbotProvider.cs\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class PinbotProvider : IWhatsAppProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinbotProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        public PinbotProvider(\n            HttpClient http,\n            ILogger<PinbotProvider> logger,\n            WhatsAppSettingEntity setting)\n        {\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        // Pinbot path segment can be WABA ID *or* PhoneNumberId depending on their account setup.\n        // Prefer PhoneNumberId, fall back to WabaId.\n        private string? ResolvePathIdOrNull()\n        {\n            if (!string.IsNullOrWhiteSpace(_setting.PhoneNumberId)) return _setting.PhoneNumberId!;\n            if (!string.IsNullOrWhiteSpace(_setting.WabaId)) return _setting.WabaId!;\n            return null;\n        }\n\n        private string BuildUrl(string pathId)\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            // Pinbot uses /v3/{id}/messages (id can be WABA ID or PhoneNumberId)\n            return $\"{baseUrl}/{pathId}/messages\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var pathId = ResolvePathIdOrNull();\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                const string err = \"Pinnacle: PhoneNumberId or WabaId is required.\";\n                _logger.LogError(err);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"Pinnacle\",\n                    ProviderMessageId: null,\n                    StatusCode: null,\n                    RawResponse: null,\n                    Error: err\n                );\n            }\n\n            var url = BuildUrl(pathId);\n            var json = JsonSerializer.Serialize(payload);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            // Pinbot requires apikey header (no Bearer token)\n            if (!string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                req.Headers.TryAddWithoutValidation(\"apikey\", _setting.ApiKey);\n            }\n            else\n            {\n                _logger.LogWarning(\"PinbotProvider: ApiKey is empty for BusinessId {BusinessId}\", _setting.BusinessId);\n            }\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"Pinbot send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(\n                    Success: false,\n                    Provider: \"Pinbot\",\n                    ProviderMessageId: null,\n                    StatusCode: res.StatusCode,\n                    RawResponse: body,\n                    Error: res.ReasonPhrase\n                );\n            }\n\n            string? id = null;\n            try\n            {\n                // Pinbot often mirrors Meta's envelope, but be defensive.\n                var root = JsonNode.Parse(body);\n                id = root?[\"messages\"]?[0]?[\"id\"]?.GetValue<string>()\n                     ?? root?[\"message\"]?[\"id\"]?.GetValue<string>();\n            }\n            catch\n            {\n                // keep raw; ID remains null\n            }\n\n            return new WaSendResult(\n                Success: true,\n                Provider: \"Pinbot\",\n                ProviderMessageId: id,\n                StatusCode: res.StatusCode,\n                RawResponse: body,\n                Error: null\n            );\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components\n                }\n            });\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload)\n            => PostAsync(fullPayload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Providers/PinnacleProvider.cs",
      "sha256": "720d7f9c39a95e9a324b0d19cdb5bf602c789a7ed59a9b1a83b95ab187152d8f",
      "language": "csharp",
      "size": 7443,
      "content": "// üìÑ File: Features/MessagesEngine/Providers/PinnacleProvider.cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Nodes;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Providers\n{\n    public class PinnacleProvider : IWhatsAppProvider\n    {\n        private readonly HttpClient _http;\n        private readonly ILogger<PinnacleProvider> _logger;\n        private readonly WhatsAppSettingEntity _setting;\n\n        private static readonly JsonSerializerOptions _jsonOpts = new()\n        {\n            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull\n        };\n\n        public PinnacleProvider(HttpClient http, ILogger<PinnacleProvider> logger, WhatsAppSettingEntity setting)\n        {\n            _http = http;\n            _logger = logger;\n            _setting = setting;\n        }\n\n        private string? ResolvePathIdOrNull()\n        {\n            if (!string.IsNullOrWhiteSpace(_setting.PhoneNumberId)) return _setting.PhoneNumberId!;\n            if (!string.IsNullOrWhiteSpace(_setting.WabaId)) return _setting.WabaId!;\n            return null;\n        }\n\n        private string BuildBaseUrl()\n        {\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (!baseUrl.EndsWith(\"/v3\"))\n                baseUrl += \"/v3\";\n\n            return baseUrl;\n        }\n\n        // üîí Hard-append apikey ALWAYS (no conditions)\n        private string BuildSendUrlWithApiKey(string pathId)\n        {\n            // NEW LOGIC: Check if the 'pathId' is already a full URL.\n            // This is how we detect our tracking links.\n            if (Uri.IsWellFormedUriString(pathId, UriKind.Absolute))\n            {\n                // If it's a full URL, use it directly without modification.\n                return pathId;\n            }\n\n            // OLD LOGIC: If it's just a path ID, build the full Pinnacle API URL.\n            var baseUrl = string.IsNullOrWhiteSpace(_setting.ApiUrl)\n                ? \"https://partnersv1.pinbot.ai\"\n                : _setting.ApiUrl.TrimEnd('/');\n\n            if (!baseUrl.EndsWith(\"/v3\"))\n                baseUrl += \"/v3\";\n\n            return $\"{baseUrl}/{pathId}/messages?apikey={System.Uri.EscapeDataString(_setting.ApiKey)}\";\n        }\n\n        private async Task<WaSendResult> PostAsync(object payload)\n        {\n            var pathId = ResolvePathIdOrNull();\n            if (string.IsNullOrWhiteSpace(pathId))\n            {\n                const string err = \"Pinnacle: PhoneNumberId or WabaId is required.\";\n                _logger.LogError(err);\n                return new WaSendResult(false, \"Pinnacle\", null, null, null, err);\n            }\n\n            if (string.IsNullOrWhiteSpace(_setting.ApiKey))\n            {\n                const string err = \"Pinnacle: ApiKey is missing in WhatsApp settings.\";\n                _logger.LogError(err);\n                return new WaSendResult(false, \"Pinnacle\", null, null, null, err);\n            }\n\n            var url = BuildSendUrlWithApiKey(pathId);\n            var json = JsonSerializer.Serialize(payload, _jsonOpts);\n\n            using var req = new HttpRequestMessage(HttpMethod.Post, url);\n            req.Content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            // ‚úÖ Put key in ALL the places some tenants require\n            req.Headers.Remove(\"apikey\");\n            req.Headers.Remove(\"x-api-key\");\n            req.Headers.TryAddWithoutValidation(\"apikey\", _setting.ApiKey);\n            req.Headers.TryAddWithoutValidation(\"x-api-key\", _setting.ApiKey);\n            req.Headers.Authorization = new AuthenticationHeaderValue(\"Apikey\", _setting.ApiKey);\n            req.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            // üîç PROVE the headers exist BEFORE sending\n            var headerNames = req.Headers.Select(h => $\"{h.Key}:{string.Join(\",\", h.Value.Select(v => v.Length > 4 ? v[..4] + \"...\" : v))}\").ToArray();\n            _logger.LogInformation(\"Pinnacle POST {Url} | Headers => {Headers}\", url, string.Join(\" | \", headerNames));\n\n            var res = await _http.SendAsync(req);\n            var body = await res.Content.ReadAsStringAsync();\n\n            if (!res.IsSuccessStatusCode)\n            {\n                _logger.LogWarning(\"Pinnacle send failed (HTTP {Status}): {Body}\", (int)res.StatusCode, body);\n                return new WaSendResult(false, \"Pinnacle\", null, res.StatusCode, body, res.ReasonPhrase);\n            }\n\n            string? id = TryGetPinnMessageId(body);\n            return new WaSendResult(true, \"Pinnacle\", id, res.StatusCode, body, null);\n        }\n\n        public Task<WaSendResult> SendTextAsync(string to, string body)\n            => PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"text\",\n                text = new { preview_url = false, body }\n            });\n\n        public Task<WaSendResult> SendTemplateAsync(string to, string templateName, string languageCode, IEnumerable<object> components)\n        {\n            components ??= Enumerable.Empty<object>();\n            var langValue = languageCode; // use exact string from template metadata\n            return PostAsync(new\n            {\n                messaging_product = \"whatsapp\",\n                to,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = langValue,\n                    components\n                }\n            });\n        }\n\n        private static string? TryGetPinnMessageId(string json)\n        {\n            try\n            {\n                using var doc = JsonDocument.Parse(json);\n                var root = doc.RootElement;\n                if (root.TryGetProperty(\"messages\", out var msgs) &&\n                    msgs.ValueKind == JsonValueKind.Array &&\n                    msgs.GetArrayLength() > 0 &&\n                    msgs[0].TryGetProperty(\"id\", out var id0)) return id0.GetString();\n\n                if (root.TryGetProperty(\"message\", out var msg) &&\n                    msg.ValueKind == JsonValueKind.Object)\n                {\n                    if (msg.TryGetProperty(\"id\", out var id1)) return id1.GetString();\n                    if (msg.TryGetProperty(\"messageId\", out var id2)) return id2.GetString();\n                }\n                if (root.TryGetProperty(\"message_id\", out var id3)) return id3.GetString();\n                if (root.TryGetProperty(\"messageId\", out var id4)) return id4.GetString();\n                if (root.TryGetProperty(\"data\", out var data) &&\n                    data.ValueKind == JsonValueKind.Object &&\n                    data.TryGetProperty(\"messageId\", out var id5)) return id5.GetString();\n                if (root.TryGetProperty(\"id\", out var idTop)) return idTop.GetString();\n            }\n            catch { }\n            return null;\n        }\n\n        public Task<WaSendResult> SendInteractiveAsync(object fullPayload) => PostAsync(fullPayload);\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/IMessageEngineService.cs",
      "sha256": "c2b073484b095f3ae277da306bbc17f9cc0dd57eac1fc4f33c8cb977aa0dcf63",
      "language": "csharp",
      "size": 965,
      "content": "// ‚úÖ Step 1: Final interface\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\nusing System.Threading.Tasks;\nusing System.IO.Pipelines;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface IMessageEngineService\n    {\n\n        Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto); //\n        Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto);\n        Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto);\n        Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto);\n        Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string triggeredBy);\n        Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId);\n        Task<ResponseResult> SendPayloadAsync(Guid businessId, object payload);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/ITemplateMessageSender.cs",
      "sha256": "4b54a967e87c74ed41ae2cca4f1ebffc6068cfaa25f10dc6b01021b056886266",
      "language": "csharp",
      "size": 822,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface ITemplateMessageSender\n    {\n        Task<ResponseResult> SendTemplateMessageToContactAsync(\n           Guid businessId,\n           Contact contact,\n           string templateName,\n           List<string> templateParams,\n           string? imageUrl = null,\n           List<CampaignButton>? buttons = null,\n           string? source = null,\n           Guid? refMessageId = null\n       );\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
      "sha256": "373d5a838a59fd2539ab228fbcc5bf36fda072265c2e9d8097f1c3573636de6b",
      "language": "csharp",
      "size": 41219,
      "content": "// üìÑ File: Features/MessagesEngine/Services/MessageEngineService.cs\nusing Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n// ‚úÖ provider abstraction + factory\nusing xbytechat.api.Features.MessagesEngine.Abstractions;\nusing xbytechat.api.Features.MessagesEngine.Factory;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http; // kept for other internal calls if any\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n\n        // üîÑ Basic cache for WhatsApp settings to reduce DB load (kept for other paths)\n        private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        private readonly IWhatsAppProviderFactory _providerFactory;\n\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager,\n            IHubContext<InboxHub> hubContext,\n            IMessageIdResolver messageIdResolver,\n            IHttpContextAccessor httpContextAccessor,\n            IContactService contactService,\n            IWhatsAppProviderFactory providerFactory\n        )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n            _providerFactory = providerFactory;\n        }\n\n        public async Task<ResponseResult> SendPayloadAsync(Guid businessId, object payload)\n        {\n            // This new method correctly reuses your existing provider logic.\n            // It calls your private helper `SendViaProviderAsync` and tells it\n            // to use the `SendInteractiveAsync` method on whichever provider is created.\n\n            var result = await SendViaProviderAsync(\n                businessId,\n                provider => provider.SendInteractiveAsync(payload)\n            );\n\n            // The 'WaSendResult' from the provider needs to be mapped to the 'ResponseResult'\n            // that the controller expects.\n            return new ResponseResult\n            {\n                Success = result.Success,\n                Message = result.Message,\n                ErrorMessage = result.Success ? null : result.Message,\n                RawResponse = result.RawResponse,\n                MessageId = result.MessageId\n            };\n        }\n        private async Task<ResponseResult> SendViaProviderAsync(\n                           Guid businessId,\n                           Func<IWhatsAppProvider, Task<WaSendResult>> action)\n        {\n            try\n            {\n                var provider = await _providerFactory.CreateAsync(businessId);\n                if (provider == null)\n                {\n                    return ResponseResult.ErrorInfo(\"‚ùå WhatsApp provider not configured for this business.\");\n                }\n\n                var res = await action(provider);\n\n                // Map provider result ‚Üí ResponseResult\n                if (!res.Success)\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå WhatsApp API returned an error.\",\n                        res.Error,\n                        res.RawResponse\n                    );\n                }\n\n                // Build success response and surface provider message id\n                var rr = ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", data: null, raw: res.RawResponse);\n                rr.MessageId = res.ProviderMessageId;\n\n                // Fallback: try to parse WAMID from Meta-style payload if the provider didn‚Äôt set it\n                if (string.IsNullOrWhiteSpace(rr.MessageId) && !string.IsNullOrWhiteSpace(res.RawResponse))\n                {\n                    try\n                    {\n                        var raw = res.RawResponse.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var doc = System.Text.Json.JsonDocument.Parse(raw);\n                            if (doc.RootElement.TryGetProperty(\"messages\", out var msgs) &&\n                                msgs.ValueKind == System.Text.Json.JsonValueKind.Array &&\n                                msgs.GetArrayLength() > 0 &&\n                                msgs[0].TryGetProperty(\"id\", out var idProp))\n                            {\n                                rr.MessageId = idProp.GetString();\n                            }\n                        }\n                    }\n                    catch\n                    {\n                        // best-effort; ignore parse errors\n                    }\n                }\n\n                return rr;\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Provider call failed.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì® Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ‚úÖ Quota\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"‚ùå Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ‚úÖ Build template components from dto.TemplateParameters\n                var bodyParams = (dto.TemplateParameters?.Values?.ToList() ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                var components = new List<object>();\n                if (bodyParams.Length > 0)\n                {\n                    components.Add(new\n                    {\n                        type = \"body\",\n                        parameters = bodyParams\n                    });\n                }\n\n                // üöÄ Send to provider\n                var sendResult = await SendViaProviderAsync(\n                    dto.BusinessId,\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName!, \"en_US\", components)\n                );\n\n                // ‚úÖ Build rendered body\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                );\n\n                // üìù Log success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // üìâ Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // üì° SignalR push\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                Console.WriteLine($\"üß® Error ID: {errorId}\\n{ex}\");\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                    ),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString()\n                );\n            }\n        }\n\n        private async Task<WhatsAppSettingEntity> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            var business = await _db.Businesses\n                .Include(b => b.WhatsAppSettings)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.WhatsAppSettings == null)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            _settingsCache[businessId] = (business.WhatsAppSettings, DateTime.UtcNow.AddMinutes(5));\n            return business.WhatsAppSettings;\n        }\n\n        public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                    ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context.\");\n\n                Guid? contactId = null;\n\n                // 1. Look for an existing contact just once using an efficient, indexed query.\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c =>\n                    c.BusinessId == businessId && c.PhoneNumber == dto.RecipientNumber);\n\n                if (contact != null)\n                {\n                    // 2. If the contact already exists, always use its ID and update the timestamp.\n                    // This ensures message history is always linked correctly for existing contacts.\n                    contactId = contact.Id;\n                    contact.LastContactedAt = DateTime.UtcNow;\n                }\n                else if (dto.IsSaveContact)\n                {\n                    // 3. If the contact does NOT exist AND the user wants to save it, create a new one.\n                    contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = \"WhatsApp User\", // Default name for new contacts\n                        PhoneNumber = dto.RecipientNumber,\n                        CreatedAt = DateTime.UtcNow,\n                        LastContactedAt = DateTime.UtcNow\n                    };\n                    _db.Contacts.Add(contact);\n                    contactId = contact.Id;\n                }\n\n                // 4. Save any changes (either the timestamp update or the new contact creation).\n                await _db.SaveChangesAsync();\n\n                // üöÄ Send message via provider\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent)\n                );\n\n                // üîé Extract messageId from provider or RawResponse\n                string? messageId = sendResult.MessageId;\n                if (string.IsNullOrWhiteSpace(messageId) && !string.IsNullOrWhiteSpace(sendResult.RawResponse))\n                {\n                    try\n                    {\n                        var raw = sendResult.RawResponse!.TrimStart();\n                        if (raw.StartsWith(\"{\"))\n                        {\n                            using var parsed = System.Text.Json.JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var msgs)\n                                && msgs.ValueKind == System.Text.Json.JsonValueKind.Array\n                                && msgs.GetArrayLength() > 0)\n                            {\n                                messageId = msgs[0].TryGetProperty(\"id\", out var idProp)\n                                    ? idProp.GetString()\n                                    : null;\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {sendResult.RawResponse}\");\n                    }\n                }\n\n                // üìù Log message\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId, // This will be the ID if found/created, otherwise null\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // üîó Optional campaign mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"‚úÖ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = sendResult.RawResponse,\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendTextDirectAsync: {ex.Message}\");\n\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                        ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                var businessId = (dto.BusinessId != Guid.Empty)\n                    ? dto.BusinessId\n                    : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                      ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context or DTO.\");\n\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                var sendResult = await SendViaProviderAsync(businessId,\n                    p => p.SendTextAsync(dto.RecipientNumber, dto.TextContent));\n\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    // RawResponse = JsonConvert.SerializeObject(sendResult),\n                    RawResponse = sendResult.RawResponse,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"‚úÖ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendAutomationReply: {ex.Message}\");\n\n                try\n                {\n                    var businessId = (dto.BusinessId != Guid.Empty)\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                // Build minimal components (body only)\n                var components = new List<object>();\n                var parameters = (dto.TemplateParameters ?? new List<string>())\n                    .Select(p => new { type = \"text\", text = p })\n                    .ToArray();\n\n                if (parameters.Length > 0)\n                {\n                    components.Add(new { type = \"body\", parameters });\n                }\n\n                var sendResult = await SendViaProviderAsync(\n                    businessId,\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, \"en_US\", components)\n                );\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template sent successfully.\", sendResult);\n            }\n            catch (Exception ex)\n            {\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto { Title = b.Title, Value = b.Value })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo($\"‚úÖ Campaign sent.\\nüì§ Success: {successCount}, ‚ùå Failed: {failCount}\");\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì§ Sending image+CTA to {dto.RecipientNumber}\");\n\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"‚ùå Image message caption (TextContent) cannot be empty.\");\n\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid():N}\".Substring(0, 16),\n                            title = btn.Title\n                        }\n                    }).ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                // interactive payload (works for meta; for Pinbot, provider will just proxy)\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new { buttons = validButtons }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new { link = dto.MediaUrl }\n                };\n\n                var sendResult = await SendViaProviderAsync(dto.BusinessId, p => p.SendInteractiveAsync(payload));\n                var rawJson = JsonConvert.SerializeObject(sendResult);\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = rawJson,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                var response = ResponseResult.SuccessInfo(\"‚úÖ Image+CTA message sent.\", null, rawJson);\n                response.MessageId = log.Id.ToString();\n                response.LogId = log.Id;\n                return response;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                var components = new List<object>();\n\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                            new\n                            {\n                                type = \"image\",\n                                image = new { link = dto.HeaderImageUrl }\n                            }\n                        }\n                    });\n                }\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = (dto.TemplateParameters ?? new List<string>())\n                        .Select(p => new { type = \"text\", text = p })\n                        .ToArray()\n                });\n\n                // Buttons (dynamic up to 3)\n                for (int i = 0; i < dto.ButtonParameters.Count && i < 3; i++)\n                {\n                    var btn = dto.ButtonParameters[i];\n                    var subType = btn.ButtonType?.ToLower();\n\n                    if (string.IsNullOrWhiteSpace(subType))\n                        continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    // Add params based on subtype\n                    if (subType == \"quick_reply\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                            new { type = \"payload\", payload = btn.TargetUrl }\n                        };\n                    }\n                    else if (subType == \"url\" && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                            new { type = \"text\", text = btn.TargetUrl }\n                        };\n                    }\n\n                    components.Add(button);\n                }\n\n                var sendResult = await SendViaProviderAsync(businessId,\n                    p => p.SendTemplateAsync(dto.RecipientNumber, dto.TemplateName, dto.LanguageCode ?? \"en_US\", components));\n\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>()\n                );\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    RenderedBody = renderedBody,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = sendResult.Success ? null : sendResult.Message,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Image template sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters ?? new List<string>()),\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending image template.\", ex.ToString());\n            }\n        }\n\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
      "sha256": "caea58e3ba73814fd7ae63f0f47d8732408da8e0b3678d25e8d613f7839d8922",
      "language": "csharp",
      "size": 8302,
      "content": "// üìÑ File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\n\n//using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"‚ùå Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"üì§ Sent to {success}, ‚ùå Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
      "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
      "language": "csharp",
      "size": 1760,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
    }
  ]
}
