{
  "name": "xbytechat-api/Features/MessagesEngine",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/MessagesEngine/Controllers/MessageEngineController.cs",
      "sha256": "5bb38763d87308f4e4eca04c070150bb16bf85c0669dea83188183286c2906ae",
      "language": "csharp",
      "size": 7238,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.MessagesEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessageEngineController : ControllerBase\n    {\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IMessageAnalyticsService _messageAnalyticsServiceervice;\n\n\n        public MessageEngineController(IMessageEngineService messageService,IMessageAnalyticsService messageAnalyticsService)\n        {\n            _messageEngineService = messageService;\n            _messageAnalyticsServiceervice = messageAnalyticsService;\n        }\n        [HttpPost(\"send-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid text message payload.\"));\n\n            try\n            {\n                var result = await _messageEngineService.SendTextDirectAsync(dto); // üëà New direct method\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message, result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending text message: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending text message.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-template-simple\")]\n        public async Task<IActionResult> SendTemplateMessageSimple([FromBody] SimpleTemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"‚ùå Invalid template message request.\"));\n\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out Guid businessId))\n                    return Unauthorized(ResponseResult.ErrorInfo(\"‚ùå Business ID not found in token.\"));\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message ?? \"‚ùå Failed to send template.\", result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception while sending template: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending template.\", ex.ToString()));\n            }\n        }\n\n       \n        [HttpPost(\"send-image-campaign/{campaignId}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid campaignId)\n        {\n            try\n            {\n                var businessId = UserClaimHelper.GetBusinessId(User); // ‚úÖ from\n                                                                      // claims\n                var userName = UserClaimHelper.GetUserName(User);     // for logging (if needed)\n\n                var result = await _messageEngineService.SendImageCampaignAsync(campaignId, businessId, userName);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error while sending image campaign: \" + ex.Message);\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Server error while sending campaign.\", ex.ToString()));\n            }\n        }\n        public static class UserClaimHelper\n        {\n            public static Guid GetBusinessId(ClaimsPrincipal user)\n            {\n                var claim = user.Claims.FirstOrDefault(c => c.Type == \"businessId\");\n                return claim != null ? Guid.Parse(claim.Value) : Guid.Empty;\n            }\n\n            public static string GetUserName(ClaimsPrincipal user)\n            {\n                return user?.Identity?.Name ?? \"Unknown\";\n            }\n        }\n\n        //[HttpPost(\"send-image-template\")]\n        //public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        //{\n        //    if (string.IsNullOrWhiteSpace(dto.RecipientNumber) || string.IsNullOrWhiteSpace(dto.TemplateName))\n        //        return BadRequest(new { message = \"RecipientNumber and TemplateName are required.\" });\n\n        //    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto);\n\n        //    if (result.Success)\n        //        return Ok(new { message = result.Message, raw = result.RawResponse });\n\n        //    return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n        //[HttpPost(\"send-image-template\")]\n        //public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        //{\n        //    // Extract BusinessId from claims (assuming it's saved as \"BusinessId\" claim)\n        //    var businessIdClaim = User.Claims.FirstOrDefault(c => c.Type == \"BusinessId\")?.Value;\n        //    if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n        //        return Unauthorized(new { message = \"BusinessId not found in user claims.\" });\n\n        //    // Pass businessId explicitly to the service\n        //    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n        //    if (result.Success)\n        //        return Ok(new { message = result.Message, raw = result.RawResponse });\n\n        //    return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n        [HttpPost(\"send-image-template\")]\n        public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // Uses your extension method!\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return Unauthorized(new { message = ex.Message });\n            }\n\n            var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n            if (result.Success)\n                return Ok(new { message = result.Message, raw = result.RawResponse });\n\n            return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _messageAnalyticsServiceervice.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/AutoSendTemplateMessageDto.cs",
      "sha256": "99519bdaed8df38337d3485148cfc53b4972c2616ebb386417321455ad582576",
      "language": "csharp",
      "size": 422,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class AutoSendTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string PhoneNumber { get; set; }\n        public Guid TemplateId { get; set; }\n        public string TemplateName { get; set; }\n        public Dictionary<string, string> Placeholders { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/CtaButtonDto.cs",
      "sha256": "60ecf5aa33d787f635ef05f11c48b8f9f6a11d48b2d7322f7f2ef575b91f9657",
      "language": "csharp",
      "size": 307,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class CtaButtonDto\n    {\n        public string Title { get; set; } = string.Empty; // e.g., \"Buy Now\", \"View Details\"\n        public string Type { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/ImageTemplateMessageDto.cs",
      "sha256": "97564675c3c457ff71f51a241ad4cbca69ec60eaab2b81b81c14fb2360ae34f0",
      "language": "csharp",
      "size": 652,
      "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class ImageTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; }\n    public string TemplateName { get; set; }\n    public string LanguageCode { get; set; } = \"en_US\";\n    public string HeaderImageUrl { get; set; }\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // ‚úÖ Add these two for flow tracking\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/MessageTypeEnum.cs",
      "sha256": "d3120f117dc16b8ab9901ba3726defab664b2a9b4a5414eff586e7e27f55062a",
      "language": "csharp",
      "size": 286,
      "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [JsonConverter(typeof(JsonStringEnumConverter))] // Enables string parsing in JSON\n    public enum MessageTypeEnum\n    {\n        Text,\n        Image,\n        Template,\n        Cta\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendMessageDto.cs",
      "sha256": "1c45c09fda3fbb66ba843912c7617fe09447ec841b82f4b0f5c2a08cf8341fc1",
      "language": "csharp",
      "size": 1889,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs.Validation;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [ValidateMessageDto] // ‚úÖ Custom validator will enforce conditional field rules\n    public class SendMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; } = string.Empty;\n\n        [Required]\n        public MessageTypeEnum MessageType { get; set; }\n\n        // üìù Text Message\n        public string? TextContent { get; set; }\n\n        // üñºÔ∏è Image Message\n        public string? MediaUrl { get; set; }\n\n        // üìã Template Message\n        public string? TemplateName { get; set; }\n        public Dictionary<string, string>? TemplateParameters { get; set; }\n\n        // üõí CTA Message\n        public List<CtaButtonDto>? CtaButtons { get; set; }\n\n        // ‚úÖ Required: this was missing [Optional but needed for CTA/Template message sending]\n        public List<string>? ButtonParams { get; set; }\n\n        // üìä Optional Metadata\n        public Guid? CampaignId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n\n        public string? SourceModule { get; set; }\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n        public string? BotId { get; set; }\n        public string? RefMessageId { get; set; }\n        public string? CTATriggeredFrom { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n\n        // ‚úÖ Add these two for flow tracking\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendTemplateMessageSimpleDto.cs",
      "sha256": "00dc74bb6a1b396bab6fcd63f93454cfd59671260c4da8b0afd8754e83e10ce8",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SendTemplateMessageSimpleDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string TemplateName { get; set; }\n        public List<string> TemplateParameters { get; set; } = new();\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/SimpleTemplateMessageDto.cs",
      "sha256": "13b09ae3db26e3770de01db13a5f5dabff0f7e5b09c9ed73dc44272e47699ac2",
      "language": "csharp",
      "size": 703,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SimpleTemplateMessageDto\n    {\n        //public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TemplateName { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public bool HasStaticButtons { get; set; } = false;\n\n        // ‚úÖ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public string? TemplateBody { get; set; }  // üî• Used to render actual message body from placeholders\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TemplateForUIResponseDto.cs",
      "sha256": "9b7be7ee8b48ca30422fe6b4ee2eb6af563f79ae7abad04aaaab9fdb4658612b",
      "language": "csharp",
      "size": 434,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\npublic class TemplateForUIResponseDto\n{\n    public string Name { get; set; }\n    public string Language { get; set; }\n    public string Body { get; set; }\n\n    // ‚úÖ Correct naming for frontend\n    public int ParametersCount { get; set; }\n\n    public List<ButtonMetadataDto> ButtonParams { get; set; }\n    public bool HasImageHeader { get; set; } // üÜï Used to detect image templates\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/DTOs/TextMessageSendDto.cs",
      "sha256": "7b96b59a33cc5ad7c6b1d5d926ecb2a851478863db2de77661a8b2ae5409e90a",
      "language": "csharp",
      "size": 538,
      "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class TextMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        // ‚úÖ NEW: Optional source indicator (e.g., \"campaign\", \"auto-reply\", etc.)\n        public string? Source { get; set; }\n\n        // ‚úÖ NEW: Optional message ID for campaign tracing\n        public string? MessageId { get; set; }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/CtaMessagePayloadBuilder.cs",
      "sha256": "f23794fdb8775eff63c5d249f23e74b7ff5e4497daa7b255ce94693b3ba9a6f7",
      "language": "csharp",
      "size": 1063,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class CtaMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = dto.TextContent },\n                    action = new\n                    {\n                        buttons = dto.CtaButtons?.Select(b => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = b.Value,\n                                title = b.Title\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/ImageMessagePayloadBuilder.cs",
      "sha256": "1400148a9ed0b32af7ece6c87b111a1407feda0f5b651819257c5b740bb01106",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = dto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
      "sha256": "89d6b688ba597eb931cd71401717698a692f3e3b645a02d60c1d73dae24731d3",
      "language": "csharp",
      "size": 225,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(SendMessageDto dto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs",
      "sha256": "5f3fdb0eec9de51853f33783973029ee43bf803491c0679c460374e2816f0d01",
      "language": "csharp",
      "size": 2574,
      "content": "using xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared.utility;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public static class MessagePayloadBuilder\n    {\n        /// <summary>\n        /// Builds a WhatsApp template message payload for image header + buttons.\n        /// </summary>\n        public static object BuildImageTemplatePayload(\n            string templateName,\n            string languageCode,\n            string recipientNumber,\n            List<string> templateParams,\n            string? imageUrl,\n            List<CampaignButton>? buttons\n        )\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Body with template params\n            if (templateParams != null && templateParams.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // ‚úÖ Header image if present\n            if (!string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                    new { type = \"image\", image = new { link = imageUrl } }\n                }\n                });\n            }\n\n            // ‚úÖ CTA buttons\n            if (buttons != null && buttons.Any())\n            {\n                var buttonComponents = buttons\n                    .OrderBy(b => b.Position)\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type, // \"url\" or \"phone_number\"\n                        index = index.ToString(),\n                        parameters = new[]\n                        {\n                        new { type = \"text\", text = btn.Value }\n                        }\n                    });\n\n                components.AddRange(buttonComponents);\n            }\n\n            // ‚úÖ Final WhatsApp Template Payload\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components = components\n                }\n            };\n        }\n    }\n\n}"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
      "sha256": "9f758fa90c76d160a238d286c153202e8e74f4de2261287d81cd8838f5ca8b40",
      "language": "csharp",
      "size": 2923,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ BODY PARAMETERS: Insert dynamic values into the template body\n            // WhatsApp expects these to be in order ({{1}}, {{2}}, etc.)\n            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n                return ResponseResult.ErrorInfo(\"‚ùå Missing template parameters.\");\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n                {\n                var bodyParams = dto.TemplateParameters\n                    .OrderBy(kvp => int.Parse(kvp.Key.Trim('{', '}'))) // üî¢ Extract and sort by index\n                    .Select(kvp => new\n                    {\n                        type = \"text\",\n                        text = kvp.Value\n                    }).ToArray();\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams\n                });\n            }\n\n            // ‚úÖ BUTTON PARAMETERS: For templates with dynamic URL buttons (index-based)\n            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n            {\n                for (int i = 0; i < dto.ButtonParams.Count; i++)\n                {\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i.ToString(), // WhatsApp requires index as a string\n                        parameters = new[]\n                        {\n                            new\n                            {\n                                type = \"text\",\n                                text = dto.ButtonParams[i]\n                            }\n                        }\n                    });\n                }\n            }\n\n            // ‚úÖ FINAL WHATSAPP TEMPLATE PAYLOAD\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n\n            // ü™µ Debug log for developer console (optional)\n            Console.WriteLine(\"üì¶ Built WhatsApp Template Payload:\");\n            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(payload, new System.Text.Json.JsonSerializerOptions\n            {\n                WriteIndented = true\n            }));\n\n            return payload;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateStaticButtonPayloadBuilder.cs",
      "sha256": "68979e5fa2d53ce3fa319c20377ca2022bf9e46b7244c817fb53f84594392f72",
      "language": "csharp",
      "size": 1397,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateStaticButtonPayloadBuilder\n    {\n        public static object Build(SendTemplateMessageSimpleDto dto)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ Add Body Params\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n\n            // ‚ö†Ô∏è DO NOT add button components for static buttons\n            // Meta will render them automatically if template has static buttons defined\n            // You can later add logic here for dynamic buttons if needed\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TextMessagePayloadBuilder.cs",
      "sha256": "abc17e5a60e2f58ba07c610db126262040f598a15aca27d2f85d52afc2fb4766",
      "language": "csharp",
      "size": 554,
      "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = dto.TextContent\n                }\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/IMessageEngineService.cs",
      "sha256": "9e3238790374a70a6f1e9205036a372269dbce950e53bb2efd44aa2156b579c2",
      "language": "csharp",
      "size": 1145,
      "content": "// ‚úÖ Step 1: Final interface\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\nusing System.Threading.Tasks;\nusing System.IO.Pipelines;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface IMessageEngineService\n    {\n\n        Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto); //\n        Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto);\n        Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto);\n        Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId,SimpleTemplateMessageDto dto);\n        Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string triggeredBy);\n        //Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto);\n        Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId);\n        Task<ResponseResult> SendToWhatsAppAsync(object payload, Guid businessId);\n        //Task<IEnumerable<MessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/ITemplateMessageSender.cs",
      "sha256": "8da7dff35e83f585fcca22a680aaed11b677d5d033a41d582124f899ed1660ff",
      "language": "csharp",
      "size": 960,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface ITemplateMessageSender\n    {\n        /// <summary>\n        /// Sends a template message to a single contact (used in AutoReply/Flows).\n        /// </summary>\n        Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null\n        );\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
      "sha256": "144892e8c37ae636bd916ca7dd76eb8303f7a028d6c7d16373d9bc9d35246ae6",
      "language": "csharp",
      "size": 45461,
      "content": "using Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing System.Net.Http.Headers;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing System.Text;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.IO.Pipelines;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\n//using System.Text.Json;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http;\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n        // üîÑ Basic cache for WhatsApp settings to reduce DB load\n        private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager, IHubContext<InboxHub> hubContext, IMessageIdResolver messageIdResolver, IHttpContextAccessor httpContextAccessor,\n            IContactService contactService\n            )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n               \n        }\n\n        public async Task<ResponseResult> SendToWhatsAppAsync(object payload, Guid businessId)\n        {\n            var settings = await GetBusinessWhatsAppSettingsAsync(businessId);\n            var token = settings.ApiToken;\n            var phoneId = settings.PhoneNumberId;\n            var baseUrl = settings.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n            var url = $\"{baseUrl}/{phoneId}/messages\";\n\n            var request = new HttpRequestMessage(HttpMethod.Post, url)\n            {\n                Content = new StringContent(JsonConvert.SerializeObject(payload), Encoding.UTF8, \"application/json\")\n            };\n\n            request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            Console.WriteLine(\"üöÄ Final Payload:\");\n            Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n            var response = await _http.SendAsync(request);\n            // üåê Status\n            Console.WriteLine($\"Status: {(int)response.StatusCode} {response.ReasonPhrase}\");\n\n            // üìã Headers\n            Console.WriteLine(\"Headers:\");\n            foreach (var header in response.Headers)\n            {\n                Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n            }\n            foreach (var header in response.Content.Headers)\n            {\n                Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n            }\n            // üì¶ Body (content)\n            var body = await response.Content.ReadAsStringAsync();\n\n            // ‚ùå Handle token errors or failure\n            if (!response.IsSuccessStatusCode)\n            {\n                if (body.Contains(\"invalid_token\") || body.Contains(\"Error validating access token\"))\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"‚ùå WhatsApp token has expired. Please update your token.\",\n                        \"Access token expired\",\n                        body\n                    );\n                }\n\n                return ResponseResult.ErrorInfo(\n                    \"‚ùå WhatsApp API returned an error.\",\n                    \"API returned error\",\n                    body\n                );\n            }\n\n            // ‚úÖ Parse WAMID safely\n            string? wamid = null;\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(body);\n                wamid = parsed?.messages?[0]?.id;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ö†Ô∏è Failed to parse WAMID: \" + ex.Message);\n            }\n\n            // ‚úÖ Use object initializer style\n            var result = ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", data: null, raw: body);\n            result.MessageId = wamid;\n            return result;\n        }\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì® Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                // ‚úÖ Validate message type\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ‚úÖ Quota check\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"‚ùå Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ‚úÖ Build payload\n                var payload = _templateBuilder.BuildPayload(dto);\n                Console.WriteLine(\"üîß Built WhatsApp payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // üöÄ Send to WhatsApp API\n                var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n                Console.WriteLine(\"‚úÖ WhatsApp API response:\");\n                Console.WriteLine(JsonConvert.SerializeObject(sendResult, Formatting.Indented));\n\n                // ‚úÖ Build the rendered body before saving\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                );\n\n                // üìù Log success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // üìâ Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // üì° Send real-time message to SignalR group\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                var fullError = $\"üß® Error ID: {errorId}\\n{ex}\";\n\n                Console.WriteLine(fullError);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                    ),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"‚ùå Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString()\n                );\n            }\n        }\n\n        private async Task<WhatsAppSettingEntity> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            var business = await _db.Businesses\n                .Include(b => b.WhatsAppSettings)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.WhatsAppSettings == null)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            _settingsCache[businessId] = (business.WhatsAppSettings, DateTime.UtcNow.AddMinutes(5));\n            return business.WhatsAppSettings;\n        }\n\n           public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                 //‚úÖ Resolve business ID from context\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                     ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context.\");\n\n\n                // üîç Optionally associate with Contact\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // ‚úÖ Step 1: Build WhatsApp payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"text\",\n                    text = new\n                    {\n                        preview_url = false,\n                        body = dto.TextContent\n                    }\n                };\n\n                Console.WriteLine(\"‚úÖ WhatsApp Text Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ‚úÖ Step 2: Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                // ‚úÖ Step 3: Extract MessageId from response\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                            {\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // ‚úÖ Step 4: Save MessageLog\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // ‚úÖ Step 5: Optional campaign log mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                // ‚úÖ Step 6: Return structured result\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"‚úÖ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendTextDirectAsync: {ex.Message}\");\n\n                // ‚ùå Log failed attempt with partial context\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                               ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                // ‚úÖ Resolve business ID from DTO or claims\n                var businessId = (dto.BusinessId != Guid.Empty)\n                    ? dto.BusinessId\n                    : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                      ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId from context or DTO.\");\n\n                // üîç Optionally associate with Contact\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"‚ö†Ô∏è Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // ‚úÖ Step 1: Build WhatsApp payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"text\",\n                    text = new\n                    {\n                        preview_url = false,\n                        body = dto.TextContent\n                    }\n                };\n\n                Console.WriteLine(\"‚úÖ WhatsApp Text Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ‚úÖ Step 2: Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                // ‚úÖ Step 3: Extract MessageId from response\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                            {\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // ‚úÖ Step 4: Save MessageLog\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // ‚úÖ Step 5: Optional campaign log mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"üì¶ CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                // ‚úÖ Step 6: Return structured result\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"‚úÖ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Exception in SendAutomationReply: {ex.Message}\");\n\n                // ‚ùå Log failed attempt with partial context\n                try\n                {\n                    var businessId = (dto.BusinessId != Guid.Empty)\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"‚ùå Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"‚ùå Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send text message.\", ex.ToString());\n            }\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateMessageSimpleAsync(SimpleTemplateMessageDto dto)\n        //{\n        //    try\n        //    {\n        //        // ‚úÖ Build WhatsApp template payload with body only\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = dto.RecipientNumber,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = dto.TemplateName,\n        //                language = new { code = \"en_US\" },\n        //                components = new[]\n        //                {\n        //            new\n        //            {\n        //                type = \"body\",\n        //                parameters = dto.TemplateParameters.Select(p => new\n        //                {\n        //                    type = \"text\",\n        //                    text = p\n        //                }).ToArray()\n        //            }\n        //        }\n        //            }\n        //        };\n\n        //        Console.WriteLine(\"üì¶ Template Payload (no buttons):\");\n        //        Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n        //        var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n\n        //        // ‚úÖ Log success\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n\n        //            MediaUrl = null,\n        //            Status = \"Sent\", \n        //            ErrorMessage = null,\n        //            RawResponse = JsonConvert.SerializeObject(sendResult),\n        //            CreatedAt = DateTime.UtcNow,\n        //            SentAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId,\n\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return ResponseResult.SuccessInfo(\"‚úÖ Template sent successfully.\", sendResult, log.RawResponse);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        // ‚ùå Log failure\n        //        // ‚ùå Log failure\n        //        await _db.MessageLogs.AddAsync(new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters), // ‚úÖ Add this\n        //            Status = \"Failed\",\n        //            ErrorMessage = ex.Message,\n        //            CreatedAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId,\n        //        });\n\n\n        //        await _db.SaveChangesAsync();\n\n        //        return ResponseResult.ErrorInfo(\"‚ùå Error sending template.\", ex.ToString());\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName,\n                        language = new { code = \"en_US\" },\n                        components = new[]\n                        {\n                    new\n                    {\n                        type = \"body\",\n                        parameters = dto.TemplateParameters.Select(p => new\n                        {\n                            type = \"text\",\n                            text = p\n                        }).ToArray()\n                    }\n                }\n                    }\n                };\n\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n                    Status = \"Sent\",\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Template sent successfully.\", sendResult);\n            }\n            catch (Exception ex)\n            {\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Template send failed\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n\n                // ‚úÖ Early Validation (Avoid WhatsApp 400 errors)\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto\n                    {\n                        Title = b.Title,\n                        Value = b.Value\n                    })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"‚ö†Ô∏è Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        // Tracking metadata\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n\n\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto); // Central engine\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\n                    $\"‚úÖ Campaign sent.\\nüì§ Success: {successCount}, ‚ùå Failed: {failCount}\"\n                );\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"‚ùå Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n                   \n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"üì§ Sending image+CTA to {dto.RecipientNumber}\");\n\n                // ‚úÖ Early validation: TextContent and at least one button\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"‚ùå Image message caption (TextContent) cannot be empty.\");\n\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid().ToString(\"N\").Substring(0, 8)}\",\n                            title = btn.Title\n                        }\n                    }).ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå At least one CTA button with a valid title is required.\");\n\n                // üß± Build the payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new\n                        {\n                            buttons = validButtons\n                        }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new\n                    {\n                        link = dto.MediaUrl\n                    }\n                };\n\n                Console.WriteLine(\"üì¶ Final payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // üîÅ Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n                var rawJson = JsonConvert.SerializeObject(sendResult);\n\n                // üìù Log to DB\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = \"Sent\",\n                    RawResponse = rawJson,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                var response = ResponseResult.SuccessInfo(\"‚úÖ Image+CTA message sent.\", null, rawJson);\n                response.MessageId = log.Id.ToString();\n                response.LogId = log.Id;\n                return response;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"‚ùå Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n        //public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto)\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                List<object> components = new List<object>();\n\n                // ‚úÖ Header (Image) component ‚Äî optional\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                    new\n                    {\n                        type = \"image\",\n                        image = new\n                        {\n                            link = dto.HeaderImageUrl\n                        }\n                    }\n                }\n                    });\n                }\n\n                // ‚úÖ Body (Template Parameters)\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n\n                // ‚úÖ Buttons ‚Äî dynamic (up to 3), skip invalid entries\n                for (int i = 0; i < dto.ButtonParameters.Count && i < 3; i++)\n                {\n                    var btn = dto.ButtonParameters[i];\n                    string subType = btn.ButtonType?.ToLower();\n\n                    // üõë Skip if ButtonType or TargetUrl is missing\n                    if (string.IsNullOrWhiteSpace(subType) || string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    // üß† Add required parameters based on button subtype\n                    if (subType == \"quick_reply\")\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                    new\n                    {\n                        type = \"payload\",\n                        payload = btn.TargetUrl\n                    }\n                };\n                    }\n                    else if (subType == \"url\")\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                    new\n                    {\n                        type = \"text\",\n                        text = btn.TargetUrl\n                    }\n                };\n                    }\n                    // ‚úÖ Do not add parameters for phone/call type\n\n                    components.Add(button);\n                }\n\n                // ‚úÖ Final Payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName,\n                        language = new\n                        {\n                            code = dto.LanguageCode ?? \"en_US\"\n                        },\n                        components = components\n                    }\n                };\n\n                Console.WriteLine(\"üì¶ Sending Image Template Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ‚úÖ Send to WhatsApp API\n                object sendResult = await SendToWhatsAppAsync(payload, businessId);\n                // ‚úÖ Prepare rendered body (new)\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>()\n                );\n\n                // ‚úÖ Save log on success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n\n\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Image template sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                // üõë Log failure\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"‚ùå Error sending image template.\", ex.ToString());\n            }\n        }\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n    }\n\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
      "sha256": "9316938182f43c5081969d0f706bb900ddb510f07296c4b88099304f15ea4caf",
      "language": "csharp",
      "size": 8270,
      "content": "// üìÑ File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"‚úÖ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"‚ùå Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"üì§ Sent to {success}, ‚ùå Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
      "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
      "language": "csharp",
      "size": 1760,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
    }
  ]
}
