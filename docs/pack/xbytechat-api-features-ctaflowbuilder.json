{
  "name": "xbytechat-api/Features/CTAFlowBuilder",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs",
      "sha256": "f5084d9a24f2667d21707e1893b4a3c8a09a3e5b14aceb728043514a7b5d8261",
      "language": "csharp",
      "size": 9864,
      "content": "// üìÑ File: Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Helpers;\n\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/cta-flow\")]\n    public class CTAFlowController : ControllerBase\n    {\n        private readonly ICTAFlowService _flowService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly ITrackingService _trackingService;\n        public CTAFlowController(ICTAFlowService flowService, IMessageEngineService messageEngineService, ITrackingService trackingService)\n        {\n            _flowService = flowService;\n            _messageEngineService = messageEngineService;\n            _trackingService = trackingService;\n        }\n\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> CreateFlow([FromBody] CreateFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing businessId claim.\");\n\n            var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n            return Ok(new { flowId = id });\n        }\n\n        [HttpPost(\"publish\")]\n        public async Task<IActionResult> PublishFlow([FromBody] List<FlowStepDto> steps)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing businessId claim.\");\n\n            var result = await _flowService.PublishFlowAsync(businessId, steps, createdBy);\n            if (!result.Success)\n                return BadRequest(result.Message);\n\n            return Ok(\"‚úÖ Flow published successfully.\");\n        }\n\n        [HttpGet(\"current\")]\n        public async Task<IActionResult> GetFlow()\n        {\n            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdHeader, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing BusinessId header.\");\n\n            var flow = await _flowService.GetFlowByBusinessAsync(businessId);\n\n            // ‚úÖ Always return 200 even if flow is null\n            return Ok(flow);\n        }\n\n        [HttpGet(\"draft\")]\n        public async Task<IActionResult> GetDraftFlow()\n        {\n            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdHeader, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing BusinessId header.\");\n\n            var draft = await _flowService.GetDraftFlowByBusinessAsync(businessId);\n            if (draft == null)\n                return NotFound(\"‚ùå No draft flow found.\");\n\n            return Ok(draft);\n        }\n\n        [HttpGet(\"by-id/{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var flow = await _flowService.GetVisualFlowByIdAsync(id);\n            if (flow == null) return NotFound(\"‚ùå Flow not found\");\n            return Ok(flow);\n        }\n\n        //[HttpGet(\"match\")]\n        //public async Task<IActionResult> MatchButton([FromQuery] string text, [FromQuery] string type)\n        //{\n        //    var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n\n        //    var step = await _flowService.MatchStepByButtonAsync(businessId, text, type, currentTemplateName,);\n        //    if (step == null)\n        //        return NotFound(\"‚ùå No matching step found.\");\n\n        //    return Ok(new\n        //    {\n        //        step.TemplateToSend,\n        //        step.TriggerButtonText,\n        //        step.TriggerButtonType\n        //    });\n        //}\n\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchButton(\n    [FromQuery] string text,\n    [FromQuery] string type,\n    [FromQuery] string currentTemplateName,\n    [FromQuery] Guid? campaignId) // Optional\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value!);\n\n            var step = await _flowService.MatchStepByButtonAsync(\n                businessId,\n                text,\n                type,\n                currentTemplateName,\n                campaignId\n            );\n\n            if (step == null)\n                return NotFound(\"‚ùå No matching step found.\");\n\n            return Ok(new\n            {\n                step.TemplateToSend,\n                step.TriggerButtonText,\n                step.TriggerButtonType\n            });\n        }\n\n        [HttpPost(\"save-visual\")]\n        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            Log.Information(\"üì¶ Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n            if (!result.Success)\n            {\n                Log.Error(\"‚ùå Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n                return StatusCode(500, new\n                {\n                    message = \"‚ùå Failed to save flow\",\n                    error = result.ErrorMessage,\n                    // skipped = result.SkippedNodes ?? 0\n                });\n            }\n\n            return Ok(new\n            {\n                message = \"‚úÖ Flow saved successfully\"\n            });\n        }\n\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var result = await _flowService.DeleteFlowAsync(id, businessId);\n\n            return result.Success\n                ? Ok(new { message = result.Message })\n                : BadRequest(new { message = result.Message });\n        }\n        [HttpGet(\"all-published\")]\n        public async Task<IActionResult> GetPublishedFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n            return Ok(flows);\n        }\n        [HttpGet(\"all-draft\")]\n        public async Task<IActionResult> GetAllDraftFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        // üìÑ File: D:\\...\\Features\\CTAFlowBuilder\\Controllers\\CTAFlowController.cs\n\n        [HttpPost(\"execute-visual\")]\n        public async Task<IActionResult> ExecuteVisualFlowAsync(\n            [FromQuery] Guid nextStepId,\n            [FromQuery] Guid trackingLogId,\n            // ‚úÖ 1. ADD the new optional parameter to the endpoint\n            [FromQuery] Guid? campaignSendLogId = null)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid business ID\");\n\n            // ‚úÖ 2. PASS the new parameter to the service call\n            var result = await _flowService.ExecuteVisualFlowAsync(businessId, nextStepId, trackingLogId, campaignSendLogId);\n\n            if (result.Success)\n                return Ok(result);\n            else\n                return BadRequest(result);\n        }\n\n        [HttpPost(\"create-config\")]\n        public async Task<IActionResult> CreateConfigFlow([FromBody] CreateFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing businessId claim.\");\n\n            try\n            {\n                var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n\n                return Ok(new\n                {\n                    flowId = id,\n                    message = \"‚úÖ Flow config created successfully.\"\n                });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    error = \"‚ùå Failed to create flow config.\",\n                    details = ex.Message\n                });\n            }\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs",
      "sha256": "8d5442a0a0fdb92dc7d69837cd74af882b22c6cf35ce999a7b87bfde5b27e7ca",
      "language": "csharp",
      "size": 2686,
      "content": "// üìÑ Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Infrastructure.Flows;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"r/flow\")]\n    public class FlowRedirectController : ControllerBase\n    {\n        private readonly IFlowClickTokenService _tokens;\n        private readonly ICTAFlowService _flows;           // service to read flow steps/links\n        private readonly IFlowRuntimeService _runtime;     // service to execute next step\n\n        public FlowRedirectController(\n            IFlowClickTokenService tokens,\n            ICTAFlowService flows,\n            IFlowRuntimeService runtime)\n        {\n            _tokens = tokens;\n            _flows = flows;\n            _runtime = runtime;\n        }\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous] // secure by token, tenant checks inside\n        public async Task<IActionResult> RedirectByToken(string token)\n        {\n            FlowClickPayload p;\n            try\n            {\n                p = _tokens.Validate(token);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest($\"Invalid or expired token: {ex.Message}\");\n            }\n\n            // üîí Tenant isolation: make sure the business in the token matches the current request context\n            // (if you have multi-tenant enforcement middleware, call it here)\n\n            // 1) Resolve the button link\n            var link = await _flows.GetLinkAsync(p.fid, p.sid, p.bi);\n            if (link is null)\n                return NotFound(\"Link not found for this flow step\");\n\n            var requestId = Guid.NewGuid(); // for idempotency\n            var exec = await _runtime.ExecuteNextAsync(new NextStepContext\n            {\n                BusinessId = p.biz,\n                FlowId = p.fid,\n                Version = p.ver,\n                SourceStepId = p.sid,\n                TargetStepId = link.NextStepId, // may be null ‚Üí terminal\n                ButtonIndex = p.bi,\n                MessageLogId = p.mlid,\n                ContactPhone = p.cp,\n                RequestId = requestId,\n\n                // üÜï Pass the clicked button for runtime decision\n                ClickedButton = link\n            });\n\n\n            // 3) Redirect the user\n            // If button was a URL, use that; else go to a generic \"thank you\" page\n            var dest = exec.RedirectUrl ?? \"/thank-you\";\n            return Redirect(dest);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs",
      "sha256": "c23400a06816a2adc8886fa8d20dd77f12b8b93f993b5a772d81cb12d6612a1f",
      "language": "csharp",
      "size": 897,
      "content": "// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CreateFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowStepDto> Steps { get; set; } = new();\n        public bool IsPublished { get; set; } = false; // ‚úÖ NEW: Draft vs Published\n    }\n\n    public class FlowStepDto\n    {\n        public string TriggerButtonText { get; set; } = string.Empty;\n        public string TriggerButtonType { get; set; } = string.Empty;\n        public string TemplateToSend { get; set; } = string.Empty;\n        public int StepOrder { get; set; }\n        public List<ButtonLinkDto> ButtonLinks { get; set; } = new();\n    }\n\n    public class ButtonLinkDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid NextStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAButtonClickDto.cs",
      "sha256": "da355d853887193eb1d2b3e3fafcf076e6df764f0220cbf10f5c050d42b91df6",
      "language": "csharp",
      "size": 432,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAButtonClickDto\n    {\n        [Required]\n        public string ButtonText { get; set; } = string.Empty;\n\n        [Required]\n        public string ButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\", \"url\", etc.\n\n        [Required]\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAFlowExecutionRequest.cs",
      "sha256": "43fc0e1c1674d188b1a5385539f1314176ff81449d4547ea6665df9909a223bb",
      "language": "csharp",
      "size": 297,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAFlowExecutionRequest\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"cta\";\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowEdgeDto.cs",
      "sha256": "27e76e22a8aba502d5727d9959bec58ea011d2a1f0d4388a141bfa8108043eea",
      "language": "csharp",
      "size": 272,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowEdgeDto\n    {\n        public string FromNodeId { get; set; } = string.Empty;\n        public string ToNodeId { get; set; } = string.Empty;\n        public string? SourceHandle { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowNodeDto.cs",
      "sha256": "5b1f9625b329b229575e5859cfacacaa1520238bff1573e6a34b34c4c85120b3",
      "language": "csharp",
      "size": 1118,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowNodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n\n        public string TemplateName { get; set; } = string.Empty;\n        public string? TemplateType { get; set; } // ‚úÖ e.g., \"image_template\", \"text_template\"\n        public string MessageBody { get; set; } = string.Empty;\n        public string? TriggerButtonText { get; set; }\n        public string? TriggerButtonType { get; set; }\n        public float PositionX { get; set; }\n        public float PositionY { get; set; }\n\n        public string? RequiredTag { get; set; }         \n        public string? RequiredSource { get; set; }      \n        public List<LinkButtonDto> Buttons { get; set; } = new();\n        //(for flow trigger mapping)\n        // ‚úÖ NEW: ReactFlow expects this structure\n        public PositionDto Position => new PositionDto\n        {\n            x = PositionX,\n            y = PositionY\n        };\n        public class PositionDto\n        {\n            public float x { get; set; }\n            public float y { get; set; }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/LinkButtonDto.cs",
      "sha256": "e02e2c927a96e1e02c0537fb205fd7595289bdfaa9de15c0d7a55de64a90fbc5",
      "language": "csharp",
      "size": 522,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class LinkButtonDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public int Index { get; set; } = -1;\n        public string? Type { get; set; } // üî• e.g., \"URL\", \"QUICK_REPLY\"\n        public string? SubType { get; set; } // üî• e.g., \"STATIC\", \"DYNAMIC\"\n        public string? Value { get; set; } // üî• the parameter or url or payload\n\n        public string? TargetNodeId { get; set; } // üîÑ used for flow linking\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/SaveVisualFlowDto.cs",
      "sha256": "7de59d222a97efeaf9dc23dea2ef351d852087539cec12e7c946b02e11f1bd21",
      "language": "csharp",
      "size": 403,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class SaveVisualFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n        public Guid? CampaignId { get; set; } // ‚úÖ Add this line\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowLoadDto.cs",
      "sha256": "10bfe378ffd4c8fb74a0746f2abafec88897072e7a974d680396bde281aaf4af",
      "language": "csharp",
      "size": 289,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowLoadDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowSummaryDto.cs",
      "sha256": "70dcedd3219a474a4b38927e0f0fd4ff3e21ba16632d409f146a9d0d60d685a5",
      "language": "csharp",
      "size": 300,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowClickLog.cs",
      "sha256": "ecbd408e613e8ef88e2bb39fdf60bc188163e209d8242317203dfb2bff8cebb8",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class CTAFlowClickLog\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs",
      "sha256": "3f05a1457051adfc7e66c759040348f1288066c7abcf4c570c0b2fd5c98da19e",
      "language": "csharp",
      "size": 1123,
      "content": "// üìÑ File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n    /// </summary>\n    public class CTAFlowConfig\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FlowName { get; set; } = string.Empty;\n\n        public bool IsActive { get; set; } = true;\n\n        public bool IsPublished { get; set; } = false; // ‚úÖ NEW: Support draft/published\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n        public DateTime? UpdatedAt { get; set; }  // ‚úÖ Add this line\n\n        // üîÅ Navigation to steps\n        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowStep.cs",
      "sha256": "1469836c27765675fb8f7ea910ffabd76fdc9ec583c0e3e3c0f9a986f6fb83db",
      "language": "csharp",
      "size": 1352,
      "content": "// üìÑ File: Features/CTAFlowBuilder/Models/CTAFlowStep.cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a single step in a CTA flow, triggered by a button.\n    /// </summary>\n    public class CTAFlowStep\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CTAFlowConfigId { get; set; }\n\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig Flow { get; set; } = null!;\n\n        public string TriggerButtonText { get; set; } = string.Empty;\n\n        public string TriggerButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\"\n\n        public string TemplateToSend { get; set; } = string.Empty;\n\n        public int StepOrder { get; set; }\n\n        public string? RequiredTag { get; set; }        // e.g., \"interested\"\n        public string? RequiredSource { get; set; }     // e.g., \"ads\", \"qr\", \"manual\"\n\n        // üîÄ Multiple buttons linking to different steps\n        public List<FlowButtonLink> ButtonLinks { get; set; } = new();\n\n        public float? PositionX { get; set; }\n        public float? PositionY { get; set; }\n        public string? TemplateType { get; set; }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowButtonLink.cs",
      "sha256": "6b265bc48b8286ca84e5937f9f8f6fe99b8b6580ca59a43aedda8290fc685aaa",
      "language": "csharp",
      "size": 807,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class FlowButtonLink\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? NextStepId { get; set; }\n        // ‚úÖ NEW FIELDS FOR FUTURE AUTOMATION\n        public string ButtonType { get; set; } = \"QUICK_REPLY\";    // e.g., URL, QUICK_REPLY, FLOW\n        public string ButtonSubType { get; set; } = \"\";            // Optional: e.g., \"Catalog\", \"PricingCTA\"\n        public string ButtonValue { get; set; } = \"\";              // e.g., URL or deep link\n\n        // Optional FK back to Step if needed\n        public Guid CTAFlowStepId { get; set; }\n        public CTAFlowStep? Step { get; set; }\n\n        public short ButtonIndex { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowExecutionLog.cs",
      "sha256": "3288e0095ae888c5f42e669c9bd44c204cec5d167c37a928862137eaa5276988",
      "language": "csharp",
      "size": 1426,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Logs when a visual flow step is executed (useful for analytics, debugging, audit).\n    /// </summary>\n    public class FlowExecutionLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n\n        public Guid? FlowId { get; set; }\n\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? TrackingLogId { get; set; }\n\n        public string? ContactPhone { get; set; }\n\n        public string? TriggeredByButton { get; set; }\n\n        public string? TemplateName { get; set; }\n\n        public string? TemplateType { get; set; }\n\n        public bool Success { get; set; }\n\n        public string? ErrorMessage { get; set; }\n\n        public string? RawResponse { get; set; }\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n\n        public Guid? MessageLogId { get; set; }              // tie to originating message\n        public short? ButtonIndex { get; set; }              // which button was clicked (0..2)\n        public Guid? RequestId { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/CTAFlowService.cs",
      "sha256": "f62aa8e7e41961f339b02dcd003a4234c7207c3ae71b6919063665343dbf52fe",
      "language": "csharp",
      "size": 34515,
      "content": "// üìÑ File: Features/CTAFlowBuilder/Services/CTAFlowService.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class CTAFlowService : ICTAFlowService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService\n            )\n        {\n            _context = context;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)\n        {\n            var flow = new CTAFlowConfig\n            {\n                Id = Guid.NewGuid(),\n                FlowName = dto.FlowName,\n                BusinessId = businessId,\n                CreatedAt = DateTime.UtcNow,\n                CreatedBy = createdBy,\n                IsPublished = dto.IsPublished\n            };\n\n            foreach (var stepDto in dto.Steps)\n            {\n                var step = new CTAFlowStep\n                {\n                    Id = Guid.NewGuid(),\n                    CTAFlowConfigId = flow.Id,\n                    TriggerButtonText = stepDto.TriggerButtonText,\n                    TriggerButtonType = stepDto.TriggerButtonType,\n                    TemplateToSend = stepDto.TemplateToSend,\n                    StepOrder = stepDto.StepOrder,\n                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink\n                    {\n                        ButtonText = link.ButtonText,\n                        NextStepId = link.NextStepId\n                    }).ToList() ?? new List<FlowButtonLink>()\n                };\n\n                flow.Steps.Add(step);\n            }\n\n            _context.CTAFlowConfigs.Add(flow);\n            await _context.SaveChangesAsync();\n\n            return flow.Id;\n        }\n\n        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Include(f => f.Steps.OrderBy(s => s.StepOrder))\n                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .Where(f => f.BusinessId == businessId && f.IsPublished == false)\n                .OrderByDescending(f => f.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n\n\n        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)\n        {\n            return await _context.CTAFlowSteps\n                .Where(s => s.CTAFlowConfigId == flowId)\n                .OrderBy(s => s.StepOrder)\n                .ToListAsync();\n        }\n\n        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n            Guid businessId,\n            string buttonText,\n            string buttonType,\n            string TemplateName,\n            Guid? campaignId = null)\n        {\n            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? \"\";\n\n            // 1Ô∏è‚É£ Try campaign-specific override\n            if (campaignId.HasValue)\n            {\n                var overrideStep = await _context.CampaignFlowOverrides\n                    .Where(o =>\n                        o.CampaignId == campaignId &&\n                        o.ButtonText.ToLower() == normalizedButtonText &&\n                        o.TemplateName.ToLower() == normalizedTemplateName)\n                    .FirstOrDefaultAsync();\n\n                if (overrideStep != null)\n                {\n                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n\n                    var matched = await _context.CTAFlowSteps\n                        .Include(s => s.Flow)\n                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n\n                    if (matched != null)\n                    {\n                        Log.Information(\"üîÅ Override matched: Template '{Template}' ‚Üí Step '{StepId}'\", overrideStep.OverrideNextTemplate, matched.Id);\n                        return matched;\n                    }\n\n                    Log.Warning(\"‚ö†Ô∏è Override found for button '{Button}' but no matching step for template '{Template}'\", normalizedButtonText, overrideStep.OverrideNextTemplate);\n                }\n\n                else\n                {\n                    Log.Information(\"üü° No campaign override found for button '{Button}' on template '{Template}'\", normalizedButtonText, normalizedTemplateName);\n                }\n            }\n\n            // 2Ô∏è‚É£ Fallback to standard flow logic\n            var fallbackStep = await _context.CTAFlowSteps\n                .Include(s => s.Flow)\n                .Where(s =>\n                    s.Flow.BusinessId == businessId &&\n                    s.Flow.IsActive &&\n                    s.Flow.IsPublished &&\n                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n                .FirstOrDefaultAsync();\n\n            if (fallbackStep != null)\n            {\n                Log.Information(\"‚úÖ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}\", fallbackStep.Id, fallbackStep.Flow?.FlowName);\n            }\n            else\n            {\n                Log.Warning(\"‚ùå No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}\", normalizedButtonText, normalizedButtonType, businessId);\n            }\n\n            return fallbackStep;\n        }\n\n\n\n        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)\n        {\n            try\n            {\n                // üî• 1. Remove existing published flow for this business\n                var existingFlows = await _context.CTAFlowConfigs\n                    .Where(f => f.BusinessId == businessId && f.IsPublished)\n                    .ToListAsync();\n\n                if (existingFlows.Any())\n                {\n                    _context.CTAFlowConfigs.RemoveRange(existingFlows);\n                }\n\n                // üå± 2. Create new flow config\n                var flowConfig = new CTAFlowConfig\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    FlowName = \"Published Flow - \" + DateTime.UtcNow.ToString(\"yyyyMMdd-HHmm\"),\n                    IsPublished = true,\n                    IsActive = true,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    Steps = new List<CTAFlowStep>()\n                };\n\n                // üîÅ 3. Convert each step DTO to model\n                foreach (var stepDto in steps)\n                {\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flowConfig.Id,\n                        TriggerButtonText = stepDto.TriggerButtonText,\n                        TriggerButtonType = stepDto.TriggerButtonType,\n                        TemplateToSend = stepDto.TemplateToSend,\n                        StepOrder = stepDto.StepOrder,\n                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            ButtonText = bl.ButtonText,\n                            NextStepId = bl.NextStepId,\n                        }).ToList()\n                    };\n\n                    flowConfig.Steps.Add(step);\n                }\n\n                // üíæ 4. Save to DB\n                await _context.CTAFlowConfigs.AddAsync(flowConfig);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Flow published successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Error while publishing CTA flow.\");\n                return ResponseResult.ErrorInfo(\"‚ùå Could not publish flow.\");\n            }\n        }\n\n        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                Log.Information(\"üß† SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}\", dto.FlowName, businessId);\n\n                if (dto.Nodes == null || !dto.Nodes.Any())\n                {\n                    Log.Warning(\"‚ùå No nodes found in flow. Aborting save.\");\n                    return ResponseResult.ErrorInfo(\"‚ùå Cannot save an empty flow. Please add at least one step.\");\n                }\n\n                // 1) Upsert FlowConfig\n                var flow = await _context.CTAFlowConfigs\n                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);\n\n                if (flow == null)\n                {\n                    flow = new CTAFlowConfig\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FlowName = dto.FlowName,\n                        CreatedBy = createdBy,\n                        CreatedAt = DateTime.UtcNow,\n                        UpdatedAt = DateTime.UtcNow,\n                        IsActive = true,\n                        IsPublished = dto.IsPublished\n                    };\n                    _context.CTAFlowConfigs.Add(flow);\n                    Log.Information(\"‚úÖ New FlowConfig created with ID: {Id}\", flow.Id);\n                }\n                else\n                {\n                    // wipe old steps+links for a clean replace\n                    var oldSteps = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == flow.Id)\n                        .Include(s => s.ButtonLinks)\n                        .ToListAsync();\n\n                    foreach (var step in oldSteps)\n                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n                    _context.CTAFlowSteps.RemoveRange(oldSteps);\n\n                    flow.IsPublished = dto.IsPublished;\n                    flow.UpdatedAt = DateTime.UtcNow;\n                }\n\n                // 2) Build Steps (map by incoming node.Id string)\n                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n\n                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id))\n                        continue;\n\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flow.Id,\n                        StepOrder = index,\n                        TemplateToSend = node.TemplateName,\n                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n                        ButtonLinks = new List<FlowButtonLink>()\n                    };\n\n                    stepMap[node.Id] = step;\n                    _context.CTAFlowSteps.Add(step);\n                }\n\n                // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly\n                foreach (var node in dto.Nodes)\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n                        continue;\n\n                    // outgoing edges from this node\n                    var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()\n                                   ?? new List<FlowEdgeDto>();\n\n                    // dedupe by button text to avoid ambiguous routing\n                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n                    // stable ordering: by provided Index (0..N), then by Text\n                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n                        .ThenBy(b => b.Text ?? string.Empty)\n                        .ToList();\n\n                    short nextIdx = 0;\n\n                    foreach (var btn in orderedButtons)\n                    {\n                        var text = (btn.Text ?? string.Empty).Trim();\n                        if (string.IsNullOrEmpty(text))\n                            continue;\n\n                        if (!seenTexts.Add(text))\n                        {\n                            Log.Warning(\"‚ö†Ô∏è Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.\", text, node.Id);\n                            continue;\n                        }\n\n                        // match edge by SourceHandle == button text (how ReactFlow wires handles)\n                        var edge = outEdges.FirstOrDefault(e =>\n                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n                        if (edge == null)\n                        {\n                            // no wire from this button ‚Üí skip link creation but keep button metadata in UI on reload\n                            continue;\n                        }\n\n                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))\n                            continue;\n\n                        // final index: prefer incoming payload Index; else fallback to a sequential counter\n                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n                        nextIdx = (short)(finalIndex + 1);\n\n                        var link = new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            CTAFlowStepId = fromStep.Id,\n                            NextStepId = toStep.Id,\n                            ButtonText = text,\n                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n                            ButtonSubType = btn.SubType ?? string.Empty,\n                            ButtonValue = btn.Value ?? string.Empty,\n                            ButtonIndex = (short)finalIndex // üîë persist the index\n                        };\n\n                        _context.FlowButtonLinks.Add(link);\n                        fromStep.ButtonLinks.Add(link);\n\n                        // propagate trigger info on the target step for convenience\n                        toStep.TriggerButtonText = text;\n                        toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n                    }\n                }\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"‚úÖ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}\",\n                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n                return ResponseResult.SuccessInfo(\"‚úÖ Flow saved successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while saving flow\");\n                return ResponseResult.ErrorInfo(\"‚ùå Internal error while saving flow.\");\n            }\n        }\n\n        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(c => c.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);\n\n            if (flow == null) return null;\n\n            var businessId = flow.BusinessId;\n\n            // ‚úÖ Pre-fetch templates from Meta\n            var templateMap = new Dictionary<string, TemplateMetadataDto>();\n\n            foreach (var step in flow.Steps)\n            {\n                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))\n                {\n                    try\n                    {\n                        var template = await _templateFetcherService.GetTemplateByNameAsync(\n                            businessId,\n                            step.TemplateToSend,\n                            includeButtons: true\n                        );\n\n                        if (template != null)\n                            templateMap[step.TemplateToSend] = template;\n                    }\n                    catch (Exception ex)\n                    {\n                        Log.Warning(ex, \"‚ö†Ô∏è Failed to fetch template from Meta for {Template}\", step.TemplateToSend);\n                    }\n                }\n            }\n\n            // ‚úÖ Map into ReactFlow-compatible structure\n            var nodes = flow.Steps.Select(step =>\n            {\n                var template = templateMap.GetValueOrDefault(step.TemplateToSend);\n\n                return new FlowNodeDto\n                {\n                    Id = step.Id.ToString(),\n                    TemplateName = step.TemplateToSend,\n                    MessageBody = template?.Body ?? \"Message body preview...\",\n                    TriggerButtonText = step.TriggerButtonText,\n                    TriggerButtonType = step.TriggerButtonType,\n                    PositionX = step.PositionX ?? 100,\n                    PositionY = step.PositionY ?? 100,\n\n                    // ‚úÖ NEW: Include conditional logic\n                    RequiredTag = step.RequiredTag,\n                    RequiredSource = step.RequiredSource,\n\n                    //Buttons = step.ButtonLinks.Select(link => new LinkButtonDto\n                    //{\n                    //    Text = link.ButtonText,\n                    //    TargetNodeId = link.NextStepId.ToString()\n                    //}).ToList()\n                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto\n                    {\n                        Text = link.ButtonText,\n                        Type = link.ButtonType,\n                        SubType = link.ButtonSubType,\n                        Value = link.ButtonValue,\n                        TargetNodeId = link.NextStepId?.ToString()\n                    }).ToList()\n\n                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())\n                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))\n                                 .Select(btn => new LinkButtonDto\n                                 {\n                                     Text = btn.Text,\n                                     TargetNodeId = null\n                                 })).ToList()\n                };\n\n            }).ToList();\n\n            return new SaveVisualFlowDto\n            {\n                FlowName = flow.FlowName,\n                IsPublished = flow.IsPublished,\n                Nodes = nodes,\n                Edges = flow.Steps\n                        .SelectMany(step =>\n                            step.ButtonLinks.Select(link => new FlowEdgeDto\n                            {\n                                FromNodeId = step.Id.ToString(),\n                                ToNodeId = link.NextStepId.ToString(),\n                                SourceHandle = link.ButtonText // ‚úÖ important\n                            })\n                        ).ToList()\n\n            };\n        }\n\n\n        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Where(f => f.Id == id && f.BusinessId == businessId)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Flow not found or does not belong to you.\");\n\n            _context.CTAFlowConfigs.Remove(flow);\n            await _context.SaveChangesAsync();\n\n            return ResponseResult.SuccessInfo(\"‚úÖ Flow deleted successfully.\");\n        }\n        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && f.IsPublished)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    CreatedAt = f.CreatedAt,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n\n        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)\n        {\n            // Log.Information(\"üöÄ Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}\", businessId);\n            if (currentStep == null)\n            {\n                Log.Warning(\"‚ö†Ô∏è Cannot execute follow-up. Current step is null.\");\n                return ResponseResult.ErrorInfo(\"Current step not found.\");\n            }\n\n            // üß† Step: Look through all button links for a valid NextStepId\n            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);\n\n            if (nextLink == null)\n            {\n                Log.Information(\"‚ÑπÔ∏è No NextStepId defined in any ButtonLinks for StepId: {StepId}\", currentStep.Id);\n                return ResponseResult.SuccessInfo(\"No follow-up step to execute.\");\n            }\n\n            // üîç Fetch the next step using new logic (via CTAFlowConfig + Steps)\n            // 1Ô∏è‚É£ Try to resolve with smart condition check\n            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);\n\n            if (followUpStep == null)\n            {\n                Log.Warning(\"‚ùå Follow-up step skipped due to condition mismatch ‚Üí StepId: {StepId}\", nextLink.NextStepId);\n\n                // 2Ô∏è‚É£ Optional fallback: Try same flow ‚Üí Any step without conditions\n                var flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps)\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);\n\n                followUpStep = flow?.Steps\n                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))\n                    .OrderBy(s => s.StepOrder)\n                    .FirstOrDefault();\n\n                if (followUpStep != null)\n                {\n                    Log.Information(\"üîÅ Fallback step selected ‚Üí StepId: {StepId}, Template: {Template}\",\n                        followUpStep.Id, followUpStep.TemplateToSend);\n                }\n                else\n                {\n                    Log.Warning(\"üö´ No suitable fallback found in flow. Skipping follow-up.\");\n                    return ResponseResult.SuccessInfo(\"No matching follow-up step based on user context.\");\n                }\n            }\n\n\n            // üì® Send the follow-up message using the TemplateToSend field\n            try\n            {\n                var template = followUpStep.TemplateToSend;\n\n                Log.Information(\"üì§ Sending follow-up message ‚Üí Template: {Template}, To: {Recipient}\", template, recipientNumber);\n\n                // üß™ Replace this with actual message engine call\n                var sendDto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipientNumber,\n                    TemplateName = template,\n                    TemplateParameters = new List<string>() // Add dynamic params later if needed\n                };\n\n                var sendResult = await _messageEngineService\n     .SendTemplateMessageSimpleAsync(businessId, sendDto);\n\n                if (!sendResult.Success)\n                {\n                    Log.Warning(\"‚ùå Follow-up message send failed ‚Üí {Template}\", template);\n                    return ResponseResult.ErrorInfo(\"Follow-up send failed.\", sendResult.ErrorMessage);\n                }\n\n\n                return ResponseResult.SuccessInfo($\"Follow-up message sent using template: {template}\", null, sendResult.RawResponse);\n\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Error sending follow-up message for StepId: {StepId}\", followUpStep.Id);\n                return ResponseResult.ErrorInfo(\"Failed to send follow-up.\");\n            }\n        }\n        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n        {\n            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic\n        }\n\n        // ‚úÖ Extended logic with condition check (Tag + Source)\n        public async Task<CTAFlowStep?> GetChainedStepAsync(\n            Guid businessId,\n            Guid? nextStepId,\n            TrackingLog? trackingLog = null,\n            Contact? contact = null)\n        {\n            if (nextStepId == null)\n            {\n                Log.Information(\"‚ÑπÔ∏è No NextStepId provided ‚Äî skipping follow-up.\");\n                return null;\n            }\n\n            try\n            {\n                var flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps)\n                    .FirstOrDefaultAsync(f =>\n                        f.BusinessId == businessId &&\n                        f.Steps.Any(s => s.Id == nextStepId));\n\n                if (flow == null)\n                {\n                    Log.Warning(\"‚ö†Ô∏è No flow found containing NextStepId: {NextStepId} for business: {BusinessId}\", nextStepId, businessId);\n                    return null;\n                }\n\n                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);\n\n                if (followUpStep == null)\n                {\n                    Log.Warning(\"‚ùå Step matched in flow but not found in step list: {NextStepId}\", nextStepId);\n                    return null;\n                }\n\n                // ‚úÖ Check RequiredTag / Source match\n                if (trackingLog != null)\n                {\n                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n\n                    if (!isMatch)\n                    {\n                        Log.Information(\"üö´ Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]\",\n                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);\n                        return null;\n                    }\n                }\n\n                Log.Information(\"‚úÖ Follow-up step found and matched ‚Üí StepId: {StepId}, Template: {Template}\",\n                    followUpStep.Id, followUpStep.TemplateToSend);\n\n                return followUpStep;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while fetching chained step for NextStepId: {NextStepId}\", nextStepId);\n                throw;\n            }\n        }\n\n        // ‚úÖ Optional helper for resolving from TrackingLogId\n        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(\n            Guid businessId,\n            Guid? nextStepId,\n            Guid? trackingLogId)\n        {\n            var log = await _context.TrackingLogs\n                .Include(l => l.Contact)\n                    .ThenInclude(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n        }\n       \n        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)\n        {\n            try\n            {\n                Log.Information(\"üö¶ Executing Visual Flow ‚Üí StepId: {StepId} | TrackingLogId: {TrackingLogId}\", startStepId, trackingLogId);\n\n                var log = await _context.TrackingLogs\n                    .Include(l => l.Contact)\n                        .ThenInclude(c => c.ContactTags)\n                            .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n                if (log == null)\n                {\n                    Log.Warning(\"‚ùå TrackingLog not found for ID: {TrackingLogId}\", trackingLogId);\n                    return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n                }\n\n                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n\n                if (step == null)\n                {\n                    Log.Warning(\"‚ùå No flow step matched or conditions failed ‚Üí StepId: {StepId}\", startStepId);\n                    return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n                }\n\n                ResponseResult sendResult;\n\n                // This switch block remains unchanged\n                switch (step.TemplateType?.ToLower())\n                {\n                    case \"image_template\":\n                        var imageDto = new ImageTemplateMessageDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            LanguageCode = \"en_US\"\n                        };\n                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n                        break;\n\n                    case \"text_template\":\n                    default:\n                        var textDto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            TemplateParameters = new()\n                        };\n                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n                        break;\n                }\n\n                // ‚úÖ 2. SAVE the new ID to the log\n                var executionLog = new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    StepId = step.Id,\n                    FlowId = step.CTAFlowConfigId,\n                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE\n                    TrackingLogId = trackingLogId,\n                    ContactPhone = log.ContactPhone,\n                    TriggeredByButton = step.TriggerButtonText,\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow\n                };\n\n                _context.FlowExecutionLogs.Add(executionLog);\n                await _context.SaveChangesAsync();\n\n                if (sendResult.Success)\n                {\n                    Log.Information(\"‚úÖ Flow step executed ‚Üí Template: {Template} sent to {To}\", step.TemplateToSend, log.ContactPhone);\n                }\n                else\n                {\n                    Log.Warning(\"‚ùå Failed to send template from flow ‚Üí {Reason}\", sendResult.ErrorMessage);\n                }\n\n                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception during ExecuteVisualFlowAsync()\");\n                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n            }\n        }\n\n        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)\n        {\n            return await _context.FlowButtonLinks\n     .Where(l => l.CTAFlowStepId == sourceStepId\n              && l.NextStepId != null\n              && l.Step.CTAFlowConfigId == flowId\n              && l.ButtonIndex == buttonIndex)\n     .SingleOrDefaultAsync();\n\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/FlowRuntimeService.cs",
      "sha256": "da8d52ff8e4ae751bc8096a74f74d271cd7fe2b585955a9a669b564b5aa2fa2d",
      "language": "csharp",
      "size": 9059,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Text.Json;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat_api.WhatsAppSettings.Services; \n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class FlowRuntimeService : IFlowRuntimeService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        \n        public FlowRuntimeService(\n            AppDbContext dbContext,\n            IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _dbContext = dbContext;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)\n        {\n            try\n            {\n                // 1) URL-only buttons ‚Üí no WA send, just record and return redirect\n                if (context.ClickedButton != null &&\n                    context.ClickedButton.ButtonType?.Equals(\"URL\", StringComparison.OrdinalIgnoreCase) == true)\n                {\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = context.SourceStepId,\n                        StepName = \"URL_REDIRECT\",\n                        MessageLogId = context.MessageLogId,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = true,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult\n                    {\n                        Success = true,\n                        RedirectUrl = context.ClickedButton.ButtonValue\n                    };\n                }\n\n                // 2) Load next step in the same flow\n                var targetStep = await _dbContext.CTAFlowSteps\n                    .Include(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&\n                                              s.CTAFlowConfigId == context.FlowId);\n\n                if (targetStep == null)\n                    return new NextStepResult { Success = false, Error = \"Target step not found.\" };\n\n                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))\n                    return new NextStepResult { Success = false, Error = \"Target step has no template assigned.\" };\n\n                var templateName = targetStep.TemplateToSend.Trim();\n\n                // 3) ‚úÖ Preflight the template to pick the correct language and catch 132001 early\n                var meta = await _templateFetcherService.GetTemplateByNameAsync(\n                    context.BusinessId, templateName, includeButtons: true);\n\n                if (meta == null)\n                {\n                    // log a failed flow execution (no WA call attempted)\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = targetStep.Id,\n                        StepName = templateName,\n                        MessageLogId = null,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = false,\n                        ErrorMessage = $\"Template '{templateName}' not found for this WABA.\",\n                        RawResponse = null,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult\n                    {\n                        Success = false,\n                        Error = $\"Template '{templateName}' not found or not approved.\"\n                    };\n                }\n\n                // prefer the template‚Äôs actual language over hard-coding \"en_US\"\n                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? \"en_US\" : meta.Language;\n\n                // (Optional) build body/button components here if your step needs params.\n                // Quick-reply buttons require NO components; dynamic URL buttons would.\n                var components = new List<object>();\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = context.ContactPhone,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = templateName,\n                        language = new { code = languageCode },\n                        components\n                    }\n                };\n\n                var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);\n\n                // 4) Snapshot buttons for robust click mapping later\n                string? buttonBundleJson = null;\n                if (targetStep.ButtonLinks?.Count > 0)\n                {\n                    var bundle = targetStep.ButtonLinks\n                        .OrderBy(b => b.ButtonIndex)\n                        .Select(b => new\n                        {\n                            i = b.ButtonIndex,\n                            t = b.ButtonText ?? \"\",\n                            ty = b.ButtonType ?? \"QUICK_REPLY\",\n                            v = b.ButtonValue ?? \"\",\n                            ns = b.NextStepId\n                        })\n                        .ToList();\n\n                    buttonBundleJson = JsonSerializer.Serialize(bundle);\n                }\n\n                // 5) ‚úÖ Write MessageLog with NON-NULL MessageContent and sensible timestamps\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    RecipientNumber = context.ContactPhone,\n                    CTAFlowConfigId = context.FlowId,\n                    CTAFlowStepId = targetStep.Id,\n                    FlowVersion = context.Version,\n                    Source = \"flow\",\n                    RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)\n                    CreatedAt = DateTime.UtcNow,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    MessageId = sendResult.MessageId,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ButtonBundleJson = buttonBundleJson,\n\n                    // üî¥ This was missing before ‚Üí caused NOT NULL violation\n                    MessageContent = templateName,\n\n                    // good hygiene: stamp SentAt on success\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,\n                };\n\n                _dbContext.MessageLogs.Add(messageLog);\n\n                // 6) Flow execution audit row\n                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    FlowId = context.FlowId,\n                    StepId = targetStep.Id,\n                    StepName = templateName,\n                    MessageLogId = messageLog.Id,\n                    ButtonIndex = context.ButtonIndex,\n                    ContactPhone = context.ContactPhone,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow,\n                    RequestId = context.RequestId,\n\n                    // Optional (only if your entity has these columns):\n                    // TemplateName = templateName,\n                    // TemplateType = targetStep.TemplateType,\n                });\n\n                await _dbContext.SaveChangesAsync();\n\n                return new NextStepResult\n                {\n                    Success = sendResult.Success,\n                    Error = sendResult.ErrorMessage,\n                    RedirectUrl = null\n                };\n            }\n            catch (Exception ex)\n            {\n                return new NextStepResult { Success = false, Error = ex.Message };\n            }\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ICTAFlowService.cs",
      "sha256": "12d6c4050a662826cb8281e72efb15cc621bb2b6e26b04981f6ca819603d7644",
      "language": "csharp",
      "size": 2166,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface ICTAFlowService\n    {\n        // ‚úÖ Used for flow creation and saving\n        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);\n        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n        // ‚úÖ Load flows\n        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);\n        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n        // ‚úÖ Load and manage flow steps\n        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);\n\n      \n        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);\n\n\n        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n        // ‚úÖ Runtime logic\n        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);\n\n        // ‚úÖ Flow management\n        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);\n        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);\n\n        // ‚úÖ Editor loading (visual builder)\n        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);\n\n      \n        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);\n        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);\n\n        public interface IFlowRuntimeService\n        {\n            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/IFlowRuntimeService.cs",
      "sha256": "302d771fe1f82a2dc8291fd65dcc3ccd58ab0c29af0220409d04db3f7b85020a",
      "language": "csharp",
      "size": 951,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface IFlowRuntimeService\n    {\n        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n\n    }\n    public record NextStepContext\n    {\n        public Guid BusinessId { get; set; }\n        public Guid FlowId { get; set; }\n        public int Version { get; set; }\n        public Guid SourceStepId { get; set; }\n        public Guid? TargetStepId { get; set; }\n        public short ButtonIndex { get; set; }\n        public Guid MessageLogId { get; set; }\n        public string ContactPhone { get; set; } = string.Empty;\n        public Guid RequestId { get; set; }\n\n        public FlowButtonLink? ClickedButton { get; set; }\n    }\n\n    public record NextStepResult\n    {\n        public bool Success { get; set; }\n        public string? Error { get; set; }\n        public string? RedirectUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/StepMatchingHelper.cs",
      "sha256": "3353c5195c81af5b7a26a5a7f648e6dc4504f54633d408220670d2dba65a5888",
      "language": "csharp",
      "size": 1818,
      "content": "using Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public static class StepMatchingHelper\n    {\n        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)\n        {\n            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&\n                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))\n            {\n                Log.Information(\"üö´ Step [{StepId}] skipped: RequiredSource '{Required}' ‚â† ClickedSource '{Actual}'\",\n                    step.Id, step.RequiredSource, log.SourceType);\n                return false;\n            }\n\n            if (!string.IsNullOrWhiteSpace(step.RequiredTag))\n            {\n                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())\n                {\n                    Log.Information(\"üö´ Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})\",\n                        step.Id, step.RequiredTag);\n                    return false;\n                }\n\n                var hasTag = contact.ContactTags.Any(ct =>\n                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));\n\n                if (!hasTag)\n                {\n                    var contactTags = string.Join(\", \", contact.ContactTags.Select(ct => ct.Tag.Name));\n                    Log.Information(\"üö´ Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'\",\n                        step.Id, contactTags, step.RequiredTag);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n    }\n}\n"
    }
  ]
}
