{
  "name": "xbytechat-api/Features",
  "part": 1,
  "of": 2,
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/AccessControl/Attributes/HasPermissionAttribute.cs",
      "sha256": "4c0b87bd0b181823afbcc065a45376dc4c185ec94ae738d09d28afeee757d71d",
      "language": "csharp",
      "size": 3182,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Services;\n\nnamespace xbytechat.api.Features.AccessControl.Attributes\n{\n    public class HasPermissionAttribute : Attribute, IAsyncAuthorizationFilter\n    {\n        private readonly string _permissionCode;\n\n        public HasPermissionAttribute(string permissionCode) => _permissionCode = permissionCode;\n\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            var user = context.HttpContext.User;\n            var planIdClaim = user.FindFirst(\"plan_id\")?.Value;\n\n            if (string.IsNullOrWhiteSpace(planIdClaim) || !Guid.TryParse(planIdClaim, out var planId))\n            {\n                context.Result = new ForbidResult();\n                return;\n            }\n\n            var permissionService = context.HttpContext.RequestServices\n                .GetRequiredService<IPermissionCacheService>();\n\n            var permissions = await permissionService.GetPlanPermissionsAsync(planId);\n\n            var hasPermission = permissions.Any(p =>\n                string.Equals(p.Code, _permissionCode, StringComparison.OrdinalIgnoreCase));\n\n            if (!hasPermission)\n                context.Result = new ForbidResult();\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using Microsoft.AspNetCore.Mvc.Filters;\n//using Microsoft.Extensions.DependencyInjection;\n//using System;\n//using System.Linq;\n//using xbytechat.api.Features.AccessControl.Services;\n\n//namespace xbytechat.api.Features.AccessControl.Attributes\n//{\n//    public class HasPermissionAttribute : Attribute, IAuthorizationFilter\n//    {\n//        private readonly string _permissionCode;\n\n//        public HasPermissionAttribute(string permissionCode)\n//        {\n//            _permissionCode = permissionCode;\n//        }\n\n//        public void OnAuthorization(AuthorizationFilterContext context)\n//        {\n//            var user = context.HttpContext.User;\n//            var planIdClaim = user.FindFirst(\"plan_id\")?.Value;\n\n//            if (string.IsNullOrEmpty(planIdClaim))\n//            {\n//                context.Result = new ForbidResult();\n//                return;\n//            }\n\n//            if (!Guid.TryParse(planIdClaim, out var planId))\n//            {\n//                context.Result = new ForbidResult();\n//                return;\n//            }\n\n//            var permissionService = context.HttpContext.RequestServices\n//                .GetRequiredService<IPermissionCacheService>();\n\n//            // Get permissions for this plan from cache\n//            var permissions = permissionService.GetPlanPermissionsAsync(planId).Result;\n\n//            // Check if any permission matches the requested code\n//            bool hasPermission = permissions.Any(p =>\n//                string.Equals(p.Code, _permissionCode, StringComparison.OrdinalIgnoreCase));\n\n//            if (!hasPermission)\n//            {\n//                context.Result = new ForbidResult();\n//            }\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Controllers/PermissionController.cs",
      "sha256": "4e0bbb5ef2b9078ac41349c7c36d74c2d0e9211af908bc1adaef72f85e811e6d",
      "language": "csharp",
      "size": 917,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.AccessControl.Controllers\n{\n\n    [ApiController]\n    [Route(\"api/permission\")]\n    [Authorize]\n    public class PermissionController : Controller\n    {\n\n        private readonly IPermissionService _permissionService;\n        public PermissionController(IPermissionService permissionService)\n        {\n            _permissionService = permissionService;    \n        }\n        [HttpGet(\"Grouped\")]\n        public async Task<IActionResult> GetGroupedPermissions()\n        {\n            var grouped = await _permissionService.GetGroupedPermissionsAsync();\n            return Ok(ResponseResult.SuccessInfo(\"Permissions grouped by category\", grouped));\n        }\n\n       \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Controllers/PlanController.cs",
      "sha256": "baaf9607daf7830e55a133d85d70d8506feec7a2767c4fd77b5db42683e311ef",
      "language": "csharp",
      "size": 8063,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Helpers; // ✅ For ResponseResult\n\nnamespace xbytechat.api.Features.AccessControl.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    [Authorize]\n    public class PlanController : ControllerBase\n    {\n        private readonly IPlanService _planService;\n        private readonly IPermissionCacheService _permissionCacheService;\n        private readonly ILogger<PlanController> _logger;\n        public PlanController(IPlanService planService, IPermissionCacheService permissionCacheService, ILogger<PlanController> logger)\n        {\n            _planService = planService;\n            _permissionCacheService = permissionCacheService;\n            _logger = logger;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetPlans()\n        {\n            try\n            {\n                var plans = await _planService.GetAllPlansAsync();\n                return Ok(plans); // Return plain array\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to load plans\");\n                return BadRequest(new { message = \"Failed to load plans\", error = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{planId}/permissions\")]\n        public async Task<IActionResult> GetPlanPermissions(Guid planId)\n        {\n            try\n            {\n               // var permissions = await _planService.GetPermissionsForPlanAsync(planId);\n                var permissions = await _permissionCacheService.GetPlanPermissionsAsync(planId);\n\n                return Ok(permissions);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to load permissions for plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to load permissions\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"{planId}/permissions\")]\n        [Authorize(Roles = \"superadmin,partneradmin\")]\n        public async Task<IActionResult> UpdatePlanPermissions(Guid planId, [FromBody] Guid[] permissionIds)\n        {\n            try\n            {\n                await _planService.UpdatePlanPermissionsAsync(planId, permissionIds.ToList());\n                // ✅ Clear cache after update\n                _permissionCacheService.ClearPlanPermissionsCache(planId);\n                return Ok(new { message = \"Permissions updated successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to update permissions for plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to update permissions\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"Create\")]\n        [Authorize(Roles = \"superadmin,partneradmin,admin\")]\n        public async Task<IActionResult> CreatePlan([FromBody] CreatePlanDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Code) || string.IsNullOrWhiteSpace(dto.Name))\n                return BadRequest(new { message = \"Code and Name are required\" });\n\n            try\n            {\n                var newPlanId = await _planService.CreatePlanAsync(dto);\n                return Ok(new { id = newPlanId, message = \"Plan created successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to create plan {PlanName}\", dto.Name);\n                return BadRequest(new { message = \"Failed to create plan\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{planId}\")]\n        [Authorize(Roles = \"superadmin,partneradmin,admin\")]\n        public async Task<IActionResult> UpdatePlan(Guid planId, [FromBody] UpdatePlanDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Code) || string.IsNullOrWhiteSpace(dto.Name))\n                return BadRequest(new { message = \"Code and Name are required\" });\n\n            try\n            {\n                var updated = await _planService.UpdatePlanAsync(planId, dto);\n                if (!updated)\n                    return NotFound(new { message = \"Plan not found\" });\n\n                return Ok(new { message = \"Plan updated successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to update plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to update plan\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{planId}\")]\n        [Authorize(Roles = \"superadmin,partneradmin\")]\n        public async Task<IActionResult> DeletePlan(Guid planId)\n        {\n            try\n            {\n                var deleted = await _planService.DeletePlanAsync(planId);\n                if (!deleted)\n                    return NotFound(new { message = \"Plan not found or already inactive\" });\n                // ✅ Clear cache when plan is deleted\n                _permissionCacheService.ClearPlanPermissionsCache(planId);\n                return Ok(new { message = \"Plan deleted successfully\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to delete plan {PlanId}\", planId);\n                return BadRequest(new { message = \"Failed to delete plan\", error = ex.Message });\n            }\n        }\n        //[HttpGet(\"me/permissions\")]\n        //public async Task<IActionResult> GetMyPlanPermissions(CancellationToken ct)\n        //{\n        //    var role = User.FindFirst(\"role\")?.Value ?? string.Empty;\n\n        //    // Optional admin bypass\n        //    if (role is \"superadmin\" or \"admin\" or \"partner\" or \"reseller\")\n        //        return Ok(new { planId = (Guid?)null, permissions = new[] { \"*\" } });\n\n        //    var planIdStr = User.FindFirst(\"plan_id\")?.Value;\n        //    if (!Guid.TryParse(planIdStr, out var planId))\n        //        return Ok(new { planId = (Guid?)null, permissions = Array.Empty<string>() });\n\n        //    var permissionEntities = await _permissionCacheService.GetPlanPermissionsAsync(planId);\n        //    var codes = permissionEntities\n        //        .Where(p => p.IsActive)\n        //        .Select(p => p.Code)\n        //        .Distinct()\n        //        .ToList();\n\n        //    return Ok(new { planId, permissions = codes });\n        //}\n        [HttpGet(\"me/permissions\")]\n        public async Task<IActionResult> GetMyPlanPermissions(CancellationToken ct)\n        {\n            var role = User.FindFirst(\"role\")?.Value ?? string.Empty;\n\n            // Admin-like roles don't need a plan\n            if (role is \"superadmin\" or \"admin\" or \"partner\" or \"reseller\")\n                return Ok(new\n                {\n                    planId = (Guid?)null,\n                    plan = (PlanDto?)null,\n                    permissions = new[] { \"*\" }\n                });\n\n            var planIdStr = User.FindFirst(\"plan_id\")?.Value;\n            if (!Guid.TryParse(planIdStr, out var planId))\n                return Ok(new\n                {\n                    planId = (Guid?)null,\n                    plan = (PlanDto?)null,\n                    permissions = Array.Empty<string>()\n                });\n\n            // permissions (cached)\n            var permissionEntities = await _permissionCacheService.GetPlanPermissionsAsync(planId);\n            var codes = permissionEntities\n                .Where(p => p.IsActive)\n                .Select(p => p.Code)\n                .Distinct()\n                .ToList();\n\n            // ✅ Fetch the plan once and return it as PlanDto\n            var planDto = await _planService.GetByIdAsync(planId, ct);\n\n            return Ok(new\n            {\n                planId,\n                plan = planDto,     // PlanDto or null\n                permissions = codes\n            });\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/CreatePlanDto.cs",
      "sha256": "15d5b4b092dc0019db6a3e33fc6ea49a5bd2e02c9c4fabde02403dc9c32feb90",
      "language": "csharp",
      "size": 320,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class CreatePlanDto\n    {\n        public string Code { get; set; } // e.g. \"FREE\", \"SMART\"\n        public string Name { get; set; }\n        public string? Description { get; set; }\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/GroupedPermissionDto.cs",
      "sha256": "d31e43145b8ed5908bd705af1dc96740d163615a183c30dc69b6d72097d37a76",
      "language": "csharp",
      "size": 255,
      "content": "using xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class GroupedPermissionDto\n    {\n        public string Group { get; set; }\n        public List<Permission> Features { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/PermissionDto.cs",
      "sha256": "46bfdeaa2a7dfa7bdaa56ed6c991868bae5fcc8ffb88cff1cc82d329e51eb92f",
      "language": "csharp",
      "size": 353,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class PermissionDto\n    {\n        public Guid Id { get; set; }\n        public string Code { get; set; }\n        public string Name { get; set; }\n        public string? Group { get; set; }\n        public string? Description { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/PlanDto.cs",
      "sha256": "87bcc89fbc963d131fcc246a1bde5d2d1a9198a61fac73a55b6b985644c8ee89",
      "language": "csharp",
      "size": 303,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class PlanDto\n    {\n        public Guid Id { get; set; }\n        public string Code { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public bool IsActive { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/RoleDto.cs",
      "sha256": "890bec8d90e7068a2c8e49c4249b761506cdb9c26b2fd5a470bf14c6013954cf",
      "language": "csharp",
      "size": 479,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs;\n\n// DTO: Role details used across layers\npublic class RoleDto\n{\n    /// <summary>Unique identifier of the role.</summary>\n    public Guid Id { get; set; }\n\n   \n    public string Role { get; set; } = default!;\n\n   \n    public string Code { get; set; } = default!;\n\n   \n    public string? Description { get; set; }\n\n    \n    public bool IsActive { get; set; }\n\n       public RoleDto() { }\n\n    // Convenience constructor\n    \n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/UpdatePlanDto.cs",
      "sha256": "e4a09d8fd1c1ff0cb720be4ff2ba80df60e06fc54795e1e2a23fd06b16bf8956",
      "language": "csharp",
      "size": 273,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class UpdatePlanDto\n    {\n        public string Name { get; set; }\n        public string Code { get; set; }\n        public string Description { get; set; }\n        public bool IsActive { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/UpdatePlanPermissionsRequest.cs",
      "sha256": "b62abd8813b7a4d3812bc8260d06a3770d0a34c9141d845d60ff86cf904a3378",
      "language": "csharp",
      "size": 168,
      "content": "namespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class UpdatePlanPermissionsRequest\n    {\n        public List<Guid> PermissionIds { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/DTOs/UpdateRolePermissionsDto.cs",
      "sha256": "e00530db11a422793d96b8905211218a03a8e810c601034c76b75fbba37d40db",
      "language": "csharp",
      "size": 291,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.AccessControl.DTOs\n{\n    public class UpdateRolePermissionsDto\n    {\n        [Required]\n        public List<Guid> PermissionIds { get; set; } = new();\n        public bool ReplaceAll { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Permission.cs",
      "sha256": "22c58f1f832014c6129b075f027045a186874bc7c20d0f312befe1d658bb0ab4",
      "language": "csharp",
      "size": 832,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Permission\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // Unique key like \"ViewDashboard\"\n\n        public string Name { get; set; } // Friendly name like \"View Dashboard\"\n\n        public string? Group { get; set; } // Optional grouping, e.g., \"CRM\", \"Catalog\", \"Admin\"\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n\n        public ICollection<UserPermission> UserPermissions { get; set; }\n\n        public ICollection<PlanPermission> PlanPermissions { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Plan.cs",
      "sha256": "1682d96ed57c73cf2dce0b4b7194becc04837f998e9f0718b14e8a2b5ff8c5a6",
      "language": "csharp",
      "size": 704,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Plan\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // e.g. \"FREE\", \"SMART\", \"ADVANCED\"\n        public string Name { get; set; } // Friendly display name\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<PlanPermission> PlanPermissions { get; set; }\n        public ICollection<Business> Businesses { get; set; } = new List<Business>();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/PlanPermission.cs",
      "sha256": "e6e65f0ae33c19e9d2585d73812bcf99ed207d52ac6d804a3c2bf86b3152eca7",
      "language": "csharp",
      "size": 525,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class PlanPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid PlanId { get; set; }\n        public Plan Plan { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin email or ID\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Role.cs",
      "sha256": "4c2e237e65d702febee355976cfc64209fd4cf2d98f87e7ef6de4b199dd048a4",
      "language": "csharp",
      "size": 760,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Role\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; } // e.g. SuperAdmin, PartnerAdmin, BusinessAdmin, Staff, etc.\n\n        public string? Description { get; set; }\n\n        public bool IsSystemDefined { get; set; } = false; // true for SuperAdmin, PartnerAdmin\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n        public ICollection<User> Users { get; set; } // 🧩 One-to-many relation: Role → Users\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/RolePermission.cs",
      "sha256": "d9b31669bec3fbda1b95c89def9a6cc641e0dd21f5e38583b8dae4c0239b9a8a",
      "language": "csharp",
      "size": 619,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class RolePermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid RoleId { get; set; }\n        public Role Role { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin user email or ID\n\n        public bool IsActive { get; set; } = true; // ✅ Add this line\n        public bool IsRevoked { get; set; } = false; // ✅ Required\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/UserPermission.cs",
      "sha256": "6b85321ec68fced21477222e85ac56594106c4654b5d99061c42bc1c46d876aa",
      "language": "csharp",
      "size": 677,
      "content": "using System;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class UserPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid UserId { get; set; }\n        public User User { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsGranted { get; set; } = true; // ✅ true = allow, false = explicitly deny\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin or system\n\n        public bool IsRevoked { get; set; } = false; // ✅ Required\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Seeder/PermissionConstants.cs",
      "sha256": "47104d91bf08a96917121e247b83aac03fe402f24bb851d3fa4b1b9ee5375469",
      "language": "csharp",
      "size": 1126,
      "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class PermissionConstants\n    {\n        public static class Dashboard\n        {\n            public const string View = \"dashboard.view\";\n        }\n\n        public static class Campaigns\n        {\n            public const string View = \"campaign.view\";\n            public const string Create = \"campaign.create\";\n            public const string Delete = \"campaign.delete\";\n        }\n\n        public static class Products\n        {\n            public const string View = \"product.view\";\n            public const string Create = \"product.create\";\n            public const string Delete = \"product.delete\";\n        }\n\n        public static class CRM\n        {\n            public const string ContactsView = \"contacts.view\";\n            public const string TagsEdit = \"tags.edit\";\n        }\n\n        public static class Admin\n        {\n            public const string BusinessApprove = \"admin.business.approve\";\n            public const string ViewLogs = \"admin.logs.view\";\n        }\n\n        // 🆕 Add more modules and permissions here as needed\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Seeder/RolePermissionMapping.cs",
      "sha256": "47f001a1b2d6404c28e73be68faf79485c10c1c0a7dab0a5346cc06fff4f049a",
      "language": "csharp",
      "size": 1302,
      "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class RolePermissionMapping\n    {\n        public static readonly Dictionary<string, List<string>> RolePermissions = new()\n        {\n            [\"admin\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.Campaigns.Create,\n                PermissionConstants.Campaigns.Delete,\n                PermissionConstants.Products.View,\n                PermissionConstants.Products.Create,\n                PermissionConstants.Products.Delete,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.CRM.TagsEdit,\n                PermissionConstants.Admin.BusinessApprove,\n                PermissionConstants.Admin.ViewLogs\n            },\n\n            [\"business\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.Products.View\n            },\n\n            [\"staff\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.CRM.ContactsView\n            }\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/AccessControlService.cs",
      "sha256": "7715aa1fb932cf63407c3a5e5502b6c3f751e331055be04257cfd120a8671fcb",
      "language": "csharp",
      "size": 7685,
      "content": "//using Microsoft.EntityFrameworkCore;\n//using System.Collections.Generic;\n//using System.Security.Claims;\n//using System.Threading.Tasks;\n\n//using xbytechat.api.Features.AccessControl.Models;\n\n//namespace xbytechat.api.Features.AccessControl.Services\n//{\n//    public class AccessControlService : IAccessControlService\n//    {\n//        private readonly AppDbContext _context;\n\n//        public AccessControlService(AppDbContext context)\n//        {\n//            _context = context;\n//        }\n\n//        public async Task<IEnumerable<Permission>> GetAllPermissionsAsync()\n//        {\n//            return await _context.Permissions\n//                .AsNoTracking()\n//                .Where(p => p.IsActive)\n//                .ToListAsync();\n//        }\n//        //public async Task<IEnumerable<Permission>> GetPermissionsAsync(Guid userId)\n//        //{\n//        //    // First, check if the user has direct permissions\n//        //    var userPermissions = await _context.UserPermissions\n//        //        .Where(up => up.UserId == userId && up.IsGranted && !up.IsRevoked)\n//        //        .Select(up => up.Permission)\n//        //        .Where(p => p.IsActive)\n//        //        .ToListAsync();\n\n//        //    // If no direct permissions, fall back to role permissions\n//        //    if (!userPermissions.Any())\n//        //    {\n//        //        userPermissions = await _context.RolePermissions\n//        //            .Where(rp => rp.Role.Users.Any(u => u.Id == userId) && rp.IsActive && !rp.IsRevoked)\n//        //            .Select(rp => rp.Permission)\n//        //            .Where(p => p.IsActive)\n//        //            .ToListAsync();\n//        //    }\n\n//        //    return userPermissions;\n//        //}\n       \n        \n       \n//    }\n//}\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Repositories.Interfaces;\nusing System.Linq.Expressions;\n\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class AccessControlService : IAccessControlService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<RolePermission> _rolePermissionRepo;\n        private readonly IGenericRepository<UserPermission> _userPermissionRepo;\n        private readonly IGenericRepository<Permission> _permissionRepo;\n        private readonly AppDbContext _context;\n        public AccessControlService(\n            IGenericRepository<User> userRepo,\n            IGenericRepository<RolePermission> rolePermissionRepo,\n            IGenericRepository<UserPermission> userPermissionRepo,\n            IGenericRepository<Permission> permissionRepo, AppDbContext context\n        )\n        {\n            _userRepo = userRepo;\n            _rolePermissionRepo = rolePermissionRepo;\n            _userPermissionRepo = userPermissionRepo;\n            _permissionRepo = permissionRepo;\n            _context = context;\n        }\n\n        /// <summary>\n        /// ✅ Fetch all permissions (Role-based + User-specific) for a given user\n        /// </summary>\n        //public async Task<List<string>> GetPermissionsAsync(Guid userId)\n        //{\n        //    var user = await _userRepo.FindByIdAsync(userId);\n        //    if (user == null || user.RoleId == null)\n        //        return new List<string>();\n\n        //    // 🔐 Get Role-based permissions\n        //    var rolePerms = await _rolePermissionRepo\n        //        .WhereAsync(rp => rp.RoleId == user.RoleId && !rp.IsRevoked);\n\n        //    // 🔐 Get User-specific extra permissions\n        //    var userPerms = await _userPermissionRepo\n        //        .WhereAsync(up => up.UserId == userId && !up.IsRevoked);\n\n        //    // 🧠 Merge permission IDs\n        //    var permissionIds = rolePerms.Select(r => r.PermissionId)\n        //        .Union(userPerms.Select(u => u.PermissionId))\n        //        .Distinct()\n        //        .ToList();\n\n        //    // 🎯 Get full permission names from Permission table\n        //    var allPerms = await _permissionRepo\n        //        .WhereAsync(p => permissionIds.Contains(p.Id));\n\n        //    return allPerms.Select(p => p.Code).Distinct().ToList(); // Use Code (standard)\n        //}\n\n        public async Task<IEnumerable<Permission>> GetAllPermissionsAsync()\n        {\n            return await _permissionRepo.WhereAsync(p => p.IsActive);\n        }\n\n\n        public async Task<List<string>> GetPermissionsAsync(Guid userId)\n        {\n            var user = await _userRepo.FindByIdAsync(userId);\n\n            if (user == null || user.RoleId == null)\n                return new List<string>();\n\n            // 🚀 Bypass: SuperAdmin always gets full access\n            if (user.Role != null && user.Role.Name.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase))\n            {\n                var allPerms = await _permissionRepo.GetAllAsync();\n                return allPerms.Select(p => p.Code).Distinct().ToList();\n            }\n\n            // 🔐 Get Role-based permissions\n            var rolePerms = await _rolePermissionRepo\n                .WhereAsync(rp => rp.RoleId == user.RoleId && !rp.IsRevoked);\n\n            // 🔐 Get User-specific extra permissions\n            var userPerms = await _userPermissionRepo\n                .WhereAsync(up => up.UserId == userId && !up.IsRevoked);\n\n            // 🧠 Merge permission IDs\n            var permissionIds = rolePerms.Select(r => r.PermissionId)\n                .Union(userPerms.Select(u => u.PermissionId))\n                .Distinct()\n                .ToList();\n\n            // 🎯 Get full permission names from Permission table\n            var allAllowedPerms = await _permissionRepo\n                .WhereAsync(p => permissionIds.Contains(p.Id));\n\n            return allAllowedPerms.Select(p => p.Code).Distinct().ToList();\n        }\n\n        public bool HasPermission(ClaimsPrincipal user, string requiredPermission)\n        {\n            // 🚀 Bypass: SuperAdmin always passes\n            //var roleClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;\n            var roleClaim = user.Claims.FirstOrDefault(c =>\n                c.Type == ClaimTypes.Role || c.Type.Equals(\"role\", StringComparison.OrdinalIgnoreCase)\n            )?.Value;\n\n            if (!string.IsNullOrEmpty(roleClaim) && roleClaim.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase))\n                return true;\n\n            var perms = user.Claims\n                .Where(c => c.Type == \"permissions\")\n                .Select(c => c.Value)\n                .ToList();\n\n            return perms.Contains(requiredPermission);\n        }\n\n        /// <summary>\n        /// ✅ Runtime permission checker (for controller/middleware)\n        /// </summary>\n        //public bool HasPermission(ClaimsPrincipal user, string requiredPermission)\n        //{\n        //    var perms = user.Claims\n        //        .Where(c => c.Type == \"permissions\")\n        //        .Select(c => c.Value)\n        //        .ToList();\n\n        //    return perms.Contains(requiredPermission);\n        //}\n\n        public async Task<List<string>> GetPermissionsByPlanIdAsync(Guid? planId)\n        {\n            if (!planId.HasValue)\n                return new List<string>();\n\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId.Value && pp.IsActive)\n                .Select(pp => pp.Permission.Code)\n                .ToListAsync();\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/IAccessControlService.cs",
      "sha256": "a7175ca2ec5d8ac4aae9b09095d675ab36d2c52dd6a62b3d23c6b6990de055e2",
      "language": "csharp",
      "size": 853,
      "content": "//using System.Collections.Generic;\n//using System.Threading.Tasks;\n//using xbytechat.api.Features.AccessControl.Models;\n\n//namespace xbytechat.api.Features.AccessControl.Services\n//{\n//    public interface IAccessControlService\n//    {\n//        Task<IEnumerable<Permission>> GetAllPermissionsAsync();\n//        Task<IEnumerable<Permission>> GetPermissionsAsync(Guid userId);\n\n//    }\n//}\n\n\nusing System.Security.Claims;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IAccessControlService\n    {\n        Task<List<string>> GetPermissionsAsync(Guid userId);\n        bool HasPermission(ClaimsPrincipal user, string permission);\n        Task<IEnumerable<Permission>> GetAllPermissionsAsync();\n        Task<List<string>> GetPermissionsByPlanIdAsync(Guid? planId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/IPlanService.cs",
      "sha256": "7e943cbf0f9f97ecaac03b05ae94b28c8cf649813e1c6d4dd1e7246b3bdc0cf1",
      "language": "csharp",
      "size": 952,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IPlanService\n    {\n        Task<IEnumerable<PlanDto>> GetAllPlansAsync();\n        Task<IEnumerable<PermissionDto>> GetPermissionsForPlanAsync(Guid planId);\n       // Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds);\n        Task<Guid> CreatePlanAsync(CreatePlanDto dto);\n        Task<bool> DeletePlanAsync(Guid planId);\n        Task<bool> UpdatePlanAsync(Guid planId, UpdatePlanDto dto);\n\n        // New methods for permissions\n        Task<List<PermissionDto>> GetPlanPermissionsAsync(Guid planId);\n        Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds);\n\n        Task<PlanDto?> GetByIdAsync(Guid planId, CancellationToken ct = default);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/PermissionCacheService.cs",
      "sha256": "c268071425295dc74c3f7323b4ebcbc3f413d9eaea473b6b55ada75cc0117ea9",
      "language": "csharp",
      "size": 1696,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Caching.Memory;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IPermissionCacheService\n    {\n        Task<List<Permission>> GetPlanPermissionsAsync(Guid planId);\n        void ClearPlanPermissionsCache(Guid planId);\n    }\n\n    public class PermissionCacheService : IPermissionCacheService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMemoryCache _cache;\n        private const string CacheKeyPrefix = \"plan_permissions_\";\n\n        public PermissionCacheService(AppDbContext context, IMemoryCache cache)\n        {\n            _context = context;\n            _cache = cache;\n        }\n\n        public async Task<List<Permission>> GetPlanPermissionsAsync(Guid planId)\n        {\n            var cacheKey = $\"{CacheKeyPrefix}{planId}\";\n\n            // Try to get from cache\n            if (_cache.TryGetValue(cacheKey, out List<Permission> cachedPermissions))\n                return cachedPermissions;\n\n            // Fetch from DB\n            var permissions = await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId && pp.IsActive)\n                .Select(pp => pp.Permission)\n                .ToListAsync();\n\n            // Store in cache\n            _cache.Set(cacheKey, permissions, TimeSpan.FromHours(1));\n\n            return permissions;\n        }\n\n        public void ClearPlanPermissionsCache(Guid planId)\n        {\n            _cache.Remove($\"{CacheKeyPrefix}{planId}\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/PlanService.cs",
      "sha256": "1b989e01aca4efc37b99ca089369e468ba7ba452768d72b3b85ea7bae8769f9b",
      "language": "csharp",
      "size": 9530,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.DTOs;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class PlanService : IPlanService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<PlanService> _logger;\n        private readonly IPermissionCacheService _permissionCacheService;\n\n        public PlanService(AppDbContext context, ILogger<PlanService> logger, IPermissionCacheService permissionCacheService)\n        {\n            _context = context;\n            _logger = logger;\n            _permissionCacheService = permissionCacheService;\n        }\n\n        //public async Task<IEnumerable<Plan>> GetAllPlansAsync()\n        //{\n        //    _logger.LogInformation(\"Fetching all active plans...\");\n        //    try\n        //    {\n        //        return await _context.Plans\n        //            .AsNoTracking()\n        //            .Include(p => p.PlanPermissions)\n        //            .Where(p => p.IsActive)\n        //            .ToListAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Error fetching plans.\");\n        //        throw;\n        //    }\n        //}\n        public async Task<IEnumerable<PlanDto>> GetAllPlansAsync()\n        {\n            return await _context.Plans\n                .Where(p => p.IsActive)\n                .Select(p => new PlanDto\n                {\n                    Id = p.Id,\n                    Code = p.Code,\n                    Name = p.Name,\n                    Description = p.Description,\n                    IsActive = p.IsActive\n                })\n                .ToListAsync();\n        }\n        public async Task<IEnumerable<PermissionDto>> GetPermissionsForPlanAsync(Guid planId)\n        {\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId && pp.IsActive)\n                .Select(pp => new PermissionDto\n                {\n                    Id = pp.Permission.Id,\n                    Code = pp.Permission.Code,\n                    Name = pp.Permission.Name,\n                    Group = pp.Permission.Group,\n                    Description = pp.Permission.Description,\n                    IsActive = pp.Permission.IsActive\n                })\n                .ToListAsync();\n        }\n        public async Task<PlanDto?> GetByIdAsync(Guid planId, CancellationToken ct = default)\n        {\n            return await _context.Plans\n                .AsNoTracking()\n                .Where(p => p.Id == planId)\n                .Select(p => new PlanDto\n                {\n                    Id = p.Id,\n                    Code = p.Code,\n                    Name = p.Name,\n                    Description = p.Description,\n                    IsActive = p.IsActive\n                })\n                .FirstOrDefaultAsync(ct);\n        }\n\n        //public async Task<IEnumerable<Permission>> GetPermissionsForPlanAsync(Guid planId)\n        //{\n        //    _logger.LogInformation(\"Fetching permissions for plan {PlanId}\", planId);\n        //    try\n        //    {\n        //        return await _context.PlanPermissions\n        //            .Where(pp => pp.PlanId == planId && pp.IsActive)\n        //            .Include(pp => pp.Permission)\n        //            .Select(pp => pp.Permission)\n        //            .AsNoTracking()\n        //            .ToListAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Error fetching permissions for plan {PlanId}\", planId);\n        //        throw;\n        //    }\n        //}\n\n        //public async Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds)\n        //{\n        //    _logger.LogInformation(\"Updating permissions for plan {PlanId}\", planId);\n        //    try\n        //    {\n        //        // Remove all existing permissions for the plan\n        //        var existing = await _context.PlanPermissions\n        //            .Where(pp => pp.PlanId == planId)\n        //            .ToListAsync();\n\n        //        _context.PlanPermissions.RemoveRange(existing);\n\n        //        // Add new permissions\n        //        var newPlanPermissions = permissionIds.Select(pid => new PlanPermission\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            PlanId = planId,\n        //            PermissionId = pid,\n        //            IsActive = true,\n        //            AssignedAt = DateTime.UtcNow,\n        //            AssignedBy = \"System\"\n        //        });\n\n        //        await _context.PlanPermissions.AddRangeAsync(newPlanPermissions);\n        //        await _context.SaveChangesAsync();\n        //        _logger.LogInformation(\"Permissions updated for plan {PlanId}\", planId);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Error updating permissions for plan {PlanId}\", planId);\n        //        throw;\n        //    }\n        //}\n\n        public async Task<Guid> CreatePlanAsync(CreatePlanDto dto)\n        {\n            _logger.LogInformation(\"Creating new plan: {PlanName}\", dto.Name);\n            try\n            {\n                var plan = new Plan\n                {\n                    Id = Guid.NewGuid(),\n                    Code = dto.Code,\n                    Name = dto.Name,\n                    Description = dto.Description,\n                    IsActive = dto.IsActive\n                };\n\n                _context.Plans.Add(plan);\n                await _context.SaveChangesAsync();\n\n                _logger.LogInformation(\"Plan created with ID: {PlanId}\", plan.Id);\n                return plan.Id;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error creating plan {PlanName}\", dto.Name);\n                throw;\n            }\n        }\n\n        public async Task<bool> DeletePlanAsync(Guid planId)\n        {\n            _logger.LogInformation(\"Deleting (soft) plan {PlanId}\", planId);\n            try\n            {\n                var plan = await _context.Plans.FirstOrDefaultAsync(p => p.Id == planId);\n                if (plan == null || !plan.IsActive)\n                {\n                    _logger.LogWarning(\"Plan not found or already inactive: {PlanId}\", planId);\n                    return false;\n                }\n\n                plan.IsActive = false;\n                _context.Plans.Update(plan);\n                await _context.SaveChangesAsync();\n\n                _logger.LogInformation(\"Plan {PlanId} soft deleted.\", planId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error deleting plan {PlanId}\", planId);\n                throw;\n            }\n        }\n\n        public async Task<bool> UpdatePlanAsync(Guid planId, UpdatePlanDto dto)\n        {\n            _logger.LogInformation(\"Updating plan {PlanId}\", planId);\n            try\n            {\n                var plan = await _context.Plans.FirstOrDefaultAsync(p => p.Id == planId);\n                if (plan == null)\n                {\n                    _logger.LogWarning(\"Plan not found: {PlanId}\", planId);\n                    return false;\n                }\n\n                plan.Code = dto.Code;\n                plan.Name = dto.Name;\n                plan.Description = dto.Description;\n                plan.IsActive = dto.IsActive;\n\n                _context.Plans.Update(plan);\n                await _context.SaveChangesAsync();\n\n                _logger.LogInformation(\"Plan {PlanId} updated successfully.\", planId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error updating plan {PlanId}\", planId);\n                throw;\n            }\n        }\n\n        public async Task UpdatePlanPermissionsAsync(Guid planId, List<Guid> permissionIds)\n        {\n            // Remove old mappings\n            var existing = await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId)\n                .ToListAsync();\n            _context.PlanPermissions.RemoveRange(existing);\n\n            // Add new mappings\n            var newMappings = permissionIds.Select(pid => new PlanPermission\n            {\n                PlanId = planId,\n                PermissionId = pid,\n                AssignedAt = DateTime.UtcNow,\n                AssignedBy = \"system\" // replace with logged-in admin\n            });\n\n            await _context.PlanPermissions.AddRangeAsync(newMappings);\n            await _context.SaveChangesAsync();\n            //// Clear cache\n            _permissionCacheService.ClearPlanPermissionsCache(planId);\n        }\n        public async Task<List<PermissionDto>> GetPlanPermissionsAsync(Guid planId)\n        {\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId && pp.IsActive)\n                .Select(pp => new PermissionDto\n                {\n                    Id = pp.Permission.Id,\n                    Code = pp.Permission.Code,\n                    Name = pp.Permission.Name,\n                    Group = pp.Permission.Group,\n                    Description = pp.Permission.Description\n                })\n                .ToListAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/DTOs/CreateAuditLogDto.cs",
      "sha256": "845322cca23fe6666ea3c5947bf45d55d34363c27d5bacec30375a04b24a73ef",
      "language": "csharp",
      "size": 471,
      "content": "namespace xbytechat.api.Features.AuditTrail.DTOs;\n\npublic class CreateAuditLogDto\n{\n    public string ActionType { get; set; }\n    public string Module { get; set; }\n    public string? RecordId { get; set; }\n\n    public string? OldValues { get; set; }\n    public string? NewValues { get; set; }\n    public string? Description { get; set; }\n\n    public string? IPAddress { get; set; }\n    public string? UserAgent { get; set; }\n    public string? Location { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/Models/AuditLog.cs",
      "sha256": "91e4760f6e10564db50d99acec9f1c83de5fd0b8ca2e0d3bc5874d645ac93a45",
      "language": "csharp",
      "size": 1034,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AuditTrail.Models\n{\n    public class AuditLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 📍 Business Context (Multi-Tenant)\n        public Guid BusinessId { get; set; }\n\n        // 🙋 Who performed the action\n        public Guid PerformedByUserId { get; set; }\n        public string? PerformedByUserName { get; set; } // Optional for display\n        public string? RoleAtTime { get; set; } // admin / business / agent\n\n        // 🔍 Action Details\n        public string ActionType { get; set; } = \"\"; // e.g., campaign.created, user.login\n        public string? Description { get; set; } // Free text for summary or custom note\n\n        // 🌐 Optional: Technical metadata\n        public string? IPAddress { get; set; }\n        public string? UserAgent { get; set; }\n        public string? Location { get; set; } // Optional for geo-capture later\n\n        // 🕒 Timestamp\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/Services/AuditLogService.cs",
      "sha256": "6b18d820c4191681a1bf26d6672f189bce0cadcfba3c8beb9e29dbed4ad4fdd9",
      "language": "csharp",
      "size": 536,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Repositories;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Features.AuditTrail.Services\n{\n    public class AuditLogService : IAuditLogService\n    {\n        private readonly IGenericRepository<AuditLog> _repo;\n\n        public AuditLogService(IGenericRepository<AuditLog> repo)\n        {\n            _repo = repo;\n        }\n\n        public async Task SaveLogAsync(AuditLog log)\n        {\n            await _repo.AddAsync(log);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AuditTrail/Services/IAuditLogService.cs",
      "sha256": "65d811af2c7dc349002b7b1a340a765025625f9fe31c241dccc8f3eaeab15330",
      "language": "csharp",
      "size": 197,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\n\nnamespace xbytechat.api.Features.AuditTrail.Services\n{\n    public interface IAuditLogService\n    {\n        Task SaveLogAsync(AuditLog log);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/ChoiceConfig.cs",
      "sha256": "0d09e0bc40325856d625ab31e93694e661b6df532e5de78f2a55254783e40c1c",
      "language": "csharp",
      "size": 354,
      "content": "namespace xbytechat.api.Features.Automation.Config\n{\n    public class ChoiceConfig\n    {\n        public List<ChoiceCondition> Conditions { get; set; } = new();\n        public string FallbackNodeId { get; set; }\n    }\n\n    public class ChoiceCondition\n    {\n        public string Match { get; set; }\n        public string NextNodeId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/MessageConfig.cs",
      "sha256": "564fbd35e79d9ef3f8b48ed54e15d55a9d0226b7d6ea72315d81b562a7a4ecae",
      "language": "csharp",
      "size": 225,
      "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Future: Add support for media, buttons, templates\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/TagNodeConfig.cs",
      "sha256": "81144c1418ba70285c6af13bf7aee6346f8f6674416ffc9ab79614bceb3be4d0",
      "language": "csharp",
      "size": 197,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Config/WaitConfig.cs",
      "sha256": "d13667732f9e18370123b10c2881aa385e8d11a33bc01acaf0f7eb96f4903bd6",
      "language": "csharp",
      "size": 170,
      "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 2; // Default wait time\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Controllers/AutomationController.cs",
      "sha256": "3a2f3e472a351808592f6357f3e907d20c118e1e0f86f035a76e49697013e4ff",
      "language": "csharp",
      "size": 2144,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Automation.DTOs;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Controllers\n{\n    [ApiController]\n    [Route(\"api/automation\")]\n    [Authorize]\n    public class AutomationController : ControllerBase\n    {\n        private readonly IAutomationFlowRepository _automationRepository;\n        private readonly IAutomationRunner _automationRunner;\n        private readonly IContactService _contactService;\n\n        public AutomationController(\n            IAutomationFlowRepository automationRepository,\n            IAutomationRunner automationRunner,\n            IContactService contactService)\n        {\n            _automationRepository = automationRepository;\n            _automationRunner = automationRunner;\n            _contactService = contactService;\n        }\n\n        [HttpPost(\"trigger\")]\n        public async Task<IActionResult> TriggerByKeyword([FromBody] AutomationTriggerRequest request)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n\n            if (string.IsNullOrWhiteSpace(request.Keyword) || string.IsNullOrWhiteSpace(request.Phone))\n                return BadRequest(\"Keyword and phone are required.\");\n\n            var flow = await _automationRepository.GetFlowByKeywordAsync(businessId, request.Keyword);\n            if (flow == null || !flow.IsActive)\n                return NotFound(\"⚠️ No matching active automation flow found.\");\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, request.Phone);\n\n            var result = await _automationRunner.RunFlowAsync(\n                flow,\n                businessId,\n                contact.Id,\n                request.Phone,\n                request.SourceChannel ?? \"manual\",\n                request.IndustryTag ?? \"manual\"\n            );\n\n            return Ok(result);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/AutomationEdgeDto.cs",
      "sha256": "d9093a43a35fa0c12238f7c78daec3980190c4160320cfe73c6b93ff2d41c5ce",
      "language": "csharp",
      "size": 450,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    /// <summary>\n    /// Represents a connection (edge) between two automation nodes.\n    /// </summary>\n    public class AutomationEdgeDto\n    {\n        public Guid SourceNodeId { get; set; }\n\n        public Guid TargetNodeId { get; set; }\n\n        public string? Condition { get; set; }  // Optional: for future conditional routing (e.g., \"if clicked\", \"if not responded\")\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/AutomationTriggerRequest.cs",
      "sha256": "aeca572a0bab580b70dddd50cb6f4e1b282f17508311aaeb9beaefef34d8fa46",
      "language": "csharp",
      "size": 296,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class AutomationTriggerRequest\n    {\n        public string Keyword { get; set; }\n\n        public string Phone { get; set; }\n\n        public string? SourceChannel { get; set; }\n\n        public string? IndustryTag { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/MessageNodeConfig.cs",
      "sha256": "8fdadb2bb6457b35ed85d89655b1f6d1d9bc5028a0ec212d9dd7eaa70b1a8e0d",
      "language": "csharp",
      "size": 218,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class MessageNodeConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Optional: Later you can add buttons, media, etc.\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/TagNodeConfig.cs",
      "sha256": "2feaf9902643a6bb0e59b019cfca34a41ada3abf9f66afffcac065c6bb545b6c",
      "language": "csharp",
      "size": 199,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    public class TagNodeConfig\n    {\n        public List<Guid> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/DTOs/WaitNodeConfig.cs",
      "sha256": "f520007158ae72db229b2a23f437666e64d34fcc96cdd728ad57a4320f152b75",
      "language": "csharp",
      "size": 143,
      "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class WaitNodeConfig\n    {\n        public int Seconds { get; set; } = 3;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlow.cs",
      "sha256": "7dd5063615cfa824960a08fdd88d9fdf500a3c0461151b27e09fcaa7d97b45fe",
      "language": "csharp",
      "size": 803,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents a saved automation flow with nodes and edges.\n    /// </summary>\n    public class AutomationFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n\n        public string TriggerKeyword { get; set; } = string.Empty; // ✅ Better naming\n\n        public string NodesJson { get; set; } = \"[]\";\n\n        public string EdgesJson { get; set; } = \"[]\";\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowEdge.cs",
      "sha256": "ad1f63ff8580807f996a658e2a95652c94370929e8dd75eac9f1fdc98c398105",
      "language": "csharp",
      "size": 280,
      "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowEdge\n    {\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string? Condition { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowNode.cs",
      "sha256": "c18876f0d4c8fdf851da8df67ddff902fee66217b804a6765a9b533f8402e76d",
      "language": "csharp",
      "size": 354,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowNode\n    {\n        public string Id { get; set; } = Guid.NewGuid().ToString(\"N\");\n        public string Label { get; set; } = string.Empty;\n        public NodeTypeEnum NodeType { get; set; }\n        public string ConfigJson { get; set; } = \"{}\";\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/AutomationFlowRunResult.cs",
      "sha256": "61407553e4f66fbfdc8c0a51868372170e58411cd6c74e857e8e9cab13e27b6b",
      "language": "csharp",
      "size": 403,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } = null;\n\n        public string? Notes { get; set; }  // Optional: track execution info (e.g., exit reason)\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/FlowExecutionContext.cs",
      "sha256": "aef2132567e314889ae4d98f06dd96c43873ab3513b6c02cd8553346e3e7ff57",
      "language": "csharp",
      "size": 523,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Context required to run an automation flow.\n    /// </summary>\n    public class FlowExecutionContext\n    {\n        public AutomationFlow Flow { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        public string ContactPhone { get; set; }\n\n        public string SourceChannel { get; set; } = \"manual\";\n\n        public string IndustryTag { get; set; } = \"manual\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/FlowRunResult.cs",
      "sha256": "64baa95c50dc4528fa36e8ad36a12ac82a0528c8c640797d16b58e17455d6125",
      "language": "csharp",
      "size": 345,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents the result of running an automation flow.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } // If agent handoff requested\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/NodeConfigs.cs",
      "sha256": "0e8b3fb72dd676ec59568e34b569e1302a621a35a6efca4553736f89b15b21c4",
      "language": "csharp",
      "size": 167,
      "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/NodeTypeEnum.cs",
      "sha256": "ac2b60c1ffd633136ef56df710b0cf7f141496e92e30cd1c4bd42f201f4d85d3",
      "language": "csharp",
      "size": 223,
      "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public enum NodeTypeEnum\n    {\n        Message,\n        Wait,\n        Tag,\n        AgentHandoff,\n        Choice,\n        Condition,\n        Loop,\n        End\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/TagNodeConfig.cs",
      "sha256": "9cec10f188aea021e4b186075bf0f84e18cb4071046ade7098c2658d077559f5",
      "language": "csharp",
      "size": 201,
      "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Models/WaitConfig.cs",
      "sha256": "641533b56ae811de7505263f827bc5f89cc405f67645b053fd06737f1e5fa621",
      "language": "csharp",
      "size": 153,
      "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 1;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Repositories/AutomationFlowRepository.cs",
      "sha256": "0e6a38673480db7c067e41901c2725f6c93683975ffaacfdcefb67bcfe90820e",
      "language": "csharp",
      "size": 3297,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public class AutomationFlowRepository : IAutomationFlowRepository\n    {\n        private readonly AppDbContext _db;\n\n        public AutomationFlowRepository(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                    f.BusinessId == businessId &&\n                    f.TriggerKeyword.ToLower() == keyword.ToLower() &&\n                    f.IsActive);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderBy(f => f.Name)\n                .ToListAsync();\n        }\n\n        public async Task<AutomationFlow> CreateAsync(AutomationFlow flow)\n        {\n            flow.Id = Guid.NewGuid();\n            flow.CreatedAt = DateTime.UtcNow;\n            flow.IsActive = true;\n\n            _db.AutomationFlows.Add(flow);\n            await _db.SaveChangesAsync();\n            return flow;\n        }\n\n        public async Task<AutomationFlow> UpdateAsync(AutomationFlow flow)\n        {\n            var existing = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flow.Id && f.BusinessId == flow.BusinessId && f.IsActive);\n\n            if (existing == null)\n                throw new KeyNotFoundException(\"Automation flow not found.\");\n\n            existing.Name = flow.Name;\n            existing.TriggerKeyword = flow.TriggerKeyword;\n            existing.NodesJson = flow.NodesJson;\n            existing.EdgesJson = flow.EdgesJson;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(existing);\n            await _db.SaveChangesAsync();\n\n            return existing;\n        }\n\n        public async Task<bool> DeleteAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null)\n                return false;\n\n            flow.IsActive = false;\n            flow.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(flow);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                f.BusinessId == businessId &&\n                EF.Functions.ILike(f.TriggerKeyword, keyword) &&\n                f.IsActive);\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Repositories/IAutomationFlowRepository.cs",
      "sha256": "3c0e87413a797f0b2cb7de16b419204f9f84555fd58a4435ca5bffc5f570b2fe",
      "language": "csharp",
      "size": 1022,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public interface IAutomationFlowRepository\n    {\n        // 🔍 Get flow by unique FlowId + BusinessId (strict filtering)\n        Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n\n        // 🔍 Get flow by keyword for auto-trigger\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // 📋 List all flows for business\n        Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId);\n\n        // ➕ Create flow\n        Task<AutomationFlow> CreateAsync(AutomationFlow flow);\n\n        // ✏️ Update flow\n        Task<AutomationFlow> UpdateAsync(AutomationFlow flow);\n\n        // ❌ Delete flow\n        Task<bool> DeleteAsync(Guid flowId, Guid businessId);\n        Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword);\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/AutomationRunner.cs",
      "sha256": "3f1cb7807540e05fcd7092da474d3784a3f5c6065fd4c98ca22abc2753b97765",
      "language": "csharp",
      "size": 12633,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Models.Configs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.Automation.Config;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationRunner : IAutomationRunner\n    {\n        private readonly IMessageEngineService _messageService;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationRunner> _logger;\n        private readonly AppDbContext _appDbContext;\n        public AutomationRunner(\n            IMessageEngineService messageService,\n            IContactService contactService,\n            ILogger<AutomationRunner> logger, AppDbContext appDbContext)\n        {\n            _messageService = messageService;\n            _contactService = contactService;\n            _logger = logger;\n            _appDbContext = appDbContext;\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string contactPhone,\n            string sourceChannel,\n            string industryTag)\n        {\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var result = new AutomationFlowRunResult();\n            var currentNode = nodes.FirstOrDefault(); // Start from first node\n\n            if (currentNode == null)\n            {\n                _logger.LogWarning(\"🚫 Flow has no start node.\");\n                result.NeedsAgent = true;\n                result.Notes = \"No start node found.\";\n                return result;\n            }\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"➡️ Running node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        _logger.LogInformation(\"📤 Sending message: {Text}\", msgCfg.Text);\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"⏳ Waiting {Seconds}s\", waitCfg.Seconds);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"🏷️ Assigning tags: {Tags}\", string.Join(\", \", tagCfg.Tags));\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.AgentHandoff:\n                        result.NeedsAgent = true;\n                        if (Guid.TryParse(currentNode.Id, out var parsedId))\n                        {\n                            result.HandoffNodeId = parsedId;\n                        }\n                        else\n                        {\n                            _logger.LogWarning(\"⚠️ Invalid node ID format for AgentHandoff node: {Id}\", currentNode.Id);\n                            result.HandoffNodeId = null;\n                        }\n                        result.Notes = \"Flow routed to human agent.\";\n                        return result;\n\n                    case NodeTypeEnum.End:\n                        _logger.LogInformation(\"✅ End node reached.\");\n                        currentNode = null;\n                        continue;\n\n                    case NodeTypeEnum.Choice:\n                        _logger.LogInformation(\"🧠 Reached Choice node. Saving session state to wait for user input...\");\n\n                        var session = await _appDbContext.ChatSessionStates.FirstOrDefaultAsync(s =>\n                            s.BusinessId == businessId && s.ContactId == contactId);\n\n                        if (session == null)\n                        {\n                            session = new ChatSessionState\n                            {\n                                Id = Guid.NewGuid(),\n                                BusinessId = businessId,\n                                ContactId = contactId\n                            };\n                            _appDbContext.ChatSessionStates.Add(session);\n                        }\n\n                        session.Mode = \"awaiting_choice\";\n                        session.UpdatedBy = currentNode.Id.ToString();\n                        session.LastUpdatedAt = DateTime.UtcNow;\n\n                        await _appDbContext.SaveChangesAsync();\n\n                        result.Notes = \"Choice node reached. Flow paused.\";\n                        return result;\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            result.Notes = \"Flow completed.\";\n            return result;\n        }\n        public async Task<AutomationFlowRunResult> ResumeFlowAsync(\n           Guid businessId,\n           Guid contactId,\n           string contactPhone,\n           string incomingMessage)\n        {\n            var session = await _appDbContext.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (session == null || session.Mode != \"awaiting_choice\")\n            {\n                _logger.LogWarning(\"❌ No active automation session found or mode not awaiting_choice.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active automation session.\" };\n            }\n\n            var flow = await _appDbContext.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderByDescending(f => f.UpdatedAt)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n            {\n                _logger.LogWarning(\"❌ No active automation flow found for business.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active flow found.\" };\n            }\n\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var choiceNode = nodes.FirstOrDefault(n => n.Id == session.UpdatedBy && n.NodeType == NodeTypeEnum.Choice);\n            if (choiceNode == null)\n            {\n                _logger.LogWarning(\"❌ Stored session node not found or not a Choice node.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice node in session.\" };\n            }\n\n            var cfg = JsonConvert.DeserializeObject<ChoiceConfig>(choiceNode.ConfigJson);\n            if (cfg?.Conditions == null)\n            {\n                _logger.LogWarning(\"❌ Choice config is null or empty.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice config.\" };\n            }\n\n            var match = cfg.Conditions.FirstOrDefault(c =>\n                string.Equals(c.Match.Trim(), incomingMessage.Trim(), StringComparison.OrdinalIgnoreCase));\n\n            string nextNodeId = match?.NextNodeId ?? cfg.FallbackNodeId;\n            if (match == null)\n            {\n                _logger.LogWarning(\"🔁 No matching condition found. Using fallback: {Fallback}\", nextNodeId);\n            }\n\n            var nextNode = nodes.FirstOrDefault(n => n.Id == nextNodeId);\n            if (nextNode == null)\n            {\n                _logger.LogWarning(\"❌ Next node after choice not found.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Next node not found.\" };\n            }\n\n            // ✅ Clear session after resume\n            _appDbContext.ChatSessionStates.Remove(session);\n            await _appDbContext.SaveChangesAsync();\n\n            // ✅ Resume from the matched node using shared loop\n            return await ExecuteNodeLoopAsync(flow, nextNode, nodes, edges, businessId, contactId, contactPhone);\n        }\n\n\n        private async Task<AutomationFlowRunResult> ExecuteNodeLoopAsync(\n    AutomationFlow flow,\n    AutomationFlowNode startNode,\n    List<AutomationFlowNode> nodes,\n    List<AutomationFlowEdge> edges,\n    Guid businessId,\n    Guid contactId,\n    string contactPhone)\n        {\n            var result = new AutomationFlowRunResult();\n            var currentNode = startNode;\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"➡️ Executing node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.End:\n                        return new AutomationFlowRunResult { Notes = \"✅ Flow ended.\" };\n\n                    case NodeTypeEnum.AgentHandoff:\n                        return new AutomationFlowRunResult\n                        {\n                            NeedsAgent = true,\n                            Notes = \"Routed to human agent.\"\n                        };\n\n                    case NodeTypeEnum.Choice:\n                        var session = new ChatSessionState\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            Mode = \"awaiting_choice\",\n                            UpdatedBy = currentNode.Id.ToString(),\n                            LastUpdatedAt = DateTime.UtcNow\n                        };\n                        _appDbContext.ChatSessionStates.Add(session);\n                        await _appDbContext.SaveChangesAsync();\n\n                        return new AutomationFlowRunResult { Notes = \"Paused at Choice node.\" };\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            return new AutomationFlowRunResult { Notes = \"Flow completed.\" };\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/AutomationService.cs",
      "sha256": "c42e37b6d7f110e3f94e15cae67213a79f8219feb763ecb1ba4ca86c636e423c",
      "language": "csharp",
      "size": 5101,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationService : IAutomationService\n    {\n        private readonly IAutomationFlowRepository _flowRepository;\n        private readonly IAutomationRunner _runner;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public AutomationService(\n            IAutomationFlowRepository flowRepository,\n            IAutomationRunner runner,\n            IContactService contactService,\n            ILogger<AutomationService> logger,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _flowRepository = flowRepository;\n            _runner = runner;\n            _contactService = contactService;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.GetByIdAsync(flowId, businessId);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _flowRepository.GetByKeywordAsync(businessId, keyword);\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag)\n        {\n            return await _runner.RunFlowAsync(flow, businessId, contactId, phone, sourceChannel, industryTag);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId)\n        {\n            return await _flowRepository.GetAllByBusinessAsync(businessId);\n        }\n\n        public async Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow)\n        {\n            flow.BusinessId = businessId;\n            return await _flowRepository.CreateAsync(flow);\n        }\n\n        public async Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.DeleteAsync(flowId, businessId);\n        }\n\n        public async Task RunByKeywordAsync(string messageText, string phoneNumber, string sourceChannel = \"whatsapp\")\n        {\n            var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                ?? throw new UnauthorizedAccessException(\"BusinessId could not be resolved from context.\");\n\n            var flow = await _flowRepository.GetByKeywordAsync(businessId, messageText);\n            if (flow == null)\n            {\n                _logger.LogInformation(\"No matching automation flow for keyword: {Keyword}\", messageText);\n                return;\n            }\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, phoneNumber);\n            await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag: \"default\");\n        }\n\n        public async Task<bool> TryRunFlowByKeywordAsync(\n         Guid businessId,\n         string messageText,\n         string userPhone,\n         string sourceChannel,\n         string industryTag)\n        {\n            try\n            {\n                // 🔍 Normalize keyword\n                var normalizedKeyword = messageText.Trim().ToLower();\n\n                // ✅ Fetch flow by trigger keyword\n                var flow = await _flowRepository.GetByKeywordAsync(businessId, normalizedKeyword);\n                if (flow == null)\n                {\n                    _logger.LogInformation(\"TryRun: No matching automation flow found for keyword: '{Keyword}'\", normalizedKeyword);\n                    return false;\n                }\n\n                // 👤 Ensure contact exists\n                var contact = await _contactService.FindOrCreateAsync(businessId, userPhone);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"❌ TryRun: Failed to resolve or create contact for phone: {Phone}\", userPhone);\n                    return false;\n                }\n\n                // ▶️ Run automation flow\n                _logger.LogInformation(\"🚀 Running flow '{FlowName}' for keyword '{Keyword}'\", flow.Name, normalizedKeyword);\n                await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ TryRun: Exception while executing flow for keyword '{Keyword}'\", messageText);\n                return false;\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/IAutomationRunner.cs",
      "sha256": "0aa081c7006bb76ff84c8cee9da21e51a021a69c4e0b6d191ffdc1356b5e4001",
      "language": "csharp",
      "size": 453,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationRunner\n    {\n        Task<AutomationFlowRunResult> RunFlowAsync(\n             AutomationFlow flow,\n             Guid businessId,\n             Guid contactId,\n             string contactPhone,\n             string sourceChannel,\n             string industryTag\n );\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Automation/Services/IAutomationService.cs",
      "sha256": "fd32d83e0e970571048b14fb8805162a0b1139c917ed0bf99ad84b4a244ce609",
      "language": "csharp",
      "size": 1688,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationService\n    {\n        // 📌 Get flow by FlowId (for admin UI or debugging)\n        Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n\n        // 📌 Get flow by keyword match (used for auto-triggering)\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // 🛠️ Execute a flow with contact and channel info\n        Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag\n        );\n\n        // 📋 List all flows (for admin or dashboard)\n        Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId);\n\n        // ➕ Create new flow\n        Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow);\n\n        // ❌ Delete existing flow\n        Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId);\n\n        // ⚡ Runtime entry point – called when a message arrives\n        Task RunByKeywordAsync(\n            string messageText,\n            string phoneNumber,\n            string sourceChannel = \"whatsapp\"\n        );\n\n        // ✅ Returns true if flow matched and executed\n        Task<bool> TryRunFlowByKeywordAsync(\n            Guid businessId,\n            string messageText,\n            string userPhone,\n            string sourceChannel,\n            string industryTag\n        );\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyController.cs",
      "sha256": "c575c41a8f3145df1332211adef4017099c86609c2981442039fcfbd0823a6de",
      "language": "csharp",
      "size": 2591,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyController : ControllerBase\n    {\n        private readonly IAutoReplyService _service;\n\n        public AutoReplyController(IAutoReplyService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> CreateRule([FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var result = await _service.CreateRuleAsync(businessId, dto);\n            return Ok(result);\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllRules()\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rules = await _service.GetAllRulesAsync(businessId);\n            return Ok(rules);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetRuleById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rule = await _service.GetRuleByIdAsync(id, businessId);\n            return rule == null ? NotFound() : Ok(rule);\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateRule(Guid id, [FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            dto.Id = id;\n            var success = await _service.UpdateRuleAsync(businessId, dto);\n            return success ? NoContent() : NotFound();\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteRule(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var success = await _service.DeleteRuleAsync(id, businessId);\n            return success ? NoContent() : NotFound();\n        }\n\n        // Optional — for debugging match logic (not exposed in prod)\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchByKeyword([FromQuery] string message)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var matchedRule = await _service.MatchRuleByKeywordAsync(businessId, message);\n            return matchedRule == null ? NotFound(\"No match found.\") : Ok(matchedRule);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyFlowsController.cs",
      "sha256": "442d35032e1265a4ba687db6033f7cd70d21c92e30f63d3122e43e50540bb763",
      "language": "csharp",
      "size": 3075,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyFlowsController : ControllerBase\n    {\n        private readonly IAutoReplyFlowService _service;\n\n        public AutoReplyFlowsController(IAutoReplyFlowService service)\n        {\n            _service = service;\n        }\n\n        // [HttpPost(\"save\")]\n        //public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        //{\n        //    var id = await _service.SaveFlowAsync(dto);\n        //    return Ok(new { id });\n        //}\n        [HttpPost(\"save\")]\n        public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        {\n            Guid businessId;\n            try { businessId = User.GetBusinessId(); }\n            catch (UnauthorizedAccessException) { return Unauthorized(\"Missing or invalid business ID\"); }\n\n            var id = await _service.SaveFlowAsync(dto, businessId);\n            return Ok(new { id });\n        }\n\n        [HttpGet(\"business/{businessId}\")]\n        public async Task<IActionResult> GetFlowsByBusiness(Guid businessId)\n        {\n            var flows = await _service.GetFlowsByBusinessIdAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var flow = await _service.GetFlowByIdAsync(id, businessId);\n            return flow == null ? NotFound() : Ok(flow);\n        }\n        [HttpGet(\"business/{businessId}/count\")]\n        public async Task<IActionResult> GetFlowCount(Guid businessId)\n        {\n            var count = await _service.GetFlowCountForBusinessAsync(businessId);\n            return Ok(count);\n        }\n        [HttpPut(\"{id}/rename\")]\n        public async Task<IActionResult> RenameFlow(Guid id, [FromBody] RenameFlowDto dto)\n        {\n            var result = await _service.RenameFlowAsync(id, dto.NewName);\n            if (!result) return NotFound();\n            return Ok();\n        }\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ✅ Clean and secure\n            }\n            catch (UnauthorizedAccessException)\n            {\n                return Unauthorized(\"Missing or invalid business ID\");\n            }\n\n            var success = await _service.DeleteFlowAsync(id, businessId);\n            if (!success)\n                return NotFound(\"Flow not found or not owned by your business\");\n\n            return Ok(new { message = \"Flow deleted successfully\" });\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyRuntimeController.cs",
      "sha256": "a8f103874213b2129c6d59932b03582a9f21206d073f756ca97bfe08e0015e85",
      "language": "csharp",
      "size": 3135,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/auto-reply-runtime\")]\n    [Authorize]\n    public class AutoReplyRuntimeController : ControllerBase\n    {\n        private readonly IAutoReplyRuntimeService _runtimeService;\n        private readonly ILogger<AutoReplyRuntimeController> _logger;\n\n        public AutoReplyRuntimeController(\n            IAutoReplyRuntimeService runtimeService,\n            ILogger<AutoReplyRuntimeController> logger)\n        {\n            _runtimeService = runtimeService;\n            _logger = logger;\n        }\n\n        // 🔁 Runtime button reply based on keyword (used in message click)\n        [HttpPost(\"button-click\")]\n        public async Task<IActionResult> HandleButtonClick([FromBody] AutoReplyButtonClickDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n\n            _logger.LogInformation(\"🔘 Button clicked: BusinessId={BusinessId}, Phone={Phone}, Button={ButtonText}, RefMsg={RefMessageId}\",\n                businessId, dto.Phone, dto.ButtonText, dto.RefMessageId?.ToString() ?? \"null\");\n\n            await _runtimeService.TryRunAutoReplyFlowByButtonAsync(\n                businessId,\n                dto.Phone,\n                dto.ButtonText,\n                dto.RefMessageId\n            );\n\n            return Ok(new { success = true });\n        }\n\n        // 🧪 Manual test (canvas-based flow trigger)\n        [HttpPost(\"flow-by-button\")]\n        public async Task<IActionResult> TriggerFlowByButton([FromBody] AutoReplyButtonClickDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Phone) || string.IsNullOrWhiteSpace(dto.ButtonText))\n                return BadRequest(\"Phone and ButtonText are required.\");\n\n            try\n            {\n                _logger.LogInformation(\"🚀 Triggering flow from button: FlowId={FlowId}, BusinessId={BusinessId}, ContactId={ContactId}, Phone={Phone}, ButtonText={ButtonText}\",\n                    dto.FlowId, dto.BusinessId, dto.ContactId, dto.Phone, dto.ButtonText);\n\n                await _runtimeService.RunFlowFromButtonAsync(\n                    dto.FlowId,\n                    dto.BusinessId,\n                    dto.ContactId,\n                    dto.Phone,\n                    dto.ButtonText.Trim()\n                );\n\n                return Ok(new\n                {\n                    success = true,\n                    flowId = dto.FlowId,\n                    contactId = dto.ContactId,\n                    triggeredAt = DateTime.UtcNow\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to trigger flow from button click: FlowId={FlowId}, Phone={Phone}, Button={ButtonText}\",\n                    dto.FlowId, dto.Phone, dto.ButtonText);\n\n                return StatusCode(500, \"Internal server error\");\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/TemplatesController.cs",
      "sha256": "555d0e0c3deaa65e82290ddcf55e06bb4fa67bbcf43e5b9d56ea5109f7c236b8",
      "language": "csharp",
      "size": 995,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateMessages.DTOs;\n\nnamespace xbytechat.api.Features.TemplateMessages.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TemplatesController : ControllerBase\n    {\n        private static readonly List<TemplateDto> MockTemplates = new()\n        {\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Welcome Template\",\n                Placeholders = 2\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Offer Reminder\",\n                Placeholders = 1\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Follow Up\",\n                Placeholders = 3\n            }\n        };\n\n        [HttpGet]\n        public ActionResult<List<TemplateDto>> GetAll()\n        {\n            return Ok(MockTemplates);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyButtonClickDto.cs",
      "sha256": "c33e345f9a02ff4d627ba42ba92505f5819a034035b07bde678784a244b9d6ac",
      "language": "csharp",
      "size": 412,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyButtonClickDto\n    {\n        public Guid FlowId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string Phone { get; set; } = string.Empty;\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? RefMessageId { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyLogDto.cs",
      "sha256": "4674e27873c9ca6a52ab8c85ac1fb97864c6a1e653138b78096a19b3b230124e",
      "language": "csharp",
      "size": 596,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerType { get; set; } = \"rule\"; // or \"flow\"\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyContent { get; set; } = string.Empty;\n\n        public DateTime TriggeredAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        public Guid? MessageLogId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyRuleDto.cs",
      "sha256": "47945e41d0ce9fc41bf7949aea8b58a0caf3bb5083fae0bc6d4815ea846d23ab",
      "language": "csharp",
      "size": 783,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    /// <summary>\n    /// DTO used to create or retrieve AutoReplyRule.\n    /// </summary>\n    public class AutoReplyRuleDto\n    {\n        public Guid? Id { get; set; } // Nullable to allow re-use for Create and Update\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyMessage { get; set; } = string.Empty;\n        public string? MediaUrl { get; set; } // Optional media\n        public int Priority { get; set; } = 0; // Lower = higher priority\n        public bool IsActive { get; set; } = true;\n\n        // Audit Fields (optional for now, useful for admin UI)\n        public DateTime? CreatedAt { get; set; }\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ButtonChoiceNodeConfig.cs",
      "sha256": "a573ed18c3b3cce438f3f126b958408f9c6245ac01be98c3db1d0c4a92adbb18",
      "language": "csharp",
      "size": 577,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ButtonChoiceNodeConfig\n    {\n        public string PromptText { get; set; } = \"Please choose an option:\";\n\n        public List<ButtonOption> Options { get; set; } = new();\n    }\n\n    public class ButtonOption\n    {\n        public string Label { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n\n        // Optional metadata to control button behavior\n        public string? NextStepHint { get; set; } // Can guide user or be used for logging\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ConditionNodeConfig.cs",
      "sha256": "836736c40f25f700d3a84836ee147930568713f5f623bcdc1569b42ff5b4432e",
      "language": "csharp",
      "size": 306,
      "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ConditionNodeConfig\n    {\n    \n        public string InputKey { get; set; } = \"buttonText\";\n\n        public Dictionary<string, string> PathMap { get; set; } = new();\n       \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/DecisionNodeConfig.cs",
      "sha256": "5575668b5865a5bb2847165208e60278c44386e8f710abb968606e22bb52fe70",
      "language": "csharp",
      "size": 418,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class DecisionNodeConfig\n    {\n        public string ConditionType { get; set; } = \"keyword\"; // or \"tag\", \"time\", \"plan\", etc.\n        public string Parameter { get; set; } = string.Empty;   // e.g. \"yes\", \"vip\", \"evening\"\n        public string SourceChannel { get; set; } = \"whatsapp\"; // Optional for multi-channel control\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormInputNodeConfig.cs",
      "sha256": "34b1ef9a54bc19dbb2163a80371edaf8d5bf75420e9924e90e82762fa4831216",
      "language": "csharp",
      "size": 596,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormInputNodeConfig\n    {\n        public string QuestionText { get; set; } = \"Please enter your response:\";\n\n        public string FieldKey { get; set; } = \"customer_name\";\n        // Used for storing user response under a label\n\n        public string? ValidationRegex { get; set; }\n        // Optional, e.g., @\"^[0-9]{10}$\" for phone numbers\n\n        public string? PlaceholderHint { get; set; }\n        // e.g., \"Full Name\", \"10-digit Phone\"\n\n        public bool IsRequired { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormNodeConfig.cs",
      "sha256": "f839475742eb0fc23ab0c6e58e1f23a0583e4b649301ac588feb0808dd1c243d",
      "language": "csharp",
      "size": 818,
      "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormNodeConfig\n    {\n        public string Title { get; set; } = \"Please fill out this form\";\n\n        public List<FormFieldConfig> Fields { get; set; } = new();\n\n        public bool SaveToContact { get; set; } = true; // Whether to update contact info\n\n        public string? SubmitMessage { get; set; } = \"Thanks for submitting!\";\n    }\n\n    public class FormFieldConfig\n    {\n        public string Key { get; set; } = string.Empty;      // contactName, email, phone\n        public string Label { get; set; } = string.Empty;    // \"Your Name\"\n        public string Type { get; set; } = \"text\";           // text, number, email, etc.\n        public bool Required { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ForwardToAgentNodeConfig.cs",
      "sha256": "486eab52256f3ee2bfea5f06ada3bf8fade4f055f1012e4a1291ac0e61c9f35c",
      "language": "csharp",
      "size": 268,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ForwardToAgentNodeConfig\n    {\n        public string? NoteToAgent { get; set; } // Optional instruction for agent\n        public bool MarkAsUrgent { get; set; } = false;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeIconMap.cs",
      "sha256": "e56ce9b9bdedf03682aaa6c56815fb85dd510ecd2ec1e4c82f53c0fa5c8f9401",
      "language": "csharp",
      "size": 591,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeIconMap\n    {\n        public static readonly Dictionary<string, string> IconMap = new()\n        {\n            { NodeTypeEnum.Message, \"🗨️\" },\n            { NodeTypeEnum.Template, \"📄\" },\n            { NodeTypeEnum.Tag, \"🏷️\" },\n            { NodeTypeEnum.Wait, \"⏱️\" },\n            { NodeTypeEnum.ButtonChoice, \"🔘\" },\n            { NodeTypeEnum.Branch, \"🌿\" },\n            { NodeTypeEnum.AgentHandoff, \"👨‍💼\" },\n            { NodeTypeEnum.End, \"⛔\" }\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeTypeEnum.cs",
      "sha256": "d21739b3b7651f2a026a4e412de76d45fe215ae50907b0c7ee025bee0c1ed189",
      "language": "csharp",
      "size": 572,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeTypeEnum\n    {\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Tag = \"tag\";\n        public const string Wait = \"wait\";\n        public const string ButtonChoice = \"button_choice\";\n        public const string Branch = \"branch\";\n        public const string End = \"end\"; // Optional: Used for flow exit\n        public const string AgentHandoff = \"agent_handoff\"; // Optional: Transfer to human\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/RenameFlowDto.cs",
      "sha256": "c2ad4577f121df77190a9463e0eb6528c20054bd0901e7bc9a355aedfb53031c",
      "language": "csharp",
      "size": 146,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class RenameFlowDto\n    {\n        public string NewName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/SaveFlowDto.cs",
      "sha256": "b4b9d49533bad3114236c255a28ecc08bc82a01f1141b981146f320c76cc39f4",
      "language": "csharp",
      "size": 2315,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n{\n    public class SaveFlowDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; }\n        public string? TriggerKeyword { get; set; }\n        public List<NodeDto> Nodes { get; set; } = new();\n        public List<EdgeDto> Edges { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n\n        public string? IndustryTag { get; set; }     // e.g. \"restaurant\", \"clinic\", etc.\n        public string? UseCase { get; set; }         // e.g. \"Order Flow\", \"Appointment Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag for prebuilt templates\n\n    }\n\n    public class NodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public AutoPositionDto Position { get; set; } = new();\n        public NodeDataDto Data { get; set; } = new();\n    }\n\n    public class AutoPositionDto\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n    public class NodeDataDto\n    {\n        public string Label { get; set; } = string.Empty;\n        public object Config { get; set; } = new { };\n    }\n\n    public class EdgeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Source { get; set; } = string.Empty;\n        public string Target { get; set; } = string.Empty;\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string SourceHandle { get; set; } = string.Empty;\n        public string TargetHandle { get; set; } = string.Empty;\n    }\n}\n\n\n//using System;\n\n//namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n//{\n//    public class SaveFlowDto\n//    {\n//        public Guid Id { get; set; }\n//        public Guid BusinessId { get; set; }\n//        public string Name { get; set; } = string.Empty;\n//        public List<Dictionary<string, object>> Nodes { get; set; }\n\n//        public List<Dictionary<string, object>> Edges { get; set; }\n//        public DateTime CreatedAt { get; set; }\n//        public string? TriggerKeyword { get; set; }\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/TemplateDto.cs",
      "sha256": "42ae32842447bb89f8178a8bae3c490d1fe646b526c27cbe72571e23536f7116",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.TemplateMessages.DTOs\n{\n    public class TemplateDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public int Placeholders { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/AutoReplyEdgeDto.cs",
      "sha256": "5cbac1daff177794f7ae69aabf6b323f279f0b7132dc060e462a91226849f868",
      "language": "csharp",
      "size": 264,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class AutoReplyEdgeDto\n    {\n        public string Id { get; set; }\n        public string SourceNodeId { get; set; }\n        public string TargetNodeId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/MessageConfig.cs",
      "sha256": "6e7673134b9b3fabb432529dd4b510007ff1d934f016b3a2d831a4503d01c2c7",
      "language": "csharp",
      "size": 201,
      "content": "// MessageConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/RuntimeConfigs.cs",
      "sha256": "280793d810ae7ce0f016f2671b3627cd52a4029b6ea574d0fee20e0c0e11e5ae",
      "language": "csharp",
      "size": 125,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class RuntimeConfigs\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TagNodeConfig.cs",
      "sha256": "d9fade9fca5845b7cb33279a01288a4dd94a90aaaed58d384a778209656b5ead",
      "language": "csharp",
      "size": 197,
      "content": "// TagConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TemplateConfig.cs",
      "sha256": "5c7ea8f78b131705f6bccf1ced0e21a754dadf67bbd6420696995f565c07767a",
      "language": "csharp",
      "size": 682,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TemplateConfig\n    {\n        public string TemplateName { get; set; } = string.Empty;\n        public List<string> Placeholders { get; set; } = new();\n        public string? Language { get; set; } = \"en_US\";\n        public string? ImageUrl { get; set; }\n        public List<TemplateButtonDto>? MultiButtons { get; set; } = new();\n    }\n\n    public class TemplateButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"url\"; // or \"quick_reply\"\n        public string TargetUrl { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/WaitConfig.cs",
      "sha256": "afe336952d0d4959422bbbc499884b286291888fcbd64dd068f26013160261c6",
      "language": "csharp",
      "size": 179,
      "content": "// WaitConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/Enum/NodeTypes.cs",
      "sha256": "94b210bd5bbbbce823c3a1beb8172eddf708305bfbb8b897d1e3c7ef10097b36",
      "language": "csharp",
      "size": 538,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.Enum\n{\n    public class NodeTypes\n    {\n        public const string Start = \"start\";\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Wait = \"wait\";\n        public const string Tag = \"tag\";\n        public const string Agent = \"agent\";\n        public const string Condition = \"condition\"; // Coming soon\n        public const string Form = \"form\";           // For “Ask Name”, “Ask Email”\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlow.cs",
      "sha256": "2825905f983da1290a44badeda57c8ff26c8920d7fa13e7ebd85dd0da2e0aaca",
      "language": "csharp",
      "size": 1021,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Models\n{\n    public class AutoReplyFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        public string NodesJson { get; set; } = string.Empty;\n\n        [Required]\n        public string EdgesJson { get; set; } = string.Empty;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? TriggerKeyword { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public string? IndustryTag { get; set; }    // e.g., \"restaurant\", \"clinic\", \"education\"\n        public string? UseCase { get; set; }        // e.g., \"Order Flow\", \"Booking Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag to indicate system-provided template\n        public string? Keyword { get; set; }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowEdge.cs",
      "sha256": "7996bdb8fa1917943e90dad9ad4225984a34b6342eb153028849b30ca63abd7f",
      "language": "csharp",
      "size": 763,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowEdge\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n    \n        public string? SourceHandle { get; set; }\n        public string? TargetHandle { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowNode.cs",
      "sha256": "88a50d45fe3b72f6c3bc0593104b7ee549180c842628cb3d9048c5227a025871",
      "language": "csharp",
      "size": 1013,
      "content": "using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowNode\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        // 🔄 Use a constrained string or enum (recommended for future)\n        [Required]\n        public string NodeType { get; set; } = string.Empty;\n\n        public string Label { get; set; } = string.Empty;\n\n        public string? NodeName { get; set; } // 🆕 Optional internal label for debugging\n\n        [Required]\n        public string ConfigJson { get; set; } = string.Empty;\n\n        public Position Position { get; set; } = new();\n\n        public int Order { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyLog.cs",
      "sha256": "d2949264f0ac5b81395d2dee6578df20759d95d300da30d5f0f9003e0ed1c5eb",
      "language": "csharp",
      "size": 915,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    [Table(\"AutoReplyLogs\")]\n    public class AutoReplyLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty; // e.g., \"hi\", \"price\"\n        public string TriggerType { get; set; } = string.Empty;     // \"flow\" or \"rule\"\n\n        public string ReplyContent { get; set; } = string.Empty;    // Plaintext summary of what was sent\n        public string? FlowName { get; set; }                       // Nullable if rule-based\n\n        public Guid? MessageLogId { get; set; }                     // Optional link to MessageLog\n        public DateTime TriggeredAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyRule.cs",
      "sha256": "c3049863f7add2dfd09dd962dbdbc904585fa5db4e12ac189193077bfee08a78",
      "language": "csharp",
      "size": 1137,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyRule\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty;\n\n        public string ReplyMessage { get; set; } = string.Empty;\n\n        public string? MediaUrl { get; set; }\n\n        public int Priority { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        // ✅ NEW: Link to the flow\n        public Guid? FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow? Flow { get; set; }\n\n        public string? IndustryTag { get; set; } // e.g., \"restaurant\", \"clinic\", \"real_estate\"\n        public string? SourceChannel { get; set; } // e.g., \"whatsapp\", \"instagram\"\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowExecutionContext.cs",
      "sha256": "0d3e6415c151099db94a6f0f6dc8f695fd31492808dc09079919950efedf0776",
      "language": "csharp",
      "size": 494,
      "content": "using xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowExecutionContext\n    {\n        public AutoReplyFlow Flow { get; set; } = null!;\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = null!;\n        public string SourceChannel { get; set; } = \"whatsapp\";\n        public string IndustryTag { get; set; } = \"\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowNode.cs",
      "sha256": "8991ad6277d58a2785f6a93fd8b8ca815af4ce80351d38f30aaf47890909471f",
      "language": "csharp",
      "size": 318,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowNode\n    {\n        public string Id { get; set; }\n        public string Type { get; set; }\n        public Position Position { get; set; }\n        public Dictionary<string, object> Data { get; set; }  // This should capture config\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowRunResult.cs",
      "sha256": "67982580319a635214c13b2ec05cc279d9afc21fdeb1224248a8060036e27f5c",
      "language": "csharp",
      "size": 463,
      "content": "// File: Features/AutoReplyBuilder/Models/FlowRunResult.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    /// <summary>\n    /// Encapsulates the result of running a visual flow, including agent handoff status.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n\n        public Guid? HandoffNodeId { get; set; }\n\n        public string? ContextJson { get; set; }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/Position.cs",
      "sha256": "0c352c43f4dfcebdc462622ca0acdcd8c1eaafa07a91a70804793d8c76724201",
      "language": "csharp",
      "size": 176,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class Position\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyFlowRepository.cs",
      "sha256": "d919b1d695c3c29ccc653b806d4884197b3d52fb9eb5f86c0f32f893eb198671",
      "language": "csharp",
      "size": 4350,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\npublic class AutoReplyFlowRepository : IAutoReplyFlowRepository\n{\n    private readonly AppDbContext _context;\n    private readonly ILogger<AutoReplyFlowRepository> _logger;\n\n    public AutoReplyFlowRepository(AppDbContext context, ILogger<AutoReplyFlowRepository> logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    public async Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow)\n    {\n        _context.AutoReplyFlows.Add(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return flow;\n    }\n\n    public async Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges)\n    {\n        _context.AutoReplyFlowNodes.AddRange(nodes);\n        _context.AutoReplyFlowEdges.AddRange(edges);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n    }\n\n    public async Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId)\n            .OrderByDescending(f => f.CreatedAt)\n            .ToListAsync();\n    }\n\n    public async Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n    }\n\n    public async Task<int> GetFlowCountAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows.CountAsync(f => f.BusinessId == businessId);\n    }\n\n    public async Task<bool> RenameFlowAsync(Guid id, string newName)\n    {\n        var flow = await _context.AutoReplyFlows.FindAsync(id);\n        if (flow == null) return false;\n\n        flow.Name = newName;\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n\n    public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n    {\n        var flow = await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == id && f.BusinessId == businessId);\n\n        if (flow == null) return false;\n\n        _context.AutoReplyFlows.Remove(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n    public async Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n    public async Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId && f.IsActive && f.TriggerKeyword == keyword)\n            .OrderByDescending(f => f.CreatedAt)\n            .FirstOrDefaultAsync();\n    }\n    public async Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyLogRepository.cs",
      "sha256": "4a8777aecfb95fef141063dfa3475992a3848fdd582209819e66ab552d045f71",
      "language": "csharp",
      "size": 1569,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Models;\nusing xbytechat.api.Shared;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyLogRepository : IAutoReplyLogRepository\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyLogRepository> _logger;\n\n        public AutoReplyLogRepository(AppDbContext context, ILogger<AutoReplyLogRepository> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task SaveAsync(AutoReplyLogDto dto)\n        {\n            try\n            {\n                var log = new AutoReplyLog\n                {\n                    Id = dto.Id,\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    TriggerKeyword = dto.TriggerKeyword,\n                    TriggerType = dto.TriggerType,\n                    ReplyContent = dto.ReplyContent,\n                    TriggeredAt = dto.TriggeredAt,\n                    FlowName = dto.FlowName,\n                    MessageLogId = dto.MessageLogId\n                };\n\n                _context.AutoReplyLogs.Add(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to save AutoReplyLog\");\n                throw;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyRepository.cs",
      "sha256": "6339294423a06a5ebeacfa42db916a0e6fcac770f4082cb3db53569c2dd80483",
      "language": "csharp",
      "size": 4077,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyRepository : IAutoReplyRepository\n    {\n        private readonly AppDbContext _dbContext;\n\n        public AutoReplyRepository(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task<AutoReplyRule> AddAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Add(rule);\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n        public async Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .ToListAsync();\n        }\n\n        public async Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.Id == ruleId && r.BusinessId == businessId);\n        }\n\n        public async Task<bool> UpdateAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Update(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<bool> DeleteAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await GetByIdAsync(ruleId, businessId);\n            if (rule == null) return false;\n\n            _dbContext.AutoReplyRules.Remove(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .FirstOrDefaultAsync(r => incomingMessage.Contains(r.TriggerKeyword));\n        }\n\n        public async Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == keyword.ToLower());\n\n            if (rule == null) return false;\n\n            rule.FlowId = flowId;\n            rule.FlowName = flowName ?? \"\";\n            rule.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            // Ensure keyword is normalized\n            var normalizedKeyword = keyword.ToLower().Trim();\n\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == normalizedKeyword);\n\n            if (rule != null)\n            {\n                // Update existing rule\n                rule.FlowId = flowId;\n                rule.FlowName = flowName ?? \"\";\n                rule.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // Create new rule\n                rule = new AutoReplyRule\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    TriggerKeyword = normalizedKeyword,\n                    FlowId = flowId,\n                    FlowName = flowName ?? \"\",\n                    CreatedAt = DateTime.UtcNow,\n                    IsActive = true,\n                    Priority = 1,\n                    ReplyMessage = \"\" // Fallback (optional)\n                };\n\n                _dbContext.AutoReplyRules.Add(rule);\n            }\n\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/FlowRepository.cs",
      "sha256": "215b4fc5005e126adf33375390d0ac254a146dbdae11aa8c98eb52aa9054551b",
      "language": "csharp",
      "size": 111,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class FlowRepository\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyFlowRepository.cs",
      "sha256": "f78ae431c2892c49cc0844c2f19e5df301598c964326722b3ca52aec7e9ba61d",
      "language": "csharp",
      "size": 1161,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories\n{\n    public interface IAutoReplyFlowRepository\n    {\n        Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow);\n        Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n        Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<int> GetFlowCountAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges);\n        Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId);\n        Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword);\n        Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyLogRepository.cs",
      "sha256": "49f1ecf8c4ab7bb6a0122d7d98e22eb4cb6e2b4b522c99c3963ca64d57889264",
      "language": "csharp",
      "size": 255,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyLogRepository\n    {\n        Task SaveAsync(AutoReplyLogDto logDto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyRepository.cs",
      "sha256": "136fdda2ad552eadc942d50774dc0ba7cf0796c507e703b6aa20f4fd64fd40d5",
      "language": "csharp",
      "size": 939,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyRepository\n    {\n        Task<AutoReplyRule> AddAsync(AutoReplyRule rule);\n        Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateAsync(AutoReplyRule rule);\n        Task<bool> DeleteAsync(Guid ruleId, Guid businessId);\n\n        // Runtime keyword match logic\n        Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage);\n        Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n        Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IFlowRepository.cs",
      "sha256": "dc4b9a1195add53536172098cfd18c52a19a3a5c767ba81f25e2bceb2a483e14",
      "language": "csharp",
      "size": 112,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class IFlowRepository\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyFlowService.cs",
      "sha256": "60a2f344bc7993fa13dd56c9514c142e4a3bb6100c4e6f48056178d09d8d71b4",
      "language": "csharp",
      "size": 24746,
      "content": "using Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Numerics;\nusing System.Text.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public class AutoReplyFlowService : IAutoReplyFlowService\n    {\n        private readonly IAutoReplyFlowRepository _flowRepository;\n        private readonly ILogger<AutoReplyFlowService> _logger;\n        private readonly IMessageEngineService _messageService;\n        private readonly ITagService _tagService;\n        private readonly IAutoReplyRepository _autoReplyRepository;\n        public AutoReplyFlowService(IAutoReplyFlowRepository flowrepository, ILogger<AutoReplyFlowService> logger,\n            IMessageEngineService messageService, ITagService tagService, IAutoReplyRepository autoReplyRepository)\n        {\n            _flowRepository = flowrepository;\n            _logger = logger;\n            _messageService = messageService;\n            _tagService = tagService;\n            _autoReplyRepository = autoReplyRepository;\n        }\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name,\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"✅ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ✅ Save parsed nodes\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n        //    var nodes = dto.Nodes as List<Dictionary<string, object>>;\n\n        //    if (nodes != null)\n        //    {\n        //        foreach (var nodeDict in nodes)\n        //        {\n        //            if (!nodeDict.ContainsKey(\"type\") || !nodeDict.ContainsKey(\"data\") || !nodeDict.ContainsKey(\"position\"))\n        //            {\n        //                _logger.LogWarning(\"⚠️ Skipped malformed node during flow save: {Node}\", JsonConvert.SerializeObject(nodeDict));\n        //                continue;\n        //            }\n\n        //            var data = nodeDict[\"data\"] as Dictionary<string, object>;\n        //            var positionDict = nodeDict[\"position\"] as Dictionary<string, object>;\n\n        //            var position = new Position\n        //            {\n        //                X = Convert.ToDouble(positionDict?[\"x\"] ?? 0),\n        //                Y = Convert.ToDouble(positionDict?[\"y\"] ?? 0)\n        //            };\n\n        //            parsedNodes.Add(new AutoReplyFlowNode\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                NodeType = nodeDict[\"type\"]?.ToString() ?? \"\",\n        //                Label = data?[\"label\"]?.ToString() ?? \"\",\n        //                ConfigJson = JsonConvert.SerializeObject(data?[\"config\"] ?? new { }),\n        //                Position = position // ✅ strongly typed\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"🧩 Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ✅ Save parsed edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n        //    var edges = dto.Edges as List<Dictionary<string, object>>;\n\n        //    if (edges != null)\n        //    {\n        //        foreach (var edgeDict in edges)\n        //        {\n        //            if (!edgeDict.ContainsKey(\"source\") || !edgeDict.ContainsKey(\"target\"))\n        //            {\n        //                _logger.LogWarning(\"⚠️ Skipped malformed edge during flow save: {Edge}\", JsonConvert.SerializeObject(edgeDict));\n        //                continue;\n        //            }\n\n        //            parsedEdges.Add(new AutoReplyFlowEdge\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                SourceNodeId = edgeDict[\"source\"]?.ToString() ?? \"\",\n        //                TargetNodeId = edgeDict[\"target\"]?.ToString() ?? \"\",\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"🔗 Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n\n        //    _logger.LogInformation(\"✅ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    // ✅ Step 1: Save main flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"✅ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ✅ Step 2: Build ID map and parse nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id))\n        //        {\n        //            _logger.LogWarning(\"⚠️ Skipped node with missing Id\");\n        //            continue;\n        //        }\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = saved.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = JsonConvert.SerializeObject(n.Data?.Config ?? new { }),\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🧩 Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ✅ Step 3: Map Source/TargetNodeId from external → internal GUIDs\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId))\n        //        {\n        //            _logger.LogWarning(\"⚠️ Edge skipped: SourceNodeId '{Source}' not found\", e.SourceNodeId);\n        //            continue;\n        //        }\n\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId))\n        //        {\n        //            _logger.LogWarning(\"⚠️ Edge skipped: TargetNodeId '{Target}' not found\", e.TargetNodeId);\n        //            continue;\n        //        }\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = saved.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🔗 Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ✅ Final Save\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"✅ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto?.BusinessId, dto?.TriggerKeyword);\n\n        //    if (dto == null) throw new ArgumentNullException(nameof(dto));\n        //    if (dto.BusinessId == Guid.Empty) throw new ArgumentException(\"BusinessId is required.\");\n        //    if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n        //    if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n        //    dto.Edges ??= new List<EdgeDto>();\n\n        //    // ✅ Step 1: Save Flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var savedFlow = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"✅ Flow saved: {FlowId}\", savedFlow.Id);\n\n        //    // ✅ Step 2: Parse Nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id)) continue;\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        string configJson = n.Data?.Config is JsonElement elem\n        //            ? elem.GetRawText()\n        //            : JsonConvert.SerializeObject(n.Data?.Config ?? new { });\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = savedFlow.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = configJson,\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🧩 Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ✅ Step 3: Parse Edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId)) continue;\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId)) continue;\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = savedFlow.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            SourceHandle = e.SourceHandle, \n        //            TargetHandle = e.TargetHandle, \n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🔗 Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ✅ Step 4: Save Nodes + Edges\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"✅ Node + edge persistence complete for flow {FlowId}\", savedFlow.Id);\n\n        //    // ✅ Step 5: Link to Rule via Repository\n        //    var keyword = dto.TriggerKeyword.Trim().ToLower();\n        //    var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(dto.BusinessId, keyword, savedFlow.Id, dto.Name);\n\n        //    _logger.LogInformation(\"🔁 Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n        //    return savedFlow.Id;\n        //}\n        public async Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId)\n        {\n            _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", businessId, dto?.TriggerKeyword);\n\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n            if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n            dto.Edges ??= new List<EdgeDto>();\n\n            // ✅ Step 1: Save Flow\n            var flow = new AutoReplyFlow\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId, // << Use parameter, not from dto!\n                Name = dto.Name?.Trim() ?? \"\",\n                NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n                EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n                TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var savedFlow = await _flowRepository.SaveAsync(flow);\n            _logger.LogInformation(\"✅ Flow saved: {FlowId}\", savedFlow.Id);\n\n            // ... rest of code unchanged ...\n\n            // ✅ Step 5: Link to Rule via Repository\n            var keyword = dto.TriggerKeyword.Trim().ToLower();\n            var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(\n                businessId, // << Use parameter, not from dto!\n                keyword, savedFlow.Id, dto.Name);\n\n            _logger.LogInformation(\"🔁 Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n            return savedFlow.Id;\n        }\n\n        public async Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId)\n        {\n            _logger.LogInformation(\"📥 Fetching auto-reply flows for business {BusinessId}\", businessId);\n\n            var flows = await _flowRepository.GetAllByBusinessIdAsync(businessId);\n\n            var results = flows.Select(f => new SaveFlowDto\n            {\n                Id = f.Id,\n                BusinessId = f.BusinessId,\n                Name = f.Name,\n                Nodes = string.IsNullOrEmpty(f.NodesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<NodeDto>>(f.NodesJson),\n\n                Edges = string.IsNullOrEmpty(f.EdgesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<EdgeDto>>(f.EdgesJson),\n\n\n                CreatedAt = f.CreatedAt\n            }).ToList();\n\n            _logger.LogInformation(\"📤 Returned {Count} auto-reply flows for business {BusinessId}\", results.Count, businessId);\n\n            return results;\n        }\n\n        public async Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _flowRepository.GetByIdAsync(flowId, businessId);\n            if (flow == null)\n            {\n                _logger.LogWarning(\"❌ No flow found for FlowId {FlowId} and BusinessId {BusinessId}\", flowId, businessId);\n                return null;\n            }\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flowId);\n\n            var mappedNodes = nodes.Select(n => new Dictionary<string, object>\n            {\n                [\"id\"] = n.Id,\n                [\"type\"] = n.NodeType,\n                [\"position\"] = new Dictionary<string, object>\n                {\n                    [\"x\"] = n.Position?.X ?? 0,\n                    [\"y\"] = n.Position?.Y ?? 0\n                },\n                [\"data\"] = new Dictionary<string, object>\n                {\n                    [\"label\"] = n.Label,\n                    [\"config\"] = string.IsNullOrEmpty(n.ConfigJson)\n                        ? null\n                        : JsonConvert.DeserializeObject<object>(n.ConfigJson)\n                }\n            }).ToList();\n\n            var mappedEdges = edges.Select(e => new Dictionary<string, object>\n            {\n                [\"id\"] = e.Id,\n                [\"source\"] = e.SourceNodeId,\n                [\"target\"] = e.TargetNodeId\n            }).ToList();\n\n            _logger.LogInformation(\"📤 Returning flow {FlowId} with {NodeCount} nodes and {EdgeCount} edges\", flow.Id, mappedNodes.Count, mappedEdges.Count);\n\n            return new SaveFlowDto\n            {\n                Id = flow.Id,\n                BusinessId = flow.BusinessId,\n                Name = flow.Name,\n                Nodes = JsonConvert.DeserializeObject<List<NodeDto>>(JsonConvert.SerializeObject(mappedNodes)),\n                Edges = JsonConvert.DeserializeObject<List<EdgeDto>>(JsonConvert.SerializeObject(mappedEdges)),\n                CreatedAt = flow.CreatedAt\n            };\n\n        }\n\n        public async Task<int> GetFlowCountForBusinessAsync(Guid businessId)\n        {\n            return await _flowRepository.GetFlowCountAsync(businessId);\n        }\n\n        public async Task<bool> RenameFlowAsync(Guid id, string newName)\n        {\n            return await _flowRepository.RenameFlowAsync(id, newName);\n        }\n        public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            return await _flowRepository.DeleteFlowAsync(id, businessId);\n        }\n        public async Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhone)\n        {\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, triggerKeyword);\n            if (flow == null) return;\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flow.Id);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flow.Id);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id, n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            var current = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            while (current != null)\n            {\n                switch (current.NodeType)\n                {\n                    case \"message\":\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(current.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = customerPhone,\n                            TextContent = msgCfg.Text\n                        });\n\n                        break;\n                    case \"template\":\n                        var tempCfg = JsonConvert.DeserializeObject<TemplateConfig>(current.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = customerPhone,\n                            TemplateName = tempCfg.TemplateName,\n                            TemplateParameters = tempCfg.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(current.ConfigJson);\n                        await Task.Delay(TimeSpan.FromSeconds(waitCfg.Seconds));\n                        break;\n\n                    case \"tag\":\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(current.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId, customerPhone, tagCfg.Tags);\n                        break;\n                }\n\n                var nextEdge = edgeMap.ContainsKey(current.Id.ToString())\n                     ? edgeMap[current.Id.ToString()].FirstOrDefault()\n                        : null;\n\n                if (nextEdge == null) break;\n\n                current = nodeMap.ContainsKey(Guid.Parse(nextEdge.TargetNodeId))\n                    ? nodeMap[Guid.Parse(nextEdge.TargetNodeId)]\n                    : null;\n\n            }\n        }\n        public async Task TriggerAutoReplyAsync(Guid businessId, string incomingText, string phone)\n        {\n            // Step 1: Find flow matching keyword\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, incomingText.ToLower());\n            if (flow == null) return;\n\n            // Step 2: Load flow nodes + edges\n            var nodes = await _flowRepository.GetStructuredNodesAsync(flow.Id);\n            var edges = await _flowRepository.GetStructuredEdgesAsync(flow.Id);\n\n            // Step 3: Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null) return;\n\n            var visited = new HashSet<string>();\n            var currentNodeId = startNode.Id.ToString();\n\n            while (!string.IsNullOrEmpty(currentNodeId) && !visited.Contains(currentNodeId))\n            {\n                visited.Add(currentNodeId);\n\n                var currentNode = nodes.FirstOrDefault(n => n.Id.ToString() == currentNodeId);\n                if (currentNode == null) break;\n\n                // Step 4: Handle current node\n                switch (currentNode.NodeType)\n                {\n                    case \"message\":\n                        var config = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = phone,\n                            TextContent = config.Text\n                        });\n                        break;\n\n                    case \"template\":\n                        var tpl = JsonConvert.DeserializeObject<TemplateConfig>(currentNode.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = phone,\n                            TemplateName = tpl.TemplateName,\n                            TemplateParameters = tpl.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitConfig = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitConfig.Seconds * 1000); // Can replace with async scheduling later\n                        break;\n\n                    case \"tag\":\n                        var tagConfig = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId,phone, tagConfig.Tags);\n                        break;\n\n                }\n\n                // Step 5: Find next node\n                var nextEdge = edges.FirstOrDefault(e => e.SourceNodeId == currentNodeId);\n                currentNodeId = nextEdge?.TargetNodeId;\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyRuntimeService.cs",
      "sha256": "f9e35069e50bbf3a57f0c5134ae99c32f604d94885000c29aacb8ddab0d00d94",
      "language": "csharp",
      "size": 26209,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Services;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.CRM.Interfaces;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyRuntimeService : IAutoReplyRuntimeService\n    {\n        private readonly IAutoReplyRepository _autoReplyRepo;\n        private readonly IAutoReplyFlowRepository _flowRepo;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyRuntimeService> _logger;\n        private readonly IContactService _contactService;\n        private readonly ITagService _tagService;\n        private readonly ITemplateMessageSender _templateSender;\n        public AutoReplyRuntimeService(\n            IAutoReplyRepository autoReplyRepo,\n            IAutoReplyFlowRepository flowRepo,\n            IMessageEngineService messageEngine,\n            AppDbContext context,\n            ILogger<AutoReplyRuntimeService> logger, IContactService contactService, ITagService tagService, ITemplateMessageSender templateSender)\n        {\n            _autoReplyRepo = autoReplyRepo;\n            _flowRepo = flowRepo;\n            _messageEngine = messageEngine;\n            _context = context;\n            _logger = logger;\n            _contactService = contactService;\n            _tagService = tagService;\n            _templateSender = templateSender;\n        }\n\n        public async Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string keyword, Guid contactId, string phone)\n        {\n            _logger.LogInformation(\"🔍 Auto-reply trigger: '{Keyword}' from {Phone}\", keyword, phone);\n\n            try\n            {\n                // 1️⃣ Try matching a flow by keyword\n                var flow = await _flowRepo.FindFlowByKeywordAsync(businessId, keyword);\n                if (flow != null)\n                {\n                    _logger.LogInformation(\"✅ Flow matched: {FlowName}\", flow.Name);\n                    await RunFlowAsync(flow.Id, businessId, contactId, phone, keyword, flow.Name);\n                    return true;\n                }\n\n                // 2️⃣ Fallback: Try matching auto-reply rule\n                var rule = await _autoReplyRepo.MatchByKeywordAsync(businessId, keyword);\n                if (rule != null)\n                {\n                    _logger.LogInformation(\"🔁 Fallback auto-reply triggered: {Rule}\", rule.TriggerKeyword);\n\n                    var messageDto = new TextMessageSendDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = phone,\n                        TextContent = rule.ReplyMessage\n                    };\n\n                    var result = await _messageEngine.SendTextDirectAsync(messageDto);\n\n                    await LogAutoReplyAsync(\n                        businessId,\n                        contactId,\n                        keyword,\n                        \"fallback\",\n                        rule.ReplyMessage,\n                        null,\n                        result?.LogId\n                    );\n\n                    return true;\n                }\n\n                _logger.LogWarning(\"❌ No flow or fallback rule matched for: {Keyword}\", keyword);\n                return false;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Error in TryRunAutoReplyFlowAsync\");\n                return false;\n            }\n        }\n\n        public async Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeDict = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeLookup = edges.GroupBy(e => e.SourceNodeId)\n                                  .ToDictionary(g => g.Key, g => g.ToList());\n\n            var currentNodeId = nodes.FirstOrDefault(n => n.NodeType == \"start\")?.Id.ToString();\n            if (string.IsNullOrEmpty(currentNodeId)) return;\n\n            // ✅ Ensure contact exists\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n\n            while (!string.IsNullOrEmpty(currentNodeId))\n            {\n                if (!nodeDict.TryGetValue(currentNodeId, out var node)) break;\n\n                _logger.LogInformation(\"⚙️ Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"start\":\n                            _logger.LogInformation(\"🚦 Start node reached: {NodeId}\", node.Id);\n\n                            // 🛑 If Start node contains buttons, STOP and wait for user interaction\n                            try\n                            {\n                                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(node.ConfigJson ?? \"{}\");\n                                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                                {\n                                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                                    if (buttons.Count > 0)\n                                    {\n                                        _logger.LogInformation(\"🛑 Start node has buttons – waiting for user interaction. Halting flow.\");\n                                        return;\n                                    }\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse start node config for button detection.\");\n                            }\n                            break;\n\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n\n                          \n                                try\n                                {\n                                    var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                    if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                    {\n                                        _logger.LogInformation(\"🛑 Template node has buttons – halting flow for user click.\");\n                                        return;\n                                    }\n                                }\n\n                            \n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            try\n                            {\n                                var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                                var delayMs = (waitCfg?.Seconds ?? 1) * 1000;\n                                _logger.LogInformation(\"⏳ Wait node delay: {Seconds}s\", waitCfg?.Seconds ?? 1);\n                                await Task.Delay(delayMs);\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse wait config for node {NodeId}\", node.Id);\n                            }\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Error while executing node {NodeId} of type {NodeType}\", node.Id, node.NodeType);\n                }\n\n                currentNodeId = edgeLookup.TryGetValue(currentNodeId, out var next)\n                    ? next.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n        private bool TryNodeHasButtons(string? configJson)\n        {\n            if (string.IsNullOrWhiteSpace(configJson)) return false;\n\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(configJson);\n                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                {\n                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                    return buttons.Count > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"⚠️ Failed to parse buttons from template config\");\n            }\n\n            return false;\n        }\n\n        private async Task LogAutoReplyAsync(Guid businessId, Guid contactId, string keyword, string type, string replyText, string? flowName, Guid? messageLogId)\n        {\n            var log = new AutoReplyLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contactId,\n                TriggerKeyword = keyword,\n                TriggerType = type,\n                ReplyContent = replyText,\n                FlowName = flowName,\n                MessageLogId = messageLogId,\n                TriggeredAt = DateTime.UtcNow\n            };\n\n            _context.AutoReplyLogs.Add(log);\n            await _context.SaveChangesAsync();\n        }\n\n\n        //    private async Task ExecuteTemplateNodeAsync(\n        //    AutoReplyFlowNode node,\n        //    Guid businessId,\n        //    Guid contactId,\n        //    string phone,\n        //    string keyword,\n        //    string? flowName)\n        //    {\n        //        _logger.LogInformation(\"🧠 Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n        //        TemplateConfig? tmpl;\n        //        try\n        //        {\n        //            tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            _logger.LogError(ex, \"❌ Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n        //            return;\n        //        }\n\n        //        if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n        //        {\n        //            _logger.LogWarning(\"❌ Template node config is missing or invalid.\");\n        //            return;\n        //        }\n\n        //        var contact = await _context.Contacts\n        //            .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"❌ Contact not found for AutoReply.\");\n        //            return;\n        //        }\n\n        //        //var buttons = tmpl.MultiButtons?.Select(b => new CampaignButton\n        //        //{\n        //        //    Title = b.ButtonText,\n        //        //    Type = b.ButtonType,\n        //        //    Value = b.TargetUrl\n        //        //}).ToList();\n        //        var buttons = tmpl.MultiButtons?\n        //.Where(b => !string.IsNullOrWhiteSpace(b.ButtonText)) // ✅ Avoid empty\n        //.Select((b, idx) => new\n        //{\n        //    type = \"button\",\n        //    sub_type = b.ButtonType.ToLowerInvariant(), // must be 'quick_reply' or 'url'\n        //    index = idx.ToString(),\n        //    parameters = new List<object>\n        //    {\n        //        new {\n        //            type = \"text\",\n        //            text = b.ButtonText\n        //        }\n        //    }\n        //}).ToList();\n\n        //        var response = await _templateSender.SendTemplateMessageToContactAsync(\n        //            businessId: businessId,\n        //            contact: contact,\n        //            templateName: tmpl.TemplateName,\n        //            templateParams: tmpl.Placeholders ?? new List<string>(),\n        //            imageUrl: tmpl.ImageUrl,\n        //            buttons: buttons,\n        //            source: \"auto_reply\",\n        //            refMessageId: null\n        //        );\n\n        //        await LogAutoReplyAsync(\n        //            businessId,\n        //            contactId,\n        //            keyword,\n        //            \"flow\",\n        //            $\"Template: {tmpl.TemplateName}\",\n        //            flowName,\n        //            response.LogId\n        //        );\n        //    }\n\n\n        private async Task ExecuteTemplateNodeAsync(\n    AutoReplyFlowNode node,\n    Guid businessId,\n    Guid contactId,\n    string phone,\n    string keyword,\n    string? flowName)\n        {\n            _logger.LogInformation(\"🧠 Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n            TemplateConfig? tmpl;\n            try\n            {\n                tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n            {\n                _logger.LogWarning(\"❌ Template node config is missing or invalid.\");\n                return;\n            }\n\n            var contact = await _context.Contacts\n                .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n            if (contact == null)\n            {\n                _logger.LogWarning(\"❌ Contact not found for AutoReply.\");\n                return;\n            }\n\n            var buttons = tmpl.MultiButtons?\n                .Where(b => !string.IsNullOrWhiteSpace(b.ButtonText))\n                .Select(b => new CampaignButton\n                {\n                    Title = b.ButtonText,\n                    Type = b.ButtonType,\n                    Value = b.TargetUrl\n                })\n                .ToList();\n\n            var response = await _templateSender.SendTemplateMessageToContactAsync(\n                businessId: businessId,\n                contact: contact,\n                templateName: tmpl.TemplateName,\n                templateParams: tmpl.Placeholders ?? new List<string>(),\n                imageUrl: tmpl.ImageUrl,\n                buttons: buttons,\n                source: \"auto_reply\",\n                refMessageId: null\n            );\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                $\"Template: {tmpl.TemplateName}\",\n                flowName,\n                response.LogId\n            );\n        }\n\n        private async Task ExecuteMessageNodeAsync( AutoReplyFlowNode node, Guid businessId, Guid contactId,string phone, string keyword, string? flowName)\n        {\n            _logger.LogInformation(\"🧠 Raw config JSON for message node: {Json}\", node.ConfigJson);\n\n            MessageConfig? config = null;\n            try\n            {\n                config = JsonConvert.DeserializeObject<MessageConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to parse config for message node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (config == null || string.IsNullOrWhiteSpace(config.Text))\n            {\n                _logger.LogWarning(\"⚠️ Message node config missing or empty.\");\n                return;\n            }\n\n            var result = await _messageEngine.SendTextDirectAsync(new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                RecipientNumber = phone,\n                TextContent = config.Text\n            });\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                config.Text,\n                flowName,\n                result?.LogId\n            );\n        }\n        private async Task ExecuteTagNodeAsync(Guid businessId, Guid contactId, AutoReplyFlowNode node)\n        {\n            if (node == null || string.IsNullOrWhiteSpace(node.ConfigJson))\n                return;\n\n            try\n            {\n                var config = System.Text.Json.JsonSerializer.Deserialize<TagNodeConfig>(node.ConfigJson);\n\n                if (config?.Tags != null && config.Tags.Any())\n                {\n                    // ✅ Load contact from DB\n                    var contact = await _context.Contacts.FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n                    if (contact == null)\n                    {\n                        _logger.LogWarning(\"⚠️ TagNode: Contact not found for {ContactId}\", contactId);\n                        return;\n                    }\n\n                    await _tagService.AssignTagsAsync(businessId, contact.PhoneNumber, config.Tags);\n                    _logger.LogInformation(\"✅ TagNode: Tags [{Tags}] assigned to contact {Phone}\", string.Join(\", \", config.Tags), contact.PhoneNumber);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ TagNode: Failed to execute for contact {ContactId}\", contactId);\n            }\n        }\n\n        public async Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null)\n        {\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n            if (contact == null)\n            {\n                _logger.LogWarning(\"❌ Contact not found or could not be created for phone: {Phone}\", phone);\n                return;\n            }\n\n            _logger.LogInformation(\"📩 Button clicked: '{ButtonText}' by {Phone}\", buttonText, phone);\n\n            var flows = await _flowRepo.GetAllByBusinessIdAsync(businessId);\n            if (flows == null || !flows.Any())\n            {\n                _logger.LogInformation(\"📭 No flows found for business {BusinessId}\", businessId);\n                return;\n            }\n\n            foreach (var flow in flows)\n            {\n                var nodes = await _flowRepo.GetNodesByFlowIdAsync(flow.Id);\n                var edges = await _flowRepo.GetEdgesByFlowIdAsync(flow.Id);\n\n                var matchedStartNode = nodes\n                    .Where(n => n.NodeType == \"start\")\n                    .FirstOrDefault(n =>\n                    {\n                        try\n                        {\n                            var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(n.ConfigJson ?? \"{}\");\n\n                            if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                            {\n                                var keywordArray = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n\n                                return keywordArray.Any(k =>\n                                    string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                            }\n\n                            return false;\n                        }\n                        catch\n                        {\n                            return false;\n                        }\n                    });\n\n                if (matchedStartNode != null)\n                {\n                    _logger.LogInformation(\"✅ Matched flow {FlowName} by button '{ButtonText}'\", flow.Name, buttonText);\n                   // await RunFlowAsync(flow.Id, businessId, contact.Id, phone, buttonText, flow.Name);\n                  await RunFlowFromButtonAsync(flow.Id, businessId, contact.Id, phone, buttonText);\n                    return;\n                }\n            }\n\n            _logger.LogInformation(\"❌ No flow matched for button: {ButtonText}\", buttonText);\n        }\n        public async Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            // 🟢 1. Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null)\n            {\n                _logger.LogWarning(\"❌ No start node found in flow {FlowId}\", flowId);\n                return;\n            }\n\n            // 🔍 2. Find button index from triggerKeywords\n            int matchedIndex = -1;\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(startNode.ConfigJson ?? \"{}\");\n\n                if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                {\n                    var keywordList = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n                    matchedIndex = keywordList.FindIndex(k =>\n                        string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to parse Start node config\");\n                return;\n            }\n\n            if (matchedIndex < 0)\n            {\n                _logger.LogWarning(\"❌ No trigger match for buttonText '{Button}'\", buttonText);\n                return;\n            }\n\n            // ✅ 3. Lookup edge from StartNode using SourceHandle = button-{index}\n            var nextNodeId = edgeMap.TryGetValue(startNode.Id.ToString(), out var list)\n                ? list.FirstOrDefault(e => e.SourceHandle == $\"button-{matchedIndex}\")?.TargetNodeId\n                : null;\n\n            if (string.IsNullOrEmpty(nextNodeId))\n            {\n                _logger.LogWarning(\"❌ No outgoing edge found for button index {Index}\", matchedIndex);\n                return;\n            }\n\n            var visited = new HashSet<string>();\n\n            while (!string.IsNullOrEmpty(nextNodeId) && !visited.Contains(nextNodeId))\n            {\n                visited.Add(nextNodeId);\n\n                if (!nodeMap.TryGetValue(nextNodeId, out var node))\n                    break;\n\n                _logger.LogInformation(\"⚙️ Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, buttonText, null);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, buttonText, null);\n\n                            // ✅ Check buttons and halt if any button exists\n                            try\n                            {\n                                var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                {\n                                    _logger.LogInformation(\"🛑 Template node has buttons – halting flow for user click.\");\n                                    return;\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                            await Task.Delay((waitCfg?.Seconds ?? 1) * 1000);\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Error executing node {NodeId}\", node.Id);\n                }\n\n                nextNodeId = edgeMap.TryGetValue(nextNodeId, out var nextList)\n                    ? nextList.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyService.cs",
      "sha256": "df6edf428cebc4dc2d292bef7eb4e47f8cdcbe402b71d79ff9e6ae300502cf70",
      "language": "csharp",
      "size": 3226,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyService : IAutoReplyService\n    {\n        private readonly IAutoReplyRepository _repository;\n\n        public AutoReplyService(IAutoReplyRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var model = new AutoReplyRule\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                TriggerKeyword = dto.TriggerKeyword,\n                ReplyMessage = dto.ReplyMessage,\n                MediaUrl = dto.MediaUrl,\n                Priority = dto.Priority,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var saved = await _repository.AddAsync(model);\n\n            return ToDto(saved);\n        }\n\n        public async Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId)\n        {\n            var rules = await _repository.GetAllByBusinessIdAsync(businessId);\n            return rules.Select(ToDto);\n        }\n\n        public async Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await _repository.GetByIdAsync(ruleId, businessId);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        public async Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var existing = await _repository.GetByIdAsync(dto.Id!.Value, businessId);\n            if (existing == null) return false;\n\n            existing.TriggerKeyword = dto.TriggerKeyword;\n            existing.ReplyMessage = dto.ReplyMessage;\n            existing.MediaUrl = dto.MediaUrl;\n            existing.Priority = dto.Priority;\n            existing.IsActive = dto.IsActive;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            return await _repository.UpdateAsync(existing);\n        }\n\n        public async Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId)\n        {\n            return await _repository.DeleteAsync(ruleId, businessId);\n        }\n\n        public async Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            var rule = await _repository.MatchByKeywordAsync(businessId, incomingMessage);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        private AutoReplyRuleDto ToDto(AutoReplyRule rule)\n        {\n            return new AutoReplyRuleDto\n            {\n                Id = rule.Id,\n                TriggerKeyword = rule.TriggerKeyword,\n                ReplyMessage = rule.ReplyMessage,\n                MediaUrl = rule.MediaUrl,\n                Priority = rule.Priority,\n                IsActive = rule.IsActive,\n                CreatedAt = rule.CreatedAt,\n                UpdatedAt = rule.UpdatedAt\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/FlowRunner.cs",
      "sha256": "d8c0004b19eb4964915bcf51a0ecdadf6dc89cfe50220970befa0fe58a5d4307",
      "language": "csharp",
      "size": 103,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class FlowRunner\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyFlowService.cs",
      "sha256": "dfa67a436f77fb405478dfff58668d94aaed35d2e14d087bffd2fa6eb5b0112b",
      "language": "csharp",
      "size": 721,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public interface IAutoReplyFlowService\n    {\n        Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId);\n        Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId);\n        Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n        Task<int> GetFlowCountForBusinessAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhoneNumber);\n\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyRuntimeService.cs",
      "sha256": "444b22549b3c870a3e8cef485bfbf318b5c82a42194255e035be52e27262d4e9",
      "language": "csharp",
      "size": 646,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyRuntimeService\n    {\n        Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string messageText, Guid contactId, string phoneNumber);\n        Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName);\n        Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null);\n        Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText);\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyService.cs",
      "sha256": "b2816300ae56acd5368c993c2bccc75ff481290ca8379e745ac361e2d27e620f",
      "language": "csharp",
      "size": 763,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyService\n    {\n        Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId);\n        Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId);\n\n        // For runtime matching\n        Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IFlowRunner.cs",
      "sha256": "11438f4864857ba65f652f4ed62baf47119c77fcd6933106db70602675dce48b",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class IFlowRunner\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyTemplates/Restaurant/Configs/MenuNodeConfig.cs",
      "sha256": "f20da12fb12eed3191a2998cb2e7a7dbc65b03bfcb571cf1b6a413f52d78d42a",
      "language": "csharp",
      "size": 527,
      "content": "namespace xbytechat.api.Features.AutoReplyTemplates.Restaurant.Configs\n{\n    public class MenuNodeConfig\n    {\n        public string MenuTitle { get; set; } = string.Empty;         // e.g., \"Today's Specials\"\n        public string Description { get; set; } = string.Empty;       // e.g., \"Lunch combos starting at ₹199\"\n        public string MenuImageUrl { get; set; } = string.Empty;      // CDN or public link\n        public string MenuDownloadUrl { get; set; } = string.Empty;   // PDF link or product catalog URL\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Controllers/BusinessesController.cs",
      "sha256": "c52f56f9044f3f1ebffdd162a172dfba6ba4632df54e60016adab111f526940b",
      "language": "csharp",
      "size": 6018,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Helpers;\nusing Serilog;\nusing System.Security.Claims;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.BusinessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BusinessesController : ControllerBase\n    {\n        private readonly IBusinessService _businessService;\n\n        public BusinessesController(IBusinessService businessService)\n        {\n            _businessService = businessService;\n        }\n\n \n\n        [HttpGet(\"pending\")]\n        public async Task<IActionResult> GetPendingBusinesses()\n        {\n            try\n            {\n                var role = HttpContext.User.Claims\n                    .FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;\n                var userId = HttpContext.User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value ?? \"\";\n\n                if (!new[] { \"admin\", \"superadmin\", \"partner\" }.Contains(role))\n                {\n                    return StatusCode(403, ResponseResult.ErrorInfo(\"⛔ Access denied: You are not authorized to view pending businesses.\"));\n                }\n\n                var result = await _businessService.GetPendingBusinessesAsync(role, userId);\n\n                return Ok(ResponseResult.SuccessInfo(\"✅ Pending businesses fetched successfully.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to fetch pending businesses. Please try again later.\"));\n            }\n        }\n\n\n        // ✅ Get business by ID (used for profile completion)\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetBusinessById(Guid id)\n        {\n            try\n            {\n                var business = await _businessService.GetByIdAsync(id);\n                if (business == null)\n                    return NotFound(ResponseResult.ErrorInfo(\"❌ Business not found.\"));\n\n                return Ok(business);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"🚨 Failed to fetch business. \" + ex.Message));\n            }\n        }\n\n        [HttpPut(\"assigned-to/{id}\")]\n        public async Task<IActionResult> UpdateBusiness(Guid id, [FromBody] Business business)\n        {\n            if (id != business.Id)\n            {\n                return BadRequest(new { message = \"❌ ID mismatch.\" });\n            }\n\n            var result = await _businessService.UpdateBusinessAsync(business);\n            if (!result.Success)\n            {\n                return BadRequest(result);\n            }\n\n            return Ok(result);\n        }\n\n\n        // 🟢 Approve a business\n        [HttpPost(\"approve/{id}\")]\n        public async Task<IActionResult> Approve(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.ApproveBusinessAsync(id);\n\n                if (result.Success)\n                {\n                    // ✅ Optional Success Logging\n                    Log.Information(\"✅ Business approved successfully. BusinessId: {BusinessId}\", id);\n                    return Ok(result);\n                }\n                else\n                {\n                    // ✅ Optional Warning Logging\n                    Log.Warning(\"⚠️ Business approval failed. BusinessId: {BusinessId} - Message: {Message}\", id, result.Message);\n                    return BadRequest(result);\n                }\n            }\n            catch (Exception ex)\n            {\n                // ✅ Proper Error Logging\n                Log.Error(ex, \"❌ Exception occurred while approving business. BusinessId: {BusinessId}\", id);\n\n                return StatusCode(500, ResponseResult.ErrorInfo(\n                    \"❌ Something went wrong while approving business. Please try again later.\"\n                ));\n            }\n        }\n\n\n        // 🔴 Reject a business\n        [HttpPost(\"reject/{id}\")]\n        public async Task<IActionResult> Reject(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.RejectBusinessAsync(id);\n                return result.Success ? Ok(result) : NotFound(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to reject business. \" + ex.Message));\n            }\n        }\n\n        // 🟡 Put a business on hold\n        [HttpPost(\"hold/{id}\")]\n        public async Task<IActionResult> Hold(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.HoldBusinessAsync(id);\n                return result.Success ? Ok(result) : NotFound(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to hold business. \" + ex.Message));\n            }\n        }\n\n        // 🛠 Complete profile after signup\n        [HttpPost(\"profile-completion/{businessId}\")]\n        public async Task<IActionResult> CompleteProfile(Guid businessId, [FromBody] ProfileCompletionDto dto)\n        {\n            try\n            {\n                var result = await _businessService.CompleteProfileAsync(businessId, dto);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to update profile. \" + ex.Message));\n            }\n        }\n\n        [HttpGet(\"approved\")]\n        [Authorize(Roles = \"SuperAdmin\")]\n        public async Task<IActionResult> GetApprovedBusinesses()\n        {\n            var result = await _businessService.GetApprovedBusinessesAsync();\n            return Ok(result);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/DTOs/PendingBusinessDto.cs",
      "sha256": "262c7390254b692bef62525ec48c34eb502354e446d2e98e77586b32f640f2be",
      "language": "csharp",
      "size": 482,
      "content": "namespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class PendingBusinessDto\n    {\n        public Guid BusinessId { get; set; }\n        public string CompanyName { get; set; }\n        public string BusinessEmail { get; set; }\n        public string? RepresentativeName { get; set; }\n        public string? Phone { get; set; }\n        public string Plan { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public bool? IsApproved { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/DTOs/ProfileCompletionDto.cs",
      "sha256": "cbd238cd045c0ee7bfc5061311058fa84005f29244727a11ef5b7a6eedbcf64f",
      "language": "csharp",
      "size": 489,
      "content": "namespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class ProfileCompletionDto\n    {\n        public string? BusinessName { get; set; }\n        public string? ReperesentativeName { get; set; }\n        public string? CompanyPhone { get; set; }\n        public string? Phone { get; set; }\n        public string? Website { get; set; }\n        public string? Address { get; set; }\n        public string? Industry { get; set; }\n        public string? LogoUrl { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/DTOs/SignupBusinessDto.cs",
      "sha256": "daebace2d54e91a96825decc469c8acd57822d3e74bd5271ca80792e36cbb30e",
      "language": "csharp",
      "size": 717,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class SignupBusinessDto\n    {\n        [Required]\n        public string CompanyName { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string Password { get; set; }\n\n        public string? RepresentativeName { get; set; }\n\n        public string? Phone { get; set; }\n        public string RoleName { get; set; } = \"business\"; // Default to business role\n\n        // 🆕 NEW FIELD (Internal use only)\n        public Guid? CreatedByPartnerId { get; set; } // to assign the business to a specific user/agent/partner}\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Models/Business.cs",
      "sha256": "995f4839eaaa565942a45a28b5837718276c1fa8acf1b1b746de07dcd0d07ea5",
      "language": "csharp",
      "size": 2832,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.BusinessModule.Models\n{\n    public class Business\n    {\n        public Guid Id { get; set; }\n\n        // 🏢 Basic Info\n        public string? CompanyName { get; set; }\n        public string BusinessName { get; set; }\n        public string BusinessEmail { get; set; }  // Not used for login, just business contact\n        public string? RepresentativeName { get; set; }\n\n        public Guid? CreatedByPartnerId { get; set; }\n        public string? Phone { get; set; }\n        public string? CompanyPhone { get; set; }\n        public string? Website { get; set; }\n        public string? Address { get; set; }\n        public string? Industry { get; set; }\n        public string? LogoUrl { get; set; }\n\n        // 📦 SaaS Plan & Status using Enums\n        // public enum PlanType { Basic, Smart, Advanced } -- moved to bisinessinfo\n        // public PlanType Plan { get; set; } = PlanType.Basic;  // moved to bisinessinfo\n        public enum StatusType { Pending, Approved, Rejected }\n        public StatusType Status { get; set; } = StatusType.Pending;  // Default to Pending\n\n        // 📝 Metadata\n        public string? Tags { get; set; }\n        public string? Source { get; set; }\n        public string? Notes { get; set; }\n\n        // 📅 Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n        public bool IsApproved { get; set; } = false;\n        public string? ApprovedBy { get; set; }\n        public DateTime? ApprovedAt { get; set; }\n        public DateTime? LastLoginAt { get; set; }\n\n        // 🗑 Soft Deletion\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // 👥 Navigation Property - List of Users (nullable if no users)\n        public List<User> Users { get; set; } = new();\n\n\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n        public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n        // 🔗 Plan Info linked\n\n        /// This is a one-to-one relationship with BusinessPlanInfo\n        public BusinessPlanInfo? BusinessPlanInfo { get; set; }\n\n        public Guid? PlanId { get; set; } // Nullable in case no plan is assigned yet\n        public Plan? Plan { get; set; }   // Navigation property to the Plan entity\n\n        public WhatsAppSettingEntity WhatsAppSettings { get; set; }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Services/BusinessService.cs",
      "sha256": "a5ceba39eb2d4c79822b04180b564b268fc5ed58c58f9e85c968cbd5b5d7d5a0",
      "language": "csharp",
      "size": 14968,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Cryptography;\nusing System.Text;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Features.BusinessModule.Services\n{\n    public class BusinessService : IBusinessService\n    {\n        private readonly IGenericRepository<Business> _businessRepo;\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<Role> _roleRepo;\n        private readonly IAuditLogService _auditLogService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public BusinessService(\n            IGenericRepository<Business> businessRepo,\n            IGenericRepository<User> userRepo,\n            IGenericRepository<Role> roleRepo,\n            IAuditLogService auditLogService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _businessRepo = businessRepo;\n            _userRepo = userRepo;\n            _roleRepo = roleRepo;\n            _auditLogService = auditLogService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<ResponseResult> SignupBusinessAsync(SignupBusinessDto dto)\n        {\n            var normalizedEmail = dto.Email.Trim().ToLower();\n            var existing = await _userRepo.FirstOrDefaultAsync(u => u.Email == normalizedEmail);\n            if (existing != null)\n                return ResponseResult.ErrorInfo(\"❌ Email already exists\");\n\n            var business = new Business\n            {\n                Id = Guid.NewGuid(),\n                CompanyName = dto.CompanyName,\n                BusinessName = dto.CompanyName,\n                BusinessEmail = normalizedEmail,\n                RepresentativeName = dto.RepresentativeName,\n                Phone = dto.Phone,\n                Status = Business.StatusType.Pending,\n                // Plan = PlanType.Basic,\n                IsApproved = false,\n                CreatedAt = DateTime.UtcNow\n            };\n            // STEP 2: Create Plan Info separately\n            var planInfo = new BusinessPlanInfo\n            {\n                BusinessId = business.Id,\n                Plan = PlanType.Basic,\n                TotalMonthlyQuota = 1000,\n                RemainingMessages = 1000,\n                QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                WalletBalance = 0\n            };\n            // STEP 3: Link them\n            business.BusinessPlanInfo = planInfo;\n            // STEP 4: Save both\n            await _businessRepo.AddAsync(business);\n            await _businessRepo.SaveAsync();\n\n            var role = await _roleRepo.FirstOrDefaultAsync(r => r.Name.ToLower() == dto.RoleName.Trim().ToLower());\n\n            if (role == null)\n                return ResponseResult.ErrorInfo(\"❌ Invalid role specified\");\n\n            var user = new User\n            {\n                Id = Guid.NewGuid(),\n                Name = dto.CompanyName,\n                Email = normalizedEmail,\n                PasswordHash = HashPassword(dto.Password),\n                Role = role,\n                Status = \"Pending\",\n                BusinessId = business.Id\n            };\n\n            await _userRepo.AddAsync(user);\n            await _userRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = user.Id,\n                PerformedByUserName = user.Name,\n                RoleAtTime = \"business\",\n                ActionType = \"business.signup\",\n                Description = $\"New business signup: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"✅ Signup successful. Pending approval.\", new { BusinessId = business.Id });\n        }\n\n        public async Task<ResponseResult> UpdateBusinessAsync(Business business)\n        {\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"❌ Invalid business object provided.\");\n\n            try\n            {\n                _businessRepo.Update(business);\n                await _businessRepo.SaveAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Business updated successfully.\");\n            }\n            catch (Exception ex)\n            {\n                // 🚨 Catch any unexpected error\n                return ResponseResult.ErrorInfo(\"❌ Failed to update business: \" + ex.Message);\n            }\n        }\n      \n        public async Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(role))\n                {\n                    // 🔴 Invalid session or token\n                    return new List<PendingBusinessDto>();\n                }\n\n                if (!Guid.TryParse(userId, out var currentGuid))\n                {\n                    // 🔴 Bad ID format\n                    return new List<PendingBusinessDto>();\n                }\n\n                IQueryable<Business> query = _businessRepo.AsQueryable()\n                    .Where(b => b.Status == Business.StatusType.Pending && !b.IsDeleted);\n\n                if (role == \"partner\")\n                {\n                    query = query.Where(b => b.CreatedByPartnerId == currentGuid);\n                }\n\n                var pending = await query.ToListAsync();\n\n                return pending.Select(b => new PendingBusinessDto\n                {\n                    BusinessId = b.Id,\n                    CompanyName = b.CompanyName ?? \"\",\n                    BusinessEmail = b.BusinessEmail ?? \"\",\n                    RepresentativeName = b.RepresentativeName ?? \"\",\n                    Phone = b.Phone ?? \"\",\n                    //Plan = b.Plan.ToString(),\n                    Plan = b.BusinessPlanInfo?.Plan.ToString() ?? \"Unknown\",\n\n                    CreatedAt = b.CreatedAt,\n                    IsApproved = b.IsApproved\n                }).ToList();\n            }\n            catch (Exception ex)\n            {\n                return new List<PendingBusinessDto>();\n            }\n        }\n\n        public async Task<ResponseResult> ApproveBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo\n                .AsQueryable()\n                .Include(b => b.Users)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found.\");\n\n            // ✅ Current Logged-in User Details\n            var httpContext = _httpContextAccessor.HttpContext;\n            var currentUserId = httpContext?.User?.FindFirst(\"id\")?.Value;\n            var currentUserRole = httpContext?.User?.Claims\n    .FirstOrDefault(c => c.Type.Contains(\"role\"))?.Value;\n            //httpContext?.User?.FindFirst(\"role\")?.Value;\n\n            // var currentUserName = httpContext?.User?.FindFirst(\"name\")?.Value ?? \"Unknown\";\n            var currentUserName = httpContext?.User?.Claims\n    .FirstOrDefault(c => c.Type.Contains(\"name\"))?.Value ?? \"Unknown\";\n            if (string.IsNullOrEmpty(currentUserId) || string.IsNullOrEmpty(currentUserRole))\n                return ResponseResult.ErrorInfo(\"❌ Unauthorized access. Please login again.\");\n\n            var currentGuid = Guid.Parse(currentUserId);\n\n            // ✅ Authorization Logic\n            var isSuperAdmin = currentUserRole.Equals(\"admin\", StringComparison.OrdinalIgnoreCase) ||\n                               currentUserRole.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase);\n\n            var isAssignedPartner = business.CreatedByPartnerId.HasValue &&\n                                     business.CreatedByPartnerId.Value == currentGuid;\n\n            if (!isSuperAdmin && !isAssignedPartner)\n            {\n                return ResponseResult.ErrorInfo(\"⛔ You are not authorized to approve this business.\");\n            }\n\n            // ✅ Approve Business\n            business.IsApproved = true;\n            business.Status = Business.StatusType.Approved;\n            business.ApprovedAt = DateTime.UtcNow;\n            business.ApprovedBy = currentUserName;\n\n            _businessRepo.Update(business);\n\n            // ✅ Update all Users to \"ProfilePending\"\n            foreach (var user in business.Users)\n            {\n                user.Status = \"ProfilePending\";\n                _userRepo.Update(user);\n            }\n\n            await _businessRepo.SaveAsync();\n            await _userRepo.SaveAsync();\n\n            // ✅ Audit Log\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = currentGuid,\n                PerformedByUserName = currentUserName,\n                RoleAtTime = currentUserRole,\n                ActionType = \"business.approved\",\n                Description = $\"Business approved: {business.CompanyName}\",\n                IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"✅ Business approved successfully.\");\n        }\n\n        public async Task<ResponseResult> RejectBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found\");\n\n            business.Status = Business.StatusType.Rejected;\n            business.IsDeleted = true;\n            business.DeletedAt = DateTime.UtcNow;\n\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = Guid.TryParse(_httpContextAccessor.HttpContext?.User?.FindFirst(\"id\")?.Value, out var userId) ? userId : Guid.Empty,\n                PerformedByUserName = _httpContextAccessor.HttpContext?.User?.FindFirst(\"email\")?.Value,\n                RoleAtTime = _httpContextAccessor.HttpContext?.User?.FindFirst(\"role\")?.Value,\n                ActionType = \"business.rejected\",\n                Description = $\"Business rejected: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"✅ Business rejected and marked as deleted\");\n        }\n\n        public async Task<ResponseResult> HoldBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found\");\n\n            business.IsApproved = false;\n            business.Status = Business.StatusType.Pending;\n\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = Guid.TryParse(_httpContextAccessor.HttpContext?.User?.FindFirst(\"id\")?.Value, out var userId) ? userId : Guid.Empty,\n                PerformedByUserName = _httpContextAccessor.HttpContext?.User?.FindFirst(\"email\")?.Value,\n                RoleAtTime = _httpContextAccessor.HttpContext?.User?.FindFirst(\"role\")?.Value,\n                ActionType = \"business.hold\",\n                Description = $\"Business put on hold: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"⏸ Business put on hold\");\n        }\n\n        public async Task<ResponseResult> CompleteProfileAsync(Guid businessId, ProfileCompletionDto dto)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found\");\n\n            if (!string.IsNullOrEmpty(dto.BusinessName)) business.BusinessName = dto.BusinessName;\n            if (!string.IsNullOrEmpty(dto.CompanyPhone)) business.CompanyPhone = dto.CompanyPhone;\n            if (!string.IsNullOrEmpty(dto.Website)) business.Website = dto.Website;\n            if (!string.IsNullOrEmpty(dto.Address)) business.Address = dto.Address;\n            if (!string.IsNullOrEmpty(dto.Industry)) business.Industry = dto.Industry;\n            if (!string.IsNullOrEmpty(dto.LogoUrl)) business.LogoUrl = dto.LogoUrl;\n            if (!string.IsNullOrEmpty(dto.ReperesentativeName)) business.RepresentativeName = dto.ReperesentativeName;\n            if (!string.IsNullOrEmpty(dto.Phone)) business.Phone = dto.Phone;\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n            return ResponseResult.SuccessInfo(\"✅ Profile updated successfully\");\n        }\n\n        public async Task<Business?> GetBusinessByEmailAsync(string email)\n        {\n            return await _businessRepo.FirstOrDefaultAsync(b => b.BusinessEmail.ToLower() == email.Trim().ToLower());\n        }\n\n        private string HashPassword(string password)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n\n        public async Task<Business?> GetByIdAsync(Guid businessId)\n        {\n            return await _businessRepo.FindByIdAsync(businessId);\n        }\n\n        public async Task<List<Business>> GetApprovedBusinessesAsync()\n        {\n            return await _businessRepo.AsQueryable()\n               .Where(b => b.IsApproved && !b.IsDeleted)\n               .OrderBy(b => b.CompanyName)\n               .ToListAsync();\n        }\n        public IQueryable<Business> Query()\n        {\n            return _businessRepo.AsQueryable();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/BusinessModule/Services/IBusinessService.cs",
      "sha256": "5205ee768b8669a55cd022a8bec1e88cabbc330f576d4532922b1e43378461ed",
      "language": "csharp",
      "size": 1180,
      "content": "using System.Runtime.CompilerServices;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nnamespace xbytechat.api.Features.BusinessModule.Services\n{\n\n    public interface IBusinessService\n    {\n        IQueryable<Business> Query();\n        Task<ResponseResult> SignupBusinessAsync(SignupBusinessDto dto); /// Signup + create admin user\n\n        Task<ResponseResult> ApproveBusinessAsync(Guid businessId);      // Admin action\n        Task<ResponseResult> RejectBusinessAsync(Guid businessId);       // Admin action\n        Task<ResponseResult> HoldBusinessAsync(Guid businessId);         // Admin action\n        Task<ResponseResult> CompleteProfileAsync(Guid businessId, ProfileCompletionDto dto); // Post-login completion\n        Task<Business?> GetBusinessByEmailAsync(string email);\n        Task<Business?> GetByIdAsync(Guid businessId);\n        Task<ResponseResult> UpdateBusinessAsync(Business business);\n        Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId);\n        Task<List<Business>> GetApprovedBusinessesAsync();\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignController.cs",
      "sha256": "7c8049bda65a4bdfec05f78a7990ef02375d77b5b738d9763dd787f27474e7c0",
      "language": "csharp",
      "size": 13243,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignController : ControllerBase\n    {\n        private readonly ICampaignService _campaignService;\n        private readonly IBusinessService _businessService;\n        private readonly IMessageEngineService _messageService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CampaignController(\n            ICampaignService campaignService,\n            IBusinessService businessService,\n            IMessageEngineService messageEngineService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _campaignService = campaignService;\n            _businessService = businessService;\n            _messageService = messageEngineService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        [HttpGet(\"get-image-campaign\")]\n        public async Task<IActionResult> GetAll([FromQuery] string? type)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetAllCampaignsAsync(businessId, type);\n            return Ok(result);\n        }\n\n        [HttpGet(\"paginated\")]\n        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);\n            return Ok(result);\n        }\n\n        [HttpGet(\"debug-claims\")]\n        public IActionResult DebugClaims()\n        {\n            var user = HttpContext.User;\n            var businessId = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new\n            {\n                name = user.Identity?.Name,\n                businessId\n            });\n        }\n\n        [HttpPost(\"create-text-campaign\")]\n        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out var businessId))\n                    return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n                var createdBy = User.Identity?.Name ?? \"system\";\n\n                if (string.IsNullOrWhiteSpace(dto.Name))\n                    return BadRequest(new { message = \"🚫 Campaign name is required.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateId))\n                    return BadRequest(new { message = \"🚫 TemplateId is required for template campaigns.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))\n                    return BadRequest(new { message = \"🚫 Message template content is required.\" });\n\n                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);\n\n                return campaignId != null\n                    ? Ok(new\n                    {\n                        success = true,\n                        message = \"✅ Campaign created successfully\",\n                        campaignId = campaignId.Value\n                    })\n                    : BadRequest(new { success = false, message = \"❌ Failed to create campaign\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception in CreateTextCampaign\");\n                return StatusCode(500, new { message = \"🚨 Internal server error\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"create-image-campaign\")]\n        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var user = HttpContext.User;\n                var businessIdClaim = user.FindFirst(\"businessId\");\n\n                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                    return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var allowedTypes = new[] { \"url\", \"copy_code\", \"flow\", \"phone_number\", \"quick_reply\" };\n                    foreach (var button in dto.MultiButtons)\n                    {\n                        var type = button.ButtonType?.Trim().ToLower();\n\n                        if (!allowedTypes.Contains(type))\n                            return BadRequest(new { message = $\"❌ Invalid ButtonType: '{type}' is not supported.\" });\n\n                        var needsValue = new[] { \"url\", \"flow\", \"copy_code\", \"phone_number\" };\n                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))\n                            return BadRequest(new { message = $\"❌ Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'.\" });\n\n                        if (button.TargetUrl?.ToLower() == \"unknown\")\n                            return BadRequest(new { message = $\"❌ Invalid value 'unknown' found in button '{button.ButtonText}'.\" });\n                    }\n                }\n\n                var createdBy = user.Identity?.Name ?? \"system\";\n                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);\n\n                return Ok(new\n                {\n                    success = true,\n                    message = \"✅ Campaign created successfully\",\n                    campaignId\n                });\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return BadRequest(new { message = ex.Message });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception in CreateImageCampaign\");\n                return StatusCode(500, new { message = \"🚨 Internal server error\", error = ex.Message });\n            }\n        }\n\n        // ✅ Moved above {id} routes\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);\n\n                return success\n                    ? Ok(new { message = \"✅ Contacts assigned\" })\n                    : BadRequest(new { message = \"❌ Failed to assign contacts\" });\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Error assigning contacts: \" + ex.Message);\n                return StatusCode(500, new { message = \"Internal error\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{campaignId}/recipients/{contactId}\")]\n        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);\n\n                if (!success)\n                    return NotFound(new { message = \"Recipient not found or not assigned\" });\n\n                return NoContent();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Remove recipient failed: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error removing recipient\", detail = ex.Message });\n            }\n        }\n        \n        // Send campaign method (Core Method to send template message)\n        [HttpPost(\"send-campaign/{campaignId}\")] // use to send free text and Template campaigns\n        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)\n        {\n            try\n            {\n                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception while sending image template campaign\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"🚨 Server error while sending campaign\", ex.ToString()));\n            }\n        }\n\n        [HttpPost(\"send-template-campaign/{id}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid id)\n        {\n            var result = await _campaignService.SendTemplateCampaignAsync(id);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        [HttpPost(\"send/{campaignId}\")]\n        public async Task<IActionResult> SendCampaign(Guid campaignId)\n        {\n            try\n            {\n                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n                var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);\n\n                return success\n                    ? Ok(new { success = true, message = \"✅ Campaign sent successfully\" })\n                    : BadRequest(new { success = false, message = \"❌ Campaign sending failed\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception in SendCampaign\");\n                return StatusCode(500, new { success = false, message = \"🚨 Internal Server Error\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)\n        {\n            var result = await _campaignService.UpdateCampaignAsync(id, dto);\n            return result\n                ? Ok(new { message = \"✏️ Campaign updated successfully\" })\n                : BadRequest(new { message = \"❌ Update failed — only draft campaigns can be edited\" });\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteCampaign(Guid id)\n        {\n            var result = await _campaignService.DeleteCampaignAsync(id);\n            return result\n                ? Ok(new { message = \"🗑️ Campaign deleted successfully\" })\n                : BadRequest(new { message = \"❌ Delete failed — only draft campaigns can be deleted\" });\n        }\n\n        [HttpGet(\"recipients/{id}\")]\n        public async Task<IActionResult> GetCampaignRecipients(Guid id)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);\n                return Ok(recipients);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Error fetching campaign recipients: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error fetching recipients\", detail = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)\n        {\n            var businessId = GetBusinessId();\n            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);\n\n            if (campaign == null)\n                return NotFound();\n\n            return Ok(campaign);\n        }\n\n        private Guid GetBusinessId()\n        {\n            var claim = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            if (string.IsNullOrEmpty(claim))\n                throw new UnauthorizedAccessException(\"BusinessId not found in token claims.\");\n\n            return Guid.Parse(claim);\n        }\n    \n        [HttpGet(\"list/{businessId:guid}\")]\n        public async Task<IActionResult> GetAvailableFlows(Guid businessId, [FromQuery] bool onlyPublished = true)\n        {\n            var items = await _campaignService.GetAvailableFlowsAsync(businessId, onlyPublished);\n            return Ok(new { success = true, items });\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignRecipientController.cs",
      "sha256": "247e52ea9259e04d5bc4fb6e22d3aa4791b77af05431022b0572a837bbf7e326",
      "language": "csharp",
      "size": 3341,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignRecipientController : ControllerBase\n    {\n        private readonly ICampaignRecipientService _recipientService;\n\n        public CampaignRecipientController(ICampaignRecipientService recipientService)\n        {\n            _recipientService = recipientService;\n        }\n\n        // ✅ Get a single recipient by ID\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)\n        {\n            var recipient = await _recipientService.GetByIdAsync(id);\n            if (recipient == null)\n                return NotFound(new { message = \"Recipient not found\" });\n\n            return Ok(recipient);\n        }\n\n        // ✅ Get all recipients for a specific campaign\n        [HttpGet(\"/api/campaigns/{campaignId}/recipients\")]\n        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)\n        {\n            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);\n            return Ok(recipients);\n        }\n\n        // ✅ Update recipient status (e.g., from Pending → Sent)\n        [HttpPut(\"{recipientId}/status\")]\n        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)\n        {\n            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or update failed\" });\n\n            return Ok(new { message = \"Status updated\" });\n        }\n\n        // ✅ Track a reply from customer\n        [HttpPut(\"{recipientId}/reply\")]\n        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)\n        {\n            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or tracking failed\" });\n\n            return Ok(new { message = \"Reply tracked\" });\n        }\n\n        // 🔍 Search recipients by optional filters (status, keyword)\n        [HttpGet(\"search\")]\n        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)\n        {\n            var results = await _recipientService.SearchRecipientsAsync(status, keyword);\n            return Ok(results);\n        }\n\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)\n        {\n            try\n            {\n                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);\n                return Ok(new { message = \"Contacts assigned successfully\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error assigning contacts to campaign\");\n                return StatusCode(500, new { message = \"Failed to assign contacts\" });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/AssignContactsDto.cs",
      "sha256": "8f8b9b0da213111f833dd07dd7e5189ccc02984cef1b34deb5b1d93a5d40678e",
      "language": "csharp",
      "size": 156,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class AssignContactsDto\n    {\n        public List<Guid> ContactIds { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonDto.cs",
      "sha256": "21e757f8859c9ea36b40c0d3418d5211cce8a22a26b07b81af62b723f93dc2e5",
      "language": "csharp",
      "size": 379,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty; // 📍 e.g., \"Buy Now\"\n        public string ButtonType { get; set; } = \"url\";         // 🔘 url | quick_reply | call\n        public string TargetUrl { get; set; } = string.Empty;  // 🌐 or phone/call param\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonParamFromMetaDto.cs",
      "sha256": "d218adbbc4e6418548f3dfe962c8b867fc7f364be490f6533d04fb5c61f17f30",
      "language": "csharp",
      "size": 391,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonParamFromMetaDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public string SubType { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n        public int Position { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignCreateDto.cs",
      "sha256": "d5578bef04f767c0f82327a286191fca2953764b2185cb3f25a9d67d43418a5b",
      "language": "csharp",
      "size": 1521,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignCreateDto\n    {\n        public string Name { get; set; }\n\n        [Column(TypeName = \"text\")]\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; } // ✅ Optional Meta template ID\n\n        public string? FollowUpTemplateId { get; set; } // 🔁 Auto-reply template after interest\n\n        public string? CampaignType { get; set; } //= \"template\"; // \"text\", \"template\", \"cta\"\n\n        public Guid? CtaId { get; set; } // 🔘 For legacy CTA support (optional)\n\n        public Guid? CTAFlowConfigId { get; set; }\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ✅ New multi-button support\n        public DateTime? ScheduledAt { get; set; } // 📅 Optional future scheduling\n\n        //public List<Guid>? ContactIds { get; set; } // 👥 Target contact list\n\n        public string? ImageUrl { get; set; } // 🖼️ Optional image field\n\n        public string? ImageCaption { get; set; } // 📝 Optional caption\n\n        public List<Guid> ContactIds { get; set; } = new();\n\n        public List<string>? TemplateParameters { get; set; }\n        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDto.cs",
      "sha256": "bf33c6aa688063d8efd2734082713e23890bb97409bae31a5bc9d18c00ccd001",
      "language": "csharp",
      "size": 1223,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignDto\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; }\n\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; }\n        public string? MessageBody { get; set; }\n        public string? CampaignType { get; set; }\n\n        public string? Status { get; set; }\n\n        public string? ImageUrl { get; set; }\n\n        public string? ImageCaption { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n\n        public Guid? CtaId { get; set; }\n\n        public CtaPreviewDto? Cta { get; set; }\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new();\n\n        public Guid? CTAFlowConfigId { get; set; }\n        public string? CTAFlowName { get; set; }\n    }\n\n    // 📦 Embedded DTO for CTA preview (title + button text only)\n    public class CtaPreviewDto\n    {\n        public string Title { get; set; } = string.Empty;\n\n        public string ButtonText { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignRecipientDto.cs",
      "sha256": "7d59f3b2a92ff69f0425bf1c3541facd28da12efde822400d313e6beddc8ace5",
      "language": "csharp",
      "size": 755,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignRecipientDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string Status { get; set; }\n        public DateTime? SentAt { get; set; }\n\n        // 🔁 Advanced Fields (for analytics & future automation)\n        public string? BotId { get; set; }\n        public string? MessagePreview { get; set; }\n        public string? ClickedCTA { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public bool IsAutoTagged { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignSummaryDto.cs",
      "sha256": "e425735df2c030aa13e5b046f7039f9796104b05b3ec998e039ab1d7eb40b0e0",
      "language": "csharp",
      "size": 687,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string? Name { get; set; }\n        public string? Status { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public int Delivered { get; set; }\n        public int Read { get; set; }\n\n        public string? ImageUrl { get; set; } // ✅ Add this\n        public string? ImageCaption { get; set; } // ✅ Add this\n        public string? CtaTitle { get; set; } // Optional: For CTA info\n        public int RecipientCount { get; set; } // Optional: To show 0/10 etc\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/FlowListItemDto.cs",
      "sha256": "3121c1e145f2d4fd8f1f4978f314782f0afa5d7be9ffe7be6709cfc04af7d068",
      "language": "csharp",
      "size": 246,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class FlowListItemDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/Campaign.cs",
      "sha256": "0fc898a08b290dc0478ece8c4ac96b2feb1a36b6f3bd2b5b90d07697bec59f7a",
      "language": "csharp",
      "size": 5618,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models; // 🆕 Import for CTAFlowConfig\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class Campaign\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Business info\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Campaign? SourceCampaign { get; set; }\n\n        // 📋 Core campaign details\n        public string Name { get; set; }\n        public string MessageTemplate { get; set; }\n        public string? TemplateId { get; set; } // ✅ Meta-approved template ID\n\n        [Column(TypeName = \"text\")]\n        public string? MessageBody { get; set; } // ✅ Final resolved WhatsApp message body\n\n        public string? FollowUpTemplateId { get; set; }\n        public string? CampaignType { get; set; } // text, template, cta\n\n        // 🔘 CTA tracking (optional)\n        public Guid? CtaId { get; set; }\n        public CTADefinition? Cta { get; set; }\n\n        // 🆕 Link to Flow Config (optional)\n        public Guid? CTAFlowConfigId { get; set; }\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig? CTAFlowConfig { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n        // 👤 Metadata\n        public string? CreatedBy { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // 🗑️ Soft delete support\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // 👥 Recipient relationship\n        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n        // 📊 Logs\n        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        public string? ImageUrl { get; set; }\n        public string? ImageCaption { get; set; }\n        public string? TemplateParameters { get; set; }\n\n        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n    }\n}\n\n\n//using System;\n//using System.Collections.Generic;\n//using xbytechat.api.CRM.Models;\n//using xbytechat.api.Features.CampaignTracking.Models;\n//using xbytechat.api.Features.CTAManagement.Models;\n//using System.ComponentModel.DataAnnotations.Schema;\n//using xbytechat.api.Features.MessageManagement.DTOs;\n//using xbytechat.api.Features.BusinessModule.Models;\n\n//namespace xbytechat.api.Features.CampaignModule.Models\n//{\n//    public class Campaign\n//    {\n//        public Guid Id { get; set; }\n\n//        // 🔗 Business info\n//        public Guid BusinessId { get; set; }\n//        public Business Business { get; set; }\n//        public Guid? CampaignId { get; set; }\n//        public Campaign? SourceCampaign { get; set; }\n\n//        // 📋 Core campaign details\n//        public string Name { get; set; }\n//        public string MessageTemplate { get; set; }\n//        public string? TemplateId { get; set; } // ✅ Meta-approved template ID\n\n//        [Column(TypeName = \"text\")]\n//        public string? MessageBody { get; set; } // ✅ Final resolved WhatsApp message body\n\n\n//        public string? FollowUpTemplateId { get; set; } // 🔁 For auto-reply follow-up after interest\n//        public string? CampaignType { get; set; } // = \"template\"; // text, template, cta\n\n//        // 🔘 CTA tracking (optional)\n//        public Guid? CtaId { get; set; }\n//        public CTADefinition? Cta { get; set; }\n\n\n//        public DateTime? ScheduledAt { get; set; }\n//        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n//        // 👤 Metadata\n//        public string? CreatedBy { get; set; }\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n//        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n//        // 🗑️ Soft delete support\n//        public bool IsDeleted { get; set; } = false;\n//        public DateTime? DeletedAt { get; set; }\n//        public string? DeletedBy { get; set; }\n\n//        // 👥 Recipient relationship\n//        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n//        // 📊 Logs\n//        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n//        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n//        //public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n\n//        public string? ImageUrl { get; set; } // ✅ store image URL\n//        public string? ImageCaption { get; set; } // optional caption\n//        public string? TemplateParameters { get; set; } // ✅ stores [\"value1\", \"value2\", ...] as JSON string\n\n//        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n//        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignButton.cs",
      "sha256": "bfca22e0aed3117f3be8b3712de4a7b229991bc3c4b02bdb1f17e43709991977",
      "language": "csharp",
      "size": 654,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignButton\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; } // 🔗 Foreign key\n        public Campaign Campaign { get; set; }\n\n        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)\n        public string Type { get; set; } = \"url\"; // Type: url, quick_reply, call, etc.\n        public string Value { get; set; } = string.Empty; // Target URL or payload\n\n        public int Position { get; set; } // Button order (1–3)\n        public bool IsFromTemplate { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignFlowOverride.cs",
      "sha256": "c4ee719e7601cfb0eb6d67fbba7e11cbd4a57ad5be58dd84f72beead08d88370",
      "language": "csharp",
      "size": 798,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignFlowOverride\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CampaignId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        [MaxLength(50)]\n        public string ButtonText { get; set; } = string.Empty;\n\n        public string? OverrideNextTemplate { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n\n        [ForeignKey(\"CampaignId\")]\n        public Campaign? Campaign { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignRecipient.cs",
      "sha256": "56577228e95ed7f6c8f49036a0f4a95c7536726ea3c45a0a6f3b60ea7fe33362",
      "language": "csharp",
      "size": 1497,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; }\n\n        public Guid ContactId { get; set; }\n        public Contact Contact { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Delivered, Failed, Replied\n        public DateTime? SentAt { get; set; }\n\n        public string? BotId { get; set; } // Multi-bot support\n        public string? MessagePreview { get; set; } // Final message sent\n        public string? ClickedCTA { get; set; } // Track CTA clicked like \"BuyNow\"\n        public string? CategoryBrowsed { get; set; } // e.g., Ads\n        public string? ProductBrowsed { get; set; } // e.g., Product name\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging\n\n        // ✅ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)\n        public ICollection<CampaignSendLog> SendLogs { get; set; }\n\n        public Guid BusinessId { get; set; }  // ✅ Add this line\n        public Business Business { get; set; } = null!; // if navigation is needed\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/TempCampaignRecipient.cs",
      "sha256": "62b7c7ce62f02ff80d38fb3477ccb849580cb1f859396e2ab7b6ad857fcc22a2",
      "language": "csharp",
      "size": 617,
      "content": "// Features/CampaignModule/Models/TempCampaignRecipient.cs\nusing System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class TempCampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; }\n\n        public string PhoneNumber { get; set; } = string.Empty;\n        public string? Name { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Failed\n        public DateTime? SentAt { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignRecipientService.cs",
      "sha256": "9e537d67c7d3b811b4d26288fa63b38b0097f997fc84b8d0313877e3f77fe809",
      "language": "csharp",
      "size": 5435,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignRecipientService : ICampaignRecipientService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRecipientService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // 🔍 Get a single recipient by ID\n        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.Id == id)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .FirstOrDefaultAsync();\n        }\n\n        // 📦 Get all recipients of a specific campaign\n        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        // ✏️ Update status of a specific recipient\n        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.Status = newStatus;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 💬 Track customer reply or CTA\n        // 🗣️ Track customer reply on a recipient\n        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.ClickedCTA = replyText;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n\n        // 🔎 Global recipient search across all campaigns\n        // 🔍 Search recipients by optional status or keyword\n        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)\n        {\n            var query = _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(status))\n                query = query.Where(r => r.Status == status);\n\n            if (!string.IsNullOrEmpty(keyword))\n                query = query.Where(r =>\n                    r.Contact.Name.Contains(keyword) ||\n                    r.Contact.PhoneNumber.Contains(keyword)\n                );\n\n            return await query\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null)\n                throw new Exception(\"Campaign not found.\");\n\n            var businessId = campaign.BusinessId;\n\n            var existing = await _context.CampaignRecipients\n                .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n                .Select(r => r.ContactId)\n                .ToListAsync();\n\n            var newRecipients = contactIds\n                .Where(id => !existing.Contains(id))\n                .Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId, // ✅ required\n                    Status = \"Pending\",\n                    SentAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    IsAutoTagged = false\n                }).ToList();\n\n            if (newRecipients.Any())\n            {\n                await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n                await _context.SaveChangesAsync();\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.cs",
      "sha256": "159797c22265ad6bbd7cf080be0988bac206555404b296fd54786edbbf12ea4e",
      "language": "csharp",
      "size": 76075,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignService : ICampaignService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly IServiceProvider _serviceProvider;\n        private readonly ILeadTimelineService _timelineService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        private readonly IUrlBuilderService _urlBuilderService;\n        public CampaignService(AppDbContext context, IMessageService messageService,\n                               IServiceProvider serviceProvider,\n                               ILeadTimelineService timelineService,\n                               IMessageEngineService messageEngineService,\n                               IWhatsAppTemplateFetcherService templateFetcherService,\n                               IUrlBuilderService urlBuilderService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _serviceProvider = serviceProvider;\n            _timelineService = timelineService; // ✅ new\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n            _urlBuilderService = urlBuilderService;\n\n        }\n\n\n        #region Get All Types of Get and Update and Delete Methods\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)\n        {\n            return await _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n\n                })\n                .ToListAsync();\n        }\n        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Cta)\n                .Include(c => c.MultiButtons)\n                .Include(c => c.CTAFlowConfig)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null) return null;\n\n            return new CampaignDto\n            {\n                Id = campaign.Id,\n                Name = campaign.Name,\n                MessageTemplate = campaign.MessageTemplate,\n                MessageBody = campaign.MessageBody,\n                TemplateId = campaign.TemplateId,\n                CampaignType = campaign.CampaignType,\n                Status = campaign.Status,\n                ImageUrl = campaign.ImageUrl,\n                ImageCaption = campaign.ImageCaption,\n                CreatedAt = campaign.CreatedAt,\n                ScheduledAt = campaign.ScheduledAt,\n                CtaId = campaign.CtaId,\n                Cta = campaign.Cta == null ? null : new CtaPreviewDto\n                {\n                    Title = campaign.Cta.Title,\n                    ButtonText = campaign.Cta.ButtonText\n                },\n                MultiButtons = campaign.MultiButtons?\n                    .Select(b => new CampaignButtonDto\n                    {\n                        ButtonText = b.Title,\n                        ButtonType = b.Type,\n                        TargetUrl = b.Value\n                    }).ToList() ?? new List<CampaignButtonDto>(),\n                // ✅ Flow surface to UI\n                CTAFlowConfigId = campaign.CTAFlowConfigId,\n                CTAFlowName = campaign.CTAFlowConfig?.FlowName\n            };\n        }\n        // Returns the entry step (no incoming links) and its template name.\n        // If flow is missing/invalid, returns (null, null) and caller should ignore.\n        private async Task<(Guid? entryStepId, string? entryTemplate)> ResolveFlowEntryAsync(Guid businessId, Guid? flowId)\n        {\n            if (!flowId.HasValue || flowId.Value == Guid.Empty) return (null, null);\n\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId.Value && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null || flow.Steps == null || flow.Steps.Count == 0) return (null, null);\n\n            var incoming = new HashSet<Guid>(\n                flow.Steps.SelectMany(s => s.ButtonLinks)\n                          .Where(l => l.NextStepId.HasValue)\n                          .Select(l => l.NextStepId!.Value)\n            );\n\n            var entry = flow.Steps\n                .OrderBy(s => s.StepOrder)\n                .FirstOrDefault(s => !incoming.Contains(s.Id));\n\n            return entry == null ? (null, null) : (entry.Id, entry.TemplateToSend);\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(type))\n                query = query.Where(c => c.CampaignType == type);\n\n            return await query\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n                    ImageUrl = c.ImageUrl,            // ✅ Now mapped\n                    ImageCaption = c.ImageCaption,    // ✅ Now mapped\n                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional\n                    RecipientCount = c.Recipients.Count()\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)\n        {\n            var recipients = await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)\n                .Select(r => new ContactDto\n                {\n                    Id = r.Contact.Id,\n                    Name = r.Contact.Name,\n                    PhoneNumber = r.Contact.PhoneNumber,\n                    Email = r.Contact.Email,\n                    LeadSource = r.Contact.LeadSource,\n                    CreatedAt = r.Contact.CreatedAt\n                })\n                .ToListAsync();\n\n            return recipients;\n        }\n\n        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt);\n\n            var total = await query.CountAsync();\n\n            var items = await query\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<CampaignSummaryDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)\n        {\n            var campaign = await _context.Campaigns.FindAsync(id);\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            // ✅ Extract BusinessId from current campaign\n            var businessId = campaign.BusinessId;\n\n            // ✅ Optional CTA ownership validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"❌ The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // ✏️ Update campaign fields\n            campaign.Name = dto.Name;\n            campaign.MessageTemplate = dto.MessageTemplate;\n            campaign.TemplateId = dto.TemplateId;\n            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;\n            campaign.CampaignType = dto.CampaignType;\n            campaign.CtaId = dto.CtaId;\n            campaign.ImageUrl = dto.ImageUrl;\n            campaign.ImageCaption = dto.ImageCaption;\n            campaign.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == id);\n\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            _context.CampaignRecipients.RemoveRange(campaign.Recipients);\n            _context.Campaigns.Remove(campaign);\n\n            await _context.SaveChangesAsync();\n            Log.Information(\"🗑️ Campaign deleted: {Id}\", id);\n            return true;\n        }\n\n        #endregion\n\n        #region // 🆕 CreateCampaignAsync(Text/Image)\n\n        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                var campaignId = Guid.NewGuid();\n\n                // 🔁 Parse/normalize template parameters once\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n                );\n\n                // 🔄 Flow id from UI (null/empty => no flow). We will persist this as-is.\n                Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                    ? dto.CTAFlowConfigId.Value\n                    : (Guid?)null;\n\n                // We will save this value regardless of validation outcome\n                Guid? savedFlowId = incomingFlowId;\n\n                // ============================================================\n                // 🧩 FLOW VALIDATION (only to align the starting template)\n                // ============================================================\n                string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n                CTAFlowConfig? flow = null;\n                CTAFlowStep? entryStep = null;\n\n                if (incomingFlowId.HasValue)\n                {\n                    // load flow with steps+links and verify ownership\n                    flow = await _context.CTAFlowConfigs\n                        .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                        .FirstOrDefaultAsync(f =>\n                            f.Id == incomingFlowId.Value &&\n                            f.BusinessId == businessId &&\n                            f.IsActive);\n\n                    if (flow == null)\n                    {\n                        Log.Warning(\"❌ Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.\",\n                            incomingFlowId, businessId);\n                    }\n                    else\n                    {\n                        // compute entry step: step with NO incoming links\n                        var allIncoming = new HashSet<Guid>(flow.Steps\n                            .SelectMany(s => s.ButtonLinks)\n                            .Where(l => l.NextStepId.HasValue)\n                            .Select(l => l.NextStepId!.Value));\n\n                        entryStep = flow.Steps\n                            .OrderBy(s => s.StepOrder)\n                            .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                        if (entryStep == null)\n                        {\n                            Log.Warning(\"❌ Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.\", flow.Id);\n                        }\n                        else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                        {\n                            Log.Information(\"ℹ️ Aligning selected template '{Sel}' to flow entry '{Entry}'.\",\n                                selectedTemplateName, entryStep.TemplateToSend);\n                            selectedTemplateName = entryStep.TemplateToSend;\n                        }\n                    }\n                }\n                else\n                {\n                    Log.Information(\"ℹ️ No flow attached to campaign '{Name}'. Proceeding as plain template campaign.\", dto.Name);\n                }\n\n                // 🧠 Fetch template (for body + buttons) using the aligned/selected template name\n                var template = await _templateFetcherService.GetTemplateByNameAsync(\n                    businessId,\n                    selectedTemplateName,\n                    includeButtons: true\n                );\n\n                // 🧠 Resolve message body using template body (if available) else dto.MessageTemplate\n                var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n                // ✅ Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)\n                var campaign = new Campaign\n                {\n                    Id = campaignId,\n                    BusinessId = businessId,\n                    Name = dto.Name,\n\n                    // store the (possibly aligned) template name\n                    MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it\n                    TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available\n\n                    FollowUpTemplateId = dto.FollowUpTemplateId,\n                    CampaignType = dto.CampaignType ?? \"text\",\n                    CtaId = dto.CtaId,\n                    CTAFlowConfigId = savedFlowId,              // 👈 persist what UI sent (or null if no flow)\n\n                    ScheduledAt = dto.ScheduledAt,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    Status = \"Draft\",\n                    ImageUrl = dto.ImageUrl,\n                    ImageCaption = dto.ImageCaption,\n                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                    MessageBody = resolvedBody\n                };\n\n                await _context.Campaigns.AddAsync(campaign);\n\n                // ✅ Step 2: Assign contacts (leave SentAt null until send)\n                if (dto.ContactIds != null && dto.ContactIds.Any())\n                {\n                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        ContactId = contactId,\n                        BusinessId = businessId,\n                        Status = \"Pending\",\n                        SentAt = null,\n                        UpdatedAt = DateTime.UtcNow\n                    });\n\n                    await _context.CampaignRecipients.AddRangeAsync(recipients);\n                }\n\n                // ✅ Step 3a: Save manual buttons from frontend\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var buttons = dto.MultiButtons\n                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.ButtonText,\n                            Type = btn.ButtonType ?? \"url\",\n                            Value = btn.TargetUrl,\n                            Position = index + 1,\n                            IsFromTemplate = false\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n                }\n\n                // ======================== Dynamic buttons merge ========================\n                if (template != null && template.ButtonParams?.Count > 0)\n                {\n                    var buttonsToSave = new List<CampaignButton>();\n                    var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                    var total = Math.Min(3, template.ButtonParams.Count);\n                    for (int i = 0; i < total; i++)\n                    {\n                        var tplBtn = template.ButtonParams[i];\n                        var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                        var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                        var valueToSave = (isDynamic && userBtn != null)\n                            ? userBtn.Value?.Trim()\n                            : tplBtn.ParameterValue;\n\n                        buttonsToSave.Add(new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = tplBtn.Text,\n                            Type = tplBtn.Type,\n                            Value = valueToSave,\n                            Position = i + 1,\n                            IsFromTemplate = true\n                        });\n                    }\n\n                    await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n                }\n                // ======================================================================\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}\",\n                    dto.Name,\n                    savedFlowId,\n                    entryStep?.TemplateToSend ?? selectedTemplateName,\n                    dto.ContactIds?.Count ?? 0,\n                    dto.MultiButtons?.Count ?? 0,\n                    template?.ButtonParams?.Count ?? 0,\n                    dto.TemplateParameters?.Count ?? 0\n                );\n\n                return campaignId;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to create campaign\");\n                return null;\n            }\n        }\n\n        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)\n        {\n            var campaignId = Guid.NewGuid();\n\n            // 🔁 Parse/normalize template parameters once\n            var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n            );\n\n            // 🔄 Flow id from UI (null/empty => no flow). We will persist this as-is.\n            Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                ? dto.CTAFlowConfigId.Value\n                : (Guid?)null;\n\n            // We will save this value regardless of validation outcome\n            Guid? savedFlowId = incomingFlowId;\n\n            // ============================================================\n            // 🧩 FLOW VALIDATION (only to align the starting template)\n            // ============================================================\n            string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n            CTAFlowConfig? flow = null;\n            CTAFlowStep? entryStep = null;\n\n            if (incomingFlowId.HasValue)\n            {\n                // load flow with steps+links and verify ownership\n                flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(f =>\n                        f.Id == incomingFlowId.Value &&\n                        f.BusinessId == businessId &&\n                        f.IsActive);\n\n                if (flow == null)\n                {\n                    Log.Warning(\"❌ Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.\",\n                        incomingFlowId, businessId);\n                }\n                else\n                {\n                    // compute entry step: step with NO incoming links\n                    var allIncoming = new HashSet<Guid>(flow.Steps\n                        .SelectMany(s => s.ButtonLinks)\n                        .Where(l => l.NextStepId.HasValue)\n                        .Select(l => l.NextStepId!.Value));\n\n                    entryStep = flow.Steps\n                        .OrderBy(s => s.StepOrder)\n                        .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                    if (entryStep == null)\n                    {\n                        Log.Warning(\"❌ Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.\", flow.Id);\n                    }\n                    else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                    {\n                        Log.Information(\"ℹ️ Aligning selected template '{Sel}' to flow entry '{Entry}'.\",\n                            selectedTemplateName, entryStep.TemplateToSend);\n                        selectedTemplateName = entryStep.TemplateToSend;\n                    }\n                }\n            }\n            else\n            {\n                Log.Information(\"ℹ️ No flow attached to image campaign '{Name}'. Proceeding as plain template campaign.\", dto.Name);\n            }\n\n            // 🧠 Fetch template (for body + buttons) using the aligned/selected template name\n            var template = await _templateFetcherService.GetTemplateByNameAsync(\n                businessId,\n                selectedTemplateName,\n                includeButtons: true\n            );\n\n            // 🧠 Resolve message body using template body (if available) else dto.MessageTemplate\n            var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n            var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n            // 🎯 Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)\n            var campaign = new Campaign\n            {\n                Id = campaignId,\n                BusinessId = businessId,\n                Name = dto.Name,\n\n                // store the (possibly aligned) template name\n                MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it\n                TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available\n\n                FollowUpTemplateId = dto.FollowUpTemplateId,\n                CampaignType = \"image\",\n                CtaId = dto.CtaId,\n                CTAFlowConfigId = savedFlowId,              // 👈 persist what UI sent (or null if no flow)\n\n                ScheduledAt = dto.ScheduledAt,\n                CreatedBy = createdBy,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Status = \"Draft\",\n\n                // image-specific fields\n                ImageUrl = dto.ImageUrl,\n                ImageCaption = dto.ImageCaption,\n\n                // params/body snapshot (useful for previews & auditing)\n                TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                MessageBody = resolvedBody\n            };\n\n            await _context.Campaigns.AddAsync(campaign);\n\n            // ✅ Step 2: Assign contacts (leave SentAt null until send)\n            if (dto.ContactIds != null && dto.ContactIds.Any())\n            {\n                var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId,\n                    Status = \"Pending\",\n                    SentAt = null,\n                    UpdatedAt = DateTime.UtcNow\n                });\n\n                await _context.CampaignRecipients.AddRangeAsync(recipients);\n            }\n\n            // ✅ Step 3a: Save manual buttons from frontend\n            if (dto.MultiButtons != null && dto.MultiButtons.Any())\n            {\n                var buttons = dto.MultiButtons\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    .Take(3)\n                    .Select((btn, index) => new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = btn.ButtonText,\n                        Type = btn.ButtonType ?? \"url\",\n                        Value = btn.TargetUrl,\n                        Position = index + 1,\n                        IsFromTemplate = false\n                    });\n\n                await _context.CampaignButtons.AddRangeAsync(buttons);\n            }\n\n            // ======================== Dynamic buttons merge ========================\n            // EXACTLY mirrors your text-creator pattern to avoid type issues with ButtonMetadataDto\n            if (template != null && template.ButtonParams?.Count > 0)\n            {\n                var buttonsToSave = new List<CampaignButton>();\n                var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                var total = Math.Min(3, template.ButtonParams.Count);\n                for (int i = 0; i < total; i++)\n                {\n                    var tplBtn = template.ButtonParams[i];                         // ButtonMetadataDto: Text, Type, SubType, Index, ParameterValue\n                    var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                    var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                    var valueToSave = (isDynamic && userBtn != null)\n                        ? userBtn.Value?.Trim()                                    // user override for dynamic URL\n                        : tplBtn.ParameterValue;                                   // pattern or static value from meta\n\n                    buttonsToSave.Add(new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = tplBtn.Text,                                       // from ButtonMetadataDto\n                        Type = tplBtn.Type,                                        // from ButtonMetadataDto\n                        Value = valueToSave,\n                        Position = i + 1,\n                        IsFromTemplate = true\n                    });\n                }\n\n                await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n            }\n            // ======================================================================\n\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"✅ Image campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}\",\n                dto.Name,\n                savedFlowId,\n                entryStep?.TemplateToSend ?? selectedTemplateName,\n                dto.ContactIds?.Count ?? 0,\n                dto.MultiButtons?.Count ?? 0,\n                template?.ButtonParams?.Count ?? 0,\n                dto.TemplateParameters?.Count ?? 0\n            );\n\n            return campaignId;\n        }\n        #endregion\n        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int throttleLimit = 5;\n\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions { MaxDegreeOfParallelism = throttleLimit }, async (recipient, ct) =>\n            {\n                try\n                {\n                    using var scope = _serviceProvider.CreateScope();\n                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // 🟢 Use SimpleTemplateMessageDto instead of raw text\n                    var dto = new SimpleTemplateMessageDto\n                    {\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = campaign.MessageTemplate,\n                        TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                    };\n\n                    var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        TemplateId = campaign.TemplateId,\n                        MessageBody = campaign.MessageTemplate,\n                        MessageId = null,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        ErrorMessage = result.Message,\n                        SentAt = DateTime.UtcNow,\n                        CreatedAt = DateTime.UtcNow,\n                        SourceChannel = \"whatsapp\",\n                        IpAddress = ipAddress,\n                        DeviceInfo = userAgent\n                    };\n\n                    scopedDb.CampaignSendLogs.Add(sendLog);\n\n                    var recipientToUpdate = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(r => r.Id == recipient.Id);\n                    if (recipientToUpdate != null)\n                    {\n                        recipientToUpdate.Status = result.Success ? \"Sent\" : \"Failed\";\n                        recipientToUpdate.MessagePreview = campaign.MessageTemplate;\n                        recipientToUpdate.SentAt = DateTime.UtcNow;\n                        recipientToUpdate.UpdatedAt = DateTime.UtcNow;\n                    }\n\n                    await scopedDb.SaveChangesAsync();\n                }\n                catch (Exception ex)\n                {\n                    Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", recipient.Id);\n                }\n            });\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int maxParallelism = 5;\n\n#if NET6_0_OR_GREATER\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions\n            {\n                MaxDegreeOfParallelism = maxParallelism\n            },\n            async (recipient, cancellationToken) =>\n            {\n                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);\n            });\n#else\n    var tasks = campaign.Recipients.Select(recipient =>\n        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)\n    );\n    await Task.WhenAll(tasks);\n#endif\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent in parallel to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)\n        {\n            try\n            {\n                var dto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipient.Contact.PhoneNumber,\n                    TemplateName = campaign.MessageTemplate,\n                    TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                };\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n\n                var log = new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = recipient.ContactId,\n                    RecipientId = recipient.Id,\n                    TemplateId = campaign.TemplateId,\n                    MessageBody = campaign.MessageTemplate,\n                    MessageId = null,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = result.Message,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    SourceChannel = \"whatsapp\",\n                    IpAddress = ip,\n                    DeviceInfo = ua\n                };\n\n                lock (_context)\n                {\n                    _context.CampaignSendLogs.Add(log);\n                    recipient.Status = result.Success ? \"Sent\" : \"Failed\";\n                    recipient.MessagePreview = campaign.MessageTemplate;\n                    recipient.SentAt = DateTime.UtcNow;\n                    recipient.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to send template to recipient: {RecipientId}\", recipient.Id);\n            }\n        }\n\n        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)\n        {\n            var entry = await _context.CampaignRecipients\n                .FirstOrDefaultAsync(r =>\n                    r.CampaignId == campaignId &&\n                    r.ContactId == contactId &&\n                    r.Campaign.BusinessId == businessId); // ✅ Filter by related Campaign.BusinessId\n\n            if (entry == null)\n                return false;\n\n            _context.CampaignRecipients.Remove(entry);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null)\n                return false;\n\n            var newRecipients = contactIds.Select(id => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                ContactId = id,\n                BusinessId = businessId,\n                Status = \"Pending\",\n                SentAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            });\n\n            _context.CampaignRecipients.AddRange(newRecipients);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // This is the Entry point to send Temaplte (Text Based and Image Based)\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)\n        {\n            try\n            {\n                var campaign = await _context.Campaigns\n                    .Include(c => c.Recipients)\n                        .ThenInclude(r => r.Contact) // 🧠 include contact details\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"❌ No recipients assigned to this campaign.\");\n\n                var templateName = campaign.MessageTemplate;\n                var templateId = campaign.TemplateId;\n                var language = \"en_US\"; // Optional: make dynamic later\n                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);\n\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    var messageDto = new ImageTemplateMessageDto\n                    {\n                        // BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(btn => new CampaignButtonDto\n                            {\n                                ButtonText = btn.Title,\n                                ButtonType = btn.Type,\n                                TargetUrl = btn.Value\n                            }).ToList()\n                    };\n\n                    // ✅ Call the image/template sender\n                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);\n                    var isSuccess = sendResult.ToString().ToLower().Contains(\"messages\");\n\n                    var log = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = isSuccess ? \"Sent\" : \"Failed\",\n                        ErrorMessage = isSuccess ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(sendResult),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow\n                    };\n\n                    await _context.MessageLogs.AddAsync(log);\n\n                    if (isSuccess) success++;\n                    else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n        #region  This region include all the code related to sending text and image based\n\n        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n                return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n            return campaign.CampaignType?.ToLower() switch\n            {\n                \"image\" => await SendImageTemplateCampaignAsync(campaign),\n                \"text\" => await SendTextTemplateCampaignAsync(campaign),\n                _ => ResponseResult.ErrorInfo(\"❌ Unsupported campaign type.\")\n            };\n        }\n        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // 🔑 Use Flow entry template if flow is attached; else fallback to campaign.TemplateId/MessageTemplate\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n                // 🧠 Fetch template meta (+buttons if you need)\n                var templateMeta = await _templateFetcherService\n                    .GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n\n                if (templateMeta == null)\n                    return ResponseResult.ErrorInfo(\"❌ Template metadata not found.\");\n\n                // 🚫 Do not hardcode language; require provider meta language\n                var languageCode = (templateMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"❌ Template language not resolved from provider meta.\");\n\n                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n\n                // Existing manual buttons (for dynamic URL values)\n                var buttons = campaign.MultiButtons?.OrderBy(b => b.Position).ToList();\n\n                // Provider detection (Meta vs anything else you support)\n                var setting = await _context.WhatsAppSettings\n                    .AsNoTracking()\n                    .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n\n                if (setting == null)\n                    return ResponseResult.ErrorInfo(\"❌ WhatsApp settings not found.\");\n\n                var providerKey = (setting.Provider ?? \"meta_cloud\").ToLowerInvariant();\n\n                // 🧭 Resolve entry step id (so we can persist context for click processing)\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // 🧰 Build & freeze a \"button bundle\" (exact labels/positions user sees)\n                // IMPORTANT: store zero-based 'i' and label 't' to match ProcessClickAsync mapping.\n                string? buttonBundleJson = null;\n                if (templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)\n                {\n                    var bundle = templateMeta.ButtonParams\n                        .Take(3)\n                        .Select((b, i) => new\n                        {\n                            i = i,                                  // zero-based index used by provider & mapper\n                            t = (b.Text ?? \"\").Trim(),              // label used for text matching\n                            position = i + 1,                       // redundant (for readability in tools)\n                            text = (b.Text ?? \"\").Trim(),\n                            type = b.Type,\n                            subType = b.SubType\n                        })\n                        .ToList();\n\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                int successCount = 0, failureCount = 0;\n\n                foreach (var r in campaign.Recipients)\n                {\n                    if (r?.Contact == null) continue;\n\n                    // 🔑 New run per recipient send (prevents cross-run mixing in journey)\n                    var runId = Guid.NewGuid();\n\n                    // Build provider components (use your existing builders)\n                    var campaignSendLogId = Guid.NewGuid(); // used by tracked URLs\n                    List<object> components = providerKey == \"pinnacle\"\n                        ? BuildTextTemplateComponents_Pinnacle(templateParams, buttons, templateMeta, campaignSendLogId, r.Contact)\n                        : BuildTextTemplateComponents_Meta(templateParams, buttons, templateMeta, campaignSendLogId, r.Contact);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = r.Contact.PhoneNumber,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = languageCode }, // ✅ from provider meta\n                            components\n                        }\n                    };\n\n                    var result = await _messageEngineService.SendPayloadAsync(businessId, payload);\n\n                    // 📌 Persist logs WITH flow context, RunId, and frozen button bundle\n                    var logId = Guid.NewGuid();\n                    var log = new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = r.Contact.PhoneNumber,\n                        MessageContent = templateName,                       // NOT NULL\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,                        // join key (provider msg id)\n                        ErrorMessage = result.ErrorMessage,                  // single source\n                        RawResponse = result.RawResponse,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = result.Success ? DateTime.UtcNow : (DateTime?)null, // only when sent\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId                                        // ✅ journey key\n                    };\n                    _context.MessageLogs.Add(log);\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = log.Id,\n                        MessageId = result.MessageId,                        // join key (provider msg id)\n                        ErrorMessage = result.ErrorMessage,                  // ✅ same source as MessageLog\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = result.Success ? DateTime.UtcNow : (DateTime?)null, // ✅ guard SentAt\n                        CreatedBy = campaign.CreatedBy,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId                                        // ✅ journey key\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} contacts. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending text template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n\n        #region Text Component Builders\n        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)\n        {\n            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);\n            var pos = full.LastIndexOf(\"/r/\", StringComparison.OrdinalIgnoreCase);\n            return (pos >= 0) ? full.Substring(pos + 3) : full; // fallback: if not found, return full (rare)\n        }\n\n        //private static string CleanForUri(string s)\n        //{\n        //    if (s is null) return string.Empty;\n        //    var t = s.Trim();\n        //    return new string(Array.FindAll(t.ToCharArray(), c => !char.IsControl(c)));\n        //}\n\n        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)\n        {\n            if (string.IsNullOrWhiteSpace(input))\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Trim + strip control chars\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n            if (cleaned.Length == 0)\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // ✅ Allow tel: and WhatsApp deep links\n            if (cleaned.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase))\n            {\n                return cleaned; // Accept as-is\n            }\n\n            // ✅ Still allow normal web links\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&\n                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))\n            {\n                return uri.ToString();\n            }\n\n            // ❌ Anything else is rejected\n            throw new ArgumentException(\n                $\"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'\");\n        }\n        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)\n        {\n            if (string.IsNullOrWhiteSpace(templateUrl)) return false;\n            var s = templateUrl.Trim();\n            if (!s.Contains(\"{{\")) return false;\n            var probe = s.Replace(\"{{1}}\", \"x\").Replace(\"{{0}}\", \"x\");\n            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&\n                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));\n        }\n\n        private static object[] BuildBodyParameters(List<string>? templateParams, int requiredCount)\n        {\n            if (requiredCount <= 0) return Array.Empty<object>();\n\n            var src = templateParams ?? new List<string>();\n            // Trim if more were provided than required\n            if (src.Count > requiredCount) src = src.Take(requiredCount).ToList();\n            // Pad with empty strings if fewer were provided\n            while (src.Count < requiredCount) src.Add(string.Empty);\n\n            // Return in the shape Meta/Pinnacle expect\n            return src.Select(p => (object)new { type = \"text\", text = p ?? string.Empty }).ToArray();\n        }\n        private List<object> BuildTextTemplateComponents_Meta(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            var components = new List<object>();\n\n            // BODY: send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons or template has no button params\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // ✅ Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // Meta needs parameters ONLY for dynamic URL buttons\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    // If template expects dynamic URL at this index and your campaign button isn't URL, skip to avoid 131008\n                    continue;\n                }\n\n                var valueRaw = btn.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone substitution in destination\n                var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                    ? \"\"\n                    : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                var encodedPhone = Uri.EscapeDataString(phone);\n\n                var resolvedDestination = valueRaw.Contains(\"{{1}}\")\n                    ? valueRaw.Replace(\"{{1}}\", encodedPhone)\n                    : valueRaw;\n\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn.Title, i);\n\n                // Build both; choose which to send based on template base style\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(\n                    campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(), // \"0\"/\"1\"/\"2\"\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n            }\n\n            return components;\n        }\n        private List<object> BuildTextTemplateComponents_Pinnacle(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            var components = new List<object>();\n\n            // BODY: Pinnacle is strict → always send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons to map → return body-only\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // ✅ Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // Pinnacle path currently supports dynamic URL params only\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template expects a dynamic URL at button index {i}, but campaign button type is '{btn?.Type}'.\");\n                }\n\n                var valueRaw = btn?.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone substitution\n                var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                    ? \"\"\n                    : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                var encodedPhone = Uri.EscapeDataString(phone);\n\n                var resolvedDestination = valueRaw.Contains(\"{{1}}\")\n                    ? valueRaw.Replace(\"{{1}}\", encodedPhone)\n                    : valueRaw;\n\n                // Validate + normalize absolute URL\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title, i);\n\n                // Build both options: full tracked URL vs token param (for absolute-base placeholders)\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(\n                    campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                // Pinnacle payload shape (aligned with Meta)\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(),\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n            }\n\n            return components;\n        }\n\n        #endregion\n        #region SendImagetemplate\n\n        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"❌ No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // 🔑 Flow entry → template name\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n                var language = \"en_US\";\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var r in campaign.Recipients)\n                {\n                    var dto = new ImageTemplateMessageDto\n                    {\n                        RecipientNumber = r.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = campaign.ImageUrl,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(b => new CampaignButtonDto\n                            {\n                                ButtonText = b.Title,\n                                ButtonType = b.Type,\n                                TargetUrl = b.Value\n                            }).ToList()\n                    };\n\n                    var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n                    var ok = res.ToString().ToLower().Contains(\"messages\");\n\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = r.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = ok ? \"Sent\" : \"Failed\",\n                        ErrorMessage = ok ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(res),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow,\n                        Source = \"campaign\"\n                    });\n\n                    if (ok) success++; else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n\n        private List<object> BuildImageTemplateComponents_Pinnacle(\n                            string? imageUrl,\n                            List<string> templateParams,\n                            List<CampaignButton>? buttonList,\n                            TemplateMetadataDto templateMeta,\n                            Guid campaignSendLogId,\n                            Contact contact)\n        {\n            var components = new List<object>();\n\n            // Header (image header only if template supports it)\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                                new { type = \"image\", image = new { link = imageUrl } }\n                    }\n                });\n            }\n\n            // Body\n            if (templateParams != null && templateParams.Count > 0 && templateMeta.PlaceholderCount > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Buttons\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var btn = buttonList[i];\n                var meta = templateMeta.ButtonParams[i];\n                var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim() ?? string.Empty;   // expects /r/{{1}} in template\n                var btnValue = btn.Value?.Trim();\n                var isDynamic = metaParam.Contains(\"{{\");\n\n                // Non-dynamic → no parameters\n                if (!isDynamic)\n                {\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subtype,\n                        [\"index\"] = i  // Pinnacle accepts numeric\n                    });\n                    continue;\n                }\n\n                if (string.IsNullOrWhiteSpace(btnValue)) continue;\n\n                // Normalize phone and resolve inside destination if needed\n                var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                    ? \"\"\n                    : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                var encodedPhone = Uri.EscapeDataString(phone);\n\n                var resolvedDestination = btnValue.Contains(\"{{1}}\")\n                    ? btnValue.Replace(\"{{1}}\", encodedPhone)\n                    : btnValue;\n\n                // Build full tracked URL then extract token for {{1}}\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var param = new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = tokenParam };\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = subtype,\n                    [\"index\"] = i,\n                    [\"parameters\"] = new[] { param }\n                });\n            }\n\n            return components;\n        }\n        private List<object> BuildImageTemplateComponents_Meta(\n                            string? imageUrl,\n                            List<string> templateParams,\n                            List<CampaignButton>? buttonList,\n                            TemplateMetadataDto templateMeta,\n                            Guid campaignSendLogId,\n                            Contact contact)\n        {\n            var components = new List<object>();\n\n            // Header (image)\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                new { type = \"image\", image = new { link = imageUrl } }\n            }\n                });\n            }\n\n            // Body\n            if (templateParams != null && templateParams.Count > 0 && templateMeta.PlaceholderCount > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Buttons (Meta sends params only for dynamic ones)\n            if (buttonList != null && buttonList.Count > 0 &&\n                templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)\n            {\n                var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));\n\n                for (int i = 0; i < total; i++)\n                {\n                    var meta = templateMeta.ButtonParams[i];\n                    var metaParam = meta.ParameterValue?.Trim();\n                    bool isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n\n                    if (!isDynamic) continue;\n\n                    var btn = buttonList[i];\n                    var value = btn.Value?.Trim();\n                    if (string.IsNullOrWhiteSpace(value)) continue;\n\n                    var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n\n                    // Normalize phone and resolve inside destination if needed\n                    var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                        ? \"\"\n                        : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                    var encodedPhone = Uri.EscapeDataString(phone);\n\n                    var resolvedDestination = value.Contains(\"{{1}}\")\n                        ? value.Replace(\"{{1}}\", encodedPhone)\n                        : value;\n\n                    // Build full tracked URL then extract token for {{1}}\n                    var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                    var param = new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = tokenParam };\n\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subtype,       // \"url\"\n                        [\"index\"] = i.ToString(),     // Meta uses \"0\"/\"1\"/\"2\"\n                        [\"parameters\"] = new[] { param }\n                    });\n                }\n            }\n\n            return components;\n        }\n\n\n        private static string NormalizePhoneForTel(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"\";\n            var p = raw.Trim();\n            if (!p.StartsWith(\"+\")) p = \"+\" + new string(p.Where(char.IsDigit).ToArray());\n            return p;\n        }\n        #endregion\n\n        #endregion\n\n        public async Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true)\n        {\n            return await _context.CTAFlowConfigs\n                .AsNoTracking()\n                .Where(f => f.BusinessId == businessId && f.IsActive && (!onlyPublished || f.IsPublished))\n                .OrderByDescending(f => f.UpdatedAt)\n                .Select(f => new FlowListItemDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n    }\n\n\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRecipientService.cs",
      "sha256": "a2bb5bdb9f8a87dc2436bac017a79dc02ec48bdc1fd425cb6c701807234d4dd3",
      "language": "csharp",
      "size": 729,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRecipientService\n    {\n        Task<CampaignRecipientDto> GetByIdAsync(Guid id);\n        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);\n\n        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);\n        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);\n        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);\n\n        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignService.cs",
      "sha256": "27a1625658b4fc646689618fbece2ae4a0d373cbcfa833b9acb82ff5ac718ef4",
      "language": "csharp",
      "size": 2241,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignService\n    {\n        /// 🆕 Create a new campaign with recipients\n        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);\n\n        /// ✏️ Update an existing draft campaign\n        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);\n\n        /// 🗑️ Soft-delete a draft campaign\n        Task<bool> DeleteCampaignAsync(Guid id);\n\n        /// 📋 Get all campaigns for the business\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);\n\n        /// 📄 Get paginated campaigns\n        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);\n        /// 🚀 Trigger campaign send flow (template message to all recipients)\n        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);\n        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);\n        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);\n        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);\n        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);\n\n        Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Config/TrackingOptions.cs",
      "sha256": "76b42450eeb28f2d73ad6fc86ec956bc6e278f17ee17f5e517e0689e8a247483",
      "language": "csharp",
      "size": 337,
      "content": "// 📄 Features/CampaignTracking/Config/TrackingOptions.cs\nnamespace xbytechat.api.Features.CampaignTracking.Config\n{\n    public class TrackingOptions\n    {\n        public string BaseUrl { get; set; } = \"\";\n        public string Secret { get; set; } = \"\";\n        public TimeSpan TokenTtl { get; set; } = TimeSpan.FromDays(30);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignAnalyticsController.cs",
      "sha256": "7542c47e6bbe6d8117004542788bb0f078570eeae04c8045b385fc3b7eb5dde4",
      "language": "csharp",
      "size": 2494,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class CampaignAnalyticsController : BusinessControllerBase\n    {\n        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n        public CampaignAnalyticsController(ICampaignAnalyticsService svc) => _campaignAnalyticsService = svc;\n\n        [HttpGet(\"top-campaigns\")]\n        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n            => Ok(await _campaignAnalyticsService.GetTopCampaignsAsync(BusinessId, count));\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using System.Security.Claims;\n//using xbytechat.api.Features.CampaignTracking.Services;\n\n//namespace xbytechat.api.Features.CampaignTracking.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    [Authorize]\n//    public class CampaignAnalyticsController : ControllerBase\n//    {\n//        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n\n//        public CampaignAnalyticsController(ICampaignAnalyticsService campaignAnalyticsService)\n//        {\n//            _campaignAnalyticsService = campaignAnalyticsService;\n//        }\n\n//        [HttpGet(\"status-dashboard\")]\n//        //public async Task<IActionResult> GetStatusDashboard()\n//        //{\n//        //    var businessIdString = User.FindFirstValue(\"BusinessId\");\n//        //    if (!Guid.TryParse(businessIdString, out var businessId))\n//        //    {\n//        //        return Unauthorized(\"Invalid business identifier.\");\n//        //    }\n//        //    var result = await _campaignAnalyticsService.GetStatusDashboardAsync(businessId);\n//        //    return Ok(result);\n//        //}\n\n//        [HttpGet(\"top-campaigns\")]\n//        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n//        {\n//            var businessIdString = User.FindFirstValue(\"BusinessId\");\n//            if (!Guid.TryParse(businessIdString, out var businessId))\n//            {\n//                return Unauthorized(\"Invalid business identifier.\");\n//            }\n//            var result = await _campaignAnalyticsService.GetTopCampaignsAsync(businessId, count);\n//            return Ok(result);\n//        }\n//    }\n//}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignRetryController.cs",
      "sha256": "655bf809f7169050f0db9d15a805dec886b9f99faf3bb9690dc1296021297787",
      "language": "csharp",
      "size": 1225,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Authorize] // ✅ add this\n    [Route(\"api/campaign-retry\")]\n    public class CampaignRetryController : ControllerBase\n    {\n        private readonly ICampaignRetryService _retryService;\n\n        public CampaignRetryController(ICampaignRetryService retryService)\n        {\n            _retryService = retryService;\n        }\n\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var success = await _retryService.RetrySingleAsync(logId);\n            if (!success) return BadRequest(new { message = \"Retry failed or not allowed for this log.\" });\n            return Ok(new { success = true, message = \"Retry completed.\" });\n        }\n\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAllInCampaign(Guid campaignId)\n            => Ok(new { success = true, retriedCount = await _retryService.RetryFailedInCampaignAsync(campaignId) });\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignSendLogController.cs",
      "sha256": "c867627845ced8dd135c31a3d5e37e8eada1a68184cd22c2bde39a8cc3aff529",
      "language": "csharp",
      "size": 4483,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-logs\")]\n    public class CampaignSendLogController : ControllerBase\n    {\n        private readonly ICampaignSendLogService _logService;\n        private readonly ICampaignRetryService _retryService;\n\n        public CampaignSendLogController(\n            ICampaignSendLogService logService,\n            ICampaignRetryService retryService\n        )\n        {\n            _logService = logService;\n            _retryService = retryService;\n        }\n\n        //[HttpGet(\"campaign/{campaignId}\")]\n        //public async Task<IActionResult> GetLogsByCampaign(Guid campaignId)\n        //{\n        //    var logs = await _logService.GetLogsByCampaignIdAsync(campaignId);\n        //    return Ok(logs);\n        //}\n        [HttpGet(\"campaign/{campaignId}\")]\n        public async Task<IActionResult> GetLogsByCampaign(\n         Guid campaignId,\n         [FromQuery] string? status,\n         [FromQuery] string? search,\n         [FromQuery] int page = 1,\n         [FromQuery] int pageSize = 10)\n        {\n            var result = await _logService.GetLogsByCampaignIdAsync(campaignId, status, search, page, pageSize);\n            return Ok(result);\n        }\n        [HttpGet(\"campaign/{campaignId}/contact/{contactId}\")]\n        public async Task<IActionResult> GetLogsForContact(Guid campaignId, Guid contactId)\n        {\n            var logs = await _logService.GetLogsForContactAsync(campaignId, contactId);\n            return Ok(logs);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddSendLog([FromBody] CampaignSendLogDto dto)\n        {\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _logService.AddSendLogAsync(dto, ipAddress, userAgent);\n            if (!result)\n                return BadRequest(new { message = \"Failed to add send log\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/status\")]\n        public async Task<IActionResult> UpdateDeliveryStatus(Guid logId, [FromBody] DeliveryStatusUpdateDto dto)\n        {\n            var result = await _logService.UpdateDeliveryStatusAsync(logId, dto.Status, dto.DeliveredAt, dto.ReadAt);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/track-click\")]\n        public async Task<IActionResult> TrackClick(Guid logId, [FromBody] ClickTrackDto dto)\n        {\n            var result = await _logService.TrackClickAsync(logId, dto.ClickType);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry a single log using correct interface method\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var result = await _retryService.RetrySingleAsync(logId);\n            if (!result)\n                return BadRequest(new { message = \"Retry failed\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry all failed logs using correct interface method\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAll(Guid campaignId)\n        {\n            var result = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retried = result });\n        }\n        // ✅ FIXED: Get summary of campaign logs as per Campaign ID\n        [HttpGet(\"campaign/{campaignId}/summary\")]\n        public async Task<IActionResult> GetCampaignSummary(Guid campaignId)\n        {\n            var summary = await _logService.GetCampaignSummaryAsync(campaignId);\n            return Ok(summary);\n        }\n\n    }\n\n    public class DeliveryStatusUpdateDto\n    {\n        public string Status { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n\n    public class ClickTrackDto\n    {\n        public string ClickType { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignTrackingController.cs",
      "sha256": "38f08ea7c2c87daf258e01a9cf4b0171600e80f0b166e710daf825b67292cc0b",
      "language": "csharp",
      "size": 20074,
      "content": "// 📄 Features/CampaignTracking/Controllers/CampaignTrackingController.cs\nusing System.Text.Encodings.Web;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.CampaignTracking.Worker;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"r\")] // /r/{token}\n    public class CampaignTrackingController : ControllerBase\n    {\n        private static readonly HtmlEncoder HtmlEnc = HtmlEncoder.Default;\n\n        private readonly ILogger<CampaignTrackingController> _log;\n        private readonly IClickTokenService _token;\n        private readonly IClickEventQueue _queue;\n        private readonly AppDbContext _db;\n\n        public CampaignTrackingController(\n            ILogger<CampaignTrackingController> log,\n            IClickTokenService token,\n            IClickEventQueue queue,\n            AppDbContext db)\n        {\n            _log = log;\n            _token = token;\n            _queue = queue;\n            _db = db;\n        }\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n        //public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        //{\n        //    // 1) Validate token\n        //    if (!_token.TryValidate(token, out var p, out var reason))\n        //    {\n        //        _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n        //        return BadRequest(\"Invalid token.\");\n        //    }\n\n        //    // 2) Normalize + classify destination\n        //    if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n        //    {\n        //        _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n        //        return BadRequest(\"Invalid destination.\");\n        //    }\n\n        //    // 3) Capture client info\n        //    var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n        //    var ua = Request.Headers.UserAgent.ToString();\n        //    var now = DateTime.UtcNow;\n\n        //    // 4) Determine click type (web | call | whatsapp)\n        //    var clickType = ClassifyClickType(safeDest, scheme);\n\n        //    // 4.1) Fetch related ids from the send log (for ContactId & CampaignId)\n        //    Guid? contactId = null;\n        //    Guid campaignId = Guid.Empty;\n        //    try\n        //    {\n        //        var sendLog = await _db.CampaignSendLogs\n        //            .AsNoTracking()\n        //            .Where(x => x.Id == p.cid)\n        //            .Select(x => new { x.ContactId, x.CampaignId })\n        //            .FirstOrDefaultAsync(ct);\n\n        //        if (sendLog is not null)\n        //        {\n        //            contactId = sendLog.ContactId;\n        //            campaignId = sendLog.CampaignId;\n        //        }\n        //        else\n        //        {\n        //            _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Failed to fetch ContactId/CampaignId for cid={Cid}\", p.cid);\n        //    }\n\n        //    // 5) Write-through (guaranteed persistence)\n        //    try\n        //    {\n        //        await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignSendLogId = p.cid,\n        //            CampaignId = campaignId,        // <-- populated if available (else Guid.Empty)\n        //            ContactId = contactId,          // <-- populated if available (nullable)\n        //            ButtonIndex = p.bi,\n        //            ButtonTitle = p.bt,\n        //            Destination = safeDest,\n        //            ClickedAt = now,\n        //            Ip = ip,\n        //            UserAgent = ua,\n        //            ClickType = clickType,\n        //            RunId = csl?.RunId\n        //        }, ct);\n\n        //        await _db.SaveChangesAsync(ct);\n\n        //        _log.LogInformation(\n        //            \"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n        //            p.cid, p.bi, clickType, safeDest);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 6) Enqueue for async worker (best effort) — keeps existing ClickEvent signature\n        //    try\n        //    {\n        //        var enq = _queue.TryWrite(new ClickEvent(\n        //            CampaignSendLogId: p.cid,\n        //            ButtonIndex: p.bi,\n        //            ButtonTitle: p.bt,\n        //            Destination: safeDest,\n        //            ClickedAtUtc: now,\n        //            Ip: ip,\n        //            UserAgent: ua,\n        //            ClickType: clickType\n        //        ));\n        //        _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n        //    }\n\n        //    // 7) First-click fast path\n        //    try\n        //    {\n        //        await _db.Database.ExecuteSqlRawAsync(\n        //            @\"update \"\"CampaignSendLogs\"\"\n        //                set \"\"IsClicked\"\"=TRUE, \"\"ClickedAt\"\"=NOW() at time zone 'utc'\n        //              where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n        //            p.cid);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _log.LogDebug(ex, \"First-click update skipped.\");\n        //    }\n\n        //    // 8) Redirect handling\n        //    if (clickType is \"call\" or \"whatsapp\")\n        //    {\n        //        // Deep link → return an HTML/JS shim to trigger immediately, with a safe fallback link.\n        //        var destHtml = HtmlEnc.Encode(safeDest);\n        //        var destJs = JsEscape(safeDest);\n\n        //        var html = $@\"<!doctype html>\n        //        <html lang=\"\"en\"\">\n        //        <head>\n        //          <meta charset=\"\"utf-8\"\">\n        //          <meta http-equiv=\"\"x-ua-compatible\"\" content=\"\"ie=edge\"\">\n        //          <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n        //          <meta http-equiv=\"\"refresh\"\" content=\"\"0;url={destHtml}\"\">\n        //          <title>Redirecting…</title>\n        //          <style>\n        //            body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;padding:24px;}}\n        //            a{{color:#2563eb;text-decoration:underline;}}\n        //          </style>\n        //          <script>\n        //            // Trigger deep link immediately; reveal fallback if blocked by the browser.\n        //            window.addEventListener('load', function() {{\n        //              try {{ window.location.replace('{destJs}'); }} catch (e) {{}}\n        //              setTimeout(function() {{\n        //                var f = document.getElementById('fallback');\n        //                if (f) f.style.display = 'inline';\n        //              }}, 1200);\n        //            }});\n        //          </script>\n        //        </head>\n        //        <body>\n        //          <p>Redirecting… If you are not redirected automatically, <a id=\"\"fallback\"\" style=\"\"display:none\"\" href=\"\"{destHtml}\"\">tap here</a>.</p>\n        //        </body>\n        //        </html>\";\n\n        //        Response.Headers[\"Cache-Control\"] = \"no-store, max-age=0\";\n        //        Response.Headers[\"Pragma\"] = \"no-cache\";\n        //        Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n        //        Response.Headers[\"Referrer-Policy\"] = \"no-referrer\";\n        //        Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n        //        Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n        //        Response.Headers[\"Content-Security-Policy\"] =\n        //            \"default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; frame-ancestors 'none'\";\n\n        //        return new ContentResult\n        //        {\n        //            Content = html,\n        //            ContentType = \"text/html; charset=utf-8\",\n        //            StatusCode = 200\n        //        };\n        //    }\n\n        //    // Regular web links → normal 302\n        //    return Redirect(safeDest);\n        //}\n\n        // --- helpers ---\n\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n\n\n        //[HttpGet(\"{token}\")]\n        //[AllowAnonymous]\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> RedirectByToken([FromRoute] string token, CancellationToken ct)\n        {\n            // 1) Validate token\n            if (!_token.TryValidate(token, out var p, out var reason))\n            {\n                _log.LogWarning(\"Tracking token rejected. reason={Reason}\", reason);\n                return BadRequest(\"Invalid token.\");\n            }\n\n            // 2) Normalize + classify destination\n            if (!TryNormalizeAllowedDestination(p!.to, out var safeDest, out var scheme))\n            {\n                _log.LogWarning(\"Rejected destination for cid {Cid}: {Dest}\", p.cid, p.to);\n                return BadRequest(\"Invalid destination.\");\n            }\n\n            // 3) Capture client info\n            var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"0.0.0.0\";\n            var ua = Request.Headers.UserAgent.ToString();\n            var now = DateTime.UtcNow;\n\n            // 4) Determine click type (web | call | whatsapp)\n            var clickType = ClassifyClickType(safeDest, scheme);\n\n            // 4.1) Fetch related ids from the send log (ContactId, CampaignId, **RunId**)\n            Guid? contactId = null;\n            Guid campaignId = Guid.Empty;\n            Guid? runId = null; // 👈 NEW\n\n            try\n            {\n                var sendLog = await _db.CampaignSendLogs\n                    .AsNoTracking()\n                    .Where(x => x.Id == p.cid)\n                    .Select(x => new { x.ContactId, x.CampaignId, x.RunId })\n                    .FirstOrDefaultAsync(ct);\n\n                if (sendLog is not null)\n                {\n                    contactId = sendLog.ContactId;\n                    campaignId = sendLog.CampaignId;\n                    runId = sendLog.RunId; // 👈 carry through to click log\n                }\n                else\n                {\n                    _log.LogWarning(\"SendLog not found for click cid={Cid}\", p.cid);\n                }\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Failed to fetch ContactId/CampaignId/RunId for cid={Cid}\", p.cid);\n            }\n\n            // 5) Write-through (guaranteed persistence)\n            try\n            {\n                await _db.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = p.cid,\n                    CampaignId = campaignId,   // populated if available (else Guid.Empty)\n                    ContactId = contactId,     // nullable\n                    ButtonIndex = p.bi,\n                    ButtonTitle = p.bt,\n                    Destination = safeDest,\n                    ClickedAt = now,\n                    Ip = ip,\n                    UserAgent = ua,\n                    ClickType = clickType,\n                    RunId = runId              // 👈 bind click to the same run/session\n                }, ct);\n\n                await _db.SaveChangesAsync(ct);\n\n                _log.LogInformation(\n                    \"CLICK WRITE-THROUGH cid={Cid} idx={Idx} type={Type} dest={Dest}\",\n                    p.cid, p.bi, clickType, safeDest);\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Write-through insert failed. cid={Cid}\", p.cid);\n            }\n\n            // 6) Enqueue for async worker (best effort) — keeps existing ClickEvent signature\n            try\n            {\n                var enq = _queue.TryWrite(new ClickEvent(\n                    CampaignSendLogId: p.cid,\n                    ButtonIndex: p.bi,\n                    ButtonTitle: p.bt,\n                    Destination: safeDest,\n                    ClickedAtUtc: now,\n                    Ip: ip,\n                    UserAgent: ua,\n                    ClickType: clickType\n                ));\n                _log.LogInformation(\"CLICK ENQUEUE cid={Cid} idx={Idx} enqueued={Enqueued}\", p.cid, p.bi, enq);\n            }\n            catch (Exception ex)\n            {\n                _log.LogError(ex, \"Queue write threw. cid={Cid}\", p.cid);\n            }\n\n            // 7) First-click fast path (also writes ClickType)\n            try\n            {\n                await _db.Database.ExecuteSqlRawAsync(\n                    @\"update \"\"CampaignSendLogs\"\"\n                set \"\"IsClicked\"\"=TRUE,\n                    \"\"ClickedAt\"\"=NOW() at time zone 'utc',\n                    \"\"ClickType\"\"={1}\n              where \"\"Id\"\"={0} and \"\"IsClicked\"\"=FALSE;\",\n                    p.cid, clickType);\n            }\n            catch (Exception ex)\n            {\n                _log.LogDebug(ex, \"First-click update skipped.\");\n            }\n\n            // 8) Redirect handling\n            if (clickType is \"call\" or \"whatsapp\")\n            {\n                // Deep link → return an HTML/JS shim to trigger immediately, with a safe fallback link.\n                var destHtml = HtmlEnc.Encode(safeDest);\n                var destJs = JsEscape(safeDest);\n\n                var html = $@\"<!doctype html>\n                        <html lang=\"\"en\"\">\n                        <head>\n                          <meta charset=\"\"utf-8\"\">\n                          <meta http-equiv=\"\"x-ua-compatible\"\" content=\"\"ie=edge\"\">\n                          <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n                          <meta http-equiv=\"\"refresh\"\" content=\"\"0;url={destHtml}\"\">\n                          <title>Redirecting…</title>\n                          <style>\n                            body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;padding:24px;}}\n                            a{{color:#2563eb;text-decoration:underline;}}\n                          </style>\n                          <script>\n                            // Trigger deep link immediately; reveal fallback if blocked by the browser.\n                            window.addEventListener('load', function() {{\n                              try {{ window.location.replace('{destJs}'); }} catch (e) {{}}\n                              setTimeout(function() {{\n                                var f = document.getElementById('fallback');\n                                if (f) f.style.display = 'inline';\n                              }}, 1200);\n                            }});\n                          </script>\n                        </head>\n                        <body>\n                          <p>Redirecting… If you are not redirected automatically, <a id=\"\"fallback\"\" style=\"\"display:none\"\" href=\"\"{destHtml}\"\">tap here</a>.</p>\n                        </body>\n                        </html>\";\n\n                Response.Headers[\"Cache-Control\"] = \"no-store, max-age=0\";\n                Response.Headers[\"Pragma\"] = \"no-cache\";\n                Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n                Response.Headers[\"Referrer-Policy\"] = \"no-referrer\";\n                Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n                Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n                Response.Headers[\"Content-Security-Policy\"] =\n                    \"default-src 'none'; script-src 'unsafe-inline'; style-src 'unsafe-inline'; base-uri 'none'; frame-ancestors 'none'\";\n\n                return new ContentResult\n                {\n                    Content = html,\n                    ContentType = \"text/html; charset=utf-8\",\n                    StatusCode = 200\n                };\n            }\n\n            // Regular web links → normal 302\n            return Redirect(safeDest);\n        }\n\n\n        private static string ClassifyClickType(string normalizedDest, string scheme)\n        {\n            // scheme is pre-normalized by TryNormalizeAllowedDestination\n            if (string.Equals(scheme, \"tel\", StringComparison.OrdinalIgnoreCase)) return \"call\";\n            if (string.Equals(scheme, \"wa\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n            if (string.Equals(scheme, \"whatsapp\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n\n            // http/https → still treat WhatsApp hosts as whatsapp\n            if (normalizedDest.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n            if (normalizedDest.StartsWith(\"https://api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase)) return \"whatsapp\";\n\n            return \"web\";\n        }\n\n        private static string JsEscape(string s) =>\n            s.Replace(\"\\\\\", \"\\\\\\\\\").Replace(\"'\", \"\\\\'\").Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n\n        /// <summary>\n        /// Accepts: http/https/tel/wa/whatsapp, plus shorthand wa.me/... and api.whatsapp.com/...\n        /// Returns normalized absolute string and a normalized scheme hint (\"http\",\"https\",\"tel\",\"wa\",\"whatsapp\").\n        /// </summary>\n        private static bool TryNormalizeAllowedDestination(string? input, out string normalized, out string scheme)\n        {\n            normalized = string.Empty;\n            scheme = string.Empty;\n            if (string.IsNullOrWhiteSpace(input)) return false;\n\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n\n            // Shorthand WhatsApp hosts without scheme → prefix https://\n            if (!cleaned.Contains(\"://\", StringComparison.Ordinal))\n            {\n                if (cleaned.StartsWith(\"wa.me/\", StringComparison.OrdinalIgnoreCase) ||\n                    cleaned.StartsWith(\"api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var guess = \"https://\" + cleaned;\n                    if (Uri.TryCreate(guess, UriKind.Absolute, out var waAbs))\n                    {\n                        normalized = waAbs.AbsoluteUri;\n                        scheme = \"https\";\n                        return true;\n                    }\n                }\n            }\n\n            // WhatsApp custom schemes (wa:, whatsapp:)\n            if (cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalized = cleaned; scheme = \"wa\"; return true;\n            }\n            if (cleaned.StartsWith(\"whatsapp:\", StringComparison.OrdinalIgnoreCase))\n            {\n                normalized = cleaned; scheme = \"whatsapp\"; return true;\n            }\n\n            // Absolute URIs\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri))\n            {\n                // tel:\n                if (uri.Scheme.Equals(\"tel\", StringComparison.OrdinalIgnoreCase))\n                {\n                    normalized = uri.ToString(); scheme = \"tel\"; return true;\n                }\n\n                // http/https (including WhatsApp hosts)\n                if (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase))\n                {\n                    normalized = uri.AbsoluteUri;\n                    scheme = uri.Scheme; // \"http\" or \"https\"\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignLogSummaryDto.cs",
      "sha256": "57aa29e375f6dda32b73602de1a84e9d5e89e3f8bf103914b21bfa14f0b786a9",
      "language": "csharp",
      "size": 415,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignLogSummaryDto\n    {\n        public int TotalSent { get; set; }\n        public int FailedCount { get; set; }\n        public int ClickedCount { get; set; }\n        public DateTime? LastSentAt { get; set; }\n\n        public int Delivered { get; set; }\n        public int Read { get; set; }\n        public int Sent { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignSendLogDto.cs",
      "sha256": "42c34ffaad27eea7cfade390bdbd9220b2abbf7095b92a61d1d3d52e57226306",
      "language": "csharp",
      "size": 1676,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignSendLogDto\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Relationships\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        // 📤 Message Info\n        public Guid RecipientId { get; set; }\n        public string MessageBody { get; set; }\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        // 🕒 Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? SourceChannel { get; set; }\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n\n        // ✅ Enriched metadata\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📈 Click Tracking\n        public bool IsClicked { get; set; }\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Info\n        public string? RetryStatus { get; set; }     // Pending, Retried, Skipped\n        public int RetryCount { get; set; }\n        public DateTime? LastRetryAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignStatusDashboardDto.cs",
      "sha256": "21979b3b1de98ab2567e6485c9c0e4684b848735d36743226caaca66504e9b7b",
      "language": "csharp",
      "size": 1038,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignStatusDashboardDto\n    {\n        public Guid CampaignId { get; set; }\n\n        // 📊 Overall Stats\n        public int TotalRecipients { get; set; }\n        public int SentCount { get; set; }\n        public int DeliveredCount { get; set; }\n        public int ReadCount { get; set; }\n        public int FailedCount { get; set; }\n\n        // 🕒 Delivery Timing (optional but insightful)\n        public DateTime? FirstSentAt { get; set; }\n        public DateTime? LastSentAt { get; set; }\n        public DateTime? FirstReadAt { get; set; }\n        public DateTime? LastReadAt { get; set; }\n\n        // 📉 Delivery Rates\n        public double DeliveryRate => TotalRecipients == 0 ? 0 : (double)DeliveredCount / TotalRecipients * 100;\n        public double ReadRate => TotalRecipients == 0 ? 0 : (double)ReadCount / TotalRecipients * 100;\n        public double FailureRate => TotalRecipients == 0 ? 0 : (double)FailedCount / TotalRecipients * 100;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/DTOs/TopCampaignDto.cs",
      "sha256": "deebf224725de4a79f8363405623b0761fed9b776ec86cc8d6a9b05c5f79940e",
      "language": "csharp",
      "size": 295,
      "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class TopCampaignDto\n    {\n        public Guid CampaignId { get; set; }\n        public string CampaignName { get; set; }\n        public double ReadRate { get; set; }\n        public double ClickThroughRate { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignClickDailyAgg.cs",
      "sha256": "f73f8e07824860d62b98ba1112933870fd6c223a3a75ca759bccf5899d9e9ffd",
      "language": "csharp",
      "size": 571,
      "content": "// 📄 Features/CampaignTracking/Models/CampaignClickDailyAgg.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    [Table(\"CampaignClickDailyAgg\")]\n    public class CampaignClickDailyAgg\n    {\n        [Key] public Guid Id { get; set; }\n        public Guid CampaignId { get; set; }\n        public DateTime Day { get; set; } // date-only (store as date in migration)\n        public int ButtonIndex { get; set; }\n        public long Clicks { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignClickLog.cs",
      "sha256": "c955c29fed1ef4d960a247c80426a21493ab53a3b657a4a21083d2f617d309cb",
      "language": "csharp",
      "size": 1205,
      "content": "// 📄 Features/CampaignTracking/Models/CampaignClickLog.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    [Table(\"CampaignClickLogs\")]\n    public class CampaignClickLog\n    {\n        [Key] public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        // FK through CampaignSendLog to CampaignId & ContactId\n        public Guid CampaignSendLogId { get; set; }\n\n        public Guid CampaignId { get; set; }      // denormalized for fast filtering\n        public Guid? ContactId { get; set; }      // denormalized if available\n\n        public int ButtonIndex { get; set; }\n\n        [MaxLength(120)]\n        public string ButtonTitle { get; set; } = \"\";\n\n        // NEW: \"web\" | \"call\" | \"whatsapp\" (lowercase)\n        [MaxLength(16)]\n        public string ClickType { get; set; } = \"web\";\n\n        [MaxLength(2048)]\n        public string Destination { get; set; } = \"\";\n\n        [MaxLength(64)]\n        public string Ip { get; set; } = \"\";\n\n        [MaxLength(512)]\n        public string UserAgent { get; set; } = \"\";\n\n        public DateTime ClickedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignSendLog.cs",
      "sha256": "992f4eece720ed4be3c8532d2ac23d45c3a04252cd5347f74eac5c1de4c8ac54",
      "language": "csharp",
      "size": 2957,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Models\n{\n    public class CampaignSendLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        public string? MessageId { get; set; } // Unique WAMID from WhatsApp\n        // 🔗 Foreign Keys\n        [Required]\n        public Guid CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public Guid RecipientId { get; set; }\n\n        // 📩 Message Info\n        [Required]\n        public string MessageBody { get; set; } = \"\";\n\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n        public string? SourceChannel { get; set; }\n\n        // ✅ UX-Derived\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📊 Click Tracking\n        public bool IsClicked { get; set; } = false;\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Tracking (💡 New)\n        public int RetryCount { get; set; } = 0;                 // Number of retry attempts\n        public DateTime? LastRetryAt { get; set; }               // When retry last happened\n        public string? LastRetryStatus { get; set; }             // Success / Failed\n        public bool AllowRetry { get; set; } = true;             // Flag to enable/disable retry\n\n        // 👁 Navigation\n      \n        public Contact? Contact { get; set; }\n        public CampaignRecipient? Recipient { get; set; }\n\n\n        // 🔗 MessageLog reference (optional)\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        // 🆕 Flow context snapshot for deterministic click resolution\n        public Guid? CTAFlowConfigId { get; set; }   // which flow this send belongs to (optional)\n        public Guid? CTAFlowStepId { get; set; }     // the entry step id (optional)\n\n        [Column(TypeName = \"text\")]\n        public string? ButtonBundleJson { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignAnalyticsService.cs",
      "sha256": "93a5dbda2d06118a7c3384bd9306b6de7eaf6979d499ca8cc97eacfe6c7f4251",
      "language": "csharp",
      "size": 3079,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n\n\n    public class CampaignAnalyticsService : ICampaignAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n            //_context = context;\n        }\n\n        public async Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId)\n        {\n            var logs = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .ToListAsync();\n\n            if (!logs.Any()) return null;\n\n            return new CampaignStatusDashboardDto\n            {\n                CampaignId = campaignId,\n                TotalRecipients = logs.Count,\n                SentCount = logs.Count(l => l.SendStatus == \"Sent\"),\n                DeliveredCount = logs.Count(l => l.SendStatus == \"Delivered\"),\n                ReadCount = logs.Count(l => l.SendStatus == \"Read\"),\n                FailedCount = logs.Count(l => l.SendStatus == \"Failed\"),\n                FirstSentAt = logs.Min(l => l.SentAt),\n                LastSentAt = logs.Max(l => l.SentAt),\n                FirstReadAt = logs.Min(l => l.ReadAt),\n                LastReadAt = logs.Max(l => l.ReadAt)\n            };\n        }\n\n        public async Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5)\n        {\n            var campaignStats = await _context.CampaignSendLogs\n                .Where(log => log.BusinessId == businessId)\n                .GroupBy(log => log.CampaignId)\n                .Select(group => new\n                {\n                    CampaignId = group.Key,\n                    TotalSent = group.Count(),\n                    TotalRead = group.Count(l => l.ReadAt != null),\n                    TotalClicked = group.Count(l => l.ClickedAt != null)\n                })\n                .Where(s => s.TotalSent > 0)\n                .OrderByDescending(s => (double)s.TotalClicked / s.TotalSent)\n                .Take(count)\n                .ToListAsync();\n\n            if (!campaignStats.Any())\n            {\n                return new List<TopCampaignDto>();\n            }\n\n            var campaignIds = campaignStats.Select(s => s.CampaignId).ToList();\n            var campaigns = await _context.Campaigns\n                .Where(c => campaignIds.Contains(c.Id))\n                .ToDictionaryAsync(c => c.Id, c => c.Name);\n\n            return campaignStats.Select(s => new TopCampaignDto\n            {\n                CampaignId = s.CampaignId,\n                CampaignName = campaigns.GetValueOrDefault(s.CampaignId, \"Unnamed Campaign\"),\n                ReadRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalRead / s.TotalSent) * 100, 2) : 0,\n                ClickThroughRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalClicked / s.TotalSent) * 100, 2) : 0\n            });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignRetryService.cs",
      "sha256": "c006d284f3bc500e9eb4d5b0191ac34ccdd5643bc4742c18b5af20ec13334116",
      "language": "csharp",
      "size": 2911,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignRetryService : ICampaignRetryService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRetryService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ✅ Public method: Retry a single failed log\n        public async Task<bool> RetrySingleAsync(Guid logId)\n        {\n            return await RetrySendLogAsync(logId);\n        }\n\n        // ✅ Public method: Retry all failed logs in a campaign\n        public async Task<int> RetryFailedInCampaignAsync(Guid campaignId)\n        {\n            return await RetryAllFailedInCampaignAsync(campaignId);\n        }\n\n        // 🔁 Private: Retry a specific log\n        private async Task<bool> RetrySendLogAsync(Guid logId)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (log == null || log.SendStatus != \"Failed\" || !log.AllowRetry)\n                return false;\n\n            // 🔄 Simulate re-send (replace with actual IMessageService.SendAsync later)\n            bool sent = SimulateSendMessage(log);\n\n            log.RetryCount += 1;\n            log.LastRetryAt = DateTime.UtcNow;\n            log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n            log.SendStatus = sent ? \"Sent\" : \"Failed\";\n            log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n            await _context.SaveChangesAsync();\n            return sent;\n        }\n\n        // 🔁 Private: Retry all failed logs in a given campaign\n        private async Task<int> RetryAllFailedInCampaignAsync(Guid campaignId)\n        {\n            var failedLogs = await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.SendStatus == \"Failed\" && log.AllowRetry)\n                .ToListAsync();\n\n            int successCount = 0;\n\n            foreach (var log in failedLogs)\n            {\n                bool sent = SimulateSendMessage(log);\n\n                log.RetryCount += 1;\n                log.LastRetryAt = DateTime.UtcNow;\n                log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n                log.SendStatus = sent ? \"Sent\" : \"Failed\";\n                log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n                if (sent) successCount++;\n            }\n\n            await _context.SaveChangesAsync();\n            return successCount;\n        }\n\n        // 🔧 Simulated send (replace with actual WhatsApp message logic)\n        private bool SimulateSendMessage(CampaignSendLog log)\n        {\n            return new Random().NextDouble() < 0.9; // 90% success rate\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogEnricher.cs",
      "sha256": "6d1155127869663e221b9c1a80e5dce49dd32c3d57d218d8157691ed3bc8edeb",
      "language": "csharp",
      "size": 872,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogEnricher : ICampaignSendLogEnricher\n    {\n        public async Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress)\n        {\n            // 🧠 Device Detection (simplified for now)\n            log.DeviceInfo = userAgent;\n\n            // 🌍 IP Lookup - Mocked for now\n            if (!string.IsNullOrWhiteSpace(ipAddress))\n            {\n                log.IpAddress = ipAddress;\n                log.SourceChannel = \"API\"; // Example: mark origin\n                // Future: Use IPinfo or GeoLite2 for full location enrichment\n            }\n\n            // ⌛ Simulate async task for compatibility\n            await Task.CompletedTask;\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogService.cs",
      "sha256": "b6b85401c517bea5cb1eee0bd5a1030b7f3e7c4b8820dfa3ba653f7cd372f768",
      "language": "csharp",
      "size": 8341,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogService : ICampaignSendLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ICampaignSendLogEnricher _enricher;\n\n\n        public CampaignSendLogService(AppDbContext context, ICampaignSendLogEnricher enricher)\n        {\n            _context = context;\n            _enricher = enricher;\n        }\n\n        public async Task<PagedResult<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId, string? status, string? search, int page, int pageSize)\n        {\n            var query = _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId)\n                .Include(log => log.Contact)\n                .AsNoTracking();\n\n            // Apply filters to the database query\n            if (!string.IsNullOrEmpty(status))\n            {\n                query = query.Where(log => log.SendStatus == status);\n            }\n\n            if (!string.IsNullOrEmpty(search))\n            {\n                var keyword = search.ToLower();\n                query = query.Where(log =>\n                    (log.Contact != null && log.Contact.Name.ToLower().Contains(keyword)) ||\n                    (log.Contact != null && log.Contact.PhoneNumber.Contains(keyword)));\n            }\n\n            var totalCount = await query.CountAsync();\n\n            var logs = await query\n                .OrderByDescending(log => log.CreatedAt)\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    ContactName = log.Contact != null ? log.Contact.Name : \"N/A\",\n                    ContactPhone = log.Contact != null ? log.Contact.PhoneNumber : \"-\",\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n\n            return new PagedResult<CampaignSendLogDto>\n            {\n                Items = logs,\n                TotalCount = totalCount,\n                Page = page,\n                PageSize = pageSize\n            };\n        }\n        public async Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId)\n        {\n            return await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.ContactId == contactId)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    IpAddress = log.IpAddress,\n                    DeviceInfo = log.DeviceInfo,\n                    MacAddress = log.MacAddress,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n        }\n\n        // 🆕 Create a new send log (with enrichment)\n        public async Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent)\n        {\n            var log = new CampaignSendLog\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = dto.CampaignId,\n                ContactId = dto.ContactId,\n                MessageBody = dto.MessageBody,\n                TemplateId = dto.TemplateId,\n                SendStatus = dto.SendStatus,\n                ErrorMessage = dto.ErrorMessage,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = dto.SentAt,\n                DeliveredAt = dto.DeliveredAt,\n                ReadAt = dto.ReadAt,\n                SourceChannel = dto.SourceChannel,\n                IsClicked = dto.IsClicked,\n                ClickedAt = dto.ClickedAt,\n                ClickType = dto.ClickType,\n                RecipientId = dto.RecipientId\n            };\n\n            // ✅ Use enrichment service\n            await _enricher.EnrichAsync(log, userAgent, ipAddress);\n\n            _context.CampaignSendLogs.Add(log);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📨 Update delivery or read status\n        public async Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.SendStatus = status;\n            log.DeliveredAt = deliveredAt ?? log.DeliveredAt;\n            log.ReadAt = readAt ?? log.ReadAt;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📈 Track click (CTA)\n        public async Task<bool> TrackClickAsync(Guid logId, string clickType)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.IsClicked = true;\n            log.ClickedAt = DateTime.UtcNow;\n            log.ClickType = clickType;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n        public async Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId)\n        {\n            // This single, efficient query calculates all stats directly in the database.\n            var summary = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .GroupBy(l => 1) // Group by a constant to aggregate all results\n                .Select(g => new\n                {\n                    TotalRecipients = g.Count(),\n\n                    // CORRECTED LOGIC: A message is \"Sent\" if its status is NOT \"Failed\".\n                    // This correctly includes messages that are \"Sent\", \"Delivered\", or \"Read\".\n                    SentCount = g.Count(l => l.SendStatus != \"Failed\"),\n\n                    FailedCount = g.Count(l => l.SendStatus == \"Failed\"),\n                    ClickedCount = g.Count(l => l.IsClicked),\n                    DeliveredCount = g.Count(l => l.DeliveredAt != null),\n                    ReadCount = g.Count(l => l.ReadAt != null),\n                    LastSentAt = g.Max(l => l.SentAt)\n                })\n                .FirstOrDefaultAsync();\n\n            if (summary == null)\n            {\n                // Return an empty DTO if no logs are found for the campaign\n                return new CampaignLogSummaryDto();\n            }\n\n            return new CampaignLogSummaryDto\n            {\n                TotalSent = summary.TotalRecipients,\n                Sent = summary.SentCount,\n                FailedCount = summary.FailedCount,\n                ClickedCount = summary.ClickedCount,\n                Delivered = summary.DeliveredCount,\n                Read = summary.ReadCount,\n                LastSentAt = summary.LastSentAt\n            };\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ClickTokenService.cs",
      "sha256": "b80c48d547509139d45775d1f8447eceeec7d399e27cd9a55c20dc1aecb854fb",
      "language": "csharp",
      "size": 3152,
      "content": "// 📄 Features/CampaignTracking/Services/ClickTokenService.cs\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.AspNetCore.WebUtilities;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CampaignTracking.Config;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public record ClickTokenPayload(\n        Guid cid,            // CampaignSendLogId\n        int bi,              // button index\n        string bt,           // button title (optional)\n        string to,           // destination absolute URL\n        long iat,            // issued at (unix seconds)\n        long exp             // expiry (unix seconds)\n    );\n\n    public interface IClickTokenService\n    {\n        string Create(ClickTokenPayload payload);\n        bool TryValidate(string token, out ClickTokenPayload? payload, out string? error);\n    }\n\n    public class ClickTokenService : IClickTokenService\n    {\n        private readonly byte[] _key;\n\n        public ClickTokenService(IOptions<TrackingOptions> opt)\n        {\n            _key = Encoding.UTF8.GetBytes(opt.Value.Secret ?? throw new ArgumentNullException(nameof(opt.Value.Secret)));\n        }\n\n        public string Create(ClickTokenPayload payload)\n        {\n            var json = JsonSerializer.Serialize(payload);\n            var data = Encoding.UTF8.GetBytes(json);\n            var body = WebEncoders.Base64UrlEncode(data);\n\n            var sig = ComputeHmac(body);\n            return $\"{body}.{sig}\";\n        }\n\n        public bool TryValidate(string token, out ClickTokenPayload? payload, out string? error)\n        {\n            payload = null;\n            error = null;\n\n            var parts = token.Split('.');\n            if (parts.Length != 2) { error = \"format\"; return false; }\n\n            var body = parts[0];\n            var sig = parts[1];\n\n            var expected = ComputeHmac(body);\n            // timing-safe compare\n            if (!CryptographicOperations.FixedTimeEquals(Encoding.UTF8.GetBytes(sig), Encoding.UTF8.GetBytes(expected)))\n            { error = \"bad-signature\"; return false; }\n\n            try\n            {\n                var bytes = WebEncoders.Base64UrlDecode(body);\n                var obj = JsonSerializer.Deserialize<ClickTokenPayload>(bytes);\n                if (obj is null) { error = \"decode\"; return false; }\n\n                var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n                if (now > obj.exp) { error = \"expired\"; return false; }\n\n                // minimal URL sanity check\n                if (!Uri.TryCreate(obj.to, UriKind.Absolute, out var _)) { error = \"bad-destination\"; return false; }\n\n                payload = obj;\n                return true;\n            }\n            catch (Exception ex)\n            {\n                error = \"exception:\" + ex.GetType().Name;\n                return false;\n            }\n        }\n\n        private string ComputeHmac(string body)\n        {\n            using var h = new HMACSHA256(_key);\n            var sig = h.ComputeHash(Encoding.UTF8.GetBytes(body));\n            return WebEncoders.Base64UrlEncode(sig);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignAnalyticsService.cs",
      "sha256": "c4c188f0eba3b537c076a7fc42ef62094de1ced491abcaecb619097e40debb8b",
      "language": "csharp",
      "size": 437,
      "content": "using xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignAnalyticsService\n    {\n       // Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId);\n        Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5);\n        Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignRetryService.cs",
      "sha256": "1211609bf9f58a20712fb625fd9e5691ba959d0f12ddde94e3d869cdf1cd9088",
      "language": "csharp",
      "size": 546,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignRetryService\n    {\n\n        // Retry a single failed message log by its ID.\n        // will be used when user clicks \"Retry Now\" on a log row.\n        Task<bool> RetrySingleAsync(Guid logId);\n\n\n        // Retry all failed messages in a campaign where retry is allowed.\n        // will support \"Retry All Failed\" button from Campaign logs.\n        Task<int> RetryFailedInCampaignAsync(Guid campaignId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogEnricher.cs",
      "sha256": "9204a2182522e06e53fe6beb21100820231943995d044f01feb200bdcaa521de",
      "language": "csharp",
      "size": 290,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogEnricher\n    {\n        Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogService.cs",
      "sha256": "092d86318ec5e38dcb7baef591d1796d1f6942335e39f850aec69e7a5e870407",
      "language": "csharp",
      "size": 1267,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogService\n    {\n        // This is the NEW signature that matches your updated service and controller\n        Task<PagedResult<CampaignSendLogDto>> GetLogsByCampaignIdAsync(\n            Guid campaignId, string? status, string? search, int page, int pageSize);\n        // 📍 Get logs for a specific contact in a campaign\n        Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId);\n\n        // 🆕 Add a new send log entry with enrichment (IP, User-Agent)\n        Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent);\n\n        // 📨 Update delivery or read status\n        Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt);\n\n        // 📈 Track CTA click (e.g., BuyNow, ViewDetails)\n        Task<bool> TrackClickAsync(Guid logId, string clickType);\n        // 📊 Get summary of campaign logs\n        Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/ClickEvent.cs",
      "sha256": "feba0a8efef3e111690aeca876198178018024d5c39d3415d1cb3db163a8e52e",
      "language": "csharp",
      "size": 380,
      "content": "// Features/CampaignTracking/Worker/ClickEvent.cs\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public sealed record ClickEvent(\n        Guid CampaignSendLogId,\n        int ButtonIndex,\n        string ButtonTitle,\n        string Destination,\n        DateTime ClickedAtUtc,\n        string Ip,\n        string UserAgent,\n         string ClickType\n         \n    );\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/ClickLogWorker.cs",
      "sha256": "6c5f66aa812a1532420b44d66e9a0d9b72234af71077dbb32151c78d78d30a97",
      "language": "csharp",
      "size": 8009,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public sealed class ClickLogWorker : BackgroundService\n    {\n        private readonly ILogger<ClickLogWorker> _log;\n        private readonly IClickEventQueue _queue;\n        private readonly IServiceScopeFactory _scopeFactory;\n\n        public ClickLogWorker(\n            ILogger<ClickLogWorker> log,\n            IClickEventQueue queue,\n            IServiceScopeFactory scopeFactory)\n        {\n            _log = log;\n            _queue = queue;\n            _scopeFactory = scopeFactory;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _log.LogInformation(\"ClickLogWorker started\");\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                List<ClickEvent> batch;\n                try\n                {\n                    batch = await _queue.ReadBatchAsync(200, TimeSpan.FromSeconds(1), stoppingToken);\n                    if (batch.Count == 0) continue;\n\n                    // quick visibility: confirm we are ingesting call/whatsapp/web events\n                    var byType = batch.GroupBy(e => e.ClickType ?? \"web\")\n                                      .Select(g => $\"{g.Key}:{g.Count()}\")\n                                      .ToArray();\n                    _log.LogInformation(\"WORKER processing {Count} events [{Kinds}]\",\n                        batch.Count, string.Join(\", \", byType));\n                }\n                catch (OperationCanceledException)\n                {\n                    break;\n                }\n                catch (Exception ex)\n                {\n                    _log.LogError(ex, \"Queue read failed; retrying\");\n                    try { await Task.Delay(500, stoppingToken); } catch { /* ignore */ }\n                    continue;\n                }\n\n                // nothing to do\n                if (batch.Count == 0) continue;\n\n                try\n                {\n                    using var scope = _scopeFactory.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // Prefetch CampaignId for this batch (we only need CampaignId for the aggregates)\n                    var sendIds = batch.Select(b => b.CampaignSendLogId).Distinct().ToList();\n                    if (sendIds.Count == 0) continue;\n\n                    var sendMap = await db.CampaignSendLogs\n                        .Where(s => sendIds.Contains(s.Id))\n                        .Select(s => new { s.Id, s.CampaignId })\n                        .ToDictionaryAsync(s => s.Id, s => s.CampaignId, stoppingToken);\n\n                    // Prepare aggregate groups: (CampaignId, Day, ButtonIndex) -> count\n                    var groups = batch\n                        .Select(e =>\n                        {\n                            sendMap.TryGetValue(e.CampaignSendLogId, out var campaignId);\n                            return new { CampaignId = campaignId, Day = e.ClickedAtUtc.Date, e.ButtonIndex };\n                        })\n                        .Where(x => x.CampaignId != Guid.Empty)\n                        .GroupBy(x => new { x.CampaignId, x.Day, x.ButtonIndex })\n                        .Select(g => new { g.Key.CampaignId, g.Key.Day, g.Key.ButtonIndex, Count = g.Count() })\n                        .ToList();\n\n                    if (groups.Count == 0) continue;\n\n                    foreach (var g in groups)\n                    {\n                        await db.Database.ExecuteSqlRawAsync(@\"\n                    insert into \"\"CampaignClickDailyAgg\"\" (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\", \"\"Clicks\"\")\n                    values ({0}, {1}, {2}, {3})\n                    on conflict (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\")\n                    do update set \"\"Clicks\"\" = \"\"CampaignClickDailyAgg\"\".\"\"Clicks\"\" + {3};\",\n                            g.CampaignId, g.Day, g.ButtonIndex, g.Count);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _log.LogError(ex, \"Aggregate update failed; skipped this batch.\");\n                }\n            }\n\n            _log.LogInformation(\"ClickLogWorker stopped\");\n        }\n    }\n}\n\n\n//using Microsoft.EntityFrameworkCore;\n//using xbytechat.api;\n\n//namespace xbytechat.api.Features.CampaignTracking.Worker\n//{\n//    public sealed class ClickLogWorker : BackgroundService\n//    {\n//        private readonly ILogger<ClickLogWorker> _log;\n//        private readonly IClickEventQueue _queue;\n//        private readonly IServiceScopeFactory _scopeFactory;\n\n//        public ClickLogWorker(\n//            ILogger<ClickLogWorker> log,\n//            IClickEventQueue queue,\n//            IServiceScopeFactory scopeFactory)\n//        {\n//            _log = log;\n//            _queue = queue;\n//            _scopeFactory = scopeFactory;\n//        }\n\n//        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n//        {\n//            _log.LogInformation(\"ClickLogWorker started\");\n\n//            while (!stoppingToken.IsCancellationRequested)\n//            {\n//                List<ClickEvent> batch;\n//                try\n//                {\n//                    batch = await _queue.ReadBatchAsync(200, TimeSpan.FromSeconds(1), stoppingToken);\n//                    if (batch.Count == 0) continue;\n//                    _log.LogInformation(\"WORKER processing {Count} events (aggregates only)\", batch.Count);\n//                }\n//                catch (OperationCanceledException) { break; }\n//                catch (Exception ex)\n//                {\n//                    _log.LogError(ex, \"Queue read failed; retrying\");\n//                    try { await Task.Delay(500, stoppingToken); } catch { }\n//                    continue;\n//                }\n\n//                try\n//                {\n//                    using var scope = _scopeFactory.CreateScope();\n//                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n//                    // Prefetch CampaignId for this batch\n//                    var sendIds = batch.Select(b => b.CampaignSendLogId).Distinct().ToList();\n//                    var sendMap = await db.CampaignSendLogs\n//                        .Where(s => sendIds.Contains(s.Id))\n//                        .Select(s => new { s.Id, s.CampaignId })\n//                        .ToDictionaryAsync(s => s.Id, s => s.CampaignId, stoppingToken);\n\n//                    // Build aggregate groups\n//                    var groups = batch\n//                        .Select(e =>\n//                        {\n//                            sendMap.TryGetValue(e.CampaignSendLogId, out var campaignId);\n//                            return new { CampaignId = campaignId, Day = e.ClickedAtUtc.Date, e.ButtonIndex };\n//                        })\n//                        .Where(x => x.CampaignId != Guid.Empty)\n//                        .GroupBy(x => new { x.CampaignId, x.Day, x.ButtonIndex })\n//                        .Select(g => new { g.Key.CampaignId, g.Key.Day, g.Key.ButtonIndex, Count = g.Count() })\n//                        .ToList();\n\n//                    foreach (var g in groups)\n//                    {\n//                        await db.Database.ExecuteSqlRawAsync(@\"\n//insert into \"\"CampaignClickDailyAgg\"\" (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\", \"\"Clicks\"\")\n//values ({0}, {1}, {2}, {3})\n//on conflict (\"\"CampaignId\"\", \"\"Day\"\", \"\"ButtonIndex\"\")\n//do update set \"\"Clicks\"\" = \"\"CampaignClickDailyAgg\"\".\"\"Clicks\"\" + {3};\",\n//                            g.CampaignId, g.Day, g.ButtonIndex, g.Count);\n//                    }\n//                }\n//                catch (Exception ex)\n//                {\n//                    _log.LogError(ex, \"Aggregate update failed; skipped.\");\n//                }\n//            }\n\n//            _log.LogInformation(\"ClickLogWorker stopped\");\n//        }\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/IClickEventQueue.cs",
      "sha256": "a0e8a3bbb51c949024de93f0d4794c3ed494cc047e0b7dafdabe4cf696dad89c",
      "language": "csharp",
      "size": 304,
      "content": "// Features/CampaignTracking/Worker/IClickEventQueue.cs\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public interface IClickEventQueue\n    {\n        bool TryWrite(ClickEvent evt);\n        Task<List<ClickEvent>> ReadBatchAsync(int maxItems, TimeSpan wait, CancellationToken ct);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignTracking/Worker/InProcessClickEventQueue.cs",
      "sha256": "8344c869f22df147598c7b1db117ba72d4c518901138838f7fed724201392009",
      "language": "csharp",
      "size": 1254,
      "content": "using System.Threading.Channels;\n\nnamespace xbytechat.api.Features.CampaignTracking.Worker\n{\n    public sealed class InProcessClickEventQueue : IClickEventQueue\n    {\n        private readonly Channel<ClickEvent> _ch;\n\n        public InProcessClickEventQueue(int capacity = 20_000)\n        {\n            _ch = Channel.CreateBounded<ClickEvent>(new BoundedChannelOptions(capacity)\n            {\n                // keep newest; never block redirect\n                FullMode = BoundedChannelFullMode.DropOldest,\n                SingleReader = true,\n                SingleWriter = false\n            });\n        }\n\n        public bool TryWrite(ClickEvent evt) => _ch.Writer.TryWrite(evt);\n\n        public async Task<List<ClickEvent>> ReadBatchAsync(int maxItems, TimeSpan wait, CancellationToken ct)\n        {\n            var list = new List<ClickEvent>(maxItems);\n            using var cts = CancellationTokenSource.CreateLinkedTokenSource(ct);\n            cts.CancelAfter(wait);\n\n            while (list.Count < maxItems && await _ch.Reader.WaitToReadAsync(cts.Token))\n            {\n                while (list.Count < maxItems && _ch.Reader.TryRead(out var item))\n                    list.Add(item);\n            }\n            return list;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Controllers/CatalogDashboardController.cs",
      "sha256": "f9186d5de3a12145a3d7a2411736c6510ca02a7b70409ebdcaaa0de5172c0370",
      "language": "csharp",
      "size": 1708,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/catalog-dashboard\")]\n    public class CatalogDashboardController : ControllerBase\n    {\n        private readonly ICatalogDashboardService _dashboardService;\n\n        public CatalogDashboardController(ICatalogDashboardService dashboardService)\n        {\n            _dashboardService = dashboardService;\n        }\n\n        [HttpGet(\"summary\")]\n        public async Task<ActionResult<CatalogDashboardSummaryDto>> GetSummary([FromQuery] Guid businessId)\n        {\n            var summary = await _dashboardService.GetDashboardSummaryAsync(businessId);\n            return Ok(summary);\n        }\n\n        [HttpGet(\"top-products\")]\n        public async Task<IActionResult> GetTopClickedProducts([FromQuery] Guid businessId, [FromQuery] int topN = 5)\n        {\n            var topProducts = await _dashboardService.GetTopClickedProductsAsync(businessId, topN);\n            return Ok(topProducts);\n        }\n        [HttpGet(\"cta-summary\")]\n        public async Task<IActionResult> GetCtaJourneySummary([FromQuery] Guid businessId)\n        {\n            var stats = await _dashboardService.GetCtaJourneyStatsAsync(businessId);\n            return Ok(stats);\n        }\n        [HttpGet(\"product-cta-breakdown\")]\n        public async Task<IActionResult> GetProductCtaBreakdown([FromQuery] Guid businessId)\n        {\n            var breakdown = await _dashboardService.GetProductCtaBreakdownAsync(businessId);\n            return Ok(breakdown);\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Controllers/CatalogTrackingController.cs",
      "sha256": "85581ce69ed9dbbad069ca060c3e8a2c356ec348d74d860ed2ed1905c46f9514",
      "language": "csharp",
      "size": 1696,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/catalog-tracking\")]\n    public class CatalogTrackingController : ControllerBase\n    {\n        private readonly ICatalogTrackingService _trackingService;\n        private readonly ILogger<CatalogTrackingController> _logger;\n\n        public CatalogTrackingController(\n            ICatalogTrackingService trackingService,\n            ILogger<CatalogTrackingController> logger)\n        {\n            _trackingService = trackingService;\n            _logger = logger;\n        }\n\n        [HttpPost(\"log-click\")]\n        public async Task<IActionResult> LogClick([FromBody] CatalogClickLogDto dto)\n        {\n            var result = await _trackingService.LogClickAsync(dto);\n\n            if (!result.Success)\n            {\n                _logger.LogWarning(\"❌ Catalog click log failed: {Msg}\", result.Message);\n                return BadRequest(result);\n            }\n\n            return StatusCode(201, result);\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 5)\n        {\n            var result = await _trackingService.GetRecentLogsAsync(limit);\n\n            if (!result.Success)\n            {\n                _logger.LogError(\"❌ Failed to fetch recent logs: {Error}\", result.ErrorMessage);\n                return StatusCode(500, result);\n            }\n\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Controllers/ProductController.cs",
      "sha256": "96a44de270bbb3d5a3b88cc161908c14045b78ca5adab88fb776640f55de1a1b",
      "language": "csharp",
      "size": 3021,
      "content": "// 📄 File: Features/Catalog/Controllers/ProductController.cs\n\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Helpers;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Middleware.Attributes;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProductController : ControllerBase\n    {\n        private readonly IProductService _productService;\n\n        public ProductController(IProductService productService)\n        {\n            _productService = productService;\n        }\n\n        // ✅ GET /api/product?businessId=...\n        [HttpGet]\n        [RequirePermission(\"ViewCatalog\")]\n        public async Task<IActionResult> GetAll([FromQuery] Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(ResponseResult.ErrorInfo(\"BusinessId is required.\"));\n\n            var result = await _productService.GetProductsByBusinessIdAsync(businessId);\n            return Ok(result);\n        }\n\n        // ✅ POST /api/product\n        [HttpPost]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Create([FromBody] CreateProductDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values\n                    .SelectMany(v => v.Errors)\n                    .Select(e => e.ErrorMessage)\n                    .ToList();\n\n                var errorString = string.Join(\"; \", errors);\n                return BadRequest(ResponseResult.ErrorInfo(\"Invalid product data.\", errorString));\n            }\n\n            var result = await _productService.AddProductAsync(dto);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return StatusCode(201, result);\n        }\n\n        // ✅ DELETE /api/product/{id}?businessId=...\n        [HttpDelete(\"{id}\")]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Delete(Guid id, [FromQuery] Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(ResponseResult.ErrorInfo(\"BusinessId is required.\"));\n\n            var result = await _productService.RemoveProductAsync(id, businessId);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return Ok(result);\n        }\n\n        // ✅ PUT /api/product/{id}\n        [HttpPut(\"{id}\")]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] UpdateProductDto dto)\n        {\n            if (id != dto.Id)\n                return BadRequest(ResponseResult.ErrorInfo(\"ID mismatch between route and body.\"));\n\n            var result = await _productService.UpdateProductAsync(dto);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return Ok(result);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CatalogClickLogDto.cs",
      "sha256": "901cea612e459695f97b806841df45393d04066624affedbfd85cc9d7d3899ce",
      "language": "csharp",
      "size": 979,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CatalogClickLogDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid? ContactId { get; set; }  // ✅ Add this\n        public Guid? ProductId { get; set; }\n\n        public string? UserId { get; set; }\n        public string? UserName { get; set; }\n        public string? UserPhone { get; set; }\n\n        public string? BotId { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public string? CTAJourney { get; set; }\n        public Guid? MessageLogId { get; set; }      // ✅ ADD THIS FIELD\n        public string? RefMessageId { get; set; }\n\n        public string TemplateId { get; set; }\n        public string ButtonText { get; set; }\n\n        // 🧠 Optional: Used for A/B tracking and analytics\n        public string? PlanSnapshot { get; set; }\n\n        public string? Source { get; set; } // ✅ Add this\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CatalogDashboardSummaryDto.cs",
      "sha256": "31e171cf2d8c5bc006b770f4be2a968db3300aaad51072555faecd119e0e0e07",
      "language": "csharp",
      "size": 698,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CatalogDashboardSummaryDto\n    {\n        // Engagement Metrics\n        public int TotalMessagesSent { get; set; }\n        public int? UniqueCustomersMessaged { get; set; }\n        public int? ProductClicks { get; set; }\n\n        // Catalog Overview\n        public int? ActiveProducts { get; set; }\n        public int? ProductsSharedViaWhatsApp { get; set; }\n\n        // Lead Intelligence\n        public int? RepeatClickers { get; set; }\n        public int? NewClickersToday { get; set; }\n\n        // Timestamps\n        public DateTime? LastCatalogClickAt { get; set; }\n        public DateTime? LastMessageSentAt { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CreateProductDto.cs",
      "sha256": "8605a9900a0537d7cec14264a91a4a4432debcdaafb06cff99b177460bd47233",
      "language": "csharp",
      "size": 472,
      "content": "// File: Features/Catalog/DTOs/CreateProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CreateProductDto\n    {\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/CtaJourneyStatsDto.cs",
      "sha256": "ca4efb6e222da04add4d8f9892be95a16ae180b34e53eec32d300c471ea503bd",
      "language": "csharp",
      "size": 188,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CtaJourneyStatsDto\n    {\n        public string CTAJourney { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/ProductCtaBreakdownDto.cs",
      "sha256": "a94adfe171430503ede80ebb733fc9983f3fe1eae04b4a5a4ed6eb14d354bc10",
      "language": "csharp",
      "size": 284,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class ProductCtaBreakdownDto\n    {\n        public Guid ProductId { get; set; }\n        public string ProductName { get; set; }\n        public string CTAJourney { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/ProductDto.cs",
      "sha256": "9351e6b36ce1f707bd46bb92652331f1751b150a9d062ecfd31572a0998d59b7",
      "language": "csharp",
      "size": 549,
      "content": "// File: Features/Catalog/DTOs/ProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class ProductDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/TopProductDto.cs",
      "sha256": "464918c2b2d66c5710042f7d26d7b64fc8f4fb0380f12e7c756a0d248e613684",
      "language": "csharp",
      "size": 228,
      "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class TopProductDto\n    {\n        public Guid ProductId { get; set; }\n        public string ProductName { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/DTOs/UpdateProductDto.cs",
      "sha256": "3d2fa63b4ce50da54504b1efa60375305ee53bd12498eb5c359bec2f13aeb11c",
      "language": "csharp",
      "size": 511,
      "content": "// File: Features/Catalog/DTOs/UpdateProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class UpdateProductDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Models/CatalogClickLog.cs",
      "sha256": "04b5faf86ec274241aa075f5ba6309899ae07f9c0074d1a34285b4f7c96b437d",
      "language": "csharp",
      "size": 1636,
      "content": "namespace xbytechat.api.Features.Catalog.Models\n{\n    public class CatalogClickLog\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Business & Product Info\n        public Guid BusinessId { get; set; }\n        public Guid? ProductId { get; set; }\n\n        // 👤 Customer Info\n        public string? UserId { get; set; }\n        public string? UserName { get; set; }\n        public string? UserPhone { get; set; }\n\n        // 🤖 Bot / Messaging Context\n        public string? BotId { get; set; }\n\n        // 🛍️ Browsing Context\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n\n        // 🔘 CTA Clicked\n        public string? CTAJourney { get; set; }\n        public string TemplateId { get; set; }\n        public string RefMessageId { get; set; }\n        public string ButtonText { get; set; }\n\n        // 🕒 Meta\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n\n        // ✅ CRM / Campaign / Analytics\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? ContactId { get; set; }\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public string? PlanSnapshot { get; set; }\n\n        // 🆕 [New Additions for CTA Campaign Tracking]\n        public Guid? CtaId { get; set; }             // Link to CTA definition\n        public Guid? CampaignId { get; set; }        // Link to campaign (if any)\n        public string Source { get; set; } = \"catalog\"; // \"catalog\", \"campaign\", \"auto-reply\"\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Models/Product.cs",
      "sha256": "428554206c02d4602a873704a1e49c995a274f4633e0f32d8c0991c4eea72a31",
      "language": "csharp",
      "size": 1062,
      "content": "// File: Features/Catalog/Models/Product.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.Catalog.Models\n{\n    public class Product\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Foreign Key - Business/Owner\n        public Guid BusinessId { get; set; }\n\n        // 📦 Core Product Info\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n\n        // ✅ Visibility & State\n        public bool IsActive { get; set; } = true;\n\n        // 📅 Metadata\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public int TotalClicks { get; set; } = 0; // Total CTA clicks tracked\n        public DateTime? LastClickedAt { get; set; } // Last time a user clicked CTA for this product\n        public string? MostClickedCTA { get; set; } // Button text with highest click count (e.g., \"Buy Now\")\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/CatalogDashboardService.cs",
      "sha256": "3303616ebf70e99e2e646759834c707405060cc1b22ceb5f743dfa1d8af50198",
      "language": "csharp",
      "size": 6538,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Hosting.Server;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing static System.Runtime.InteropServices.JavaScript.JSType;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class CatalogDashboardService : ICatalogDashboardService\n    {\n        private readonly AppDbContext _context;\n\n        public CatalogDashboardService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n       \n        public async Task<CatalogDashboardSummaryDto> GetDashboardSummaryAsync(Guid businessId)\n        {\n            var today = DateTime.UtcNow.Date;\n\n            var totalMessagesSent = await _context.MessageLogs\n                .CountAsync(m => m.BusinessId == businessId);\n\n            var uniqueCustomersMessaged = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .Select(m => m.RecipientNumber)\n                .Distinct()\n                .CountAsync();\n\n            var productClicks = await _context.CatalogClickLogs\n                .CountAsync(c => c.BusinessId == businessId && c.ProductId != null);\n\n            var activeProducts = await _context.Products\n                .CountAsync(p => p.BusinessId == businessId);\n\n            var productsSharedViaWhatsapp = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null)\n                .Select(c => c.ProductId)\n                .Distinct()\n                .CountAsync();\n\n            var repeatClickers = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId)\n                .GroupBy(c => c.UserPhone)\n                .CountAsync(g => g.Count() > 1);\n\n            var newClickersToday = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ClickedAt.Value.Date == today)\n                .Select(c => c.UserPhone)\n                .Distinct()\n                .CountAsync();\n            //        var newClickersToday = _context.CatalogClickLogs\n            //.Where(c => c.BusinessId == businessId)\n            //.ToList() // now it's LINQ to Objects\n            //        .Where(c => c.ClickedAt?.Date == today)\n            //        .Select(c => c.UserPhone)\n            //        .Distinct()\n            //.Count();\n            //        But if your data is large, the first(server-side filtering) is the better choice.\n\n            var lastCatalogClickAt = await _context.CatalogClickLogs\n    .Where(c => c.BusinessId == businessId)\n    .MaxAsync(c => (DateTime?)c.ClickedAt);\n\n            var lastMessageSentAt = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .MaxAsync(m => (DateTime?)m.SentAt);\n\n            return new CatalogDashboardSummaryDto\n            {\n                TotalMessagesSent = totalMessagesSent,\n                UniqueCustomersMessaged = uniqueCustomersMessaged,\n                ProductClicks = productClicks,\n                ActiveProducts = activeProducts,\n                ProductsSharedViaWhatsApp = productsSharedViaWhatsapp,\n                RepeatClickers = repeatClickers,\n                NewClickersToday = newClickersToday,\n                LastCatalogClickAt = lastCatalogClickAt,\n                LastMessageSentAt = lastMessageSentAt\n            };\n        }\n\n        public async Task<List<TopProductDto>> GetTopClickedProductsAsync(Guid businessId, int topN = 5)\n        {\n            var topProducts = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null)\n                .GroupBy(c => c.ProductId)\n                .Select(g => new\n                {\n                    ProductId = g.Key,\n                    ClickCount = g.Count()\n                })\n                .OrderByDescending(x => x.ClickCount)\n                .Take(topN)\n                .ToListAsync();\n\n            // Now fetch product names to join with clicks\n            var productIds = topProducts.Select(x => x.ProductId).ToList();\n\n            var products = await _context.Products\n                .Where(p => productIds.Contains(p.Id))\n                .ToDictionaryAsync(p => p.Id, p => p.Name);\n\n            return topProducts.Select(x => new TopProductDto\n            {\n                ProductId = x.ProductId.Value,\n                ProductName = products.ContainsKey(x.ProductId.Value) ? products[x.ProductId.Value] : \"Unknown\",\n                ClickCount = x.ClickCount\n            }).ToList();\n        }\n        public async Task<List<CtaJourneyStatsDto>> GetCtaJourneyStatsAsync(Guid businessId)\n        {\n            var stats = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && !string.IsNullOrEmpty(c.CTAJourney))\n                .GroupBy(c => c.CTAJourney)\n                .Select(g => new CtaJourneyStatsDto\n                {\n                    CTAJourney = g.Key,\n                    ClickCount = g.Count()\n                })\n                .OrderByDescending(x => x.ClickCount)\n                .ToListAsync();\n\n            return stats;\n        }\n        public async Task<List<ProductCtaBreakdownDto>> GetProductCtaBreakdownAsync(Guid businessId)\n        {\n            var groupedClicks = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null && !string.IsNullOrEmpty(c.CTAJourney))\n                .GroupBy(c => new { c.ProductId, c.CTAJourney })\n                .Select(g => new\n                {\n                    ProductId = g.Key.ProductId.Value,\n                    CTAJourney = g.Key.CTAJourney,\n                    ClickCount = g.Count()\n                })\n                .ToListAsync();\n\n            // Fetch product names for all involved productIds\n            var productIds = groupedClicks.Select(g => g.ProductId).Distinct().ToList();\n\n            var productNames = await _context.Products\n                .Where(p => productIds.Contains(p.Id))\n                .ToDictionaryAsync(p => p.Id, p => p.Name);\n\n            var result = groupedClicks.Select(g => new ProductCtaBreakdownDto\n            {\n                ProductId = g.ProductId,\n                ProductName = productNames.ContainsKey(g.ProductId) ? productNames[g.ProductId] : \"Unknown\",\n                CTAJourney = g.CTAJourney,\n                ClickCount = g.ClickCount\n            }).ToList();\n\n            return result;\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/CatalogTrackingService.cs",
      "sha256": "79e5e44c45d327c3c4f281e9f60fe09baac547c05995c848a954edd66d3f349d",
      "language": "csharp",
      "size": 6359,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class CatalogTrackingService : ICatalogTrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly ILeadTimelineService _leadTimelineService;\n\n        public CatalogTrackingService(\n            AppDbContext context,\n            IMessageService messageService,\n            ILeadTimelineService leadTimelineService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _leadTimelineService = leadTimelineService;\n        }\n\n        public async Task<ResponseResult> LogClickAsync(CatalogClickLogDto dto)\n        {\n            if (dto == null || dto.BusinessId == Guid.Empty || string.IsNullOrWhiteSpace(dto.UserPhone))\n            {\n                Log.Warning(\"❌ Invalid catalog click log attempt: missing businessId or userPhone.\");\n                return ResponseResult.ErrorInfo(\"Required fields are missing (businessId, userPhone).\");\n            }\n\n            try\n            {\n                Guid? campaignSendLogId = null;\n                Guid? contactId = null;\n                bool followUpSent = false;\n\n                // STEP 1: Link campaign log via RefMessageId if available\n                if (!string.IsNullOrWhiteSpace(dto.RefMessageId))\n                {\n                    var sendLog = await _context.CampaignSendLogs\n                        .FirstOrDefaultAsync(x => x.MessageId == dto.RefMessageId);\n\n                    if (sendLog != null)\n                    {\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = DateTime.UtcNow;\n                        sendLog.ClickType = dto.CTAJourney ?? dto.ButtonText;\n                        campaignSendLogId = sendLog.Id;\n                    }\n                }\n\n                // STEP 2: Link or Create CRM Contact\n                if (!string.IsNullOrWhiteSpace(dto.UserPhone))\n                {\n                    var contact = await _context.Contacts\n                        .FirstOrDefaultAsync(c => c.PhoneNumber == dto.UserPhone && c.BusinessId == dto.BusinessId);\n\n                    if (contact == null)\n                    {\n                        contact = new Contact\n                        {\n                            Id = Guid.NewGuid(),\n                            Name = dto.UserName ?? \"Lead\",\n                            PhoneNumber = dto.UserPhone,\n                            BusinessId = dto.BusinessId,\n                            CreatedAt = DateTime.UtcNow\n                        };\n                        _context.Contacts.Add(contact);\n                        await _context.SaveChangesAsync();\n                    }\n\n                    contactId = contact.Id;\n\n                    // STEP 3: Auto follow-up if plan allows\n                    var business = await _context.Businesses\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(b => b.Id == dto.BusinessId);\n\n                    if (business?.BusinessPlanInfo?.Plan == PlanType.Advanced)\n                    {\n                        var message = $\"Hi {contact.Name ?? \"there\"}, how can I help you?\";\n                        await _messageService.SendFollowUpAsync(contact.PhoneNumber, message);\n                        followUpSent = true;\n                    }\n                }\n\n                // STEP 4: Save the click with all linked data\n                var log = new CatalogClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ProductId = dto.ProductId,\n                    UserId = dto.UserId,\n                    UserName = dto.UserName,\n                    UserPhone = dto.UserPhone,\n                    BotId = dto.BotId,\n                    CategoryBrowsed = dto.CategoryBrowsed,\n                    ProductBrowsed = dto.ProductBrowsed,\n                    CTAJourney = dto.CTAJourney,\n                    TemplateId = dto.TemplateId,\n                    ButtonText = dto.ButtonText,\n                    RefMessageId = dto.RefMessageId,\n                    ClickedAt = DateTime.UtcNow,\n                    CampaignSendLogId = campaignSendLogId,\n                    ContactId = contactId,\n                    FollowUpSent = followUpSent,\n                    LastInteractionType = \"Clicked\",\n                    PlanSnapshot = dto.PlanSnapshot\n                };\n\n                _context.CatalogClickLogs.Add(log);\n                await _context.SaveChangesAsync();\n\n                // STEP 5: Save into LeadTimeline (no await error)\n                await _leadTimelineService.AddFromCatalogClickAsync(log);\n\n                Log.Information(\"📊 Catalog click tracked: {BusinessId}, {UserPhone}, {CTA}\", dto.BusinessId, dto.UserPhone, dto.CTAJourney);\n                return ResponseResult.SuccessInfo(\"✅ Click tracked successfully.\", log.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log catalog click\");\n                return ResponseResult.ErrorInfo(\"❌ Error while tracking catalog click.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> GetRecentLogsAsync(int limit)\n        {\n            try\n            {\n                var logs = await _context.CatalogClickLogs\n                    .OrderByDescending(x => x.ClickedAt)\n                    .Take(limit)\n                    .ToListAsync();\n\n                return ResponseResult.SuccessInfo(\"Recent logs fetched.\", logs);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch recent catalog click logs\");\n                return ResponseResult.ErrorInfo(\"Failed to fetch logs.\", ex.Message);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/ICatalogDashboardService.cs",
      "sha256": "9cac16574ec18c7343c13d49a28395b9ab04bf296e8d7b910b05d1cc88378a7d",
      "language": "csharp",
      "size": 546,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface ICatalogDashboardService\n    {\n        Task<CatalogDashboardSummaryDto> GetDashboardSummaryAsync(Guid businessId);\n        Task<List<TopProductDto>> GetTopClickedProductsAsync(Guid businessId, int topN = 5);\n        Task<List<CtaJourneyStatsDto>> GetCtaJourneyStatsAsync(Guid businessId);\n        Task<List<ProductCtaBreakdownDto>> GetProductCtaBreakdownAsync(Guid businessId);\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/ICatalogTrackingService.cs",
      "sha256": "b9ea119f807697f7e52cbea8b7c3aa4320c2ffe23326d076d1d1f0f9a2f12310",
      "language": "csharp",
      "size": 342,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface ICatalogTrackingService\n    {\n        Task<ResponseResult> LogClickAsync(CatalogClickLogDto dto);\n        Task<ResponseResult> GetRecentLogsAsync(int limit);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/IProductService.cs",
      "sha256": "23245f8c5da029c4146e515732f03b3e815636c1fddfec0f38a3a26355bdc1b1",
      "language": "csharp",
      "size": 510,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface IProductService\n    {\n        Task<ResponseResult> AddProductAsync(CreateProductDto dto);\n        Task<ResponseResult> RemoveProductAsync(Guid id, Guid businessId);\n        Task<ResponseResult> UpdateProductAsync(UpdateProductDto dto);\n        Task<ResponseResult> GetProductsByBusinessIdAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Catalog/Services/ProductService.cs",
      "sha256": "b42253a9398257b4f84555e31c4423127d843bd60b73560f7730b71433d17fd0",
      "language": "csharp",
      "size": 5527,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class ProductService : IProductService\n    {\n        private readonly AppDbContext _context;\n\n        public ProductService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<ResponseResult> AddProductAsync(CreateProductDto dto)\n        {\n            try\n            {\n                var exists = await _context.Products\n                    .AnyAsync(p => p.BusinessId == dto.BusinessId && p.Name == dto.Name);\n\n                if (exists)\n                {\n                    Log.Warning(\"❌ Duplicate product add attempt: {ProductName} for BusinessId: {BusinessId}\", dto.Name, dto.BusinessId);\n                    return ResponseResult.ErrorInfo(\"Product with this name already exists.\");\n                }\n\n                var newProduct = new Product\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Name = dto.Name,\n                    Description = dto.Description,\n                    Price = dto.Price,\n                    Currency = dto.Currency,\n                    ImageUrl = dto.ImageUrl,\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _context.Products.AddAsync(newProduct);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Product created: {ProductName} ({ProductId})\", dto.Name, newProduct.Id);\n                return ResponseResult.SuccessInfo(\"✅ Product added successfully.\", newProduct.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to add product: {ProductName}\", dto.Name);\n                return ResponseResult.ErrorInfo(\"Failed to add product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> RemoveProductAsync(Guid id, Guid businessId)\n        {\n            try\n            {\n                var product = await _context.Products\n                    .FirstOrDefaultAsync(p => p.Id == id && p.BusinessId == businessId);\n\n                if (product == null)\n                {\n                    Log.Warning(\"❌ Attempted to delete non-existent product: {ProductId}\", id);\n                    return ResponseResult.ErrorInfo(\"Product not found.\");\n                }\n\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"🗑️ Product deleted: {ProductId}\", id);\n                return ResponseResult.SuccessInfo(\"🗑️ Product deleted.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to delete product: {ProductId}\", id);\n                return ResponseResult.ErrorInfo(\"Failed to delete product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> UpdateProductAsync(UpdateProductDto dto)\n        {\n            try\n            {\n                var product = await _context.Products\n                    .FirstOrDefaultAsync(p => p.Id == dto.Id && p.BusinessId == dto.BusinessId);\n\n                if (product == null)\n                {\n                    Log.Warning(\"❌ Attempted to update non-existent product: {ProductId}\", dto.Id);\n                    return ResponseResult.ErrorInfo(\"Product not found.\");\n                }\n\n                product.Name = dto.Name;\n                product.Description = dto.Description;\n                product.Price = dto.Price;\n                product.Currency = dto.Currency;\n                product.ImageUrl = dto.ImageUrl;\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Product updated: {ProductId}\", dto.Id);\n                return ResponseResult.SuccessInfo(\"✅ Product updated.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to update product: {ProductId}\", dto.Id);\n                return ResponseResult.ErrorInfo(\"Failed to update product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> GetProductsByBusinessIdAsync(Guid businessId)\n        {\n            try\n            {\n                var products = await _context.Products\n                    .Where(p => p.BusinessId == businessId && p.IsActive)\n                    .Select(p => new ProductDto\n                    {\n                        Id = p.Id,\n                        BusinessId = p.BusinessId,\n                        Name = p.Name,\n                        Description = p.Description,\n                        Price = p.Price,\n                        Currency = p.Currency,\n                        ImageUrl = p.ImageUrl,\n                        IsActive = p.IsActive\n                    })\n                    .ToListAsync();\n\n                return ResponseResult.SuccessInfo(\"Products fetched.\", products);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch products for BusinessId: {BusinessId}\", businessId);\n                return ResponseResult.ErrorInfo(\"Failed to fetch products.\", ex.Message);\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/Controllers/CrmAnalyticsController.cs",
      "sha256": "9148ea0201bfa24665b2fc92339cec7f58019baa66443aba80189bc1a4c9c833",
      "language": "csharp",
      "size": 1948,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CrmAnalytics.Services;\nusing xbytechat.api.Shared;\nusing System.Security.Claims;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Controllers\n{\n    /// <summary>\n    /// Handles CRM analytics summary and trends.\n    /// </summary>\n    [ApiController]\n    [Route(\"api/crm\")]\n    public class CrmAnalyticsController : ControllerBase\n    {\n        private readonly ICrmAnalyticsService _crmAnalyticsService;\n\n        public CrmAnalyticsController(ICrmAnalyticsService crmAnalyticsService)\n        {\n            _crmAnalyticsService = crmAnalyticsService;\n        }\n\n        /// <summary>\n        /// Returns dashboard summary stats for the CRM.\n        /// </summary>\n        [HttpGet(\"summary\")]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessId = GetBusinessIdFromContext();\n            var result = await _crmAnalyticsService.GetSummaryAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"📊 CRM analytics loaded successfully.\", result));\n        }\n\n        /// <summary>\n        /// Returns contacts-added-over-time trend for graph.\n        /// </summary>\n        [HttpGet(\"trends/contacts\")]\n        public async Task<IActionResult> GetContactTrends()\n        {\n            var businessId = GetBusinessIdFromContext();\n            var result = await _crmAnalyticsService.GetContactTrendsAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"📈 Contact trends loaded successfully.\", result));\n        }\n\n        /// <summary>\n        /// Extracts the businessId (Guid) from current user claims.\n        /// </summary>\n        private Guid GetBusinessIdFromContext()\n        {\n            return Guid.TryParse(HttpContext.User.FindFirst(\"BusinessId\")?.Value, out var id)\n                ? id\n                : Guid.Empty;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/DTOs/ContactTrendsDto.cs",
      "sha256": "132d9271e14f9c3f2a65c9241917f67bc8129c91c7050c86a67df545c68419bc",
      "language": "csharp",
      "size": 362,
      "content": "namespace xbytechat.api.Features.CrmAnalytics.DTOs\n{\n    /// <summary>\n    /// Represents the number of contacts added on a specific date.\n    /// Used for trend charting on the CRM dashboard.\n    /// </summary>\n    public class ContactTrendsDto\n    {\n        public string Date { get; set; } // Format: yyyy-MM-dd\n        public int Count { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/DTOs/CrmAnalyticsSummaryDto.cs",
      "sha256": "73027ff6ddc0b680b03714267bbf642053cdc28f2d97c16b593a3321186ab9d9",
      "language": "csharp",
      "size": 619,
      "content": "namespace xbytechat.api.Features.CrmAnalytics.DTOs\n{\n    public class CrmAnalyticsSummaryDto\n    {\n        public int TotalContacts { get; set; }\n        public int TaggedContacts { get; set; }\n        public int ActiveReminders { get; set; }\n        public int CompletedReminders { get; set; }\n        public int TotalNotes { get; set; }\n        public int LeadsWithTimeline { get; set; }\n        public int NewContactsToday { get; set; }\n        public int NotesAddedToday { get; set; }\n        public DateTime? LastContactAddedAt { get; set; }\n        public DateTime? LastReminderCompletedAt { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/Services/CrmAnalyticsService.cs",
      "sha256": "8fae1f725576dc5f6402559df557282ba8991f65bb324b614a65b4e9225167c5",
      "language": "csharp",
      "size": 4014,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CrmAnalytics.DTOs;\nusing xbytechat.api.Features.CrmAnalytics.Services;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Services\n{\n    /// <summary>\n    /// Provides implementation for CRM analytics calculations.\n    /// Gathers contact, tag, note, and reminder metrics for the dashboard.\n    /// </summary>\n    public class CrmAnalyticsService : ICrmAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CrmAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        /// <summary>\n        /// Generates a summarized snapshot of CRM data for the given business.\n        /// </summary>\n        /// <param name=\"businessId\">The unique ID of the business</param>\n        /// <returns>CrmAnalyticsSummaryDto containing insights</returns>\n        public async Task<CrmAnalyticsSummaryDto> GetSummaryAsync(Guid businessId)\n        {\n            var today = DateTime.UtcNow.Date;\n\n            var totalContacts = await _context.Contacts\n                .CountAsync(c => c.BusinessId == businessId);\n\n            var taggedContacts = await _context.Contacts\n                .Where(c => c.BusinessId == businessId && c.Tags.Any())\n                .CountAsync();\n\n            var activeReminders = await _context.Reminders\n                .CountAsync(r => r.BusinessId == businessId && r.Status == \"Pending\");\n\n            var completedReminders = await _context.Reminders\n                .CountAsync(r => r.BusinessId == businessId && r.Status == \"Completed\");\n\n            var totalNotes = await _context.Notes\n                .CountAsync(n => n.BusinessId == businessId);\n\n            var leadsWithTimeline = await _context.LeadTimelines\n                .Where(t => t.BusinessId == businessId)\n                .Select(t => t.ContactId)\n                .Distinct()\n                .CountAsync();\n\n            var newContactsToday = await _context.Contacts\n                .CountAsync(c => c.BusinessId == businessId && c.CreatedAt.Date == today);\n\n            var notesAddedToday = await _context.Notes\n                .CountAsync(n => n.BusinessId == businessId && n.CreatedAt.Date == today);\n\n            var lastContactAddedAt = await _context.Contacts\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => (DateTime?)c.CreatedAt)\n                .FirstOrDefaultAsync();\n\n            var lastReminderCompletedAt = await _context.Reminders\n                .Where(r => r.BusinessId == businessId && r.Status == \"Completed\")\n                .OrderByDescending(r => r.CompletedAt)\n                .Select(r => (DateTime?)r.CompletedAt)\n                .FirstOrDefaultAsync();\n\n            return new CrmAnalyticsSummaryDto\n            {\n                TotalContacts = totalContacts,\n                TaggedContacts = taggedContacts,\n                ActiveReminders = activeReminders,\n                CompletedReminders = completedReminders,\n                TotalNotes = totalNotes,\n                LeadsWithTimeline = leadsWithTimeline,\n                NewContactsToday = newContactsToday,\n                NotesAddedToday = notesAddedToday,\n                LastContactAddedAt = lastContactAddedAt,\n                LastReminderCompletedAt = lastReminderCompletedAt\n            };\n        }\n        public async Task<List<ContactTrendsDto>> GetContactTrendsAsync(Guid businessId)\n        {\n            var trends = await _context.Contacts\n                .Where(c => c.BusinessId == businessId)\n                .GroupBy(c => c.CreatedAt.Date)\n                .OrderBy(g => g.Key)\n                .Select(g => new ContactTrendsDto\n                {\n                    Date = g.Key.ToString(\"yyyy-MM-dd\"),\n                    Count = g.Count()\n                })\n                .ToListAsync();\n\n            return trends;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CrmAnalytics/Services/ICrmAnalyticsService.cs",
      "sha256": "24d70810ed26415792ab48592900090d8d1b7682d926e46f4bdc4595b24c5659",
      "language": "csharp",
      "size": 895,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CrmAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Services\n{\n    /// <summary>\n    /// Defines the contract for CRM Analytics services.\n    /// Handles lead-level analytics, summary metrics, and dashboard insights.\n    /// </summary>\n    public interface ICrmAnalyticsService\n    {\n        /// <summary>\n        /// Returns a summarized view of CRM statistics for a specific business.\n        /// This is used to power the CRM analytics dashboard.\n        /// </summary>\n        /// <param name=\"businessId\">The unique identifier of the business (tenant).</param>\n        /// <returns>A summary DTO containing contact, tag, note, and reminder insights.</returns>\n        Task<CrmAnalyticsSummaryDto> GetSummaryAsync(Guid businessId);\n        Task<List<ContactTrendsDto>> GetContactTrendsAsync(Guid businessId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs",
      "sha256": "f5084d9a24f2667d21707e1893b4a3c8a09a3e5b14aceb728043514a7b5d8261",
      "language": "csharp",
      "size": 9864,
      "content": "// 📄 File: Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Helpers;\n\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/cta-flow\")]\n    public class CTAFlowController : ControllerBase\n    {\n        private readonly ICTAFlowService _flowService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly ITrackingService _trackingService;\n        public CTAFlowController(ICTAFlowService flowService, IMessageEngineService messageEngineService, ITrackingService trackingService)\n        {\n            _flowService = flowService;\n            _messageEngineService = messageEngineService;\n            _trackingService = trackingService;\n        }\n\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> CreateFlow([FromBody] CreateFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n            var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n            return Ok(new { flowId = id });\n        }\n\n        [HttpPost(\"publish\")]\n        public async Task<IActionResult> PublishFlow([FromBody] List<FlowStepDto> steps)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n            var result = await _flowService.PublishFlowAsync(businessId, steps, createdBy);\n            if (!result.Success)\n                return BadRequest(result.Message);\n\n            return Ok(\"✅ Flow published successfully.\");\n        }\n\n        [HttpGet(\"current\")]\n        public async Task<IActionResult> GetFlow()\n        {\n            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdHeader, out var businessId))\n                return BadRequest(\"❌ Invalid or missing BusinessId header.\");\n\n            var flow = await _flowService.GetFlowByBusinessAsync(businessId);\n\n            // ✅ Always return 200 even if flow is null\n            return Ok(flow);\n        }\n\n        [HttpGet(\"draft\")]\n        public async Task<IActionResult> GetDraftFlow()\n        {\n            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdHeader, out var businessId))\n                return BadRequest(\"❌ Invalid or missing BusinessId header.\");\n\n            var draft = await _flowService.GetDraftFlowByBusinessAsync(businessId);\n            if (draft == null)\n                return NotFound(\"❌ No draft flow found.\");\n\n            return Ok(draft);\n        }\n\n        [HttpGet(\"by-id/{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var flow = await _flowService.GetVisualFlowByIdAsync(id);\n            if (flow == null) return NotFound(\"❌ Flow not found\");\n            return Ok(flow);\n        }\n\n        //[HttpGet(\"match\")]\n        //public async Task<IActionResult> MatchButton([FromQuery] string text, [FromQuery] string type)\n        //{\n        //    var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n\n        //    var step = await _flowService.MatchStepByButtonAsync(businessId, text, type, currentTemplateName,);\n        //    if (step == null)\n        //        return NotFound(\"❌ No matching step found.\");\n\n        //    return Ok(new\n        //    {\n        //        step.TemplateToSend,\n        //        step.TriggerButtonText,\n        //        step.TriggerButtonType\n        //    });\n        //}\n\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchButton(\n    [FromQuery] string text,\n    [FromQuery] string type,\n    [FromQuery] string currentTemplateName,\n    [FromQuery] Guid? campaignId) // Optional\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value!);\n\n            var step = await _flowService.MatchStepByButtonAsync(\n                businessId,\n                text,\n                type,\n                currentTemplateName,\n                campaignId\n            );\n\n            if (step == null)\n                return NotFound(\"❌ No matching step found.\");\n\n            return Ok(new\n            {\n                step.TemplateToSend,\n                step.TriggerButtonText,\n                step.TriggerButtonType\n            });\n        }\n\n        [HttpPost(\"save-visual\")]\n        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n            if (!result.Success)\n            {\n                Log.Error(\"❌ Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n                return StatusCode(500, new\n                {\n                    message = \"❌ Failed to save flow\",\n                    error = result.ErrorMessage,\n                    // skipped = result.SkippedNodes ?? 0\n                });\n            }\n\n            return Ok(new\n            {\n                message = \"✅ Flow saved successfully\"\n            });\n        }\n\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var result = await _flowService.DeleteFlowAsync(id, businessId);\n\n            return result.Success\n                ? Ok(new { message = result.Message })\n                : BadRequest(new { message = result.Message });\n        }\n        [HttpGet(\"all-published\")]\n        public async Task<IActionResult> GetPublishedFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n            return Ok(flows);\n        }\n        [HttpGet(\"all-draft\")]\n        public async Task<IActionResult> GetAllDraftFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        // 📄 File: D:\\...\\Features\\CTAFlowBuilder\\Controllers\\CTAFlowController.cs\n\n        [HttpPost(\"execute-visual\")]\n        public async Task<IActionResult> ExecuteVisualFlowAsync(\n            [FromQuery] Guid nextStepId,\n            [FromQuery] Guid trackingLogId,\n            // ✅ 1. ADD the new optional parameter to the endpoint\n            [FromQuery] Guid? campaignSendLogId = null)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            // ✅ 2. PASS the new parameter to the service call\n            var result = await _flowService.ExecuteVisualFlowAsync(businessId, nextStepId, trackingLogId, campaignSendLogId);\n\n            if (result.Success)\n                return Ok(result);\n            else\n                return BadRequest(result);\n        }\n\n        [HttpPost(\"create-config\")]\n        public async Task<IActionResult> CreateConfigFlow([FromBody] CreateFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n            try\n            {\n                var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n\n                return Ok(new\n                {\n                    flowId = id,\n                    message = \"✅ Flow config created successfully.\"\n                });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    error = \"❌ Failed to create flow config.\",\n                    details = ex.Message\n                });\n            }\n        }\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs",
      "sha256": "8d5442a0a0fdb92dc7d69837cd74af882b22c6cf35ce999a7b87bfde5b27e7ca",
      "language": "csharp",
      "size": 2686,
      "content": "// 📄 Features/CTAFlowBuilder/Controllers/FlowRedirectController.cs\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Infrastructure.Flows;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"r/flow\")]\n    public class FlowRedirectController : ControllerBase\n    {\n        private readonly IFlowClickTokenService _tokens;\n        private readonly ICTAFlowService _flows;           // service to read flow steps/links\n        private readonly IFlowRuntimeService _runtime;     // service to execute next step\n\n        public FlowRedirectController(\n            IFlowClickTokenService tokens,\n            ICTAFlowService flows,\n            IFlowRuntimeService runtime)\n        {\n            _tokens = tokens;\n            _flows = flows;\n            _runtime = runtime;\n        }\n\n        [HttpGet(\"{token}\")]\n        [AllowAnonymous] // secure by token, tenant checks inside\n        public async Task<IActionResult> RedirectByToken(string token)\n        {\n            FlowClickPayload p;\n            try\n            {\n                p = _tokens.Validate(token);\n            }\n            catch (Exception ex)\n            {\n                return BadRequest($\"Invalid or expired token: {ex.Message}\");\n            }\n\n            // 🔒 Tenant isolation: make sure the business in the token matches the current request context\n            // (if you have multi-tenant enforcement middleware, call it here)\n\n            // 1) Resolve the button link\n            var link = await _flows.GetLinkAsync(p.fid, p.sid, p.bi);\n            if (link is null)\n                return NotFound(\"Link not found for this flow step\");\n\n            var requestId = Guid.NewGuid(); // for idempotency\n            var exec = await _runtime.ExecuteNextAsync(new NextStepContext\n            {\n                BusinessId = p.biz,\n                FlowId = p.fid,\n                Version = p.ver,\n                SourceStepId = p.sid,\n                TargetStepId = link.NextStepId, // may be null → terminal\n                ButtonIndex = p.bi,\n                MessageLogId = p.mlid,\n                ContactPhone = p.cp,\n                RequestId = requestId,\n\n                // 🆕 Pass the clicked button for runtime decision\n                ClickedButton = link\n            });\n\n\n            // 3) Redirect the user\n            // If button was a URL, use that; else go to a generic \"thank you\" page\n            var dest = exec.RedirectUrl ?? \"/thank-you\";\n            return Redirect(dest);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs",
      "sha256": "c23400a06816a2adc8886fa8d20dd77f12b8b93f993b5a772d81cb12d6612a1f",
      "language": "csharp",
      "size": 897,
      "content": "// 📄 File: xbytechat.api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CreateFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowStepDto> Steps { get; set; } = new();\n        public bool IsPublished { get; set; } = false; // ✅ NEW: Draft vs Published\n    }\n\n    public class FlowStepDto\n    {\n        public string TriggerButtonText { get; set; } = string.Empty;\n        public string TriggerButtonType { get; set; } = string.Empty;\n        public string TemplateToSend { get; set; } = string.Empty;\n        public int StepOrder { get; set; }\n        public List<ButtonLinkDto> ButtonLinks { get; set; } = new();\n    }\n\n    public class ButtonLinkDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid NextStepId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAButtonClickDto.cs",
      "sha256": "da355d853887193eb1d2b3e3fafcf076e6df764f0220cbf10f5c050d42b91df6",
      "language": "csharp",
      "size": 432,
      "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAButtonClickDto\n    {\n        [Required]\n        public string ButtonText { get; set; } = string.Empty;\n\n        [Required]\n        public string ButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\", \"url\", etc.\n\n        [Required]\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAFlowExecutionRequest.cs",
      "sha256": "43fc0e1c1674d188b1a5385539f1314176ff81449d4547ea6665df9909a223bb",
      "language": "csharp",
      "size": 297,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAFlowExecutionRequest\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"cta\";\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowEdgeDto.cs",
      "sha256": "27e76e22a8aba502d5727d9959bec58ea011d2a1f0d4388a141bfa8108043eea",
      "language": "csharp",
      "size": 272,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowEdgeDto\n    {\n        public string FromNodeId { get; set; } = string.Empty;\n        public string ToNodeId { get; set; } = string.Empty;\n        public string? SourceHandle { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowNodeDto.cs",
      "sha256": "5b1f9625b329b229575e5859cfacacaa1520238bff1573e6a34b34c4c85120b3",
      "language": "csharp",
      "size": 1118,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowNodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n\n        public string TemplateName { get; set; } = string.Empty;\n        public string? TemplateType { get; set; } // ✅ e.g., \"image_template\", \"text_template\"\n        public string MessageBody { get; set; } = string.Empty;\n        public string? TriggerButtonText { get; set; }\n        public string? TriggerButtonType { get; set; }\n        public float PositionX { get; set; }\n        public float PositionY { get; set; }\n\n        public string? RequiredTag { get; set; }         \n        public string? RequiredSource { get; set; }      \n        public List<LinkButtonDto> Buttons { get; set; } = new();\n        //(for flow trigger mapping)\n        // ✅ NEW: ReactFlow expects this structure\n        public PositionDto Position => new PositionDto\n        {\n            x = PositionX,\n            y = PositionY\n        };\n        public class PositionDto\n        {\n            public float x { get; set; }\n            public float y { get; set; }\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/LinkButtonDto.cs",
      "sha256": "e02e2c927a96e1e02c0537fb205fd7595289bdfaa9de15c0d7a55de64a90fbc5",
      "language": "csharp",
      "size": 522,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class LinkButtonDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public int Index { get; set; } = -1;\n        public string? Type { get; set; } // 🔥 e.g., \"URL\", \"QUICK_REPLY\"\n        public string? SubType { get; set; } // 🔥 e.g., \"STATIC\", \"DYNAMIC\"\n        public string? Value { get; set; } // 🔥 the parameter or url or payload\n\n        public string? TargetNodeId { get; set; } // 🔄 used for flow linking\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/SaveVisualFlowDto.cs",
      "sha256": "7de59d222a97efeaf9dc23dea2ef351d852087539cec12e7c946b02e11f1bd21",
      "language": "csharp",
      "size": 403,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class SaveVisualFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n        public Guid? CampaignId { get; set; } // ✅ Add this line\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowLoadDto.cs",
      "sha256": "10bfe378ffd4c8fb74a0746f2abafec88897072e7a974d680396bde281aaf4af",
      "language": "csharp",
      "size": 289,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowLoadDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowSummaryDto.cs",
      "sha256": "70dcedd3219a474a4b38927e0f0fd4ff3e21ba16632d409f146a9d0d60d685a5",
      "language": "csharp",
      "size": 300,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowClickLog.cs",
      "sha256": "ecbd408e613e8ef88e2bb39fdf60bc188163e209d8242317203dfb2bff8cebb8",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class CTAFlowClickLog\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs",
      "sha256": "3f05a1457051adfc7e66c759040348f1288066c7abcf4c570c0b2fd5c98da19e",
      "language": "csharp",
      "size": 1123,
      "content": "// 📄 File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n    /// </summary>\n    public class CTAFlowConfig\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FlowName { get; set; } = string.Empty;\n\n        public bool IsActive { get; set; } = true;\n\n        public bool IsPublished { get; set; } = false; // ✅ NEW: Support draft/published\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n        public DateTime? UpdatedAt { get; set; }  // ✅ Add this line\n\n        // 🔁 Navigation to steps\n        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowStep.cs",
      "sha256": "1469836c27765675fb8f7ea910ffabd76fdc9ec583c0e3e3c0f9a986f6fb83db",
      "language": "csharp",
      "size": 1352,
      "content": "// 📄 File: Features/CTAFlowBuilder/Models/CTAFlowStep.cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a single step in a CTA flow, triggered by a button.\n    /// </summary>\n    public class CTAFlowStep\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CTAFlowConfigId { get; set; }\n\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig Flow { get; set; } = null!;\n\n        public string TriggerButtonText { get; set; } = string.Empty;\n\n        public string TriggerButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\"\n\n        public string TemplateToSend { get; set; } = string.Empty;\n\n        public int StepOrder { get; set; }\n\n        public string? RequiredTag { get; set; }        // e.g., \"interested\"\n        public string? RequiredSource { get; set; }     // e.g., \"ads\", \"qr\", \"manual\"\n\n        // 🔀 Multiple buttons linking to different steps\n        public List<FlowButtonLink> ButtonLinks { get; set; } = new();\n\n        public float? PositionX { get; set; }\n        public float? PositionY { get; set; }\n        public string? TemplateType { get; set; }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowButtonLink.cs",
      "sha256": "6b265bc48b8286ca84e5937f9f8f6fe99b8b6580ca59a43aedda8290fc685aaa",
      "language": "csharp",
      "size": 807,
      "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class FlowButtonLink\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? NextStepId { get; set; }\n        // ✅ NEW FIELDS FOR FUTURE AUTOMATION\n        public string ButtonType { get; set; } = \"QUICK_REPLY\";    // e.g., URL, QUICK_REPLY, FLOW\n        public string ButtonSubType { get; set; } = \"\";            // Optional: e.g., \"Catalog\", \"PricingCTA\"\n        public string ButtonValue { get; set; } = \"\";              // e.g., URL or deep link\n\n        // Optional FK back to Step if needed\n        public Guid CTAFlowStepId { get; set; }\n        public CTAFlowStep? Step { get; set; }\n\n        public short ButtonIndex { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowExecutionLog.cs",
      "sha256": "3288e0095ae888c5f42e669c9bd44c204cec5d167c37a928862137eaa5276988",
      "language": "csharp",
      "size": 1426,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Logs when a visual flow step is executed (useful for analytics, debugging, audit).\n    /// </summary>\n    public class FlowExecutionLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid? RunId { get; set; }\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n\n        public Guid? FlowId { get; set; }\n\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? TrackingLogId { get; set; }\n\n        public string? ContactPhone { get; set; }\n\n        public string? TriggeredByButton { get; set; }\n\n        public string? TemplateName { get; set; }\n\n        public string? TemplateType { get; set; }\n\n        public bool Success { get; set; }\n\n        public string? ErrorMessage { get; set; }\n\n        public string? RawResponse { get; set; }\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n\n        public Guid? MessageLogId { get; set; }              // tie to originating message\n        public short? ButtonIndex { get; set; }              // which button was clicked (0..2)\n        public Guid? RequestId { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/CTAFlowService.cs",
      "sha256": "f62aa8e7e41961f339b02dcd003a4234c7207c3ae71b6919063665343dbf52fe",
      "language": "csharp",
      "size": 34515,
      "content": "// 📄 File: Features/CTAFlowBuilder/Services/CTAFlowService.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class CTAFlowService : ICTAFlowService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService\n            )\n        {\n            _context = context;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)\n        {\n            var flow = new CTAFlowConfig\n            {\n                Id = Guid.NewGuid(),\n                FlowName = dto.FlowName,\n                BusinessId = businessId,\n                CreatedAt = DateTime.UtcNow,\n                CreatedBy = createdBy,\n                IsPublished = dto.IsPublished\n            };\n\n            foreach (var stepDto in dto.Steps)\n            {\n                var step = new CTAFlowStep\n                {\n                    Id = Guid.NewGuid(),\n                    CTAFlowConfigId = flow.Id,\n                    TriggerButtonText = stepDto.TriggerButtonText,\n                    TriggerButtonType = stepDto.TriggerButtonType,\n                    TemplateToSend = stepDto.TemplateToSend,\n                    StepOrder = stepDto.StepOrder,\n                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink\n                    {\n                        ButtonText = link.ButtonText,\n                        NextStepId = link.NextStepId\n                    }).ToList() ?? new List<FlowButtonLink>()\n                };\n\n                flow.Steps.Add(step);\n            }\n\n            _context.CTAFlowConfigs.Add(flow);\n            await _context.SaveChangesAsync();\n\n            return flow.Id;\n        }\n\n        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Include(f => f.Steps.OrderBy(s => s.StepOrder))\n                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .Where(f => f.BusinessId == businessId && f.IsPublished == false)\n                .OrderByDescending(f => f.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n\n\n        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)\n        {\n            return await _context.CTAFlowSteps\n                .Where(s => s.CTAFlowConfigId == flowId)\n                .OrderBy(s => s.StepOrder)\n                .ToListAsync();\n        }\n\n        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n            Guid businessId,\n            string buttonText,\n            string buttonType,\n            string TemplateName,\n            Guid? campaignId = null)\n        {\n            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? \"\";\n\n            // 1️⃣ Try campaign-specific override\n            if (campaignId.HasValue)\n            {\n                var overrideStep = await _context.CampaignFlowOverrides\n                    .Where(o =>\n                        o.CampaignId == campaignId &&\n                        o.ButtonText.ToLower() == normalizedButtonText &&\n                        o.TemplateName.ToLower() == normalizedTemplateName)\n                    .FirstOrDefaultAsync();\n\n                if (overrideStep != null)\n                {\n                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n\n                    var matched = await _context.CTAFlowSteps\n                        .Include(s => s.Flow)\n                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n\n                    if (matched != null)\n                    {\n                        Log.Information(\"🔁 Override matched: Template '{Template}' → Step '{StepId}'\", overrideStep.OverrideNextTemplate, matched.Id);\n                        return matched;\n                    }\n\n                    Log.Warning(\"⚠️ Override found for button '{Button}' but no matching step for template '{Template}'\", normalizedButtonText, overrideStep.OverrideNextTemplate);\n                }\n\n                else\n                {\n                    Log.Information(\"🟡 No campaign override found for button '{Button}' on template '{Template}'\", normalizedButtonText, normalizedTemplateName);\n                }\n            }\n\n            // 2️⃣ Fallback to standard flow logic\n            var fallbackStep = await _context.CTAFlowSteps\n                .Include(s => s.Flow)\n                .Where(s =>\n                    s.Flow.BusinessId == businessId &&\n                    s.Flow.IsActive &&\n                    s.Flow.IsPublished &&\n                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n                .FirstOrDefaultAsync();\n\n            if (fallbackStep != null)\n            {\n                Log.Information(\"✅ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}\", fallbackStep.Id, fallbackStep.Flow?.FlowName);\n            }\n            else\n            {\n                Log.Warning(\"❌ No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}\", normalizedButtonText, normalizedButtonType, businessId);\n            }\n\n            return fallbackStep;\n        }\n\n\n\n        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)\n        {\n            try\n            {\n                // 🔥 1. Remove existing published flow for this business\n                var existingFlows = await _context.CTAFlowConfigs\n                    .Where(f => f.BusinessId == businessId && f.IsPublished)\n                    .ToListAsync();\n\n                if (existingFlows.Any())\n                {\n                    _context.CTAFlowConfigs.RemoveRange(existingFlows);\n                }\n\n                // 🌱 2. Create new flow config\n                var flowConfig = new CTAFlowConfig\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    FlowName = \"Published Flow - \" + DateTime.UtcNow.ToString(\"yyyyMMdd-HHmm\"),\n                    IsPublished = true,\n                    IsActive = true,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    Steps = new List<CTAFlowStep>()\n                };\n\n                // 🔁 3. Convert each step DTO to model\n                foreach (var stepDto in steps)\n                {\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flowConfig.Id,\n                        TriggerButtonText = stepDto.TriggerButtonText,\n                        TriggerButtonType = stepDto.TriggerButtonType,\n                        TemplateToSend = stepDto.TemplateToSend,\n                        StepOrder = stepDto.StepOrder,\n                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            ButtonText = bl.ButtonText,\n                            NextStepId = bl.NextStepId,\n                        }).ToList()\n                    };\n\n                    flowConfig.Steps.Add(step);\n                }\n\n                // 💾 4. Save to DB\n                await _context.CTAFlowConfigs.AddAsync(flowConfig);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Flow published successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error while publishing CTA flow.\");\n                return ResponseResult.ErrorInfo(\"❌ Could not publish flow.\");\n            }\n        }\n\n        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                Log.Information(\"🧠 SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}\", dto.FlowName, businessId);\n\n                if (dto.Nodes == null || !dto.Nodes.Any())\n                {\n                    Log.Warning(\"❌ No nodes found in flow. Aborting save.\");\n                    return ResponseResult.ErrorInfo(\"❌ Cannot save an empty flow. Please add at least one step.\");\n                }\n\n                // 1) Upsert FlowConfig\n                var flow = await _context.CTAFlowConfigs\n                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);\n\n                if (flow == null)\n                {\n                    flow = new CTAFlowConfig\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FlowName = dto.FlowName,\n                        CreatedBy = createdBy,\n                        CreatedAt = DateTime.UtcNow,\n                        UpdatedAt = DateTime.UtcNow,\n                        IsActive = true,\n                        IsPublished = dto.IsPublished\n                    };\n                    _context.CTAFlowConfigs.Add(flow);\n                    Log.Information(\"✅ New FlowConfig created with ID: {Id}\", flow.Id);\n                }\n                else\n                {\n                    // wipe old steps+links for a clean replace\n                    var oldSteps = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == flow.Id)\n                        .Include(s => s.ButtonLinks)\n                        .ToListAsync();\n\n                    foreach (var step in oldSteps)\n                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n                    _context.CTAFlowSteps.RemoveRange(oldSteps);\n\n                    flow.IsPublished = dto.IsPublished;\n                    flow.UpdatedAt = DateTime.UtcNow;\n                }\n\n                // 2) Build Steps (map by incoming node.Id string)\n                var stepMap = new Dictionary<string, CTAFlowStep>(StringComparer.OrdinalIgnoreCase);\n\n                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id))\n                        continue;\n\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flow.Id,\n                        StepOrder = index,\n                        TemplateToSend = node.TemplateName,\n                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n                        ButtonLinks = new List<FlowButtonLink>()\n                    };\n\n                    stepMap[node.Id] = step;\n                    _context.CTAFlowSteps.Add(step);\n                }\n\n                // 3) Build Links PER NODE using buttons order (with Index), not per-edge blindly\n                foreach (var node in dto.Nodes)\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id) || !stepMap.TryGetValue(node.Id, out var fromStep))\n                        continue;\n\n                    // outgoing edges from this node\n                    var outEdges = dto.Edges?.Where(e => string.Equals(e.FromNodeId, node.Id, StringComparison.OrdinalIgnoreCase)).ToList()\n                                   ?? new List<FlowEdgeDto>();\n\n                    // dedupe by button text to avoid ambiguous routing\n                    var seenTexts = new HashSet<string>(StringComparer.OrdinalIgnoreCase);\n\n                    // stable ordering: by provided Index (0..N), then by Text\n                    var orderedButtons = (node.Buttons ?? new List<LinkButtonDto>())\n                        .OrderBy(b => b.Index < 0 ? int.MaxValue : b.Index)\n                        .ThenBy(b => b.Text ?? string.Empty)\n                        .ToList();\n\n                    short nextIdx = 0;\n\n                    foreach (var btn in orderedButtons)\n                    {\n                        var text = (btn.Text ?? string.Empty).Trim();\n                        if (string.IsNullOrEmpty(text))\n                            continue;\n\n                        if (!seenTexts.Add(text))\n                        {\n                            Log.Warning(\"⚠️ Duplicate button text '{Text}' on node {NodeId}; keeping first, skipping duplicates.\", text, node.Id);\n                            continue;\n                        }\n\n                        // match edge by SourceHandle == button text (how ReactFlow wires handles)\n                        var edge = outEdges.FirstOrDefault(e =>\n                            string.Equals(e.SourceHandle ?? string.Empty, text, StringComparison.OrdinalIgnoreCase));\n                        if (edge == null)\n                        {\n                            // no wire from this button → skip link creation but keep button metadata in UI on reload\n                            continue;\n                        }\n\n                        if (!stepMap.TryGetValue(edge.ToNodeId, out var toStep))\n                            continue;\n\n                        // final index: prefer incoming payload Index; else fallback to a sequential counter\n                        var finalIndex = btn.Index >= 0 ? btn.Index : nextIdx;\n                        nextIdx = (short)(finalIndex + 1);\n\n                        var link = new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            CTAFlowStepId = fromStep.Id,\n                            NextStepId = toStep.Id,\n                            ButtonText = text,\n                            ButtonType = string.IsNullOrWhiteSpace(btn.Type) ? \"QUICK_REPLY\" : btn.Type,\n                            ButtonSubType = btn.SubType ?? string.Empty,\n                            ButtonValue = btn.Value ?? string.Empty,\n                            ButtonIndex = (short)finalIndex // 🔑 persist the index\n                        };\n\n                        _context.FlowButtonLinks.Add(link);\n                        fromStep.ButtonLinks.Add(link);\n\n                        // propagate trigger info on the target step for convenience\n                        toStep.TriggerButtonText = text;\n                        toStep.TriggerButtonType = (btn.Type ?? \"QUICK_REPLY\").ToLowerInvariant();\n                    }\n                }\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}\",\n                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n                return ResponseResult.SuccessInfo(\"✅ Flow saved successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception while saving flow\");\n                return ResponseResult.ErrorInfo(\"❌ Internal error while saving flow.\");\n            }\n        }\n\n        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(c => c.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);\n\n            if (flow == null) return null;\n\n            var businessId = flow.BusinessId;\n\n            // ✅ Pre-fetch templates from Meta\n            var templateMap = new Dictionary<string, TemplateMetadataDto>();\n\n            foreach (var step in flow.Steps)\n            {\n                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))\n                {\n                    try\n                    {\n                        var template = await _templateFetcherService.GetTemplateByNameAsync(\n                            businessId,\n                            step.TemplateToSend,\n                            includeButtons: true\n                        );\n\n                        if (template != null)\n                            templateMap[step.TemplateToSend] = template;\n                    }\n                    catch (Exception ex)\n                    {\n                        Log.Warning(ex, \"⚠️ Failed to fetch template from Meta for {Template}\", step.TemplateToSend);\n                    }\n                }\n            }\n\n            // ✅ Map into ReactFlow-compatible structure\n            var nodes = flow.Steps.Select(step =>\n            {\n                var template = templateMap.GetValueOrDefault(step.TemplateToSend);\n\n                return new FlowNodeDto\n                {\n                    Id = step.Id.ToString(),\n                    TemplateName = step.TemplateToSend,\n                    MessageBody = template?.Body ?? \"Message body preview...\",\n                    TriggerButtonText = step.TriggerButtonText,\n                    TriggerButtonType = step.TriggerButtonType,\n                    PositionX = step.PositionX ?? 100,\n                    PositionY = step.PositionY ?? 100,\n\n                    // ✅ NEW: Include conditional logic\n                    RequiredTag = step.RequiredTag,\n                    RequiredSource = step.RequiredSource,\n\n                    //Buttons = step.ButtonLinks.Select(link => new LinkButtonDto\n                    //{\n                    //    Text = link.ButtonText,\n                    //    TargetNodeId = link.NextStepId.ToString()\n                    //}).ToList()\n                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto\n                    {\n                        Text = link.ButtonText,\n                        Type = link.ButtonType,\n                        SubType = link.ButtonSubType,\n                        Value = link.ButtonValue,\n                        TargetNodeId = link.NextStepId?.ToString()\n                    }).ToList()\n\n                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())\n                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))\n                                 .Select(btn => new LinkButtonDto\n                                 {\n                                     Text = btn.Text,\n                                     TargetNodeId = null\n                                 })).ToList()\n                };\n\n            }).ToList();\n\n            return new SaveVisualFlowDto\n            {\n                FlowName = flow.FlowName,\n                IsPublished = flow.IsPublished,\n                Nodes = nodes,\n                Edges = flow.Steps\n                        .SelectMany(step =>\n                            step.ButtonLinks.Select(link => new FlowEdgeDto\n                            {\n                                FromNodeId = step.Id.ToString(),\n                                ToNodeId = link.NextStepId.ToString(),\n                                SourceHandle = link.ButtonText // ✅ important\n                            })\n                        ).ToList()\n\n            };\n        }\n\n\n        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Where(f => f.Id == id && f.BusinessId == businessId)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n                return ResponseResult.ErrorInfo(\"❌ Flow not found or does not belong to you.\");\n\n            _context.CTAFlowConfigs.Remove(flow);\n            await _context.SaveChangesAsync();\n\n            return ResponseResult.SuccessInfo(\"✅ Flow deleted successfully.\");\n        }\n        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && f.IsPublished)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    CreatedAt = f.CreatedAt,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n\n        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)\n        {\n            // Log.Information(\"🚀 Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}\", businessId);\n            if (currentStep == null)\n            {\n                Log.Warning(\"⚠️ Cannot execute follow-up. Current step is null.\");\n                return ResponseResult.ErrorInfo(\"Current step not found.\");\n            }\n\n            // 🧠 Step: Look through all button links for a valid NextStepId\n            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);\n\n            if (nextLink == null)\n            {\n                Log.Information(\"ℹ️ No NextStepId defined in any ButtonLinks for StepId: {StepId}\", currentStep.Id);\n                return ResponseResult.SuccessInfo(\"No follow-up step to execute.\");\n            }\n\n            // 🔍 Fetch the next step using new logic (via CTAFlowConfig + Steps)\n            // 1️⃣ Try to resolve with smart condition check\n            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);\n\n            if (followUpStep == null)\n            {\n                Log.Warning(\"❌ Follow-up step skipped due to condition mismatch → StepId: {StepId}\", nextLink.NextStepId);\n\n                // 2️⃣ Optional fallback: Try same flow → Any step without conditions\n                var flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps)\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);\n\n                followUpStep = flow?.Steps\n                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))\n                    .OrderBy(s => s.StepOrder)\n                    .FirstOrDefault();\n\n                if (followUpStep != null)\n                {\n                    Log.Information(\"🔁 Fallback step selected → StepId: {StepId}, Template: {Template}\",\n                        followUpStep.Id, followUpStep.TemplateToSend);\n                }\n                else\n                {\n                    Log.Warning(\"🚫 No suitable fallback found in flow. Skipping follow-up.\");\n                    return ResponseResult.SuccessInfo(\"No matching follow-up step based on user context.\");\n                }\n            }\n\n\n            // 📨 Send the follow-up message using the TemplateToSend field\n            try\n            {\n                var template = followUpStep.TemplateToSend;\n\n                Log.Information(\"📤 Sending follow-up message → Template: {Template}, To: {Recipient}\", template, recipientNumber);\n\n                // 🧪 Replace this with actual message engine call\n                var sendDto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipientNumber,\n                    TemplateName = template,\n                    TemplateParameters = new List<string>() // Add dynamic params later if needed\n                };\n\n                var sendResult = await _messageEngineService\n     .SendTemplateMessageSimpleAsync(businessId, sendDto);\n\n                if (!sendResult.Success)\n                {\n                    Log.Warning(\"❌ Follow-up message send failed → {Template}\", template);\n                    return ResponseResult.ErrorInfo(\"Follow-up send failed.\", sendResult.ErrorMessage);\n                }\n\n\n                return ResponseResult.SuccessInfo($\"Follow-up message sent using template: {template}\", null, sendResult.RawResponse);\n\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error sending follow-up message for StepId: {StepId}\", followUpStep.Id);\n                return ResponseResult.ErrorInfo(\"Failed to send follow-up.\");\n            }\n        }\n        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n        {\n            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic\n        }\n\n        // ✅ Extended logic with condition check (Tag + Source)\n        public async Task<CTAFlowStep?> GetChainedStepAsync(\n            Guid businessId,\n            Guid? nextStepId,\n            TrackingLog? trackingLog = null,\n            Contact? contact = null)\n        {\n            if (nextStepId == null)\n            {\n                Log.Information(\"ℹ️ No NextStepId provided — skipping follow-up.\");\n                return null;\n            }\n\n            try\n            {\n                var flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps)\n                    .FirstOrDefaultAsync(f =>\n                        f.BusinessId == businessId &&\n                        f.Steps.Any(s => s.Id == nextStepId));\n\n                if (flow == null)\n                {\n                    Log.Warning(\"⚠️ No flow found containing NextStepId: {NextStepId} for business: {BusinessId}\", nextStepId, businessId);\n                    return null;\n                }\n\n                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);\n\n                if (followUpStep == null)\n                {\n                    Log.Warning(\"❌ Step matched in flow but not found in step list: {NextStepId}\", nextStepId);\n                    return null;\n                }\n\n                // ✅ Check RequiredTag / Source match\n                if (trackingLog != null)\n                {\n                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n\n                    if (!isMatch)\n                    {\n                        Log.Information(\"🚫 Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]\",\n                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);\n                        return null;\n                    }\n                }\n\n                Log.Information(\"✅ Follow-up step found and matched → StepId: {StepId}, Template: {Template}\",\n                    followUpStep.Id, followUpStep.TemplateToSend);\n\n                return followUpStep;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception while fetching chained step for NextStepId: {NextStepId}\", nextStepId);\n                throw;\n            }\n        }\n\n        // ✅ Optional helper for resolving from TrackingLogId\n        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(\n            Guid businessId,\n            Guid? nextStepId,\n            Guid? trackingLogId)\n        {\n            var log = await _context.TrackingLogs\n                .Include(l => l.Contact)\n                    .ThenInclude(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n        }\n       \n        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId)\n        {\n            try\n            {\n                Log.Information(\"🚦 Executing Visual Flow → StepId: {StepId} | TrackingLogId: {TrackingLogId}\", startStepId, trackingLogId);\n\n                var log = await _context.TrackingLogs\n                    .Include(l => l.Contact)\n                        .ThenInclude(c => c.ContactTags)\n                            .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n                if (log == null)\n                {\n                    Log.Warning(\"❌ TrackingLog not found for ID: {TrackingLogId}\", trackingLogId);\n                    return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n                }\n\n                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n\n                if (step == null)\n                {\n                    Log.Warning(\"❌ No flow step matched or conditions failed → StepId: {StepId}\", startStepId);\n                    return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n                }\n\n                ResponseResult sendResult;\n\n                // This switch block remains unchanged\n                switch (step.TemplateType?.ToLower())\n                {\n                    case \"image_template\":\n                        var imageDto = new ImageTemplateMessageDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            LanguageCode = \"en_US\"\n                        };\n                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n                        break;\n\n                    case \"text_template\":\n                    default:\n                        var textDto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            TemplateParameters = new()\n                        };\n                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n                        break;\n                }\n\n                // ✅ 2. SAVE the new ID to the log\n                var executionLog = new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    StepId = step.Id,\n                    FlowId = step.CTAFlowConfigId,\n                    CampaignSendLogId = campaignSendLogId, // <-- THE NEW VALUE IS SAVED HERE\n                    TrackingLogId = trackingLogId,\n                    ContactPhone = log.ContactPhone,\n                    TriggeredByButton = step.TriggerButtonText,\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow\n                };\n\n                _context.FlowExecutionLogs.Add(executionLog);\n                await _context.SaveChangesAsync();\n\n                if (sendResult.Success)\n                {\n                    Log.Information(\"✅ Flow step executed → Template: {Template} sent to {To}\", step.TemplateToSend, log.ContactPhone);\n                }\n                else\n                {\n                    Log.Warning(\"❌ Failed to send template from flow → {Reason}\", sendResult.ErrorMessage);\n                }\n\n                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception during ExecuteVisualFlowAsync()\");\n                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n            }\n        }\n\n        public async Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex)\n        {\n            return await _context.FlowButtonLinks\n     .Where(l => l.CTAFlowStepId == sourceStepId\n              && l.NextStepId != null\n              && l.Step.CTAFlowConfigId == flowId\n              && l.ButtonIndex == buttonIndex)\n     .SingleOrDefaultAsync();\n\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/FlowRuntimeService.cs",
      "sha256": "da8d52ff8e4ae751bc8096a74f74d271cd7fe2b585955a9a669b564b5aa2fa2d",
      "language": "csharp",
      "size": 9059,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System.Text.Json;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat_api.WhatsAppSettings.Services; \n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class FlowRuntimeService : IFlowRuntimeService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        \n        public FlowRuntimeService(\n            AppDbContext dbContext,\n            IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _dbContext = dbContext;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        public async Task<NextStepResult> ExecuteNextAsync(NextStepContext context)\n        {\n            try\n            {\n                // 1) URL-only buttons → no WA send, just record and return redirect\n                if (context.ClickedButton != null &&\n                    context.ClickedButton.ButtonType?.Equals(\"URL\", StringComparison.OrdinalIgnoreCase) == true)\n                {\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = context.SourceStepId,\n                        StepName = \"URL_REDIRECT\",\n                        MessageLogId = context.MessageLogId,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = true,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult\n                    {\n                        Success = true,\n                        RedirectUrl = context.ClickedButton.ButtonValue\n                    };\n                }\n\n                // 2) Load next step in the same flow\n                var targetStep = await _dbContext.CTAFlowSteps\n                    .Include(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(s => s.Id == context.TargetStepId &&\n                                              s.CTAFlowConfigId == context.FlowId);\n\n                if (targetStep == null)\n                    return new NextStepResult { Success = false, Error = \"Target step not found.\" };\n\n                if (string.IsNullOrWhiteSpace(targetStep.TemplateToSend))\n                    return new NextStepResult { Success = false, Error = \"Target step has no template assigned.\" };\n\n                var templateName = targetStep.TemplateToSend.Trim();\n\n                // 3) ✅ Preflight the template to pick the correct language and catch 132001 early\n                var meta = await _templateFetcherService.GetTemplateByNameAsync(\n                    context.BusinessId, templateName, includeButtons: true);\n\n                if (meta == null)\n                {\n                    // log a failed flow execution (no WA call attempted)\n                    _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = context.BusinessId,\n                        FlowId = context.FlowId,\n                        StepId = targetStep.Id,\n                        StepName = templateName,\n                        MessageLogId = null,\n                        ButtonIndex = context.ButtonIndex,\n                        ContactPhone = context.ContactPhone,\n                        Success = false,\n                        ErrorMessage = $\"Template '{templateName}' not found for this WABA.\",\n                        RawResponse = null,\n                        ExecutedAt = DateTime.UtcNow,\n                        RequestId = context.RequestId\n                    });\n                    await _dbContext.SaveChangesAsync();\n\n                    return new NextStepResult\n                    {\n                        Success = false,\n                        Error = $\"Template '{templateName}' not found or not approved.\"\n                    };\n                }\n\n                // prefer the template’s actual language over hard-coding \"en_US\"\n                var languageCode = string.IsNullOrWhiteSpace(meta.Language) ? \"en_US\" : meta.Language;\n\n                // (Optional) build body/button components here if your step needs params.\n                // Quick-reply buttons require NO components; dynamic URL buttons would.\n                var components = new List<object>();\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = context.ContactPhone,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = templateName,\n                        language = new { code = languageCode },\n                        components\n                    }\n                };\n\n                var sendResult = await _messageEngineService.SendPayloadAsync(context.BusinessId, payload);\n\n                // 4) Snapshot buttons for robust click mapping later\n                string? buttonBundleJson = null;\n                if (targetStep.ButtonLinks?.Count > 0)\n                {\n                    var bundle = targetStep.ButtonLinks\n                        .OrderBy(b => b.ButtonIndex)\n                        .Select(b => new\n                        {\n                            i = b.ButtonIndex,\n                            t = b.ButtonText ?? \"\",\n                            ty = b.ButtonType ?? \"QUICK_REPLY\",\n                            v = b.ButtonValue ?? \"\",\n                            ns = b.NextStepId\n                        })\n                        .ToList();\n\n                    buttonBundleJson = JsonSerializer.Serialize(bundle);\n                }\n\n                // 5) ✅ Write MessageLog with NON-NULL MessageContent and sensible timestamps\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    RecipientNumber = context.ContactPhone,\n                    CTAFlowConfigId = context.FlowId,\n                    CTAFlowStepId = targetStep.Id,\n                    FlowVersion = context.Version,\n                    Source = \"flow\",\n                    RefMessageId = context.MessageLogId, // correlate to the parent WA msg (if any)\n                    CreatedAt = DateTime.UtcNow,\n                    Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                    MessageId = sendResult.MessageId,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ButtonBundleJson = buttonBundleJson,\n\n                    // 🔴 This was missing before → caused NOT NULL violation\n                    MessageContent = templateName,\n\n                    // good hygiene: stamp SentAt on success\n                    SentAt = sendResult.Success ? DateTime.UtcNow : (DateTime?)null,\n                };\n\n                _dbContext.MessageLogs.Add(messageLog);\n\n                // 6) Flow execution audit row\n                _dbContext.FlowExecutionLogs.Add(new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = context.BusinessId,\n                    FlowId = context.FlowId,\n                    StepId = targetStep.Id,\n                    StepName = templateName,\n                    MessageLogId = messageLog.Id,\n                    ButtonIndex = context.ButtonIndex,\n                    ContactPhone = context.ContactPhone,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow,\n                    RequestId = context.RequestId,\n\n                    // Optional (only if your entity has these columns):\n                    // TemplateName = templateName,\n                    // TemplateType = targetStep.TemplateType,\n                });\n\n                await _dbContext.SaveChangesAsync();\n\n                return new NextStepResult\n                {\n                    Success = sendResult.Success,\n                    Error = sendResult.ErrorMessage,\n                    RedirectUrl = null\n                };\n            }\n            catch (Exception ex)\n            {\n                return new NextStepResult { Success = false, Error = ex.Message };\n            }\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ICTAFlowService.cs",
      "sha256": "12d6c4050a662826cb8281e72efb15cc621bb2b6e26b04981f6ca819603d7644",
      "language": "csharp",
      "size": 2166,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface ICTAFlowService\n    {\n        // ✅ Used for flow creation and saving\n        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);\n        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n        // ✅ Load flows\n        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);\n        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n        // ✅ Load and manage flow steps\n        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);\n\n      \n        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);\n\n\n        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n        // ✅ Runtime logic\n        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);\n\n        // ✅ Flow management\n        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);\n        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);\n\n        // ✅ Editor loading (visual builder)\n        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);\n\n      \n        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId, Guid? campaignSendLogId);\n        Task<FlowButtonLink?> GetLinkAsync(Guid flowId, Guid sourceStepId, short buttonIndex);\n\n        public interface IFlowRuntimeService\n        {\n            Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n        }\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/IFlowRuntimeService.cs",
      "sha256": "302d771fe1f82a2dc8291fd65dcc3ccd58ab0c29af0220409d04db3f7b85020a",
      "language": "csharp",
      "size": 951,
      "content": "using xbytechat.api.Features.CTAFlowBuilder.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface IFlowRuntimeService\n    {\n        Task<NextStepResult> ExecuteNextAsync(NextStepContext context);\n\n    }\n    public record NextStepContext\n    {\n        public Guid BusinessId { get; set; }\n        public Guid FlowId { get; set; }\n        public int Version { get; set; }\n        public Guid SourceStepId { get; set; }\n        public Guid? TargetStepId { get; set; }\n        public short ButtonIndex { get; set; }\n        public Guid MessageLogId { get; set; }\n        public string ContactPhone { get; set; } = string.Empty;\n        public Guid RequestId { get; set; }\n\n        public FlowButtonLink? ClickedButton { get; set; }\n    }\n\n    public record NextStepResult\n    {\n        public bool Success { get; set; }\n        public string? Error { get; set; }\n        public string? RedirectUrl { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAFlowBuilder/Services/StepMatchingHelper.cs",
      "sha256": "3353c5195c81af5b7a26a5a7f648e6dc4504f54633d408220670d2dba65a5888",
      "language": "csharp",
      "size": 1818,
      "content": "using Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public static class StepMatchingHelper\n    {\n        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)\n        {\n            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&\n                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))\n            {\n                Log.Information(\"🚫 Step [{StepId}] skipped: RequiredSource '{Required}' ≠ ClickedSource '{Actual}'\",\n                    step.Id, step.RequiredSource, log.SourceType);\n                return false;\n            }\n\n            if (!string.IsNullOrWhiteSpace(step.RequiredTag))\n            {\n                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())\n                {\n                    Log.Information(\"🚫 Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})\",\n                        step.Id, step.RequiredTag);\n                    return false;\n                }\n\n                var hasTag = contact.ContactTags.Any(ct =>\n                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));\n\n                if (!hasTag)\n                {\n                    var contactTags = string.Join(\", \", contact.ContactTags.Select(ct => ct.Tag.Name));\n                    Log.Information(\"🚫 Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'\",\n                        step.Id, contactTags, step.RequiredTag);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Controllers/CTAManagementController.cs",
      "sha256": "3d06022ca06d6b4e214bf6e571b79d311da0902eeadebddc1f7d48c18a1ecb99",
      "language": "csharp",
      "size": 2535,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Services;\n\nnamespace xbytechat.api.Features.CTAManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/ctamanagement\")]\n    [Authorize] // ✅ Ensures only authenticated users can access\n    public class CTAManagementController : ControllerBase\n    {\n        private readonly ICTAManagementService _ctaService;\n\n        public CTAManagementController(ICTAManagementService ctaService)\n        {\n            _ctaService = ctaService;\n        }\n\n        // ✅ GET: api/ctamanagement/get-all\n        [HttpGet(\"get-all\")]\n        public async Task<IActionResult> GetAll()\n        {\n            var data = await _ctaService.GetAllAsync();\n            return Ok(data);\n        }\n\n        // 📌 GET: api/ctamanagement/get/{id}\n        [HttpGet(\"get/{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _ctaService.GetByIdAsync(id);\n            return result == null ? NotFound(\"CTA not found\") : Ok(result);\n        }\n\n        // ✅ POST: api/ctamanagement/create\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> Create([FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"❌ Invalid CTA payload.\");\n\n            var success = await _ctaService.AddAsync(dto);\n            return success\n                ? Ok(new { message = \"✅ CTA created.\" })\n                : StatusCode(500, \"❌ Failed to create CTA.\");\n        }\n\n        // ✏️ PUT: api/ctamanagement/update/{id}\n        [HttpPut(\"update/{id}\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"❌ Invalid CTA payload.\");\n\n            var success = await _ctaService.UpdateAsync(id, dto);\n            return success\n                ? Ok(new { message = \"✅ CTA updated.\" })\n                : NotFound(\"CTA not found or update failed.\");\n        }\n\n        // 🗑️ DELETE: api/ctamanagement/delete/{id}\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var success = await _ctaService.DeleteAsync(id);\n            return success\n                ? Ok(new { message = \"✅ CTA deleted (soft).\" })\n                : NotFound(\"CTA not found or delete failed.\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/DTOs/CTADefinitionDto.cs",
      "sha256": "1472d3694a4cebf363c3a632675fe61b8646f610f7a96a2687286bfb47d8eacf",
      "language": "csharp",
      "size": 707,
      "content": "namespace xbytechat.api.Features.CTAManagement.DTOs\n{\n    public class CTADefinitionDto\n    {\n        public Guid Id { get; set; }\n\n        public string Title { get; set; } = string.Empty; // 🏷️ CTA label (e.g., \"Buy Now\")\n\n        public string ButtonText { get; set; } = string.Empty; // 💬 Visible button label (e.g., \"Buy Now\")\n\n        public string ButtonType { get; set; } = \"url\"; // 🔘 Expected values: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // 🌐 Redirect or action target\n\n        public string? Description { get; set; } // 📝 Optional description (for context/tooltip)\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Models/CTADefinition.cs",
      "sha256": "96216798bd31e2098b9a2ba43dac62e067f7062f5e5c36bb318a8dab2f74da38",
      "language": "csharp",
      "size": 913,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CTAManagement.Models\n{\n    public class CTADefinition\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; } // 🔗 Business that owns this CTA\n\n        public string Title { get; set; } = string.Empty; // 🏷️ CTA label/title, e.g., \"Buy Now\"\n\n        public string ButtonText { get; set; } = string.Empty; // 💬 Visible button label\n\n        public string ButtonType { get; set; } = \"url\"; // 🔘 Options: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // 🌐 Action URL or value (depending on type)\n\n        public string Description { get; set; } = string.Empty; // 📝 Optional additional context\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/CTAManagementService.cs",
      "sha256": "a9388986726208c45f05afa2bd4ed3c74b33d7d79eb0e5863b7256e061ba4081",
      "language": "csharp",
      "size": 4621,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Models;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public class CTAManagementService : ICTAManagementService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CTAManagementService(AppDbContext dbContext, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        // 🔄 Get all active CTAs for the current business\n        public async Task<List<CTADefinitionDto>> GetAllAsync()\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            return await _dbContext.CTADefinitions\n                .Where(c => c.IsActive && c.BusinessId == businessId)\n                .Select(c => new CTADefinitionDto\n                {\n                    Id = c.Id,\n                    Title = c.Title,\n                    ButtonText = c.ButtonText,\n                    ButtonType = c.ButtonType,\n                    TargetUrl = c.TargetUrl,\n                    Description = c.Description,\n                    IsActive = c.IsActive\n                }).ToListAsync();\n        }\n\n        // ✅ Add new CTA\n        public async Task<bool> AddAsync(CTADefinitionDto dto)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = new CTADefinition\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Title = dto.Title,\n                ButtonText = dto.ButtonText,\n                ButtonType = dto.ButtonType,\n                TargetUrl = dto.TargetUrl,\n                Description = dto.Description ?? \"\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _dbContext.CTADefinitions.AddAsync(cta);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // 📌 Get CTA by ID\n        public async Task<CTADefinitionDto?> GetByIdAsync(Guid id)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = await _dbContext.CTADefinitions\n                .FirstOrDefaultAsync(c => c.Id == id && c.IsActive && c.BusinessId == businessId);\n\n            if (cta == null) return null;\n\n            return new CTADefinitionDto\n            {\n                Id = cta.Id,\n                Title = cta.Title,\n                ButtonText = cta.ButtonText,\n                ButtonType = cta.ButtonType,\n                TargetUrl = cta.TargetUrl,\n                Description = cta.Description,\n                IsActive = cta.IsActive\n            };\n        }\n\n\n        // ✏️ Update CTA\n        public async Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to modify this CTA.\");\n\n            cta.Title = dto.Title;\n            cta.ButtonText = dto.ButtonText;\n            cta.ButtonType = dto.ButtonType;\n            cta.TargetUrl = dto.TargetUrl;\n            cta.Description = dto.Description ?? \"\";\n            cta.IsActive = dto.IsActive;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // 🗑️ Soft Delete CTA\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to delete this CTA.\");\n\n            cta.IsActive = false;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // 🔐 Reusable method to extract BusinessId\n        private Guid GetBusinessIdFromClaims()\n        {\n            var claim = _httpContextAccessor.HttpContext?.User?.FindFirst(\"businessId\");\n            if (claim == null || string.IsNullOrWhiteSpace(claim.Value) || !Guid.TryParse(claim.Value, out var businessId))\n                throw new UnauthorizedAccessException(\"❌ Invalid or missing BusinessId claim.\");\n\n            return businessId;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/ICTAManagementService.cs",
      "sha256": "f05abf40bdd4a593e8c8f8980c288884dc5701a5c9ba29261588816002758bcd",
      "language": "csharp",
      "size": 814,
      "content": "using xbytechat.api.Features.CTAManagement.DTOs;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public interface ICTAManagementService\n    {\n        /// <summary>Returns all active CTAs for the current business.</summary>\n        Task<List<CTADefinitionDto>> GetAllAsync();\n\n        /// <summary>Returns a single CTA by ID (if exists).</summary>\n        Task<CTADefinitionDto?> GetByIdAsync(Guid id);\n\n        /// <summary>Adds a new CTA for the logged-in business.</summary>\n        Task<bool> AddAsync(CTADefinitionDto dto);\n\n        /// <summary>Updates an existing CTA if it belongs to the business.</summary>\n        Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto);\n\n        /// <summary>Soft deletes (deactivates) a CTA entry.</summary>\n        Task<bool> DeleteAsync(Guid id);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Controllers/FeatureAccessController.cs",
      "sha256": "a22d132286854a629e58eaa52e3ceebc77dcbe65ccb89d849b5c61fbe23f9904",
      "language": "csharp",
      "size": 5482,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Claims;\nusing xbytechat.api;\nusing FeatureAccessEntity = xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess;\n\nusing xbytechat.api.Features.FeatureAccessModule.Models;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/feature-access\")]\n    [Authorize]\n    public class FeatureAccessController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public FeatureAccessController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // DTOs to match your frontend shape\n        public class FeatureMeDto\n        {\n            public string featureCode { get; set; } = \"\";\n            public bool isAvailableInPlan { get; set; }\n            public bool? isOverridden { get; set; } // null = not overridden\n        }\n\n        public class BusinessFeatureDto\n        {\n            public string featureName { get; set; } = \"\";\n            public bool isEnabled { get; set; }\n        }\n\n        /// <summary>\n        /// Returns features for the current user, merged from plan + per-business overrides\n        /// Shape: [{ featureCode, isAvailableInPlan, isOverridden }]\n        /// </summary>\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMyFeatureAccess()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true })\n                return Unauthorized();\n\n            var role = (user.FindFirst(\"role\")?.Value ?? user.FindFirst(ClaimTypes.Role)?.Value ?? \"business\").ToLower();\n            var plan = (user.FindFirst(\"plan\")?.Value ?? \"basic\").ToLower();\n\n            Guid businessId = Guid.Empty;\n            _ = Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out businessId);\n\n            // Superadmin: grant all known features\n            if (role == \"superadmin\")\n            {\n                var allNames = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToListAsync();\n\n                var super = allNames.Select(name => new FeatureMeDto\n                {\n                    featureCode = name,\n                    isAvailableInPlan = true,\n                    isOverridden = true\n                });\n\n                return Ok(super);\n            }\n\n            // Load plan-level features (same entity type as DbSet)\n            var planRows = await _db.FeatureAccess\n                .AsNoTracking()\n                .Where(f => f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            // Load business overrides using SAME type; avoid ternary type-mismatch\n            List<FeatureAccessEntity> overrideRows;\n            if (businessId == Guid.Empty)\n            {\n                overrideRows = new();\n            }\n            else\n            {\n                overrideRows = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Where(f => f.BusinessId == businessId)\n                    .ToListAsync();\n            }\n\n            // Build base from plan, then apply overrides\n            var map = new Dictionary<string, FeatureMeDto>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var p in planRows)\n            {\n                if (!map.ContainsKey(p.FeatureName))\n                {\n                    map[p.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = p.FeatureName,\n                        isAvailableInPlan = p.IsEnabled,\n                        isOverridden = null\n                    };\n                }\n                else\n                {\n                    map[p.FeatureName].isAvailableInPlan = p.IsEnabled;\n                }\n            }\n\n            foreach (var o in overrideRows)\n            {\n                if (!map.ContainsKey(o.FeatureName))\n                {\n                    map[o.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = o.FeatureName,\n                        isAvailableInPlan = false,\n                        isOverridden = o.IsEnabled\n                    };\n                }\n                else\n                {\n                    map[o.FeatureName].isOverridden = o.IsEnabled;\n                }\n            }\n\n            return Ok(map.Values.ToArray());\n        }\n\n        /// <summary>\n        /// Returns all features for a business (used by useAllFeatureAccess/useFeatureAccess hooks)\n        /// Shape: [{ featureName, isEnabled }]\n        /// </summary>\n        [HttpGet(\"business/{businessId:guid}\")]\n        public async Task<IActionResult> GetBusinessFeatureAccess([FromRoute] Guid businessId)\n        {\n            // (Optional) enforce tenant isolation:\n            // var currentBiz = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            // if (!Guid.TryParse(currentBiz, out var bizFromToken) || bizFromToken != businessId)\n            //     return Forbid();\n\n            var rows = await _db.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new BusinessFeatureDto\n                {\n                    featureName = f.FeatureName,\n                    isEnabled = f.IsEnabled\n                })\n                .ToListAsync();\n\n            return Ok(rows);\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureAccessDto.cs",
      "sha256": "c418561ae9075f32902a032190e2252c7eab385bbdf1028ddd5748f0190df6de",
      "language": "csharp",
      "size": 409,
      "content": "using System;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string FeatureName { get; set; } = string.Empty;\n\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs",
      "sha256": "958bb8308ae62a666fd659a66327d6b5cb0a7a66659e4048df206994ea3e9aec",
      "language": "csharp",
      "size": 360,
      "content": "// 📄 Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureMetadataDto\n    {\n        public string FeatureCode { get; set; } = string.Empty;\n        public string Group { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureStatusDto.cs",
      "sha256": "36dfe2add0ad58f4e5f9e0d572e43bf68a42cc95b17f5654cacb1e7596e9715a",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.FeatureAccess.DTOs;\n\npublic class FeatureStatusDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public bool IsAvailableInPlan { get; set; }\n    public bool? IsOverridden { get; set; }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureTogglePatchDto.cs",
      "sha256": "4663d2df320001525fb2b9ff9847b149f77677557a22efbaa7c455ed8ac3c483",
      "language": "csharp",
      "size": 157,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureTogglePatchDto\n    {\n        public bool IsEnabled { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureToggleViewDto.cs",
      "sha256": "cc966666d4e050d9d16f7bab7d10f8c059305fc24a84ea7bd2642eb9a4375e8b",
      "language": "csharp",
      "size": 423,
      "content": "public class FeatureToggleViewDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public string Group { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n\n    public bool IsAvailableInPlan { get; set; }     // From PlanManager\n    public bool? IsOverridden { get; set; }         // null if no override\n    public bool IsActive => IsOverridden ?? IsAvailableInPlan;\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/UserFeatureAccessDto.cs",
      "sha256": "24a59738ee2f1924903a6e14ecf5ed5a1ce6cbb0269b34013438b37502c2efa9",
      "language": "csharp",
      "size": 520,
      "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class UserFeatureAccessDto\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Role { get; set; } = \"\";\n        public List<FeaturePermissionDto> Permissions { get; set; } = new();\n    }\n\n    public class FeaturePermissionDto\n    {\n        public string FeatureName { get; set; } = \"\";\n        public bool IsEnabled { get; set; }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureAccess.cs",
      "sha256": "53331121064e4c1559420eb6de1770eb6788b85b404505420f11d5c0bb6b8fe6",
      "language": "csharp",
      "size": 975,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureAccess\")]\n    public class FeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } // e.g. \"CRM\", \"Campaigns\", \"Catalog\"\n        [MaxLength(200)]\n        public string Description { get; set; } = string.Empty;\n        [Required]\n        public bool IsEnabled { get; set; } // ✅ true = allow, false = restrict\n\n        public string? Notes { get; set; } // Optional: reason or context\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty;\n        public string? Plan { get; set; } // e.g. \"basic\", \"smart\", \"advanced\"\n\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureMaster.cs",
      "sha256": "dcf5048b433abe18e2d52542d30fd81664a62f97176fe4ae583ce8218dfb002c",
      "language": "csharp",
      "size": 853,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureMaster\")]\n    public class FeatureMaster\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FeatureCode { get; set; } = string.Empty; // e.g. \"crm\", \"catalog\"\n\n        [Required]\n        [MaxLength(100)]\n        public string DisplayName { get; set; } = string.Empty; // e.g. \"CRM\", \"Catalog\"\n\n        [MaxLength(250)]\n        public string Description { get; set; } = string.Empty;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty; // Optional grouping like \"CRM\", \"Messaging\"\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Models/UserFeatureAccess.cs",
      "sha256": "894b0a6020dffcbe46247fd5412ef98ab890a641144d089aa7c9c7aa351d0f9b",
      "language": "csharp",
      "size": 778,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"UserFeatureAccess\")]\n    public class UserFeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        [Required]\n        public Guid UserId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty;\n\n        [Required]\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public Guid? ModifiedByUserId { get; set; }  // Who applied this override\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessEvaluator.cs",
      "sha256": "b7ad7ecdc58db9f75f5793f8fb207db8b7127f878b4d51a7144c6a71e1c2dd48",
      "language": "csharp",
      "size": 1566,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessEvaluator : IFeatureAccessEvaluator\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<FeatureAccessEvaluator> _logger;\n\n        public FeatureAccessEvaluator(AppDbContext db, ILogger<FeatureAccessEvaluator> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<bool> CanUseAsync(Guid businessId, string featureCode, Guid? userId)\n        {\n            var business = await _db.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.BusinessPlanInfo == null)\n                return false;\n\n            var planEnum = business.BusinessPlanInfo.Plan;\n            var planName = Enum.GetName(typeof(PlanType), planEnum)?.ToLower();\n\n            var planFeatures = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase)\n            {\n                [\"crm\"] = planName == \"smart\" || planName == \"advanced\",\n                [\"campaigns\"] = planName == \"advanced\",\n                [\"catalog\"] = true,\n                [\"automation\"] = planName == \"smart\" || planName == \"advanced\"\n            };\n\n            return planFeatures.TryGetValue(featureCode.ToLower(), out var allowed) && allowed;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessService.cs",
      "sha256": "7968f3a0ef26fa05305fef477338950b8cb824aea9785d56b5d500ef3c376921",
      "language": "csharp",
      "size": 9158,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Services;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessService : IFeatureAccessService\n    {\n        private readonly AppDbContext _context;\n        private readonly IPlanManager _planManager;\n        private readonly ILogger<FeatureAccessService> _logger;\n\n        public FeatureAccessService(AppDbContext context, IPlanManager planManager, ILogger<FeatureAccessService> logger)\n        {\n            _context = context;\n            _planManager = planManager;\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetAllAsync()\n        {\n            return await _context.FeatureAccess\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<FeatureAccessDto?> GetAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return null;\n\n            return new FeatureAccessDto\n            {\n                Id = entity.Id,\n                BusinessId = entity.BusinessId,\n                FeatureName = entity.FeatureName,\n                IsEnabled = entity.IsEnabled,\n                Notes = entity.Notes,\n                CreatedAt = entity.CreatedAt\n            };\n        }\n\n        public async Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto)\n        {\n            var entity = new  xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                FeatureName = dto.FeatureName,\n                IsEnabled = dto.IsEnabled,\n                Notes = dto.Notes,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FeatureAccess.Add(entity);\n            await _context.SaveChangesAsync();\n\n            dto.Id = entity.Id;\n            dto.CreatedAt = entity.CreatedAt;\n            return dto;\n        }\n\n        public async Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null)\n                throw new Exception(\"FeatureAccess not found\");\n\n            entity.FeatureName = dto.FeatureName;\n            entity.IsEnabled = dto.IsEnabled;\n            entity.Notes = dto.Notes;\n\n            await _context.SaveChangesAsync();\n\n            return dto;\n        }\n\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return false;\n\n            _context.FeatureAccess.Remove(entity);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan)\n        {\n            var allFeatures = await _context.FeatureAccess.ToListAsync();\n\n            var planAccessMap = _planManager.GetPlanFeatureMap(plan); // e.g., Dictionary<string, bool>\n\n            var userOverrides = await _context.UserFeatureAccess\n                .Where(x => x.BusinessId == businessId)\n                .ToDictionaryAsync(x => x.FeatureName, x => x.IsEnabled);\n\n            var result = allFeatures.Select(f => new FeatureToggleViewDto\n            {\n                FeatureCode = f.FeatureName,\n                Group = f.Group,\n                Description = f.Description,\n                IsAvailableInPlan = planAccessMap.ContainsKey(f.FeatureName),\n                IsOverridden = userOverrides.TryGetValue(f.FeatureName, out var val) ? val : null\n            }).ToList();\n\n            return result;\n        }\n\n        public async Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled)\n        {\n            try\n            {\n                var existing = await _context.UserFeatureAccess\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.FeatureName == featureCode);\n\n                if (existing != null)\n                {\n                    existing.IsEnabled = isEnabled;\n                    _context.UserFeatureAccess.Update(existing);\n                }\n                else\n                {\n                    var newAccess = new UserFeatureAccess\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FeatureName = featureCode,\n                        IsEnabled = isEnabled,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    await _context.UserFeatureAccess.AddAsync(newAccess);\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to toggle feature {FeatureCode} for business {BusinessId}\", featureCode, businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId)\n        {\n            var business = await _context.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n            {\n                _logger.LogError(\"❌ Business not found for feature access: {BusinessId}\", businessId);\n                return new List<FeatureStatusDto>();\n            }\n\n            var planName = business.BusinessPlanInfo?.Plan.ToString() ?? \"basic\"; // Fallback to basic\n            _logger.LogInformation(\"📦 Resolved plan for Business {BusinessId}: {Plan}\", businessId, planName);\n\n            var planFeatureMap = _planManager.GetPlanFeatureMap(planName);\n\n            var overrides = await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName, f => (bool?)f.IsEnabled);\n            foreach (var kv in overrides)\n                _logger.LogInformation($\"🔧 Feature override: {kv.Key} = {kv.Value}\");\n            var allFeatures = planFeatureMap.Keys\n                .Union(overrides.Keys)\n                .Distinct();\n\n            return allFeatures.Select(f => new FeatureStatusDto\n            {\n                FeatureCode = f,\n                IsAvailableInPlan = planFeatureMap.ContainsKey(f),\n                IsOverridden = overrides.ContainsKey(f) ? overrides[f] : null\n            }).ToList();\n        }\n\n        public async Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId)\n        {\n            var users = await _context.Users\n             .Where(u => u.BusinessId == businessId)\n             .Select(u => new UserFeatureAccessDto\n             {\n                 Id = u.Id,\n                 FullName = u.Name, // ✅ Fixed\n                 Email = u.Email,\n                 Role = u.Role.Name, // ✅ Assuming you want role name string\n                 Permissions = _context.UserFeatureAccess\n                     .Where(p => p.BusinessId == businessId && p.UserId == u.Id)\n                     .Select(p => new FeaturePermissionDto\n                     {\n                         FeatureName = p.FeatureName,\n                         IsEnabled = p.IsEnabled\n                     })\n                     .ToList()\n             }).ToListAsync();\n\n\n            return users;\n        }\n        public async Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName.ToLower(), f => f.IsEnabled);\n        }\n        public async Task<Dictionary<string, bool>> GetAllFeatureCodesAsync()\n        {\n            return await _context.FeatureMasters\n                .Select(f => f.FeatureCode.ToLower())\n                .Distinct()\n                .ToDictionaryAsync(k => k, v => true);\n        }\n\n\n    }\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessEvaluator.cs",
      "sha256": "c469910530df845be90a6d4135c2d39d19993f8abff4b3eefc6e8c05effe373d",
      "language": "csharp",
      "size": 259,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessEvaluator\n    {\n        Task<bool> CanUseAsync(Guid businessId, string featureName, Guid? userId = null);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessService.cs",
      "sha256": "6b328b62d7d5356015dc30688fa072e890cac87e55a5c8a12b1e605b05a744f3",
      "language": "csharp",
      "size": 1183,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessService\n    {\n        Task<IEnumerable<FeatureAccessDto>> GetAllAsync();\n        Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId);\n        Task<FeatureAccessDto?> GetAsync(Guid id);\n        Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto);\n        Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto);\n        Task<bool> DeleteAsync(Guid id);\n\n        Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan);\n        Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled);\n        Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId);\n        Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetAllFeatureCodesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Controllers/FlowAnalyticsController.cs",
      "sha256": "18a260235767524c70c33a6a49f8929060e94415ee98ff743590d207242020e3",
      "language": "csharp",
      "size": 2196,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.FlowAnalytics.Services;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Controllers\n{\n    [ApiController]\n    [Route(\"api/flow-analytics\")]\n    public class FlowAnalyticsController : ControllerBase\n    {\n        private readonly IFlowAnalyticsService _analyticsService;\n\n        public FlowAnalyticsController(IFlowAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        // ✅ GET /api/flow-analytics/summary\n        [HttpGet(\"summary\")]\n        [Authorize]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var result = await _analyticsService.GetAnalyticsSummaryAsync(businessId);\n            return Ok(result);\n        }\n\n        // ✅ GET /api/flow-analytics/most-triggered-steps\n        [HttpGet(\"most-triggered-steps\")]\n        [Authorize]\n        public async Task<IActionResult> GetMostTriggeredSteps()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var data = await _analyticsService.GetMostTriggeredStepsAsync(businessId);\n            return Ok(data);\n        }\n\n        // ✅ GET /api/flow-analytics/step-journey-breakdown?startDate=...&endDate=...\n        [HttpGet(\"step-journey-breakdown\")]\n        [Authorize]\n        public async Task<IActionResult> GetStepJourneyBreakdown([FromQuery] DateTime? startDate, [FromQuery] DateTime? endDate)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var data = await _analyticsService.GetStepJourneyBreakdownAsync(businessId, startDate, endDate);\n            return Ok(data);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsStepJourneyDto.cs",
      "sha256": "25c17b6d295eb4faf667e982e2878b32a18af8a759791962286f17eec9163f6f",
      "language": "csharp",
      "size": 889,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsStepJourneyDto\n    {\n        public Guid StepId { get; set; }\n\n        public string TemplateName { get; set; } = string.Empty;\n\n        public int TotalReached { get; set; }\n\n        public int ClickedNext { get; set; }\n\n        public Guid? NextStepId { get; set; }\n\n        // ✅ Auto-calculated: number of users who dropped off at this step\n        public int DropOff => TotalReached - ClickedNext;\n\n        // ✅ Auto-calculated: percentage of users who clicked \"next\"\n        public double ConversionRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)ClickedNext / TotalReached * 100, 2);\n\n        // ✅ Optional: percentage of users who dropped off\n        public double DropOffRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)DropOff / TotalReached * 100, 2);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsSummaryDto.cs",
      "sha256": "5298f0c920ce53f68b8113de057d804750e1a3afd39d3a24e965ae120275118a",
      "language": "csharp",
      "size": 369,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsSummaryDto\n    {\n        public int TotalExecutions { get; set; }\n        public int UniqueContacts { get; set; }\n        public string TopStepTriggered { get; set; } = \"N/A\";\n        public int TopStepCount { get; set; }\n        public DateTime? LastExecutedAt { get; set; }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowStepAnalyticsDto.cs",
      "sha256": "538b4b71cb5a0a82ee36ec0147c0014d4f6570b635eb2ce711cb7e8de3119a09",
      "language": "csharp",
      "size": 478,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowStepAnalyticsDto\n    {\n        public Guid StepId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public int TotalReached { get; set; }\n        public int ClickedNext { get; set; }\n        public int DropOff => TotalReached - ClickedNext;\n        public Guid? NextStepId { get; set; }\n        public DateTime ExecutedAtUtc { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/DTOs/MostTriggeredStepDto.cs",
      "sha256": "18dc2f8497fae7508358e8556503db073d057061d1892fed2882208fa6653588",
      "language": "csharp",
      "size": 310,
      "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class MostTriggeredStepDto\n    {\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n        public int TriggerCount { get; set; }\n        public DateTime? LastTriggeredAt { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/FlowAnalyticsService.cs",
      "sha256": "b832767451b9f0161f931082a45a698407bf4cfaa6c5077edef8a2f6d30385cb",
      "language": "csharp",
      "size": 5128,
      "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public class FlowAnalyticsService : IFlowAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public FlowAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ✅ Summary cards (executions, unique contacts, top step)\n        public async Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId)\n        {\n            try\n            {\n                Log.Information(\"📊 Generating Flow Analytics Summary for BusinessId: {BusinessId}\", businessId);\n\n                var recentExecutions = await _context.FlowExecutionLogs\n                    .Where(e => e.BusinessId == businessId)\n                    .ToListAsync();\n\n                var totalExecutions = recentExecutions.Count;\n                var uniqueContacts = recentExecutions.Select(e => e.ContactPhone).Distinct().Count();\n                var mostTriggeredStep = recentExecutions\n                    .GroupBy(e => e.StepName)\n                    .OrderByDescending(g => g.Count())\n                    .Select(g => new { Step = g.Key, Count = g.Count() })\n                    .FirstOrDefault();\n\n                return new FlowAnalyticsSummaryDto\n                {\n                    TotalExecutions = totalExecutions,\n                    UniqueContacts = uniqueContacts,\n                    TopStepTriggered = mostTriggeredStep?.Step ?? \"N/A\",\n                    TopStepCount = mostTriggeredStep?.Count ?? 0,\n                    LastExecutedAt = recentExecutions\n                        .OrderByDescending(e => e.ExecutedAt)\n                        .FirstOrDefault()?.ExecutedAt\n                };\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to generate flow analytics summary\");\n                return new FlowAnalyticsSummaryDto();\n            }\n        }\n\n        // ✅ Top triggered steps leaderboard\n        public async Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId)\n        {\n            return await _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId)\n                .GroupBy(e => new { e.StepId, e.StepName })\n                .Select(g => new MostTriggeredStepDto\n                {\n                    StepId = g.Key.StepId,\n                    StepName = g.Key.StepName,\n                    TriggerCount = g.Count(),\n                    LastTriggeredAt = g.Max(e => e.ExecutedAt)\n                })\n                .OrderByDescending(x => x.TriggerCount)\n                .Take(5)\n                .ToListAsync();\n        }\n\n        // ✅ Step-by-step journey breakdown (with date filter)\n        public async Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate)\n        {\n            var query = _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId);\n\n            if (startDate.HasValue)\n                query = query.Where(e => e.ExecutedAt >= startDate.Value.Date);\n\n            if (endDate.HasValue)\n                query = query.Where(e => e.ExecutedAt <= endDate.Value.Date.AddDays(1).AddTicks(-1));\n\n            var logs = await query.ToListAsync();\n\n            // Group by StepId\n            var grouped = logs\n                .GroupBy(e => new { e.StepId, e.TemplateName, e.TriggeredByButton, e.FlowId })\n                .Select(g => new\n                {\n                    StepId = g.Key.StepId,\n                    TemplateName = g.Key.TemplateName,\n                    TotalReached = g.Count(),\n                    ClickedNext = logs.Count(x =>\n                        x.TriggeredByButton != null &&\n                        x.FlowId == g.Key.FlowId &&\n                        x.StepId != g.Key.StepId &&\n                        x.TriggeredByButton == g.Key.TriggeredByButton\n                    ),\n                    FlowId = g.Key.FlowId,\n                    TriggeredByButton = g.Key.TriggeredByButton\n                })\n                .ToList();\n\n            // Build final breakdown\n            var breakdown = grouped.Select(g => new FlowAnalyticsStepJourneyDto\n            {\n                StepId = g.StepId,\n                TemplateName = g.TemplateName,\n                TotalReached = g.TotalReached,\n                ClickedNext = g.ClickedNext,\n              //  DropOff = g.TotalReached - g.ClickedNext,\n                NextStepId = _context.FlowButtonLinks\n                    .Where(bl =>\n                        bl.CTAFlowStepId == g.StepId &&\n                        bl.ButtonText == g.TriggeredByButton)\n                    .Select(bl => bl.NextStepId)\n                    .FirstOrDefault()\n            }).ToList();\n\n            return breakdown;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/FlowAnalytics/Services/IFlowAnalyticsService.cs",
      "sha256": "65a623c78188e9581eee608e1e5e53404f8431fb317139d50a4caadd86b074ae",
      "language": "csharp",
      "size": 512,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public interface IFlowAnalyticsService\n    {\n        Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId);\n        Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId);\n        Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Controllers/InboxController.cs",
      "sha256": "309176361f2834ed7c983d99dc96ebb6b7298e35e99a528c40c981257176063a",
      "language": "csharp",
      "size": 3890,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.AspNetCore.Authorization;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Controllers\n{\n    [ApiController]\n    [Route(\"api/inbox\")]\n    public class InboxController : ControllerBase\n    {\n        private readonly IInboxService _inboxService;\n\n        public InboxController(IInboxService inboxService)\n        {\n            _inboxService = inboxService;\n        }\n\n        /// <summary>\n        /// Send a new message from UI or system.\n        /// </summary>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Message content is required.\");\n\n            var result = await _inboxService.SaveOutgoingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Receive a message from external source (e.g., WhatsApp webhook).\n        /// </summary>\n        [HttpPost(\"receive\")]\n        public async Task<IActionResult> ReceiveMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Incoming message content is required.\");\n\n            var result = await _inboxService.SaveIncomingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Fetch message history between agent and customer using business token + contactId.\n        /// </summary>\n        [HttpGet(\"messages\")]\n        public async Task<IActionResult> GetMessagesByContact([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            var messages = await _inboxService.GetMessagesByContactAsync(businessId, contactId);\n            return Ok(messages);\n        }\n\n        /// <summary>\n        /// Fetch full conversation between agent (userPhone) and customer (contactPhone).\n        /// </summary>\n        [HttpGet(\"conversation\")]\n        public async Task<IActionResult> GetConversation(\n            [FromQuery] Guid businessId,\n            [FromQuery] string userPhone,\n            [FromQuery] string contactPhone)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(userPhone) || string.IsNullOrWhiteSpace(contactPhone))\n                return BadRequest(\"Invalid input.\");\n\n            var messages = await _inboxService.GetConversationAsync(businessId, userPhone, contactPhone);\n            return Ok(messages);\n        }\n\n        //[HttpGet(\"unread-counts\")]\n        //public async Task<IActionResult> GetUnreadCounts()\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    var counts = await _inboxService.GetUnreadMessageCountsAsync(businessId);\n        //    return Ok(counts);\n        //}\n\n        [HttpPost(\"mark-read\")]\n        public async Task<IActionResult> MarkMessagesAsRead([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            await _inboxService.MarkMessagesAsReadAsync(businessId, contactId);\n            return Ok();\n        }\n        [HttpGet(\"unread-counts\")]\n        public async Task<IActionResult> GetUnreadCounts()\n        {\n            var userId = User.GetUserId();\n            var businessId = User.GetBusinessId();\n\n            var counts = await _inboxService.GetUnreadCountsForUserAsync(businessId, userId);\n            return Ok(counts);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/InboxMessageDto.cs",
      "sha256": "aef9beda43a0dc4f1c619514c3289f6c68a6daf10fe5cdd46ad13c474be29c0b",
      "language": "csharp",
      "size": 881,
      "content": "// 📄 File: Features/Inbox/DTOs/InboxMessageDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class InboxMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientPhone { get; set; }\n        public string MessageBody { get; set; }\n        public Guid? ContactId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }       // 🆕 To show in chat bubble\n        public string? RenderedBody { get; set; }\n\n        public bool IsIncoming { get; set; }            // 🆕 Needed for bubble side\n        public string Status { get; set; }              // 🆕 For message ticks\n        public DateTime SentAt { get; set; }            // 🆕 For timestamp\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/SendInboxMessageDto.cs",
      "sha256": "1ad0e0e61748e9f9e1fab32e1fe533c57a6c8d586694e55aa5b531359804de90",
      "language": "csharp",
      "size": 462,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    /// <summary>\n    /// DTO sent from frontend when a user sends a new message.\n    /// </summary>\n    public class SendInboxMessageDto\n    {\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public string MessageBody { get; set; }\n\n        public string? MediaUrl { get; set; } // Optional image or file\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/SendMessageInputDto.cs",
      "sha256": "3c76bd2b5ce839064134b72aa2114c14c73a98109c680671f5e7c463867f221a",
      "language": "csharp",
      "size": 249,
      "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class SendMessageInputDto\n    {\n        public Guid ContactId { get; set; } // 🔁 REMOVE the \"?\" (nullable) unless needed\n        public string Message { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/DTOs/TextOnlyMessageSendDto.cs",
      "sha256": "2d322145a5e6410decb150b108c7d74a656201d9be027b99b02d1c261b4ed4fc",
      "language": "csharp",
      "size": 247,
      "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class TextOnlyMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Hubs/InboxHub.cs",
      "sha256": "2457d506ef6f58ed908e2183358c0506f59e9404b1d8fdb8ae97553d266a5206",
      "language": "csharp",
      "size": 6309,
      "content": "// 📄 xbytechat.api/Features/Inbox/InboxHub.cs\n\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Hubs\n{\n    [Authorize]\n    public class InboxHub : Hub\n    {\n        private readonly AppDbContext _db;\n        private readonly IMessageEngineService _messageService;\n\n        public InboxHub(AppDbContext db, IMessageEngineService messageService)\n        {\n            _db = db;\n            _messageService = messageService;\n        }\n\n        public override async Task OnConnectedAsync()\n        {\n            var businessId = Context.User.GetBusinessId();\n            var groupName = $\"business_{businessId}\";\n\n            await Groups.AddToGroupAsync(Context.ConnectionId, groupName);\n            Console.WriteLine($\"✅ Connected to group: {groupName}\");\n\n            await base.OnConnectedAsync();\n        }\n\n        public async Task SendMessageToContact(SendMessageInputDto dto)\n        {\n            Console.WriteLine(\"📩 Raw DTO payload:\");\n            Console.WriteLine($\"ContactId: {dto.ContactId}, Message: {dto.Message}\");\n\n            if (dto.ContactId == null || string.IsNullOrWhiteSpace(dto.Message))\n            {\n                Console.WriteLine(\"❌ Invalid contact or empty message.\");\n                return;\n            }\n\n            var businessId = Context.User.GetBusinessId();\n            var userId = Context.User.GetUserId();\n\n            // ✅ Lookup recipient phone number from Contact table\n            var contact = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.Id == dto.ContactId)\n                .FirstOrDefaultAsync();\n\n            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n            {\n                Console.WriteLine($\"❌ Contact not found or missing phone number. ContactId: {dto.ContactId}\");\n                await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", new\n                {\n                    contactId = dto.ContactId,\n                    message = dto.Message,\n                    from = userId,\n                    status = \"Failed\",\n                    error = \"Invalid contact\"\n                   \n                });\n                return;\n            }\n\n            // ✅ Prepare DTO for WhatsApp sending\n            var sendDto = new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                RecipientNumber = contact.PhoneNumber,\n                TextContent = dto.Message\n            };\n\n            // 🚀 Send via WhatsApp API and save to MessageLogs\n            var result = await _messageService.SendTextDirectAsync(sendDto);\n\n            // ✅ Construct unified message payload\n            var inboxMessage = new\n            {\n                contactId = dto.ContactId,\n                message = dto.Message,\n                from = userId,\n                status = result.Success ? \"Sent\" : \"Failed\",\n                sentAt = DateTime.UtcNow,\n                logId = result.LogId,\n                senderId = userId,\n                isIncoming = false\n            };\n\n            // ✅ Notify sender only\n            await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n\n            // ✅ Notify others in group (for unread update)\n            var groupName = $\"business_{businessId}\";\n            await Clients.GroupExcept(groupName, Context.ConnectionId)\n                .SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n        }\n\n   \n        public async Task MarkAsRead(Guid contactId)\n        {\n            Console.WriteLine($\"🟢 MarkAsRead triggered for ContactId: {contactId}\");\n            var userId = Context.User?.GetUserId();\n            var businessId = Context.User?.GetBusinessId();\n\n            if (userId == null || businessId == null || businessId == Guid.Empty)\n                return;\n\n            var userGuid = userId.Value;\n            var businessGuid = businessId.Value;\n            var now = DateTime.UtcNow;\n\n            // ✅ Insert or Update ContactRead\n            var readEntry = await _db.ContactReads\n                .FirstOrDefaultAsync(r => r.ContactId == contactId && r.UserId == userGuid);\n\n            if (readEntry == null)\n            {\n                Console.WriteLine(\"📥 New ContactRead will be added.\");\n                _db.ContactReads.Add(new ContactRead\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessGuid,\n                    ContactId = contactId,\n                    UserId = userGuid,\n                    LastReadAt = now\n                });\n            }\n            else\n            {\n                Console.WriteLine($\"🔄 Updating LastReadAt for contact {contactId}\");\n                readEntry.LastReadAt = now;\n            }\n\n            await _db.SaveChangesAsync();\n            Console.WriteLine(\"💾 ContactReads saved successfully.\");\n            // ✅ Step 1: Get message logs (DB)\n            var allMessages = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessGuid && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // ✅ Step 2: Get contactReads (DB)\n            var contactReads = await _db.ContactReads\n                .Where(r => r.UserId == userGuid)\n                .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // ✅ Step 3: Now calculate unread counts in-memory (C# LINQ)\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n            // ✅ Push real-time update to user\n            await Clients.User(userGuid.ToString())\n                .SendAsync(\"UnreadCountChanged\", unreadCounts);\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/ChatSessionState.cs",
      "sha256": "fa6184f30e1715455ee5b84ae75264c5cc2d46ed4f1721014141ed9036dfda64",
      "language": "csharp",
      "size": 500,
      "content": "namespace xbytechat.api.Features.Inbox.Models\n{\n    public class ChatSessionState\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string Mode { get; set; } = \"automation\"; // values: \"automation\" | \"agent\"\n        public DateTime LastUpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Optional: track who switched the mode\n        public string? UpdatedBy { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Models/ContactRead.cs",
      "sha256": "aa4dd9980bc6485cf1c4981bf7dfff84f32dcfbacc6c9dbc3be4ba0429c065c6",
      "language": "csharp",
      "size": 474,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Inbox.Models\n{\n    public class ContactRead\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 FK to Contact\n        public Guid ContactId { get; set; }\n\n        // 🔗 FK to User (Agent)\n        public Guid UserId { get; set; }\n\n        // 📅 Last time this agent opened this contact's chat\n        public DateTime LastReadAt { get; set; } = DateTime.UtcNow;\n\n        public Guid BusinessId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Repositories/IInboxRepository.cs",
      "sha256": "d057575abdee0fe95972b5dcfafa6e7637884f526bb108c43b06bbb1b2d2a5bd",
      "language": "csharp",
      "size": 839,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public interface IInboxRepository\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone);\n        Task AddMessageAsync(MessageLog message);\n        Task SaveChangesAsync();\n        Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Repositories/InboxRepository.cs",
      "sha256": "06153117fc580e3c5239560868ec16dd5f41d963a159eec8ad96f569afa9bb29",
      "language": "csharp",
      "size": 4226,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public class InboxRepository : IInboxRepository\n    {\n        private readonly AppDbContext _context;\n\n        public InboxRepository(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(limit)\n                .ToListAsync();\n        }\n\n        public async Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task AddMessageAsync(MessageLog message)\n        {\n            await _context.MessageLogs.AddAsync(message);\n        }\n\n        public async Task SaveChangesAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n        public async Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId)\n        {\n            return await _context.MessageLogs\n                 .Include(m => m.SourceCampaign)\n                .Where(m => m.BusinessId == businessId && m.ContactId == contactId)\n                .OrderBy(m => m.CreatedAt)\n                .ToListAsync();\n        }\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\" &&\n                            m.ContactId != null) // ✅ ensure not null\n                .GroupBy(m => m.ContactId!.Value) // ✅ safe cast to Guid\n                .Select(g => new { ContactId = g.Key, Count = g.Count() })\n                .ToDictionaryAsync(x => x.ContactId, x => x.Count);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            var unreadMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.ContactId == contactId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\")\n                .ToListAsync(); \n            foreach (var msg in unreadMessages)\n                msg.Status = \"Read\";\n\n            await _context.SaveChangesAsync();\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n                    var contactReads = await _context.ContactReads\n             .Where(r => r.UserId == userId)\n             .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // 🟢 Fetch from DB first (no logic yet)\n            var allMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // 🧠 Now calculate in memory\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n\n            return unreadCounts;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/AgentAssignmentService.cs",
      "sha256": "de9062b213ba63cb8695f407ede5c9e8d52a589e0dc1c7a4c5c79fd243389e4e",
      "language": "csharp",
      "size": 1104,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class AgentAssignmentService : IAgentAssignmentService\n    {\n        private readonly ILogger<AgentAssignmentService> _logger;\n\n        public AgentAssignmentService(ILogger<AgentAssignmentService> logger)\n        {\n            _logger = logger;\n        }\n\n        public Task<bool> IsAgentAvailableAsync(Guid businessId)\n        {\n            // 🔧 TODO: Replace with real logic based on your agent pool\n            _logger.LogInformation(\"Checking if agent is available for business {BusinessId}\", businessId);\n            return Task.FromResult(true); // Assume always available for MVP\n        }\n\n        public Task AssignAgentToContactAsync(Guid businessId, Guid contactId)\n        {\n            // 🔧 TODO: Save agent-contact assignment to DB or notify a human agent\n            _logger.LogInformation(\"Assigning agent to contact {ContactId} for business {BusinessId}\", contactId, businessId);\n            return Task.CompletedTask;\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/ChatSessionStateService.cs",
      "sha256": "5c6672bd07d87501ca9d46e38085cbec03455bae6cc943c8b8df505a7c73808e",
      "language": "csharp",
      "size": 2964,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class ChatSessionStateService : IChatSessionStateService\n    {\n        private readonly AppDbContext _db;\n\n        public ChatSessionStateService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // ✅ Returns current chat mode: \"agent\" or \"auto\"\n        public async Task<string> GetChatModeAsync(Guid businessId, Guid contactId)\n        {\n            var session = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            return session?.Mode ?? \"auto\"; // Default to auto\n        }\n\n        // ✅ Switches to agent mode\n        public async Task SwitchToAgentModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"agent\");\n        }\n\n        // ✅ Switches to automation mode\n        public async Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"auto\");\n        }\n\n        // ✅ Shared logic to insert or update session state\n        private async Task UpsertChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var existing = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (existing != null)\n            {\n                existing.Mode = mode;\n                existing.LastUpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                _db.ChatSessionStates.Add(new ChatSessionState\n                {\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                });\n            }\n\n            await _db.SaveChangesAsync();\n        }\n\n        public async Task SetChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var state = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ContactId == contactId);\n\n            if (state == null)\n            {\n                // Insert new if not exists\n                state = new ChatSessionState\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                };\n                _db.ChatSessionStates.Add(state);\n            }\n            else\n            {\n                state.Mode = mode;\n                state.LastUpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IAgentAssignmentService.cs",
      "sha256": "1eae6f670d61efc4cd6f430a93cf7188c26a6d521ae49cd50ab926aa5bc027ee",
      "language": "csharp",
      "size": 286,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IAgentAssignmentService\n    {\n        Task<bool> IsAgentAvailableAsync(Guid businessId);\n        Task AssignAgentToContactAsync(Guid businessId, Guid contactId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IChatSessionStateService.cs",
      "sha256": "3ade6df9341ebca2e5a478331e57315273317bc803a529a4e068cccc323f1693",
      "language": "csharp",
      "size": 404,
      "content": "namespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IChatSessionStateService\n    {\n        Task<string> GetChatModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAgentModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId);\n        Task SetChatModeAsync(Guid businessId, Guid contactId, string mode);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/IInboxService.cs",
      "sha256": "58b2b14fb055263d0f08348900a55c5cbd62c16609e1b4ba082beb34a84efc49",
      "language": "csharp",
      "size": 885,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IInboxService\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto);\n        Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto);\n        Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Inbox/Services/InboxService.cs",
      "sha256": "8bbfdb66619466ec1c134351db9fc8b8fd32a8d30a45da7c3d142e41f17ae8f7",
      "language": "csharp",
      "size": 3941,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class InboxService : IInboxService\n    {\n        private readonly IInboxRepository _repository;\n\n        public InboxService(IInboxRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _repository.GetConversationAsync(businessId, userPhone, contactPhone, limit);\n        }\n\n        public async Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = true,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n\n        public async Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = false,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n   \n        public async Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId)\n        {\n            var messages = await _repository.GetMessagesByContactIdAsync(businessId, contactId);\n\n            return messages.Select(m => new MessageLogDto\n            {\n                Id = m.Id,\n                ContactId = m.ContactId,\n                RecipientNumber = m.RecipientNumber, // ✅ optional but helpful\n                MessageContent = m.MessageContent,\n                CreatedAt = m.CreatedAt,\n                IsIncoming = m.IsIncoming,\n                RenderedBody = m.RenderedBody,\n                CampaignId = m.CampaignId,\n                CampaignName = m.SourceCampaign?.Name, // ✅ ✅ This is crucial\n                CTAFlowConfigId = m.CTAFlowConfigId,\n                CTAFlowStepId = m.CTAFlowStepId\n            }).ToList();\n        }\n\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _repository.GetUnreadMessageCountsAsync(businessId);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            await _repository.MarkMessagesAsReadAsync(businessId, contactId);\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n            return await _repository.GetUnreadCountsForUserAsync(businessId, userId);\n        }\n\n\n    }\n}\n"
    }
  ]
}
