{
  "name": "xbytechat-api/Features/CampaignModule",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignController.cs",
      "sha256": "284cd1ba527750abfce187560ac888f526e05714d08705bf52794949f2aa65de",
      "language": "csharp",
      "size": 12826,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignController : ControllerBase\n    {\n        private readonly ICampaignService _campaignService;\n        private readonly IBusinessService _businessService;\n        private readonly IMessageEngineService _messageService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CampaignController(\n            ICampaignService campaignService,\n            IBusinessService businessService,\n            IMessageEngineService messageEngineService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _campaignService = campaignService;\n            _businessService = businessService;\n            _messageService = messageEngineService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        [HttpGet(\"get-image-campaign\")]\n        public async Task<IActionResult> GetAll([FromQuery] string? type)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetAllCampaignsAsync(businessId, type);\n            return Ok(result);\n        }\n\n        [HttpGet(\"paginated\")]\n        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);\n            return Ok(result);\n        }\n\n        [HttpGet(\"debug-claims\")]\n        public IActionResult DebugClaims()\n        {\n            var user = HttpContext.User;\n            var businessId = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new\n            {\n                name = user.Identity?.Name,\n                businessId\n            });\n        }\n\n        [HttpPost(\"create-text-campaign\")]\n        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out var businessId))\n                    return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n                var createdBy = User.Identity?.Name ?? \"system\";\n\n                if (string.IsNullOrWhiteSpace(dto.Name))\n                    return BadRequest(new { message = \"üö´ Campaign name is required.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateId))\n                    return BadRequest(new { message = \"üö´ TemplateId is required for template campaigns.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))\n                    return BadRequest(new { message = \"üö´ Message template content is required.\" });\n\n                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);\n\n                return campaignId != null\n                    ? Ok(new\n                    {\n                        success = true,\n                        message = \"‚úÖ Campaign created successfully\",\n                        campaignId = campaignId.Value\n                    })\n                    : BadRequest(new { success = false, message = \"‚ùå Failed to create campaign\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in CreateTextCampaign\");\n                return StatusCode(500, new { message = \"üö® Internal server error\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"create-image-campaign\")]\n        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var user = HttpContext.User;\n                var businessIdClaim = user.FindFirst(\"businessId\");\n\n                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                    return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var allowedTypes = new[] { \"url\", \"copy_code\", \"flow\", \"phone_number\", \"quick_reply\" };\n                    foreach (var button in dto.MultiButtons)\n                    {\n                        var type = button.ButtonType?.Trim().ToLower();\n\n                        if (!allowedTypes.Contains(type))\n                            return BadRequest(new { message = $\"‚ùå Invalid ButtonType: '{type}' is not supported.\" });\n\n                        var needsValue = new[] { \"url\", \"flow\", \"copy_code\", \"phone_number\" };\n                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))\n                            return BadRequest(new { message = $\"‚ùå Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'.\" });\n\n                        if (button.TargetUrl?.ToLower() == \"unknown\")\n                            return BadRequest(new { message = $\"‚ùå Invalid value 'unknown' found in button '{button.ButtonText}'.\" });\n                    }\n                }\n\n                var createdBy = user.Identity?.Name ?? \"system\";\n                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);\n\n                return Ok(new\n                {\n                    success = true,\n                    message = \"‚úÖ Campaign created successfully\",\n                    campaignId\n                });\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return BadRequest(new { message = ex.Message });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in CreateImageCampaign\");\n                return StatusCode(500, new { message = \"üö® Internal server error\", error = ex.Message });\n            }\n        }\n\n        // ‚úÖ Moved above {id} routes\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);\n\n                return success\n                    ? Ok(new { message = \"‚úÖ Contacts assigned\" })\n                    : BadRequest(new { message = \"‚ùå Failed to assign contacts\" });\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error assigning contacts: \" + ex.Message);\n                return StatusCode(500, new { message = \"Internal error\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{campaignId}/recipients/{contactId}\")]\n        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);\n\n                if (!success)\n                    return NotFound(new { message = \"Recipient not found or not assigned\" });\n\n                return NoContent();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Remove recipient failed: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error removing recipient\", detail = ex.Message });\n            }\n        }\n\n        [HttpPost(\"send-campaign/{campaignId}\")] // use to send free text and Template campaigns\n        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)\n        {\n            try\n            {\n                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while sending image template campaign\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending campaign\", ex.ToString()));\n            }\n        }\n\n        [HttpPost(\"send-template-campaign/{id}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid id)\n        {\n            var result = await _campaignService.SendTemplateCampaignAsync(id);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        [HttpPost(\"send/{campaignId}\")]\n        public async Task<IActionResult> SendCampaign(Guid campaignId)\n        {\n            try\n            {\n                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n                var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);\n\n                return success\n                    ? Ok(new { success = true, message = \"‚úÖ Campaign sent successfully\" })\n                    : BadRequest(new { success = false, message = \"‚ùå Campaign sending failed\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in SendCampaign\");\n                return StatusCode(500, new { success = false, message = \"üö® Internal Server Error\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)\n        {\n            var result = await _campaignService.UpdateCampaignAsync(id, dto);\n            return result\n                ? Ok(new { message = \"‚úèÔ∏è Campaign updated successfully\" })\n                : BadRequest(new { message = \"‚ùå Update failed ‚Äî only draft campaigns can be edited\" });\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteCampaign(Guid id)\n        {\n            var result = await _campaignService.DeleteCampaignAsync(id);\n            return result\n                ? Ok(new { message = \"üóëÔ∏è Campaign deleted successfully\" })\n                : BadRequest(new { message = \"‚ùå Delete failed ‚Äî only draft campaigns can be deleted\" });\n        }\n\n        [HttpGet(\"recipients/{id}\")]\n        public async Task<IActionResult> GetCampaignRecipients(Guid id)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);\n                return Ok(recipients);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error fetching campaign recipients: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error fetching recipients\", detail = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)\n        {\n            var businessId = GetBusinessId();\n            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);\n\n            if (campaign == null)\n                return NotFound();\n\n            return Ok(campaign);\n        }\n\n        private Guid GetBusinessId()\n        {\n            var claim = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            if (string.IsNullOrEmpty(claim))\n                throw new UnauthorizedAccessException(\"BusinessId not found in token claims.\");\n\n            return Guid.Parse(claim);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignRecipientController.cs",
      "sha256": "247e52ea9259e04d5bc4fb6e22d3aa4791b77af05431022b0572a837bbf7e326",
      "language": "csharp",
      "size": 3341,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignRecipientController : ControllerBase\n    {\n        private readonly ICampaignRecipientService _recipientService;\n\n        public CampaignRecipientController(ICampaignRecipientService recipientService)\n        {\n            _recipientService = recipientService;\n        }\n\n        // ‚úÖ Get a single recipient by ID\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)\n        {\n            var recipient = await _recipientService.GetByIdAsync(id);\n            if (recipient == null)\n                return NotFound(new { message = \"Recipient not found\" });\n\n            return Ok(recipient);\n        }\n\n        // ‚úÖ Get all recipients for a specific campaign\n        [HttpGet(\"/api/campaigns/{campaignId}/recipients\")]\n        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)\n        {\n            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);\n            return Ok(recipients);\n        }\n\n        // ‚úÖ Update recipient status (e.g., from Pending ‚Üí Sent)\n        [HttpPut(\"{recipientId}/status\")]\n        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)\n        {\n            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or update failed\" });\n\n            return Ok(new { message = \"Status updated\" });\n        }\n\n        // ‚úÖ Track a reply from customer\n        [HttpPut(\"{recipientId}/reply\")]\n        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)\n        {\n            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or tracking failed\" });\n\n            return Ok(new { message = \"Reply tracked\" });\n        }\n\n        // üîç Search recipients by optional filters (status, keyword)\n        [HttpGet(\"search\")]\n        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)\n        {\n            var results = await _recipientService.SearchRecipientsAsync(status, keyword);\n            return Ok(results);\n        }\n\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)\n        {\n            try\n            {\n                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);\n                return Ok(new { message = \"Contacts assigned successfully\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error assigning contacts to campaign\");\n                return StatusCode(500, new { message = \"Failed to assign contacts\" });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/AssignContactsDto.cs",
      "sha256": "8f8b9b0da213111f833dd07dd7e5189ccc02984cef1b34deb5b1d93a5d40678e",
      "language": "csharp",
      "size": 156,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class AssignContactsDto\n    {\n        public List<Guid> ContactIds { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonDto.cs",
      "sha256": "21e757f8859c9ea36b40c0d3418d5211cce8a22a26b07b81af62b723f93dc2e5",
      "language": "csharp",
      "size": 379,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty; // üìç e.g., \"Buy Now\"\n        public string ButtonType { get; set; } = \"url\";         // üîò url | quick_reply | call\n        public string TargetUrl { get; set; } = string.Empty;  // üåê or phone/call param\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonParamFromMetaDto.cs",
      "sha256": "8162311781c02a6a61e91fbe4b39251da400422e50341b7ca21f484a74d926f4",
      "language": "csharp",
      "size": 349,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonParamFromMetaDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public string SubType { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignCreateDto.cs",
      "sha256": "421004e6e792a8d5452c241aed6795a710992d4aac7169c63ae22dc1129352c2",
      "language": "csharp",
      "size": 1470,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignCreateDto\n    {\n        public string Name { get; set; }\n\n        [Column(TypeName = \"text\")]\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; } // ‚úÖ Optional Meta template ID\n\n        public string? FollowUpTemplateId { get; set; } // üîÅ Auto-reply template after interest\n\n        public string? CampaignType { get; set; } //= \"template\"; // \"text\", \"template\", \"cta\"\n\n        public Guid? CtaId { get; set; } // üîò For legacy CTA support (optional)\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ‚úÖ New multi-button support\n        public DateTime? ScheduledAt { get; set; } // üìÖ Optional future scheduling\n\n        //public List<Guid>? ContactIds { get; set; } // üë• Target contact list\n\n        public string? ImageUrl { get; set; } // üñºÔ∏è Optional image field\n\n        public string? ImageCaption { get; set; } // üìù Optional caption\n\n        public List<Guid> ContactIds { get; set; } = new();\n\n        public List<string>? TemplateParameters { get; set; }\n        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDto.cs",
      "sha256": "f2b7b259bf5244382d2ce138feef7ed1aeb97228ac2866143092b5a24bc07bbd",
      "language": "csharp",
      "size": 1122,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignDto\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; }\n\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; }\n        public string? MessageBody { get; set; }\n        public string? CampaignType { get; set; }\n\n        public string? Status { get; set; }\n\n        public string? ImageUrl { get; set; }\n\n        public string? ImageCaption { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n\n        public Guid? CtaId { get; set; }\n\n        public CtaPreviewDto? Cta { get; set; }\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new();\n    }\n\n    // üì¶ Embedded DTO for CTA preview (title + button text only)\n    public class CtaPreviewDto\n    {\n        public string Title { get; set; } = string.Empty;\n\n        public string ButtonText { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignRecipientDto.cs",
      "sha256": "7d59f3b2a92ff69f0425bf1c3541facd28da12efde822400d313e6beddc8ace5",
      "language": "csharp",
      "size": 755,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignRecipientDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string Status { get; set; }\n        public DateTime? SentAt { get; set; }\n\n        // üîÅ Advanced Fields (for analytics & future automation)\n        public string? BotId { get; set; }\n        public string? MessagePreview { get; set; }\n        public string? ClickedCTA { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public bool IsAutoTagged { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignSummaryDto.cs",
      "sha256": "d2517a48edbd1df32b85f5a55469c9fbbe4e356db965cd6cc0067e5af60c0bf1",
      "language": "csharp",
      "size": 607,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string? Name { get; set; }\n        public string? Status { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n\n        public string? ImageUrl { get; set; } // ‚úÖ Add this\n        public string? ImageCaption { get; set; } // ‚úÖ Add this\n        public string? CtaTitle { get; set; } // Optional: For CTA info\n        public int RecipientCount { get; set; } // Optional: To show 0/10 etc\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/Campaign.cs",
      "sha256": "93a715f18655cfc7298072fd57b541aebd7393291f393194598bb0e0c3ade37d",
      "language": "csharp",
      "size": 2746,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class Campaign\n    {\n        public Guid Id { get; set; }\n\n        // üîó Business info\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Campaign? SourceCampaign { get; set; }\n\n        // üìã Core campaign details\n        public string Name { get; set; }\n        public string MessageTemplate { get; set; }\n        public string? TemplateId { get; set; } // ‚úÖ Meta-approved template ID\n\n        [Column(TypeName = \"text\")]\n        public string? MessageBody { get; set; } // ‚úÖ Final resolved WhatsApp message body\n\n\n        public string? FollowUpTemplateId { get; set; } // üîÅ For auto-reply follow-up after interest\n        public string? CampaignType { get; set; } // = \"template\"; // text, template, cta\n\n        // üîò CTA tracking (optional)\n        public Guid? CtaId { get; set; }\n        public CTADefinition? Cta { get; set; }\n\n       \n        public DateTime? ScheduledAt { get; set; }\n        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n        // üë§ Metadata\n        public string? CreatedBy { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // üóëÔ∏è Soft delete support\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // üë• Recipient relationship\n        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n        // üìä Logs\n        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        //public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n\n        public string? ImageUrl { get; set; } // ‚úÖ store image URL\n        public string? ImageCaption { get; set; } // optional caption\n        public string? TemplateParameters { get; set; } // ‚úÖ stores [\"value1\", \"value2\", ...] as JSON string\n\n        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignButton.cs",
      "sha256": "bfca22e0aed3117f3be8b3712de4a7b229991bc3c4b02bdb1f17e43709991977",
      "language": "csharp",
      "size": 654,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignButton\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; } // üîó Foreign key\n        public Campaign Campaign { get; set; }\n\n        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)\n        public string Type { get; set; } = \"url\"; // Type: url, quick_reply, call, etc.\n        public string Value { get; set; } = string.Empty; // Target URL or payload\n\n        public int Position { get; set; } // Button order (1‚Äì3)\n        public bool IsFromTemplate { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignFlowOverride .cs",
      "sha256": "c4ee719e7601cfb0eb6d67fbba7e11cbd4a57ad5be58dd84f72beead08d88370",
      "language": "csharp",
      "size": 798,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignFlowOverride\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CampaignId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        [MaxLength(50)]\n        public string ButtonText { get; set; } = string.Empty;\n\n        public string? OverrideNextTemplate { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n\n        [ForeignKey(\"CampaignId\")]\n        public Campaign? Campaign { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignRecipient.cs",
      "sha256": "56577228e95ed7f6c8f49036a0f4a95c7536726ea3c45a0a6f3b60ea7fe33362",
      "language": "csharp",
      "size": 1497,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; }\n\n        public Guid ContactId { get; set; }\n        public Contact Contact { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Delivered, Failed, Replied\n        public DateTime? SentAt { get; set; }\n\n        public string? BotId { get; set; } // Multi-bot support\n        public string? MessagePreview { get; set; } // Final message sent\n        public string? ClickedCTA { get; set; } // Track CTA clicked like \"BuyNow\"\n        public string? CategoryBrowsed { get; set; } // e.g., Ads\n        public string? ProductBrowsed { get; set; } // e.g., Product name\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging\n\n        // ‚úÖ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)\n        public ICollection<CampaignSendLog> SendLogs { get; set; }\n\n        public Guid BusinessId { get; set; }  // ‚úÖ Add this line\n        public Business Business { get; set; } = null!; // if navigation is needed\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignRecipientService.cs",
      "sha256": "305276af3a69097d77fd771487b6a7edda41b141122cd38e0868e3915d9ae53d",
      "language": "csharp",
      "size": 6590,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignRecipientService : ICampaignRecipientService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRecipientService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // üîç Get a single recipient by ID\n        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.Id == id)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .FirstOrDefaultAsync();\n        }\n\n        // üì¶ Get all recipients of a specific campaign\n        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        // ‚úèÔ∏è Update status of a specific recipient\n        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.Status = newStatus;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // üí¨ Track customer reply or CTA\n        // üó£Ô∏è Track customer reply on a recipient\n        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.ClickedCTA = replyText; // You may later rename this to something like `LastReply`\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n\n        // üîé Global recipient search across all campaigns\n        // üîç Search recipients by optional status or keyword\n        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)\n        {\n            var query = _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(status))\n                query = query.Where(r => r.Status == status);\n\n            if (!string.IsNullOrEmpty(keyword))\n                query = query.Where(r =>\n                    r.Contact.Name.Contains(keyword) ||\n                    r.Contact.PhoneNumber.Contains(keyword)\n                );\n\n            return await query\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        //public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        //{\n        //    var existing = await _context.CampaignRecipients\n        //        .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n        //        .Select(r => r.ContactId)\n        //        .ToListAsync();\n\n        //    var newRecipients = contactIds\n        //        .Where(id => !existing.Contains(id))\n        //        .Select(contactId => new CampaignRecipient\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignId = campaignId,\n        //            ContactId = contactId,\n        //            Status = \"Pending\",\n        //            SentAt = DateTime.UtcNow,\n        //            UpdatedAt = DateTime.UtcNow,\n        //            IsAutoTagged = false\n        //        }).ToList();\n\n        //    if (newRecipients.Any())\n        //    {\n        //        await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n        //        await _context.SaveChangesAsync();\n        //    }\n        //}\n        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null)\n                throw new Exception(\"Campaign not found.\");\n\n            var businessId = campaign.BusinessId;\n\n            var existing = await _context.CampaignRecipients\n                .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n                .Select(r => r.ContactId)\n                .ToListAsync();\n\n            var newRecipients = contactIds\n                .Where(id => !existing.Contains(id))\n                .Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId, // ‚úÖ required\n                    Status = \"Pending\",\n                    SentAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    IsAutoTagged = false\n                }).ToList();\n\n            if (newRecipients.Any())\n            {\n                await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n                await _context.SaveChangesAsync();\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.cs",
      "sha256": "f74197300f315bdfa4e8c0d87e323a7b7608a705baf836df2e38827e71b2f22e",
      "language": "csharp",
      "size": 51252,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.DTOs.Messages;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Dtos;\nusing Newtonsoft.Json;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignService : ICampaignService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly IServiceProvider _serviceProvider;\n        private readonly ILeadTimelineService _timelineService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        public CampaignService(AppDbContext context, IMessageService messageService,\n                               IServiceProvider serviceProvider,\n                               ILeadTimelineService timelineService,\n                               IMessageEngineService messageEngineService,\n                               IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _serviceProvider = serviceProvider;\n            _timelineService = timelineService; // ‚úÖ new\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n\n        }\n\n\n        #region Get All Types of Get and Update and Delete Methods\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)\n        {\n            return await _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n\n                })\n                .ToListAsync();\n        }\n        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Cta) // if CTA is stored in a separate table\n                .Include(c => c.MultiButtons) // assuming EF Core relation\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null) return null;\n\n            return new CampaignDto\n            {\n                Id = campaign.Id,\n                Name = campaign.Name,\n                MessageTemplate = campaign.MessageTemplate,\n                MessageBody = campaign.MessageBody,\n                TemplateId = campaign.TemplateId,\n                CampaignType = campaign.CampaignType,\n                Status = campaign.Status,\n                ImageUrl = campaign.ImageUrl,\n                ImageCaption = campaign.ImageCaption,\n                CreatedAt = campaign.CreatedAt,\n                ScheduledAt = campaign.ScheduledAt,\n                CtaId = campaign.CtaId,\n                Cta = campaign.Cta == null ? null : new CtaPreviewDto\n                {\n                    Title = campaign.Cta.Title,\n                    ButtonText = campaign.Cta.ButtonText\n                },\n                MultiButtons = campaign.MultiButtons?\n                    .Select(b => new CampaignButtonDto\n                    {\n                        ButtonText = b.Title,// ButtonText,\n                        ButtonType = b.Type,//ButtonType,\n                        TargetUrl = b.Value\n                    }).ToList() ?? new List<CampaignButtonDto>()\n            };\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(type))\n                query = query.Where(c => c.CampaignType == type);\n\n            return await query\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n                    ImageUrl = c.ImageUrl,            // ‚úÖ Now mapped\n                    ImageCaption = c.ImageCaption,    // ‚úÖ Now mapped\n                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional\n                    RecipientCount = c.Recipients.Count()\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)\n        {\n            var recipients = await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)\n                .Select(r => new ContactDto\n                {\n                    Id = r.Contact.Id,\n                    Name = r.Contact.Name,\n                    PhoneNumber = r.Contact.PhoneNumber,\n                    Email = r.Contact.Email,\n                    LeadSource = r.Contact.LeadSource,\n                    CreatedAt = r.Contact.CreatedAt\n                })\n                .ToListAsync();\n\n            return recipients;\n        }\n\n        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt);\n\n            var total = await query.CountAsync();\n\n            var items = await query\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<CampaignSummaryDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)\n        {\n            var campaign = await _context.Campaigns.FindAsync(id);\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            // ‚úÖ Extract BusinessId from current campaign\n            var businessId = campaign.BusinessId;\n\n            // ‚úÖ Optional CTA ownership validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"‚ùå The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // ‚úèÔ∏è Update campaign fields\n            campaign.Name = dto.Name;\n            campaign.MessageTemplate = dto.MessageTemplate;\n            campaign.TemplateId = dto.TemplateId;\n            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;\n            campaign.CampaignType = dto.CampaignType;\n            campaign.CtaId = dto.CtaId;\n            campaign.ImageUrl = dto.ImageUrl;\n            campaign.ImageCaption = dto.ImageCaption;\n            campaign.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == id);\n\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            _context.CampaignRecipients.RemoveRange(campaign.Recipients);\n            _context.Campaigns.Remove(campaign);\n\n            await _context.SaveChangesAsync();\n            Log.Information(\"üóëÔ∏è Campaign deleted: {Id}\", id);\n            return true;\n        }\n\n        #endregion\n\n        #region // üÜï CreateCampaignAsync(Text/Image)\n        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                var campaignId = Guid.NewGuid();\n\n                // üîÅ Parse template parameters into list\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n                );\n\n                // üß† Fetch template (for body + buttons)\n                var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, dto.TemplateId, true);\n\n                // üß† Fill message body\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    template?.Body ?? dto.MessageTemplate,\n                    parsedParams\n                );\n\n                // ‚úÖ Step 1: Create campaign object\n                var campaign = new Campaign\n                {\n                    Id = campaignId,\n                    BusinessId = businessId,\n                    Name = dto.Name,\n                    MessageTemplate = dto.MessageTemplate,\n                    TemplateId = dto.TemplateId,\n                    FollowUpTemplateId = dto.FollowUpTemplateId,\n                    CampaignType = dto.CampaignType ?? \"text\",\n                    CtaId = dto.CtaId,\n                    ScheduledAt = dto.ScheduledAt,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    Status = \"Draft\",\n                    ImageUrl = dto.ImageUrl,\n                    ImageCaption = dto.ImageCaption,\n                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                    MessageBody = resolvedBody // ‚úÖ final resolved message\n                };\n\n                await _context.Campaigns.AddAsync(campaign);\n\n                // ‚úÖ Step 2: Assign contacts if provided\n                if (dto.ContactIds != null && dto.ContactIds.Any())\n                {\n                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        ContactId = contactId,\n                        BusinessId = businessId,\n                        Status = \"Pending\",\n                        SentAt = DateTime.UtcNow,\n                        UpdatedAt = DateTime.UtcNow\n                    });\n\n                    await _context.CampaignRecipients.AddRangeAsync(recipients);\n                }\n\n                // ‚úÖ Step 3a: Save manual buttons from frontend\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var buttons = dto.MultiButtons\n                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.ButtonText,\n                            Type = btn.ButtonType ?? \"url\",\n                            Value = btn.TargetUrl,\n                            Position = index + 1,\n                            IsFromTemplate = false\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n                }\n\n                // ‚úÖ Step 3b: Save buttons auto-fetched from WhatsApp Template\n                if (template != null && template.ButtonParams?.Count > 0)\n                {\n                    var autoButtons = template.ButtonParams\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.Text,\n                            Type = btn.Type,\n                            // Value = btn.SubType == \"url\" ? \"https://your-redirect.com\" : btn.SubType,\n                            Value = btn.ParameterValue,\n                            Position = index + 1,\n                            IsFromTemplate = true\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(autoButtons);\n                }\n\n                // ‚úÖ Final Save\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"‚úÖ Campaign '{Name}' created with {Contacts} recipients, {ManualButtons} user buttons, {TemplateButtons} template buttons and {Params} template parameters\",\n                    dto.Name,\n                    dto.ContactIds?.Count ?? 0,\n                    dto.MultiButtons?.Count ?? 0,\n                    template?.ButtonParams?.Count ?? 0,\n                    dto.TemplateParameters?.Count ?? 0\n                );\n\n                return campaignId;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to create campaign\");\n                return null;\n            }\n        }\n        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)\n        {\n            // üîê Optional CTA validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"‚ùå The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // üéØ Create campaign\n            var campaign = new Campaign\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = dto.Name,\n                MessageTemplate = dto.MessageTemplate,\n                TemplateId = dto.TemplateId,\n                FollowUpTemplateId = dto.FollowUpTemplateId,\n                CampaignType = \"image\",\n                ImageUrl = dto.ImageUrl,\n                ImageCaption = dto.ImageCaption,\n                CtaId = dto.CtaId,\n                CreatedBy = createdBy,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Status = \"Draft\"\n            };\n\n            await _context.Campaigns.AddAsync(campaign);\n\n            // üîò Save manual buttons from UI\n            if (dto.MultiButtons?.Any() == true)\n            {\n                var buttons = dto.MultiButtons\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    .Take(3)\n                    .Select((btn, index) => new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        Title = btn.ButtonText,\n                        Type = string.IsNullOrWhiteSpace(btn.ButtonType) ? \"url\" : btn.ButtonType,\n                        Value = btn.TargetUrl,\n                        Position = index + 1,\n                        IsFromTemplate = false\n                    }).ToList();\n\n                if (buttons.Any())\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n            }\n\n            // üîò Save template buttons (from Meta) with proper dynamic/static handling\n            if (dto.ButtonParams?.Any() == true)\n            {\n                var templateButtons = dto.ButtonParams\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.Text) && !string.IsNullOrWhiteSpace(btn.Type))\n                    .Take(3)\n                    .Select((btn, index) =>\n                    {\n                        var subType = btn.SubType?.ToLower();\n                        var isDynamic = subType == \"url\" || subType == \"flow\" || subType == \"copy_code\";\n\n                        // ‚úÖ Prefer user-provided value if dynamic, fallback to Meta value\n                        var userInput = dto.MultiButtons?.ElementAtOrDefault(index)?.TargetUrl?.Trim();\n                        var valueToSave = isDynamic && !string.IsNullOrWhiteSpace(userInput)\n                            ? userInput\n                            : btn.Value;\n\n                        return new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaign.Id,\n                            Title = btn.Text,\n                            Type = btn.Type,\n                            Value = valueToSave,\n                            Position = index + 1,\n                            IsFromTemplate = true\n                        };\n                    })\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.Value)) // ‚úÖ Prevent null insert error\n                    .ToList();\n\n                if (templateButtons.Any())\n                    await _context.CampaignButtons.AddRangeAsync(templateButtons);\n            }\n\n            await _context.SaveChangesAsync();\n            return campaign.Id;\n        }\n        #endregion\n\n        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"üö´ Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int throttleLimit = 5;\n\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions { MaxDegreeOfParallelism = throttleLimit }, async (recipient, ct) =>\n            {\n                try\n                {\n                    using var scope = _serviceProvider.CreateScope();\n                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // üü¢ Use SimpleTemplateMessageDto instead of raw text\n                    var dto = new SimpleTemplateMessageDto\n                    {\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = campaign.MessageTemplate,\n                        TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                    };\n\n                    var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        TemplateId = campaign.TemplateId,\n                        MessageBody = campaign.MessageTemplate,\n                        MessageId = null,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        ErrorMessage = result.Message,\n                        SentAt = DateTime.UtcNow,\n                        CreatedAt = DateTime.UtcNow,\n                        SourceChannel = \"whatsapp\",\n                        IpAddress = ipAddress,\n                        DeviceInfo = userAgent\n                    };\n\n                    scopedDb.CampaignSendLogs.Add(sendLog);\n\n                    var recipientToUpdate = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(r => r.Id == recipient.Id);\n                    if (recipientToUpdate != null)\n                    {\n                        recipientToUpdate.Status = result.Success ? \"Sent\" : \"Failed\";\n                        recipientToUpdate.MessagePreview = campaign.MessageTemplate;\n                        recipientToUpdate.SentAt = DateTime.UtcNow;\n                        recipientToUpdate.UpdatedAt = DateTime.UtcNow;\n                    }\n\n                    await scopedDb.SaveChangesAsync();\n                }\n                catch (Exception ex)\n                {\n                    Log.Error(ex, \"‚ùå Send failed for recipient: {RecipientId}\", recipient.Id);\n                }\n            });\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"üì§ Campaign {CampaignId} sent via template to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"üö´ Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int maxParallelism = 5;\n\n#if NET6_0_OR_GREATER\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions\n            {\n                MaxDegreeOfParallelism = maxParallelism\n            },\n            async (recipient, cancellationToken) =>\n            {\n                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);\n            });\n#else\n    var tasks = campaign.Recipients.Select(recipient =>\n        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)\n    );\n    await Task.WhenAll(tasks);\n#endif\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"üì§ Campaign {CampaignId} sent in parallel to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)\n        {\n            try\n            {\n                var dto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipient.Contact.PhoneNumber,\n                    TemplateName = campaign.MessageTemplate,\n                    TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                };\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n\n                var log = new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = recipient.ContactId,\n                    RecipientId = recipient.Id,\n                    TemplateId = campaign.TemplateId,\n                    MessageBody = campaign.MessageTemplate,\n                    MessageId = null,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = result.Message,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    SourceChannel = \"whatsapp\",\n                    IpAddress = ip,\n                    DeviceInfo = ua\n                };\n\n                lock (_context)\n                {\n                    _context.CampaignSendLogs.Add(log);\n                    recipient.Status = result.Success ? \"Sent\" : \"Failed\";\n                    recipient.MessagePreview = campaign.MessageTemplate;\n                    recipient.SentAt = DateTime.UtcNow;\n                    recipient.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to send template to recipient: {RecipientId}\", recipient.Id);\n            }\n        }\n\n        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)\n        {\n            var entry = await _context.CampaignRecipients\n                .FirstOrDefaultAsync(r =>\n                    r.CampaignId == campaignId &&\n                    r.ContactId == contactId &&\n                    r.Campaign.BusinessId == businessId); // ‚úÖ Filter by related Campaign.BusinessId\n\n            if (entry == null)\n                return false;\n\n            _context.CampaignRecipients.Remove(entry);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null)\n                return false;\n\n            var newRecipients = contactIds.Select(id => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                ContactId = id,\n                BusinessId = businessId,\n                Status = \"Pending\",\n                SentAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            });\n\n            _context.CampaignRecipients.AddRange(newRecipients);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)\n        {\n            try\n            {\n                var campaign = await _context.Campaigns\n                    .Include(c => c.Recipients)\n                        .ThenInclude(r => r.Contact) // üß† include contact details\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found.\");\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"‚ùå No recipients assigned to this campaign.\");\n\n                var templateName = campaign.MessageTemplate;\n                var templateId = campaign.TemplateId;\n                var language = \"en_US\"; // Optional: make dynamic later\n                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);\n\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    var messageDto = new ImageTemplateMessageDto\n                    {\n                       // BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(btn => new CampaignButtonDto\n                            {\n                                ButtonText = btn.Title,\n                                ButtonType = btn.Type,\n                                TargetUrl = btn.Value\n                            }).ToList()\n                    };\n\n                    // ‚úÖ Call the image/template sender\n                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);\n                    var isSuccess = sendResult.ToString().ToLower().Contains(\"messages\");\n\n                    var log = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = isSuccess ? \"Sent\" : \"Failed\",\n                        ErrorMessage = isSuccess ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(sendResult),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow\n                    };\n\n                    await _context.MessageLogs.AddAsync(log);\n\n                    if (isSuccess) success++;\n                    else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"‚úÖ Sent: {success}, ‚ùå Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n        #region  This region include all the code related to sending text and image based\n\n        // Detection - which type of campaign to send (text based or Image based)\n        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                    .ThenInclude(r => r.Contact)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Campaign not found.\");\n\n            // Template Type Detection\n            return campaign.CampaignType?.ToLower() switch\n            {\n                \"text\" => await SendTextTemplateCampaignAsync(campaign),\n                \"image\" => await SendImageTemplateCampaignAsync(campaign),\n                _ => ResponseResult.ErrorInfo(\"‚ùå Unsupported campaign type.\")\n            };\n        }\n\n        // This is used for \"Text\" based campaigns sending\n        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                {\n                    Log.Warning(\"‚ùå Campaign is null or marked as deleted.\");\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid campaign.\");\n                }\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                {\n                    Log.Warning(\"‚ö†Ô∏è Campaign has no assigned recipients.\");\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n                }\n\n                var businessId = campaign.BusinessId;\n                var templateName = campaign.TemplateId;\n                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n                var buttons = campaign.MultiButtons?.ToList();\n\n                // ‚úÖ Fetch WhatsApp template metadata\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                {\n                    Log.Error(\"‚ùå Could not fetch template metadata for {Template}.\", templateName);\n                    return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n                }\n\n                if (templateParams.Count != templateMeta.PlaceholderCount)\n                {\n                    Log.Warning(\"‚ö†Ô∏è Template expects {Expected} body parameters but received {Actual}.\",\n                        templateMeta.PlaceholderCount, templateParams.Count);\n                }\n\n                int successCount = 0, failureCount = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    if (recipient?.Contact == null)\n                    {\n                        Log.Warning(\"‚ö†Ô∏è Skipping recipient: recipient or contact is null. Recipient ID: {RecipientId}\", recipient?.Id);\n                        continue;\n                    }\n\n                    Log.Information(\"üì® Preparing to send to {Phone}\", recipient.Contact.PhoneNumber);\n\n                    var components = BuildTextTemplateComponents(templateParams, buttons, templateMeta);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = recipient.Contact.PhoneNumber,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = templateMeta.Language ?? \"en_US\" },\n                            components = components\n                        }\n                    };\n\n                    Log.Debug(\"üì¶ WhatsApp Payload:\\n{Payload}\", JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                    ResponseResult sendResult = await _messageEngineService.SendToWhatsAppAsync(payload, businessId);\n                    Log.Information(\"üì¨ Send result: {Result}\", JsonConvert.SerializeObject(sendResult));\n\n                    var messageLog = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = campaign.MessageTemplate ?? templateName,\n                        Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageId = sendResult.MessageId,\n                        ErrorMessage = sendResult.ErrorMessage,\n                        RawResponse = sendResult.RawResponse,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = sendResult.Success ? DateTime.UtcNow : null\n                    };\n\n                    await _context.MessageLogs.AddAsync(messageLog);\n                    Log.Information(\"‚úÖ Added MessageLog for {Recipient}\", recipient.Contact.PhoneNumber);\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = messageLog.Id,\n                        MessageId = sendResult.MessageId,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = campaign.CreatedBy\n                    });\n\n                    Log.Information(\"üìò Added CampaignSendLog for recipient {Recipient}\", recipient.Id);\n\n                    if (sendResult.Success) successCount++;\n                    else failureCount++;\n                }\n\n                Log.Information(\"üíæ Saving all DB changes...\");\n                await _context.SaveChangesAsync();\n                Log.Information(\"‚úÖ All saved successfully.\");\n\n                return ResponseResult.SuccessInfo($\"üì§ Sent to {successCount} contacts. ‚ùå Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Error while sending text template campaign\");\n                return ResponseResult.ErrorInfo(\"üö® Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildTextTemplateComponents(List<string> templateParams, List<CampaignButton>? buttonList, TemplateMetadataDto templateMeta)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ 1. Optional Header\n            if (templateMeta.HasImageHeader)\n            {\n                Log.Information(\"‚ÑπÔ∏è Header detected, but skipping image as it's a text template.\");\n                // If you ever support header text, you can handle here\n            }\n\n            // ‚úÖ 2. Body parameters\n            if (templateParams != null && templateParams.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n            else if (templateMeta.PlaceholderCount > 0)\n            {\n                Log.Warning(\"‚ö†Ô∏è Body params missing but template expects {Count} placeholders.\", templateMeta.PlaceholderCount);\n            }\n\n            // ‚úÖ 3. Footer (optional, static ‚Äî Meta doesn‚Äôt accept dynamic footer\n            // ly)\n            // If you want to support footer with text later, it can go like this:\n            // components.Add(new { type = \"footer\", parameters = new[] { new { type = \"text\", text = \"Your footer text\" } } });\n\n            // ‚úÖ 4. Buttons\n            if (buttonList != null && buttonList.Any())\n            {\n                for (int i = 0; i < buttonList.Count && i < templateMeta.ButtonParams.Count; i++)\n                {\n                    var btn = buttonList[i];\n                    var meta = templateMeta.ButtonParams[i];\n\n                    string index = i.ToString();\n                    string subtype = meta.SubType?.ToLower() ?? \"url\";\n                    string? value = btn.Value?.Trim();\n                    string? metaParam = meta.ParameterValue?.Trim();\n\n                    // üîç Determine if this is a dynamic param (contains {{}})\n                    bool isDynamic = metaParam != null && metaParam.Contains(\"{{\");\n\n                    // ‚úÖ Skip entire button if static and no dynamic value\n                    if (!isDynamic)\n                    {\n                        Log.Information(\"‚è© Skipping static button '{Title}' as it requires no parameters\", btn.Title);\n                        continue;\n                    }\n\n                    var paramType = subtype switch\n                    {\n                        \"url\" => \"text\",\n                        \"copy_code\" => \"coupon_code\",\n                        \"phone_number\" => \"phone_number\",\n                        \"flow\" => \"flow_id\",\n                        _ => \"text\"\n                    };\n\n                    var buttonPayload = new Dictionary<string, object>\n        {\n                        { \"type\", \"button\" },\n                        { \"sub_type\", subtype },\n                        { \"index\", index },\n                        { \"parameters\", new[] {\n                            new Dictionary<string, object>\n                            {\n                                { \"type\", paramType },\n                                { paramType, value }\n                            }\n                        }}\n                    };\n\n                    components.Add(buttonPayload);\n                }\n\n            }\n\n            return components;\n        }\n\n\n        // This is used for \"Image\" based campaigns sending\n        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                {\n                    Log.Warning(\"‚ùå Campaign is null or marked as deleted.\");\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid campaign.\");\n                }\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                {\n                    Log.Warning(\"‚ö†Ô∏è Campaign has no assigned recipients.\");\n                    return ResponseResult.ErrorInfo(\"‚ö†Ô∏è No recipients assigned to this campaign.\");\n                }\n\n                var businessId = campaign.BusinessId;\n                var templateName = campaign.TemplateId;\n                var imageUrl = campaign.ImageUrl;\n                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n                var buttons = campaign.MultiButtons?.ToList();\n\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                {\n                    Log.Error(\"‚ùå Could not fetch template metadata for {Template}.\", templateName);\n                    return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n                }\n\n                if (templateParams.Count != templateMeta.PlaceholderCount)\n                {\n                    Log.Warning(\"‚ö†Ô∏è Template expects {Expected} body parameters but received {Actual}.\",\n                        templateMeta.PlaceholderCount, templateParams.Count);\n                }\n\n                int successCount = 0, failureCount = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    if (recipient?.Contact == null)\n                    {\n                        Log.Warning(\"‚ö†Ô∏è Skipping recipient: recipient or contact is null. Recipient ID: {RecipientId}\", recipient?.Id);\n                        continue;\n                    }\n\n                    Log.Information(\"üì® Preparing to send to {Phone}\", recipient.Contact.PhoneNumber);\n\n                    var components = BuildImageTemplateComponents(templateParams, imageUrl, buttons, templateMeta);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = recipient.Contact.PhoneNumber,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = \"en_US\" },\n                            components = components\n                        }\n                    };\n\n                    Log.Debug(\"üì¶ Final WhatsApp Payload:\\n{Payload}\", JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                    var sendResult = await _messageEngineService.SendToWhatsAppAsync(payload, businessId);\n                    Log.Information(\"üì¨ Send result: {Result}\", JsonConvert.SerializeObject(sendResult));\n\n                    var messageLog = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = campaign.MessageTemplate ?? templateName,\n                        MediaUrl = imageUrl,\n                        Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageId = sendResult.MessageId,\n                        ErrorMessage = sendResult.ErrorMessage,\n                        RawResponse = sendResult.RawResponse,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = sendResult.Success ? DateTime.UtcNow : null\n                    };\n\n                    await _context.MessageLogs.AddAsync(messageLog);\n                    Log.Information(\"üì• MessageLog saved for {Recipient}\", recipient.Contact.PhoneNumber);\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = messageLog.Id,\n                        MessageId = sendResult.MessageId,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = campaign.CreatedBy\n                    });\n\n                    Log.Information(\"üóÉÔ∏è CampaignSendLog saved for recipient {Recipient}\", recipient.Id);\n\n                    if (sendResult.Success) successCount++;\n                    else failureCount++;\n                }\n\n                Log.Information(\"üíæ Saving all DB changes...\");\n                await _context.SaveChangesAsync();\n                Log.Information(\"‚úÖ All saved successfully.\");\n\n                return ResponseResult.SuccessInfo($\"üì§ Sent to {successCount} contacts. ‚ùå Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Error while sending image template campaign\");\n                return ResponseResult.ErrorInfo(\"üö® Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildImageTemplateComponents(List<string> templateParams, string? imageUrl, List<CampaignButton>? buttonList, TemplateMetadataDto templateMeta)\n        {\n            var components = new List<object>();\n\n            // ‚úÖ 1. Header image\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                new\n                {\n                    type = \"image\",\n                    image = new { link = imageUrl }\n                }\n            }\n                });\n            }\n\n            // ‚úÖ 2. Body parameters\n            if (templateParams != null && templateParams.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n            else if (templateMeta.PlaceholderCount > 0)\n            {\n                Log.Warning(\"‚ö†Ô∏è Body params missing but template expects {Count} placeholders.\", templateMeta.PlaceholderCount);\n            }\n\n            // ‚úÖ 3. Buttons with logic to exclude parameters for static values\n            if (buttonList != null && buttonList.Any())\n            {\n                for (int i = 0; i < buttonList.Count && i < templateMeta.ButtonParams.Count; i++)\n                {\n                    var btn = buttonList[i];\n                    var meta = templateMeta.ButtonParams[i];\n\n                    string index = i.ToString();\n                    string subtype = meta.SubType?.ToLower() ?? \"url\";\n                    string? value = btn.Value?.Trim();\n                    string? metaParam = meta.ParameterValue?.Trim();\n\n                    var buttonPayload = new Dictionary<string, object>\n            {\n                { \"type\", \"button\" },\n                { \"sub_type\", subtype },\n                { \"index\", index }\n            };\n\n                    // üîç Determine if this is a dynamic param (contains {{}})\n                    bool isDynamic = metaParam != null && metaParam.Contains(\"{{\");\n\n                    // ‚úÖ Only add parameters for dynamic types\n                    if (isDynamic && !string.IsNullOrWhiteSpace(value))\n                    {\n                        var paramType = subtype switch\n                        {\n                            \"url\" => \"text\",\n                            \"copy_code\" => \"coupon_code\",\n                            \"phone_number\" => \"phone_number\",\n                            \"flow\" => \"flow_id\",\n                            _ => \"text\"\n                        };\n\n                        buttonPayload[\"parameters\"] = new[]\n                        {\n                    new Dictionary<string, object>\n                    {\n                        { \"type\", paramType },\n                        { paramType, value }\n                    }\n                };\n                    }\n                    else\n                    {\n                        Log.Information(\"‚ÑπÔ∏è Skipping parameters for static button '{Title}' ({SubType})\", btn.Title, subtype);\n                    }\n\n                    components.Add(buttonPayload);\n                }\n            }\n\n            return components;\n        }\n\n        #endregion\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRecipientService.cs",
      "sha256": "a2bb5bdb9f8a87dc2436bac017a79dc02ec48bdc1fd425cb6c701807234d4dd3",
      "language": "csharp",
      "size": 729,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRecipientService\n    {\n        Task<CampaignRecipientDto> GetByIdAsync(Guid id);\n        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);\n\n        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);\n        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);\n        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);\n\n        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignService.cs",
      "sha256": "3f7e9d437d20cfd11c29d59b006d22a3c7c2b82f1f9af986a537fbf8941c6a4e",
      "language": "csharp",
      "size": 2137,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignService\n    {\n        /// üÜï Create a new campaign with recipients\n        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);\n\n        /// ‚úèÔ∏è Update an existing draft campaign\n        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);\n\n        /// üóëÔ∏è Soft-delete a draft campaign\n        Task<bool> DeleteCampaignAsync(Guid id);\n\n        /// üìã Get all campaigns for the business\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);\n\n        /// üìÑ Get paginated campaigns\n        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);\n        /// üöÄ Trigger campaign send flow (template message to all recipients)\n        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);\n        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);\n        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);\n        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);\n        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);\n\n\n    }\n}\n"
    }
  ]
}
