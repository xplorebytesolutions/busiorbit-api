{
  "name": "xbytechat-api/Features/CampaignModule",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignController.cs",
      "sha256": "7c8049bda65a4bdfec05f78a7990ef02375d77b5b738d9763dd787f27474e7c0",
      "language": "csharp",
      "size": 13243,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignController : ControllerBase\n    {\n        private readonly ICampaignService _campaignService;\n        private readonly IBusinessService _businessService;\n        private readonly IMessageEngineService _messageService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CampaignController(\n            ICampaignService campaignService,\n            IBusinessService businessService,\n            IMessageEngineService messageEngineService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _campaignService = campaignService;\n            _businessService = businessService;\n            _messageService = messageEngineService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        [HttpGet(\"get-image-campaign\")]\n        public async Task<IActionResult> GetAll([FromQuery] string? type)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetAllCampaignsAsync(businessId, type);\n            return Ok(result);\n        }\n\n        [HttpGet(\"paginated\")]\n        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);\n            return Ok(result);\n        }\n\n        [HttpGet(\"debug-claims\")]\n        public IActionResult DebugClaims()\n        {\n            var user = HttpContext.User;\n            var businessId = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new\n            {\n                name = user.Identity?.Name,\n                businessId\n            });\n        }\n\n        [HttpPost(\"create-text-campaign\")]\n        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out var businessId))\n                    return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n                var createdBy = User.Identity?.Name ?? \"system\";\n\n                if (string.IsNullOrWhiteSpace(dto.Name))\n                    return BadRequest(new { message = \"üö´ Campaign name is required.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateId))\n                    return BadRequest(new { message = \"üö´ TemplateId is required for template campaigns.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))\n                    return BadRequest(new { message = \"üö´ Message template content is required.\" });\n\n                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);\n\n                return campaignId != null\n                    ? Ok(new\n                    {\n                        success = true,\n                        message = \"‚úÖ Campaign created successfully\",\n                        campaignId = campaignId.Value\n                    })\n                    : BadRequest(new { success = false, message = \"‚ùå Failed to create campaign\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in CreateTextCampaign\");\n                return StatusCode(500, new { message = \"üö® Internal server error\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"create-image-campaign\")]\n        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var user = HttpContext.User;\n                var businessIdClaim = user.FindFirst(\"businessId\");\n\n                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                    return Unauthorized(new { message = \"üö´ Invalid or missing BusinessId claim.\" });\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var allowedTypes = new[] { \"url\", \"copy_code\", \"flow\", \"phone_number\", \"quick_reply\" };\n                    foreach (var button in dto.MultiButtons)\n                    {\n                        var type = button.ButtonType?.Trim().ToLower();\n\n                        if (!allowedTypes.Contains(type))\n                            return BadRequest(new { message = $\"‚ùå Invalid ButtonType: '{type}' is not supported.\" });\n\n                        var needsValue = new[] { \"url\", \"flow\", \"copy_code\", \"phone_number\" };\n                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))\n                            return BadRequest(new { message = $\"‚ùå Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'.\" });\n\n                        if (button.TargetUrl?.ToLower() == \"unknown\")\n                            return BadRequest(new { message = $\"‚ùå Invalid value 'unknown' found in button '{button.ButtonText}'.\" });\n                    }\n                }\n\n                var createdBy = user.Identity?.Name ?? \"system\";\n                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);\n\n                return Ok(new\n                {\n                    success = true,\n                    message = \"‚úÖ Campaign created successfully\",\n                    campaignId\n                });\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return BadRequest(new { message = ex.Message });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in CreateImageCampaign\");\n                return StatusCode(500, new { message = \"üö® Internal server error\", error = ex.Message });\n            }\n        }\n\n        // ‚úÖ Moved above {id} routes\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);\n\n                return success\n                    ? Ok(new { message = \"‚úÖ Contacts assigned\" })\n                    : BadRequest(new { message = \"‚ùå Failed to assign contacts\" });\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error assigning contacts: \" + ex.Message);\n                return StatusCode(500, new { message = \"Internal error\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{campaignId}/recipients/{contactId}\")]\n        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);\n\n                if (!success)\n                    return NotFound(new { message = \"Recipient not found or not assigned\" });\n\n                return NoContent();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Remove recipient failed: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error removing recipient\", detail = ex.Message });\n            }\n        }\n        \n        // Send campaign method (Core Method to send template message)\n        [HttpPost(\"send-campaign/{campaignId}\")] // use to send free text and Template campaigns\n        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)\n        {\n            try\n            {\n                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception while sending image template campaign\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"üö® Server error while sending campaign\", ex.ToString()));\n            }\n        }\n\n        [HttpPost(\"send-template-campaign/{id}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid id)\n        {\n            var result = await _campaignService.SendTemplateCampaignAsync(id);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        [HttpPost(\"send/{campaignId}\")]\n        public async Task<IActionResult> SendCampaign(Guid campaignId)\n        {\n            try\n            {\n                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n                var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);\n\n                return success\n                    ? Ok(new { success = true, message = \"‚úÖ Campaign sent successfully\" })\n                    : BadRequest(new { success = false, message = \"‚ùå Campaign sending failed\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception in SendCampaign\");\n                return StatusCode(500, new { success = false, message = \"üö® Internal Server Error\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)\n        {\n            var result = await _campaignService.UpdateCampaignAsync(id, dto);\n            return result\n                ? Ok(new { message = \"‚úèÔ∏è Campaign updated successfully\" })\n                : BadRequest(new { message = \"‚ùå Update failed ‚Äî only draft campaigns can be edited\" });\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteCampaign(Guid id)\n        {\n            var result = await _campaignService.DeleteCampaignAsync(id);\n            return result\n                ? Ok(new { message = \"üóëÔ∏è Campaign deleted successfully\" })\n                : BadRequest(new { message = \"‚ùå Delete failed ‚Äî only draft campaigns can be deleted\" });\n        }\n\n        [HttpGet(\"recipients/{id}\")]\n        public async Task<IActionResult> GetCampaignRecipients(Guid id)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);\n                return Ok(recipients);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"‚ùå Error fetching campaign recipients: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error fetching recipients\", detail = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)\n        {\n            var businessId = GetBusinessId();\n            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);\n\n            if (campaign == null)\n                return NotFound();\n\n            return Ok(campaign);\n        }\n\n        private Guid GetBusinessId()\n        {\n            var claim = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            if (string.IsNullOrEmpty(claim))\n                throw new UnauthorizedAccessException(\"BusinessId not found in token claims.\");\n\n            return Guid.Parse(claim);\n        }\n    \n        [HttpGet(\"list/{businessId:guid}\")]\n        public async Task<IActionResult> GetAvailableFlows(Guid businessId, [FromQuery] bool onlyPublished = true)\n        {\n            var items = await _campaignService.GetAvailableFlowsAsync(businessId, onlyPublished);\n            return Ok(new { success = true, items });\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignRecipientController.cs",
      "sha256": "247e52ea9259e04d5bc4fb6e22d3aa4791b77af05431022b0572a837bbf7e326",
      "language": "csharp",
      "size": 3341,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignRecipientController : ControllerBase\n    {\n        private readonly ICampaignRecipientService _recipientService;\n\n        public CampaignRecipientController(ICampaignRecipientService recipientService)\n        {\n            _recipientService = recipientService;\n        }\n\n        // ‚úÖ Get a single recipient by ID\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)\n        {\n            var recipient = await _recipientService.GetByIdAsync(id);\n            if (recipient == null)\n                return NotFound(new { message = \"Recipient not found\" });\n\n            return Ok(recipient);\n        }\n\n        // ‚úÖ Get all recipients for a specific campaign\n        [HttpGet(\"/api/campaigns/{campaignId}/recipients\")]\n        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)\n        {\n            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);\n            return Ok(recipients);\n        }\n\n        // ‚úÖ Update recipient status (e.g., from Pending ‚Üí Sent)\n        [HttpPut(\"{recipientId}/status\")]\n        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)\n        {\n            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or update failed\" });\n\n            return Ok(new { message = \"Status updated\" });\n        }\n\n        // ‚úÖ Track a reply from customer\n        [HttpPut(\"{recipientId}/reply\")]\n        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)\n        {\n            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or tracking failed\" });\n\n            return Ok(new { message = \"Reply tracked\" });\n        }\n\n        // üîç Search recipients by optional filters (status, keyword)\n        [HttpGet(\"search\")]\n        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)\n        {\n            var results = await _recipientService.SearchRecipientsAsync(status, keyword);\n            return Ok(results);\n        }\n\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)\n        {\n            try\n            {\n                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);\n                return Ok(new { message = \"Contacts assigned successfully\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error assigning contacts to campaign\");\n                return StatusCode(500, new { message = \"Failed to assign contacts\" });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/AssignContactsDto.cs",
      "sha256": "8f8b9b0da213111f833dd07dd7e5189ccc02984cef1b34deb5b1d93a5d40678e",
      "language": "csharp",
      "size": 156,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class AssignContactsDto\n    {\n        public List<Guid> ContactIds { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonDto.cs",
      "sha256": "21e757f8859c9ea36b40c0d3418d5211cce8a22a26b07b81af62b723f93dc2e5",
      "language": "csharp",
      "size": 379,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty; // üìç e.g., \"Buy Now\"\n        public string ButtonType { get; set; } = \"url\";         // üîò url | quick_reply | call\n        public string TargetUrl { get; set; } = string.Empty;  // üåê or phone/call param\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonParamFromMetaDto.cs",
      "sha256": "d218adbbc4e6418548f3dfe962c8b867fc7f364be490f6533d04fb5c61f17f30",
      "language": "csharp",
      "size": 391,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonParamFromMetaDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public string SubType { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n        public int Position { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignCreateDto.cs",
      "sha256": "d5578bef04f767c0f82327a286191fca2953764b2185cb3f25a9d67d43418a5b",
      "language": "csharp",
      "size": 1521,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignCreateDto\n    {\n        public string Name { get; set; }\n\n        [Column(TypeName = \"text\")]\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; } // ‚úÖ Optional Meta template ID\n\n        public string? FollowUpTemplateId { get; set; } // üîÅ Auto-reply template after interest\n\n        public string? CampaignType { get; set; } //= \"template\"; // \"text\", \"template\", \"cta\"\n\n        public Guid? CtaId { get; set; } // üîò For legacy CTA support (optional)\n\n        public Guid? CTAFlowConfigId { get; set; }\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ‚úÖ New multi-button support\n        public DateTime? ScheduledAt { get; set; } // üìÖ Optional future scheduling\n\n        //public List<Guid>? ContactIds { get; set; } // üë• Target contact list\n\n        public string? ImageUrl { get; set; } // üñºÔ∏è Optional image field\n\n        public string? ImageCaption { get; set; } // üìù Optional caption\n\n        public List<Guid> ContactIds { get; set; } = new();\n\n        public List<string>? TemplateParameters { get; set; }\n        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDto.cs",
      "sha256": "bf33c6aa688063d8efd2734082713e23890bb97409bae31a5bc9d18c00ccd001",
      "language": "csharp",
      "size": 1223,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignDto\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; }\n\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; }\n        public string? MessageBody { get; set; }\n        public string? CampaignType { get; set; }\n\n        public string? Status { get; set; }\n\n        public string? ImageUrl { get; set; }\n\n        public string? ImageCaption { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n\n        public Guid? CtaId { get; set; }\n\n        public CtaPreviewDto? Cta { get; set; }\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new();\n\n        public Guid? CTAFlowConfigId { get; set; }\n        public string? CTAFlowName { get; set; }\n    }\n\n    // üì¶ Embedded DTO for CTA preview (title + button text only)\n    public class CtaPreviewDto\n    {\n        public string Title { get; set; } = string.Empty;\n\n        public string ButtonText { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignRecipientDto.cs",
      "sha256": "7d59f3b2a92ff69f0425bf1c3541facd28da12efde822400d313e6beddc8ace5",
      "language": "csharp",
      "size": 755,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignRecipientDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string Status { get; set; }\n        public DateTime? SentAt { get; set; }\n\n        // üîÅ Advanced Fields (for analytics & future automation)\n        public string? BotId { get; set; }\n        public string? MessagePreview { get; set; }\n        public string? ClickedCTA { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public bool IsAutoTagged { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignSummaryDto.cs",
      "sha256": "e425735df2c030aa13e5b046f7039f9796104b05b3ec998e039ab1d7eb40b0e0",
      "language": "csharp",
      "size": 687,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string? Name { get; set; }\n        public string? Status { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public int Delivered { get; set; }\n        public int Read { get; set; }\n\n        public string? ImageUrl { get; set; } // ‚úÖ Add this\n        public string? ImageCaption { get; set; } // ‚úÖ Add this\n        public string? CtaTitle { get; set; } // Optional: For CTA info\n        public int RecipientCount { get; set; } // Optional: To show 0/10 etc\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/DTOs/FlowListItemDto.cs",
      "sha256": "3121c1e145f2d4fd8f1f4978f314782f0afa5d7be9ffe7be6709cfc04af7d068",
      "language": "csharp",
      "size": 246,
      "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class FlowListItemDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/Campaign.cs",
      "sha256": "0fc898a08b290dc0478ece8c4ac96b2feb1a36b6f3bd2b5b90d07697bec59f7a",
      "language": "csharp",
      "size": 5618,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models; // üÜï Import for CTAFlowConfig\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class Campaign\n    {\n        public Guid Id { get; set; }\n\n        // üîó Business info\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Campaign? SourceCampaign { get; set; }\n\n        // üìã Core campaign details\n        public string Name { get; set; }\n        public string MessageTemplate { get; set; }\n        public string? TemplateId { get; set; } // ‚úÖ Meta-approved template ID\n\n        [Column(TypeName = \"text\")]\n        public string? MessageBody { get; set; } // ‚úÖ Final resolved WhatsApp message body\n\n        public string? FollowUpTemplateId { get; set; }\n        public string? CampaignType { get; set; } // text, template, cta\n\n        // üîò CTA tracking (optional)\n        public Guid? CtaId { get; set; }\n        public CTADefinition? Cta { get; set; }\n\n        // üÜï Link to Flow Config (optional)\n        public Guid? CTAFlowConfigId { get; set; }\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig? CTAFlowConfig { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n        // üë§ Metadata\n        public string? CreatedBy { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // üóëÔ∏è Soft delete support\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // üë• Recipient relationship\n        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n        // üìä Logs\n        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        public string? ImageUrl { get; set; }\n        public string? ImageCaption { get; set; }\n        public string? TemplateParameters { get; set; }\n\n        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n    }\n}\n\n\n//using System;\n//using System.Collections.Generic;\n//using xbytechat.api.CRM.Models;\n//using xbytechat.api.Features.CampaignTracking.Models;\n//using xbytechat.api.Features.CTAManagement.Models;\n//using System.ComponentModel.DataAnnotations.Schema;\n//using xbytechat.api.Features.MessageManagement.DTOs;\n//using xbytechat.api.Features.BusinessModule.Models;\n\n//namespace xbytechat.api.Features.CampaignModule.Models\n//{\n//    public class Campaign\n//    {\n//        public Guid Id { get; set; }\n\n//        // üîó Business info\n//        public Guid BusinessId { get; set; }\n//        public Business Business { get; set; }\n//        public Guid? CampaignId { get; set; }\n//        public Campaign? SourceCampaign { get; set; }\n\n//        // üìã Core campaign details\n//        public string Name { get; set; }\n//        public string MessageTemplate { get; set; }\n//        public string? TemplateId { get; set; } // ‚úÖ Meta-approved template ID\n\n//        [Column(TypeName = \"text\")]\n//        public string? MessageBody { get; set; } // ‚úÖ Final resolved WhatsApp message body\n\n\n//        public string? FollowUpTemplateId { get; set; } // üîÅ For auto-reply follow-up after interest\n//        public string? CampaignType { get; set; } // = \"template\"; // text, template, cta\n\n//        // üîò CTA tracking (optional)\n//        public Guid? CtaId { get; set; }\n//        public CTADefinition? Cta { get; set; }\n\n\n//        public DateTime? ScheduledAt { get; set; }\n//        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n//        // üë§ Metadata\n//        public string? CreatedBy { get; set; }\n//        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n//        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n//        // üóëÔ∏è Soft delete support\n//        public bool IsDeleted { get; set; } = false;\n//        public DateTime? DeletedAt { get; set; }\n//        public string? DeletedBy { get; set; }\n\n//        // üë• Recipient relationship\n//        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n//        // üìä Logs\n//        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n//        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n//        //public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n\n//        public string? ImageUrl { get; set; } // ‚úÖ store image URL\n//        public string? ImageCaption { get; set; } // optional caption\n//        public string? TemplateParameters { get; set; } // ‚úÖ stores [\"value1\", \"value2\", ...] as JSON string\n\n//        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n//        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignButton.cs",
      "sha256": "bfca22e0aed3117f3be8b3712de4a7b229991bc3c4b02bdb1f17e43709991977",
      "language": "csharp",
      "size": 654,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignButton\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; } // üîó Foreign key\n        public Campaign Campaign { get; set; }\n\n        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)\n        public string Type { get; set; } = \"url\"; // Type: url, quick_reply, call, etc.\n        public string Value { get; set; } = string.Empty; // Target URL or payload\n\n        public int Position { get; set; } // Button order (1‚Äì3)\n        public bool IsFromTemplate { get; set; } = false;\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignFlowOverride.cs",
      "sha256": "c4ee719e7601cfb0eb6d67fbba7e11cbd4a57ad5be58dd84f72beead08d88370",
      "language": "csharp",
      "size": 798,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignFlowOverride\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CampaignId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        [MaxLength(50)]\n        public string ButtonText { get; set; } = string.Empty;\n\n        public string? OverrideNextTemplate { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n\n        [ForeignKey(\"CampaignId\")]\n        public Campaign? Campaign { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/CampaignRecipient.cs",
      "sha256": "56577228e95ed7f6c8f49036a0f4a95c7536726ea3c45a0a6f3b60ea7fe33362",
      "language": "csharp",
      "size": 1497,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; }\n\n        public Guid ContactId { get; set; }\n        public Contact Contact { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Delivered, Failed, Replied\n        public DateTime? SentAt { get; set; }\n\n        public string? BotId { get; set; } // Multi-bot support\n        public string? MessagePreview { get; set; } // Final message sent\n        public string? ClickedCTA { get; set; } // Track CTA clicked like \"BuyNow\"\n        public string? CategoryBrowsed { get; set; } // e.g., Ads\n        public string? ProductBrowsed { get; set; } // e.g., Product name\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging\n\n        // ‚úÖ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)\n        public ICollection<CampaignSendLog> SendLogs { get; set; }\n\n        public Guid BusinessId { get; set; }  // ‚úÖ Add this line\n        public Business Business { get; set; } = null!; // if navigation is needed\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Models/TempCampaignRecipient.cs",
      "sha256": "62b7c7ce62f02ff80d38fb3477ccb849580cb1f859396e2ab7b6ad857fcc22a2",
      "language": "csharp",
      "size": 617,
      "content": "// Features/CampaignModule/Models/TempCampaignRecipient.cs\nusing System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class TempCampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; }\n\n        public string PhoneNumber { get; set; } = string.Empty;\n        public string? Name { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Failed\n        public DateTime? SentAt { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignRecipientService.cs",
      "sha256": "9e537d67c7d3b811b4d26288fa63b38b0097f997fc84b8d0313877e3f77fe809",
      "language": "csharp",
      "size": 5435,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignRecipientService : ICampaignRecipientService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRecipientService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // üîç Get a single recipient by ID\n        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.Id == id)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .FirstOrDefaultAsync();\n        }\n\n        // üì¶ Get all recipients of a specific campaign\n        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        // ‚úèÔ∏è Update status of a specific recipient\n        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.Status = newStatus;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // üí¨ Track customer reply or CTA\n        // üó£Ô∏è Track customer reply on a recipient\n        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.ClickedCTA = replyText;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n\n        // üîé Global recipient search across all campaigns\n        // üîç Search recipients by optional status or keyword\n        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)\n        {\n            var query = _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(status))\n                query = query.Where(r => r.Status == status);\n\n            if (!string.IsNullOrEmpty(keyword))\n                query = query.Where(r =>\n                    r.Contact.Name.Contains(keyword) ||\n                    r.Contact.PhoneNumber.Contains(keyword)\n                );\n\n            return await query\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null)\n                throw new Exception(\"Campaign not found.\");\n\n            var businessId = campaign.BusinessId;\n\n            var existing = await _context.CampaignRecipients\n                .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n                .Select(r => r.ContactId)\n                .ToListAsync();\n\n            var newRecipients = contactIds\n                .Where(id => !existing.Contains(id))\n                .Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId, // ‚úÖ required\n                    Status = \"Pending\",\n                    SentAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    IsAutoTagged = false\n                }).ToList();\n\n            if (newRecipients.Any())\n            {\n                await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n                await _context.SaveChangesAsync();\n            }\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.cs",
      "sha256": "159797c22265ad6bbd7cf080be0988bac206555404b296fd54786edbbf12ea4e",
      "language": "csharp",
      "size": 76075,
      "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignService : ICampaignService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly IServiceProvider _serviceProvider;\n        private readonly ILeadTimelineService _timelineService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        private readonly IUrlBuilderService _urlBuilderService;\n        public CampaignService(AppDbContext context, IMessageService messageService,\n                               IServiceProvider serviceProvider,\n                               ILeadTimelineService timelineService,\n                               IMessageEngineService messageEngineService,\n                               IWhatsAppTemplateFetcherService templateFetcherService,\n                               IUrlBuilderService urlBuilderService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _serviceProvider = serviceProvider;\n            _timelineService = timelineService; // ‚úÖ new\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n            _urlBuilderService = urlBuilderService;\n\n        }\n\n\n        #region Get All Types of Get and Update and Delete Methods\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)\n        {\n            return await _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n\n                })\n                .ToListAsync();\n        }\n        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Cta)\n                .Include(c => c.MultiButtons)\n                .Include(c => c.CTAFlowConfig)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null) return null;\n\n            return new CampaignDto\n            {\n                Id = campaign.Id,\n                Name = campaign.Name,\n                MessageTemplate = campaign.MessageTemplate,\n                MessageBody = campaign.MessageBody,\n                TemplateId = campaign.TemplateId,\n                CampaignType = campaign.CampaignType,\n                Status = campaign.Status,\n                ImageUrl = campaign.ImageUrl,\n                ImageCaption = campaign.ImageCaption,\n                CreatedAt = campaign.CreatedAt,\n                ScheduledAt = campaign.ScheduledAt,\n                CtaId = campaign.CtaId,\n                Cta = campaign.Cta == null ? null : new CtaPreviewDto\n                {\n                    Title = campaign.Cta.Title,\n                    ButtonText = campaign.Cta.ButtonText\n                },\n                MultiButtons = campaign.MultiButtons?\n                    .Select(b => new CampaignButtonDto\n                    {\n                        ButtonText = b.Title,\n                        ButtonType = b.Type,\n                        TargetUrl = b.Value\n                    }).ToList() ?? new List<CampaignButtonDto>(),\n                // ‚úÖ Flow surface to UI\n                CTAFlowConfigId = campaign.CTAFlowConfigId,\n                CTAFlowName = campaign.CTAFlowConfig?.FlowName\n            };\n        }\n        // Returns the entry step (no incoming links) and its template name.\n        // If flow is missing/invalid, returns (null, null) and caller should ignore.\n        private async Task<(Guid? entryStepId, string? entryTemplate)> ResolveFlowEntryAsync(Guid businessId, Guid? flowId)\n        {\n            if (!flowId.HasValue || flowId.Value == Guid.Empty) return (null, null);\n\n            var flow = await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(f => f.Id == flowId.Value && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null || flow.Steps == null || flow.Steps.Count == 0) return (null, null);\n\n            var incoming = new HashSet<Guid>(\n                flow.Steps.SelectMany(s => s.ButtonLinks)\n                          .Where(l => l.NextStepId.HasValue)\n                          .Select(l => l.NextStepId!.Value)\n            );\n\n            var entry = flow.Steps\n                .OrderBy(s => s.StepOrder)\n                .FirstOrDefault(s => !incoming.Contains(s.Id));\n\n            return entry == null ? (null, null) : (entry.Id, entry.TemplateToSend);\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(type))\n                query = query.Where(c => c.CampaignType == type);\n\n            return await query\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n                    ImageUrl = c.ImageUrl,            // ‚úÖ Now mapped\n                    ImageCaption = c.ImageCaption,    // ‚úÖ Now mapped\n                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional\n                    RecipientCount = c.Recipients.Count()\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)\n        {\n            var recipients = await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)\n                .Select(r => new ContactDto\n                {\n                    Id = r.Contact.Id,\n                    Name = r.Contact.Name,\n                    PhoneNumber = r.Contact.PhoneNumber,\n                    Email = r.Contact.Email,\n                    LeadSource = r.Contact.LeadSource,\n                    CreatedAt = r.Contact.CreatedAt\n                })\n                .ToListAsync();\n\n            return recipients;\n        }\n\n        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt);\n\n            var total = await query.CountAsync();\n\n            var items = await query\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<CampaignSummaryDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)\n        {\n            var campaign = await _context.Campaigns.FindAsync(id);\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            // ‚úÖ Extract BusinessId from current campaign\n            var businessId = campaign.BusinessId;\n\n            // ‚úÖ Optional CTA ownership validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"‚ùå The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // ‚úèÔ∏è Update campaign fields\n            campaign.Name = dto.Name;\n            campaign.MessageTemplate = dto.MessageTemplate;\n            campaign.TemplateId = dto.TemplateId;\n            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;\n            campaign.CampaignType = dto.CampaignType;\n            campaign.CtaId = dto.CtaId;\n            campaign.ImageUrl = dto.ImageUrl;\n            campaign.ImageCaption = dto.ImageCaption;\n            campaign.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == id);\n\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            _context.CampaignRecipients.RemoveRange(campaign.Recipients);\n            _context.Campaigns.Remove(campaign);\n\n            await _context.SaveChangesAsync();\n            Log.Information(\"üóëÔ∏è Campaign deleted: {Id}\", id);\n            return true;\n        }\n\n        #endregion\n\n        #region // üÜï CreateCampaignAsync(Text/Image)\n\n        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                var campaignId = Guid.NewGuid();\n\n                // üîÅ Parse/normalize template parameters once\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n                );\n\n                // üîÑ Flow id from UI (null/empty => no flow). We will persist this as-is.\n                Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                    ? dto.CTAFlowConfigId.Value\n                    : (Guid?)null;\n\n                // We will save this value regardless of validation outcome\n                Guid? savedFlowId = incomingFlowId;\n\n                // ============================================================\n                // üß© FLOW VALIDATION (only to align the starting template)\n                // ============================================================\n                string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n                CTAFlowConfig? flow = null;\n                CTAFlowStep? entryStep = null;\n\n                if (incomingFlowId.HasValue)\n                {\n                    // load flow with steps+links and verify ownership\n                    flow = await _context.CTAFlowConfigs\n                        .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                        .FirstOrDefaultAsync(f =>\n                            f.Id == incomingFlowId.Value &&\n                            f.BusinessId == businessId &&\n                            f.IsActive);\n\n                    if (flow == null)\n                    {\n                        Log.Warning(\"‚ùå Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.\",\n                            incomingFlowId, businessId);\n                    }\n                    else\n                    {\n                        // compute entry step: step with NO incoming links\n                        var allIncoming = new HashSet<Guid>(flow.Steps\n                            .SelectMany(s => s.ButtonLinks)\n                            .Where(l => l.NextStepId.HasValue)\n                            .Select(l => l.NextStepId!.Value));\n\n                        entryStep = flow.Steps\n                            .OrderBy(s => s.StepOrder)\n                            .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                        if (entryStep == null)\n                        {\n                            Log.Warning(\"‚ùå Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.\", flow.Id);\n                        }\n                        else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                        {\n                            Log.Information(\"‚ÑπÔ∏è Aligning selected template '{Sel}' to flow entry '{Entry}'.\",\n                                selectedTemplateName, entryStep.TemplateToSend);\n                            selectedTemplateName = entryStep.TemplateToSend;\n                        }\n                    }\n                }\n                else\n                {\n                    Log.Information(\"‚ÑπÔ∏è No flow attached to campaign '{Name}'. Proceeding as plain template campaign.\", dto.Name);\n                }\n\n                // üß† Fetch template (for body + buttons) using the aligned/selected template name\n                var template = await _templateFetcherService.GetTemplateByNameAsync(\n                    businessId,\n                    selectedTemplateName,\n                    includeButtons: true\n                );\n\n                // üß† Resolve message body using template body (if available) else dto.MessageTemplate\n                var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n                // ‚úÖ Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)\n                var campaign = new Campaign\n                {\n                    Id = campaignId,\n                    BusinessId = businessId,\n                    Name = dto.Name,\n\n                    // store the (possibly aligned) template name\n                    MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it\n                    TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available\n\n                    FollowUpTemplateId = dto.FollowUpTemplateId,\n                    CampaignType = dto.CampaignType ?? \"text\",\n                    CtaId = dto.CtaId,\n                    CTAFlowConfigId = savedFlowId,              // üëà persist what UI sent (or null if no flow)\n\n                    ScheduledAt = dto.ScheduledAt,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    Status = \"Draft\",\n                    ImageUrl = dto.ImageUrl,\n                    ImageCaption = dto.ImageCaption,\n                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                    MessageBody = resolvedBody\n                };\n\n                await _context.Campaigns.AddAsync(campaign);\n\n                // ‚úÖ Step 2: Assign contacts (leave SentAt null until send)\n                if (dto.ContactIds != null && dto.ContactIds.Any())\n                {\n                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        ContactId = contactId,\n                        BusinessId = businessId,\n                        Status = \"Pending\",\n                        SentAt = null,\n                        UpdatedAt = DateTime.UtcNow\n                    });\n\n                    await _context.CampaignRecipients.AddRangeAsync(recipients);\n                }\n\n                // ‚úÖ Step 3a: Save manual buttons from frontend\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var buttons = dto.MultiButtons\n                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.ButtonText,\n                            Type = btn.ButtonType ?? \"url\",\n                            Value = btn.TargetUrl,\n                            Position = index + 1,\n                            IsFromTemplate = false\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n                }\n\n                // ======================== Dynamic buttons merge ========================\n                if (template != null && template.ButtonParams?.Count > 0)\n                {\n                    var buttonsToSave = new List<CampaignButton>();\n                    var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                    var total = Math.Min(3, template.ButtonParams.Count);\n                    for (int i = 0; i < total; i++)\n                    {\n                        var tplBtn = template.ButtonParams[i];\n                        var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                        var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                        var valueToSave = (isDynamic && userBtn != null)\n                            ? userBtn.Value?.Trim()\n                            : tplBtn.ParameterValue;\n\n                        buttonsToSave.Add(new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = tplBtn.Text,\n                            Type = tplBtn.Type,\n                            Value = valueToSave,\n                            Position = i + 1,\n                            IsFromTemplate = true\n                        });\n                    }\n\n                    await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n                }\n                // ======================================================================\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"‚úÖ Campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}\",\n                    dto.Name,\n                    savedFlowId,\n                    entryStep?.TemplateToSend ?? selectedTemplateName,\n                    dto.ContactIds?.Count ?? 0,\n                    dto.MultiButtons?.Count ?? 0,\n                    template?.ButtonParams?.Count ?? 0,\n                    dto.TemplateParameters?.Count ?? 0\n                );\n\n                return campaignId;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to create campaign\");\n                return null;\n            }\n        }\n\n        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)\n        {\n            var campaignId = Guid.NewGuid();\n\n            // üîÅ Parse/normalize template parameters once\n            var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n            );\n\n            // üîÑ Flow id from UI (null/empty => no flow). We will persist this as-is.\n            Guid? incomingFlowId = (dto.CTAFlowConfigId.HasValue && dto.CTAFlowConfigId.Value != Guid.Empty)\n                ? dto.CTAFlowConfigId.Value\n                : (Guid?)null;\n\n            // We will save this value regardless of validation outcome\n            Guid? savedFlowId = incomingFlowId;\n\n            // ============================================================\n            // üß© FLOW VALIDATION (only to align the starting template)\n            // ============================================================\n            string selectedTemplateName = dto.TemplateId ?? dto.MessageTemplate ?? string.Empty;\n\n            CTAFlowConfig? flow = null;\n            CTAFlowStep? entryStep = null;\n\n            if (incomingFlowId.HasValue)\n            {\n                // load flow with steps+links and verify ownership\n                flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps).ThenInclude(s => s.ButtonLinks)\n                    .FirstOrDefaultAsync(f =>\n                        f.Id == incomingFlowId.Value &&\n                        f.BusinessId == businessId &&\n                        f.IsActive);\n\n                if (flow == null)\n                {\n                    Log.Warning(\"‚ùå Flow {FlowId} not found/active for business {Biz}. Will persist FlowId but not align template.\",\n                        incomingFlowId, businessId);\n                }\n                else\n                {\n                    // compute entry step: step with NO incoming links\n                    var allIncoming = new HashSet<Guid>(flow.Steps\n                        .SelectMany(s => s.ButtonLinks)\n                        .Where(l => l.NextStepId.HasValue)\n                        .Select(l => l.NextStepId!.Value));\n\n                    entryStep = flow.Steps\n                        .OrderBy(s => s.StepOrder)\n                        .FirstOrDefault(s => !allIncoming.Contains(s.Id));\n\n                    if (entryStep == null)\n                    {\n                        Log.Warning(\"‚ùå Flow {FlowId} has no entry step. Persisting FlowId but not aligning template.\", flow.Id);\n                    }\n                    else if (!string.Equals(selectedTemplateName, entryStep.TemplateToSend, StringComparison.OrdinalIgnoreCase))\n                    {\n                        Log.Information(\"‚ÑπÔ∏è Aligning selected template '{Sel}' to flow entry '{Entry}'.\",\n                            selectedTemplateName, entryStep.TemplateToSend);\n                        selectedTemplateName = entryStep.TemplateToSend;\n                    }\n                }\n            }\n            else\n            {\n                Log.Information(\"‚ÑπÔ∏è No flow attached to image campaign '{Name}'. Proceeding as plain template campaign.\", dto.Name);\n            }\n\n            // üß† Fetch template (for body + buttons) using the aligned/selected template name\n            var template = await _templateFetcherService.GetTemplateByNameAsync(\n                businessId,\n                selectedTemplateName,\n                includeButtons: true\n            );\n\n            // üß† Resolve message body using template body (if available) else dto.MessageTemplate\n            var templateBody = template?.Body ?? dto.MessageTemplate ?? string.Empty;\n            var resolvedBody = TemplateParameterHelper.FillPlaceholders(templateBody, parsedParams);\n\n            // üéØ Step 1: Create campaign (CTAFlowConfigId now always = savedFlowId)\n            var campaign = new Campaign\n            {\n                Id = campaignId,\n                BusinessId = businessId,\n                Name = dto.Name,\n\n                // store the (possibly aligned) template name\n                MessageTemplate = dto.MessageTemplate,      // keep original text for UI if you use it\n                TemplateId = selectedTemplateName,          // ensure start template matches flow entry when available\n\n                FollowUpTemplateId = dto.FollowUpTemplateId,\n                CampaignType = \"image\",\n                CtaId = dto.CtaId,\n                CTAFlowConfigId = savedFlowId,              // üëà persist what UI sent (or null if no flow)\n\n                ScheduledAt = dto.ScheduledAt,\n                CreatedBy = createdBy,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Status = \"Draft\",\n\n                // image-specific fields\n                ImageUrl = dto.ImageUrl,\n                ImageCaption = dto.ImageCaption,\n\n                // params/body snapshot (useful for previews & auditing)\n                TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                MessageBody = resolvedBody\n            };\n\n            await _context.Campaigns.AddAsync(campaign);\n\n            // ‚úÖ Step 2: Assign contacts (leave SentAt null until send)\n            if (dto.ContactIds != null && dto.ContactIds.Any())\n            {\n                var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId,\n                    Status = \"Pending\",\n                    SentAt = null,\n                    UpdatedAt = DateTime.UtcNow\n                });\n\n                await _context.CampaignRecipients.AddRangeAsync(recipients);\n            }\n\n            // ‚úÖ Step 3a: Save manual buttons from frontend\n            if (dto.MultiButtons != null && dto.MultiButtons.Any())\n            {\n                var buttons = dto.MultiButtons\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    .Take(3)\n                    .Select((btn, index) => new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = btn.ButtonText,\n                        Type = btn.ButtonType ?? \"url\",\n                        Value = btn.TargetUrl,\n                        Position = index + 1,\n                        IsFromTemplate = false\n                    });\n\n                await _context.CampaignButtons.AddRangeAsync(buttons);\n            }\n\n            // ======================== Dynamic buttons merge ========================\n            // EXACTLY mirrors your text-creator pattern to avoid type issues with ButtonMetadataDto\n            if (template != null && template.ButtonParams?.Count > 0)\n            {\n                var buttonsToSave = new List<CampaignButton>();\n                var userButtons = dto.ButtonParams ?? new List<CampaignButtonParamFromMetaDto>();\n\n                var total = Math.Min(3, template.ButtonParams.Count);\n                for (int i = 0; i < total; i++)\n                {\n                    var tplBtn = template.ButtonParams[i];                         // ButtonMetadataDto: Text, Type, SubType, Index, ParameterValue\n                    var isDynamic = (tplBtn.ParameterValue?.Contains(\"{{1}}\") ?? false);\n\n                    var userBtn = userButtons.FirstOrDefault(b => b.Position == i + 1);\n                    var valueToSave = (isDynamic && userBtn != null)\n                        ? userBtn.Value?.Trim()                                    // user override for dynamic URL\n                        : tplBtn.ParameterValue;                                   // pattern or static value from meta\n\n                    buttonsToSave.Add(new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        Title = tplBtn.Text,                                       // from ButtonMetadataDto\n                        Type = tplBtn.Type,                                        // from ButtonMetadataDto\n                        Value = valueToSave,\n                        Position = i + 1,\n                        IsFromTemplate = true\n                    });\n                }\n\n                await _context.CampaignButtons.AddRangeAsync(buttonsToSave);\n            }\n            // ======================================================================\n\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"‚úÖ Image campaign '{Name}' created | FlowId: {Flow} | EntryTemplate: {Entry} | Recipients: {Contacts} | UserButtons: {ManualButtons} | TemplateButtons: {TemplateButtons} | Params: {Params}\",\n                dto.Name,\n                savedFlowId,\n                entryStep?.TemplateToSend ?? selectedTemplateName,\n                dto.ContactIds?.Count ?? 0,\n                dto.MultiButtons?.Count ?? 0,\n                template?.ButtonParams?.Count ?? 0,\n                dto.TemplateParameters?.Count ?? 0\n            );\n\n            return campaignId;\n        }\n        #endregion\n        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"üö´ Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int throttleLimit = 5;\n\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions { MaxDegreeOfParallelism = throttleLimit }, async (recipient, ct) =>\n            {\n                try\n                {\n                    using var scope = _serviceProvider.CreateScope();\n                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // üü¢ Use SimpleTemplateMessageDto instead of raw text\n                    var dto = new SimpleTemplateMessageDto\n                    {\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = campaign.MessageTemplate,\n                        TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                    };\n\n                    var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        TemplateId = campaign.TemplateId,\n                        MessageBody = campaign.MessageTemplate,\n                        MessageId = null,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        ErrorMessage = result.Message,\n                        SentAt = DateTime.UtcNow,\n                        CreatedAt = DateTime.UtcNow,\n                        SourceChannel = \"whatsapp\",\n                        IpAddress = ipAddress,\n                        DeviceInfo = userAgent\n                    };\n\n                    scopedDb.CampaignSendLogs.Add(sendLog);\n\n                    var recipientToUpdate = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(r => r.Id == recipient.Id);\n                    if (recipientToUpdate != null)\n                    {\n                        recipientToUpdate.Status = result.Success ? \"Sent\" : \"Failed\";\n                        recipientToUpdate.MessagePreview = campaign.MessageTemplate;\n                        recipientToUpdate.SentAt = DateTime.UtcNow;\n                        recipientToUpdate.UpdatedAt = DateTime.UtcNow;\n                    }\n\n                    await scopedDb.SaveChangesAsync();\n                }\n                catch (Exception ex)\n                {\n                    Log.Error(ex, \"‚ùå Send failed for recipient: {RecipientId}\", recipient.Id);\n                }\n            });\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"üì§ Campaign {CampaignId} sent via template to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"üö´ Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int maxParallelism = 5;\n\n#if NET6_0_OR_GREATER\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions\n            {\n                MaxDegreeOfParallelism = maxParallelism\n            },\n            async (recipient, cancellationToken) =>\n            {\n                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);\n            });\n#else\n    var tasks = campaign.Recipients.Select(recipient =>\n        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)\n    );\n    await Task.WhenAll(tasks);\n#endif\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"üì§ Campaign {CampaignId} sent in parallel to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)\n        {\n            try\n            {\n                var dto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipient.Contact.PhoneNumber,\n                    TemplateName = campaign.MessageTemplate,\n                    TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                };\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n\n                var log = new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = recipient.ContactId,\n                    RecipientId = recipient.Id,\n                    TemplateId = campaign.TemplateId,\n                    MessageBody = campaign.MessageTemplate,\n                    MessageId = null,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = result.Message,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    SourceChannel = \"whatsapp\",\n                    IpAddress = ip,\n                    DeviceInfo = ua\n                };\n\n                lock (_context)\n                {\n                    _context.CampaignSendLogs.Add(log);\n                    recipient.Status = result.Success ? \"Sent\" : \"Failed\";\n                    recipient.MessagePreview = campaign.MessageTemplate;\n                    recipient.SentAt = DateTime.UtcNow;\n                    recipient.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to send template to recipient: {RecipientId}\", recipient.Id);\n            }\n        }\n\n        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)\n        {\n            var entry = await _context.CampaignRecipients\n                .FirstOrDefaultAsync(r =>\n                    r.CampaignId == campaignId &&\n                    r.ContactId == contactId &&\n                    r.Campaign.BusinessId == businessId); // ‚úÖ Filter by related Campaign.BusinessId\n\n            if (entry == null)\n                return false;\n\n            _context.CampaignRecipients.Remove(entry);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null)\n                return false;\n\n            var newRecipients = contactIds.Select(id => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                ContactId = id,\n                BusinessId = businessId,\n                Status = \"Pending\",\n                SentAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            });\n\n            _context.CampaignRecipients.AddRange(newRecipients);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // This is the Entry point to send Temaplte (Text Based and Image Based)\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)\n        {\n            try\n            {\n                var campaign = await _context.Campaigns\n                    .Include(c => c.Recipients)\n                        .ThenInclude(r => r.Contact) // üß† include contact details\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Campaign not found.\");\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"‚ùå No recipients assigned to this campaign.\");\n\n                var templateName = campaign.MessageTemplate;\n                var templateId = campaign.TemplateId;\n                var language = \"en_US\"; // Optional: make dynamic later\n                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);\n\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    var messageDto = new ImageTemplateMessageDto\n                    {\n                        // BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(btn => new CampaignButtonDto\n                            {\n                                ButtonText = btn.Title,\n                                ButtonType = btn.Type,\n                                TargetUrl = btn.Value\n                            }).ToList()\n                    };\n\n                    // ‚úÖ Call the image/template sender\n                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);\n                    var isSuccess = sendResult.ToString().ToLower().Contains(\"messages\");\n\n                    var log = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = isSuccess ? \"Sent\" : \"Failed\",\n                        ErrorMessage = isSuccess ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(sendResult),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow\n                    };\n\n                    await _context.MessageLogs.AddAsync(log);\n\n                    if (isSuccess) success++;\n                    else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"‚úÖ Sent: {success}, ‚ùå Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n        #region  This region include all the code related to sending text and image based\n\n        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients).ThenInclude(r => r.Contact)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n                return ResponseResult.ErrorInfo(\"‚ùå Campaign not found.\");\n\n            return campaign.CampaignType?.ToLower() switch\n            {\n                \"image\" => await SendImageTemplateCampaignAsync(campaign),\n                \"text\" => await SendTextTemplateCampaignAsync(campaign),\n                _ => ResponseResult.ErrorInfo(\"‚ùå Unsupported campaign type.\")\n            };\n        }\n        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid campaign.\");\n\n                if (campaign.Recipients == null || campaign.Recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"‚ùå No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // üîë Use Flow entry template if flow is attached; else fallback to campaign.TemplateId/MessageTemplate\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n                // üß† Fetch template meta (+buttons if you need)\n                var templateMeta = await _templateFetcherService\n                    .GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n\n                if (templateMeta == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå Template metadata not found.\");\n\n                // üö´ Do not hardcode language; require provider meta language\n                var languageCode = (templateMeta.Language ?? \"\").Trim();\n                if (string.IsNullOrWhiteSpace(languageCode))\n                    return ResponseResult.ErrorInfo(\"‚ùå Template language not resolved from provider meta.\");\n\n                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n\n                // Existing manual buttons (for dynamic URL values)\n                var buttons = campaign.MultiButtons?.OrderBy(b => b.Position).ToList();\n\n                // Provider detection (Meta vs anything else you support)\n                var setting = await _context.WhatsAppSettings\n                    .AsNoTracking()\n                    .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n\n                if (setting == null)\n                    return ResponseResult.ErrorInfo(\"‚ùå WhatsApp settings not found.\");\n\n                var providerKey = (setting.Provider ?? \"meta_cloud\").ToLowerInvariant();\n\n                // üß≠ Resolve entry step id (so we can persist context for click processing)\n                Guid? entryStepId = null;\n                if (campaign.CTAFlowConfigId.HasValue)\n                {\n                    entryStepId = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == campaign.CTAFlowConfigId.Value)\n                        .OrderBy(s => s.StepOrder)\n                        .Select(s => (Guid?)s.Id)\n                        .FirstOrDefaultAsync();\n                }\n\n                // üß∞ Build & freeze a \"button bundle\" (exact labels/positions user sees)\n                // IMPORTANT: store zero-based 'i' and label 't' to match ProcessClickAsync mapping.\n                string? buttonBundleJson = null;\n                if (templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)\n                {\n                    var bundle = templateMeta.ButtonParams\n                        .Take(3)\n                        .Select((b, i) => new\n                        {\n                            i = i,                                  // zero-based index used by provider & mapper\n                            t = (b.Text ?? \"\").Trim(),              // label used for text matching\n                            position = i + 1,                       // redundant (for readability in tools)\n                            text = (b.Text ?? \"\").Trim(),\n                            type = b.Type,\n                            subType = b.SubType\n                        })\n                        .ToList();\n\n                    buttonBundleJson = JsonConvert.SerializeObject(bundle);\n                }\n\n                int successCount = 0, failureCount = 0;\n\n                foreach (var r in campaign.Recipients)\n                {\n                    if (r?.Contact == null) continue;\n\n                    // üîë New run per recipient send (prevents cross-run mixing in journey)\n                    var runId = Guid.NewGuid();\n\n                    // Build provider components (use your existing builders)\n                    var campaignSendLogId = Guid.NewGuid(); // used by tracked URLs\n                    List<object> components = providerKey == \"pinnacle\"\n                        ? BuildTextTemplateComponents_Pinnacle(templateParams, buttons, templateMeta, campaignSendLogId, r.Contact)\n                        : BuildTextTemplateComponents_Meta(templateParams, buttons, templateMeta, campaignSendLogId, r.Contact);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = r.Contact.PhoneNumber,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = languageCode }, // ‚úÖ from provider meta\n                            components\n                        }\n                    };\n\n                    var result = await _messageEngineService.SendPayloadAsync(businessId, payload);\n\n                    // üìå Persist logs WITH flow context, RunId, and frozen button bundle\n                    var logId = Guid.NewGuid();\n                    var log = new MessageLog\n                    {\n                        Id = logId,\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = r.Contact.PhoneNumber,\n                        MessageContent = templateName,                       // NOT NULL\n                        Status = result.Success ? \"Sent\" : \"Failed\",\n                        MessageId = result.MessageId,                        // join key (provider msg id)\n                        ErrorMessage = result.ErrorMessage,                  // single source\n                        RawResponse = result.RawResponse,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = result.Success ? DateTime.UtcNow : (DateTime?)null, // only when sent\n                        Source = \"campaign\",\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId                                        // ‚úÖ journey key\n                    };\n                    _context.MessageLogs.Add(log);\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = campaignSendLogId,\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = r.ContactId,\n                        RecipientId = r.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = log.Id,\n                        MessageId = result.MessageId,                        // join key (provider msg id)\n                        ErrorMessage = result.ErrorMessage,                  // ‚úÖ same source as MessageLog\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = result.Success ? DateTime.UtcNow : (DateTime?)null, // ‚úÖ guard SentAt\n                        CreatedBy = campaign.CreatedBy,\n                        CTAFlowConfigId = campaign.CTAFlowConfigId,\n                        CTAFlowStepId = entryStepId,\n                        ButtonBundleJson = buttonBundleJson,\n                        RunId = runId                                        // ‚úÖ journey key\n                    });\n\n                    if (result.Success) successCount++; else failureCount++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"üì§ Sent to {successCount} contacts. ‚ùå Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error while sending text template campaign\");\n                return ResponseResult.ErrorInfo(\"üö® Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n\n        #region Text Component Builders\n        private string BuildTokenParam(Guid campaignSendLogId, int buttonIndex, string? buttonTitle, string destinationUrlAbsolute)\n        {\n            var full = _urlBuilderService.BuildTrackedButtonUrl(campaignSendLogId, buttonIndex, buttonTitle, destinationUrlAbsolute);\n            var pos = full.LastIndexOf(\"/r/\", StringComparison.OrdinalIgnoreCase);\n            return (pos >= 0) ? full.Substring(pos + 3) : full; // fallback: if not found, return full (rare)\n        }\n\n        //private static string CleanForUri(string s)\n        //{\n        //    if (s is null) return string.Empty;\n        //    var t = s.Trim();\n        //    return new string(Array.FindAll(t.ToCharArray(), c => !char.IsControl(c)));\n        //}\n\n        private static string NormalizeAbsoluteUrlOrThrowForButton(string input, string buttonTitle, int buttonIndex)\n        {\n            if (string.IsNullOrWhiteSpace(input))\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // Trim + strip control chars\n            var cleaned = new string(input.Trim().Where(c => !char.IsControl(c)).ToArray());\n            if (cleaned.Length == 0)\n                throw new ArgumentException($\"Destination is required for button '{buttonTitle}' (index {buttonIndex}).\");\n\n            // ‚úÖ Allow tel: and WhatsApp deep links\n            if (cleaned.StartsWith(\"tel:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"wa:\", StringComparison.OrdinalIgnoreCase) ||\n                cleaned.StartsWith(\"https://wa.me/\", StringComparison.OrdinalIgnoreCase))\n            {\n                return cleaned; // Accept as-is\n            }\n\n            // ‚úÖ Still allow normal web links\n            if (Uri.TryCreate(cleaned, UriKind.Absolute, out var uri) &&\n                (uri.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                 uri.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase)))\n            {\n                return uri.ToString();\n            }\n\n            // ‚ùå Anything else is rejected\n            throw new ArgumentException(\n                $\"Destination must be an absolute http/https/tel/wa URL for button '{buttonTitle}' (index {buttonIndex}). Got: '{input}'\");\n        }\n        private static bool LooksLikeAbsoluteBaseUrlWithPlaceholder(string? templateUrl)\n        {\n            if (string.IsNullOrWhiteSpace(templateUrl)) return false;\n            var s = templateUrl.Trim();\n            if (!s.Contains(\"{{\")) return false;\n            var probe = s.Replace(\"{{1}}\", \"x\").Replace(\"{{0}}\", \"x\");\n            return Uri.TryCreate(probe, UriKind.Absolute, out var abs) &&\n                   (abs.Scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    abs.Scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase));\n        }\n\n        private static object[] BuildBodyParameters(List<string>? templateParams, int requiredCount)\n        {\n            if (requiredCount <= 0) return Array.Empty<object>();\n\n            var src = templateParams ?? new List<string>();\n            // Trim if more were provided than required\n            if (src.Count > requiredCount) src = src.Take(requiredCount).ToList();\n            // Pad with empty strings if fewer were provided\n            while (src.Count < requiredCount) src.Add(string.Empty);\n\n            // Return in the shape Meta/Pinnacle expect\n            return src.Select(p => (object)new { type = \"text\", text = p ?? string.Empty }).ToArray();\n        }\n        private List<object> BuildTextTemplateComponents_Meta(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            var components = new List<object>();\n\n            // BODY: send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons or template has no button params\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // ‚úÖ Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // Meta needs parameters ONLY for dynamic URL buttons\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    // If template expects dynamic URL at this index and your campaign button isn't URL, skip to avoid 131008\n                    continue;\n                }\n\n                var valueRaw = btn.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone substitution in destination\n                var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                    ? \"\"\n                    : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                var encodedPhone = Uri.EscapeDataString(phone);\n\n                var resolvedDestination = valueRaw.Contains(\"{{1}}\")\n                    ? valueRaw.Replace(\"{{1}}\", encodedPhone)\n                    : valueRaw;\n\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn.Title, i);\n\n                // Build both; choose which to send based on template base style\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(\n                    campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(), // \"0\"/\"1\"/\"2\"\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n            }\n\n            return components;\n        }\n        private List<object> BuildTextTemplateComponents_Pinnacle(\n            List<string> templateParams,\n            List<CampaignButton>? buttonList,\n            TemplateMetadataDto templateMeta,\n            Guid campaignSendLogId,\n            Contact contact)\n        {\n            var components = new List<object>();\n\n            // BODY: Pinnacle is strict ‚Üí always send exactly PlaceholderCount\n            if (templateMeta.PlaceholderCount > 0)\n            {\n                var bodyParams = BuildBodyParameters(templateParams, templateMeta.PlaceholderCount);\n                components.Add(new { type = \"body\", parameters = bodyParams });\n            }\n\n            // No buttons to map ‚Üí return body-only\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            // ‚úÖ Ensure index alignment with the template by ordering by Position (then original index)\n            var orderedButtons = buttonList\n                .Select((b, idx) => new { Btn = b, idx })\n                .OrderBy(x => (int?)x.Btn.Position ?? int.MaxValue)\n                .ThenBy(x => x.idx)\n                .Select(x => x.Btn)\n                .ToList();\n\n            var total = Math.Min(3, Math.Min(orderedButtons.Count, templateMeta.ButtonParams.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var meta = templateMeta.ButtonParams[i];\n                var subType = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim();\n\n                // Pinnacle path currently supports dynamic URL params only\n                if (!string.Equals(subType, \"url\", StringComparison.OrdinalIgnoreCase))\n                    continue;\n\n                var isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n                if (!isDynamic)\n                    continue;\n\n                var btn = orderedButtons[i];\n                var btnType = (btn?.Type ?? \"URL\").ToUpperInvariant();\n                if (!string.Equals(btnType, \"URL\", StringComparison.OrdinalIgnoreCase))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template expects a dynamic URL at button index {i}, but campaign button type is '{btn?.Type}'.\");\n                }\n\n                var valueRaw = btn?.Value?.Trim();\n                if (string.IsNullOrWhiteSpace(valueRaw))\n                {\n                    throw new InvalidOperationException(\n                        $\"Template requires a dynamic URL at button index {i}, but campaign button value is empty.\");\n                }\n\n                // Optional phone substitution\n                var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                    ? \"\"\n                    : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                var encodedPhone = Uri.EscapeDataString(phone);\n\n                var resolvedDestination = valueRaw.Contains(\"{{1}}\")\n                    ? valueRaw.Replace(\"{{1}}\", encodedPhone)\n                    : valueRaw;\n\n                // Validate + normalize absolute URL\n                resolvedDestination = NormalizeAbsoluteUrlOrThrowForButton(resolvedDestination, btn!.Title, i);\n\n                // Build both options: full tracked URL vs token param (for absolute-base placeholders)\n                var fullTrackedUrl = _urlBuilderService.BuildTrackedButtonUrl(\n                    campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var templateHasAbsoluteBase = LooksLikeAbsoluteBaseUrlWithPlaceholder(metaParam);\n                var valueToSend = templateHasAbsoluteBase ? tokenParam : fullTrackedUrl;\n\n                // Pinnacle payload shape (aligned with Meta)\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = \"url\",\n                    [\"index\"] = i.ToString(),\n                    [\"parameters\"] = new[] {\n                new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = valueToSend }\n            }\n                });\n            }\n\n            return components;\n        }\n\n        #endregion\n        #region SendImagetemplate\n\n        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                    return ResponseResult.ErrorInfo(\"‚ùå Invalid campaign.\");\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"‚ùå No recipients to send.\");\n\n                var businessId = campaign.BusinessId;\n\n                // üîë Flow entry ‚Üí template name\n                var (_, entryTemplate) = await ResolveFlowEntryAsync(businessId, campaign.CTAFlowConfigId);\n                var templateName = !string.IsNullOrWhiteSpace(entryTemplate)\n                    ? entryTemplate!\n                    : (campaign.TemplateId ?? campaign.MessageTemplate ?? \"\");\n\n                var language = \"en_US\";\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var r in campaign.Recipients)\n                {\n                    var dto = new ImageTemplateMessageDto\n                    {\n                        RecipientNumber = r.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = campaign.ImageUrl,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(b => new CampaignButtonDto\n                            {\n                                ButtonText = b.Title,\n                                ButtonType = b.Type,\n                                TargetUrl = b.Value\n                            }).ToList()\n                    };\n\n                    var res = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n                    var ok = res.ToString().ToLower().Contains(\"messages\");\n\n                    _context.MessageLogs.Add(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = r.ContactId,\n                        RecipientNumber = r.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = ok ? \"Sent\" : \"Failed\",\n                        ErrorMessage = ok ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(res),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow,\n                        Source = \"campaign\"\n                    });\n\n                    if (ok) success++; else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"‚úÖ Sent: {success}, ‚ùå Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"‚ùå Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n\n        private List<object> BuildImageTemplateComponents_Pinnacle(\n                            string? imageUrl,\n                            List<string> templateParams,\n                            List<CampaignButton>? buttonList,\n                            TemplateMetadataDto templateMeta,\n                            Guid campaignSendLogId,\n                            Contact contact)\n        {\n            var components = new List<object>();\n\n            // Header (image header only if template supports it)\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new object[]\n                    {\n                                new { type = \"image\", image = new { link = imageUrl } }\n                    }\n                });\n            }\n\n            // Body\n            if (templateParams != null && templateParams.Count > 0 && templateMeta.PlaceholderCount > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Buttons\n            if (buttonList == null || buttonList.Count == 0 ||\n                templateMeta.ButtonParams == null || templateMeta.ButtonParams.Count == 0)\n                return components;\n\n            var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));\n\n            for (int i = 0; i < total; i++)\n            {\n                var btn = buttonList[i];\n                var meta = templateMeta.ButtonParams[i];\n                var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n                var metaParam = meta.ParameterValue?.Trim() ?? string.Empty;   // expects /r/{{1}} in template\n                var btnValue = btn.Value?.Trim();\n                var isDynamic = metaParam.Contains(\"{{\");\n\n                // Non-dynamic ‚Üí no parameters\n                if (!isDynamic)\n                {\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subtype,\n                        [\"index\"] = i  // Pinnacle accepts numeric\n                    });\n                    continue;\n                }\n\n                if (string.IsNullOrWhiteSpace(btnValue)) continue;\n\n                // Normalize phone and resolve inside destination if needed\n                var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                    ? \"\"\n                    : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                var encodedPhone = Uri.EscapeDataString(phone);\n\n                var resolvedDestination = btnValue.Contains(\"{{1}}\")\n                    ? btnValue.Replace(\"{{1}}\", encodedPhone)\n                    : btnValue;\n\n                // Build full tracked URL then extract token for {{1}}\n                var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                var param = new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = tokenParam };\n\n                components.Add(new Dictionary<string, object>\n                {\n                    [\"type\"] = \"button\",\n                    [\"sub_type\"] = subtype,\n                    [\"index\"] = i,\n                    [\"parameters\"] = new[] { param }\n                });\n            }\n\n            return components;\n        }\n        private List<object> BuildImageTemplateComponents_Meta(\n                            string? imageUrl,\n                            List<string> templateParams,\n                            List<CampaignButton>? buttonList,\n                            TemplateMetadataDto templateMeta,\n                            Guid campaignSendLogId,\n                            Contact contact)\n        {\n            var components = new List<object>();\n\n            // Header (image)\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                new { type = \"image\", image = new { link = imageUrl } }\n            }\n                });\n            }\n\n            // Body\n            if (templateParams != null && templateParams.Count > 0 && templateMeta.PlaceholderCount > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // Buttons (Meta sends params only for dynamic ones)\n            if (buttonList != null && buttonList.Count > 0 &&\n                templateMeta.ButtonParams != null && templateMeta.ButtonParams.Count > 0)\n            {\n                var total = Math.Min(3, Math.Min(buttonList.Count, templateMeta.ButtonParams.Count));\n\n                for (int i = 0; i < total; i++)\n                {\n                    var meta = templateMeta.ButtonParams[i];\n                    var metaParam = meta.ParameterValue?.Trim();\n                    bool isDynamic = !string.IsNullOrWhiteSpace(metaParam) && metaParam.Contains(\"{{\");\n\n                    if (!isDynamic) continue;\n\n                    var btn = buttonList[i];\n                    var value = btn.Value?.Trim();\n                    if (string.IsNullOrWhiteSpace(value)) continue;\n\n                    var subtype = (meta.SubType ?? \"url\").ToLowerInvariant();\n\n                    // Normalize phone and resolve inside destination if needed\n                    var phone = string.IsNullOrWhiteSpace(contact?.PhoneNumber)\n                        ? \"\"\n                        : (contact.PhoneNumber.StartsWith(\"+\") ? contact.PhoneNumber : \"+\" + contact.PhoneNumber);\n                    var encodedPhone = Uri.EscapeDataString(phone);\n\n                    var resolvedDestination = value.Contains(\"{{1}}\")\n                        ? value.Replace(\"{{1}}\", encodedPhone)\n                        : value;\n\n                    // Build full tracked URL then extract token for {{1}}\n                    var tokenParam = BuildTokenParam(campaignSendLogId, i, btn.Title, resolvedDestination);\n\n                    var param = new Dictionary<string, object> { [\"type\"] = \"text\", [\"text\"] = tokenParam };\n\n                    components.Add(new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subtype,       // \"url\"\n                        [\"index\"] = i.ToString(),     // Meta uses \"0\"/\"1\"/\"2\"\n                        [\"parameters\"] = new[] { param }\n                    });\n                }\n            }\n\n            return components;\n        }\n\n\n        private static string NormalizePhoneForTel(string? raw)\n        {\n            if (string.IsNullOrWhiteSpace(raw)) return \"\";\n            var p = raw.Trim();\n            if (!p.StartsWith(\"+\")) p = \"+\" + new string(p.Where(char.IsDigit).ToArray());\n            return p;\n        }\n        #endregion\n\n        #endregion\n\n        public async Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true)\n        {\n            return await _context.CTAFlowConfigs\n                .AsNoTracking()\n                .Where(f => f.BusinessId == businessId && f.IsActive && (!onlyPublished || f.IsPublished))\n                .OrderByDescending(f => f.UpdatedAt)\n                .Select(f => new FlowListItemDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n    }\n\n\n}\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRecipientService.cs",
      "sha256": "a2bb5bdb9f8a87dc2436bac017a79dc02ec48bdc1fd425cb6c701807234d4dd3",
      "language": "csharp",
      "size": 729,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRecipientService\n    {\n        Task<CampaignRecipientDto> GetByIdAsync(Guid id);\n        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);\n\n        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);\n        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);\n        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);\n\n        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignService.cs",
      "sha256": "27a1625658b4fc646689618fbece2ae4a0d373cbcfa833b9acb82ff5ac718ef4",
      "language": "csharp",
      "size": 2241,
      "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignService\n    {\n        /// üÜï Create a new campaign with recipients\n        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);\n\n        /// ‚úèÔ∏è Update an existing draft campaign\n        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);\n\n        /// üóëÔ∏è Soft-delete a draft campaign\n        Task<bool> DeleteCampaignAsync(Guid id);\n\n        /// üìã Get all campaigns for the business\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);\n\n        /// üìÑ Get paginated campaigns\n        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);\n        /// üöÄ Trigger campaign send flow (template message to all recipients)\n        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);\n        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);\n        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);\n        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);\n        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);\n\n        Task<List<FlowListItemDto>> GetAvailableFlowsAsync(Guid businessId, bool onlyPublished = true);\n\n    }\n}\n"
    }
  ]
}
