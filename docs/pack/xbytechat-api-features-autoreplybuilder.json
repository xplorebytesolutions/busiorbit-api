{
  "name": "xbytechat-api/Features/AutoReplyBuilder",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyController.cs",
      "sha256": "c575c41a8f3145df1332211adef4017099c86609c2981442039fcfbd0823a6de",
      "language": "csharp",
      "size": 2591,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyController : ControllerBase\n    {\n        private readonly IAutoReplyService _service;\n\n        public AutoReplyController(IAutoReplyService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> CreateRule([FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var result = await _service.CreateRuleAsync(businessId, dto);\n            return Ok(result);\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllRules()\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rules = await _service.GetAllRulesAsync(businessId);\n            return Ok(rules);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetRuleById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rule = await _service.GetRuleByIdAsync(id, businessId);\n            return rule == null ? NotFound() : Ok(rule);\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateRule(Guid id, [FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            dto.Id = id;\n            var success = await _service.UpdateRuleAsync(businessId, dto);\n            return success ? NoContent() : NotFound();\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteRule(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var success = await _service.DeleteRuleAsync(id, businessId);\n            return success ? NoContent() : NotFound();\n        }\n\n        // Optional ‚Äî for debugging match logic (not exposed in prod)\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchByKeyword([FromQuery] string message)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var matchedRule = await _service.MatchRuleByKeywordAsync(businessId, message);\n            return matchedRule == null ? NotFound(\"No match found.\") : Ok(matchedRule);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyFlowsController.cs",
      "sha256": "442d35032e1265a4ba687db6033f7cd70d21c92e30f63d3122e43e50540bb763",
      "language": "csharp",
      "size": 3075,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyFlowsController : ControllerBase\n    {\n        private readonly IAutoReplyFlowService _service;\n\n        public AutoReplyFlowsController(IAutoReplyFlowService service)\n        {\n            _service = service;\n        }\n\n        // [HttpPost(\"save\")]\n        //public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        //{\n        //    var id = await _service.SaveFlowAsync(dto);\n        //    return Ok(new { id });\n        //}\n        [HttpPost(\"save\")]\n        public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        {\n            Guid businessId;\n            try { businessId = User.GetBusinessId(); }\n            catch (UnauthorizedAccessException) { return Unauthorized(\"Missing or invalid business ID\"); }\n\n            var id = await _service.SaveFlowAsync(dto, businessId);\n            return Ok(new { id });\n        }\n\n        [HttpGet(\"business/{businessId}\")]\n        public async Task<IActionResult> GetFlowsByBusiness(Guid businessId)\n        {\n            var flows = await _service.GetFlowsByBusinessIdAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var flow = await _service.GetFlowByIdAsync(id, businessId);\n            return flow == null ? NotFound() : Ok(flow);\n        }\n        [HttpGet(\"business/{businessId}/count\")]\n        public async Task<IActionResult> GetFlowCount(Guid businessId)\n        {\n            var count = await _service.GetFlowCountForBusinessAsync(businessId);\n            return Ok(count);\n        }\n        [HttpPut(\"{id}/rename\")]\n        public async Task<IActionResult> RenameFlow(Guid id, [FromBody] RenameFlowDto dto)\n        {\n            var result = await _service.RenameFlowAsync(id, dto.NewName);\n            if (!result) return NotFound();\n            return Ok();\n        }\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ‚úÖ Clean and secure\n            }\n            catch (UnauthorizedAccessException)\n            {\n                return Unauthorized(\"Missing or invalid business ID\");\n            }\n\n            var success = await _service.DeleteFlowAsync(id, businessId);\n            if (!success)\n                return NotFound(\"Flow not found or not owned by your business\");\n\n            return Ok(new { message = \"Flow deleted successfully\" });\n        }\n\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyRuntimeController.cs",
      "sha256": "a8f103874213b2129c6d59932b03582a9f21206d073f756ca97bfe08e0015e85",
      "language": "csharp",
      "size": 3135,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/auto-reply-runtime\")]\n    [Authorize]\n    public class AutoReplyRuntimeController : ControllerBase\n    {\n        private readonly IAutoReplyRuntimeService _runtimeService;\n        private readonly ILogger<AutoReplyRuntimeController> _logger;\n\n        public AutoReplyRuntimeController(\n            IAutoReplyRuntimeService runtimeService,\n            ILogger<AutoReplyRuntimeController> logger)\n        {\n            _runtimeService = runtimeService;\n            _logger = logger;\n        }\n\n        // üîÅ Runtime button reply based on keyword (used in message click)\n        [HttpPost(\"button-click\")]\n        public async Task<IActionResult> HandleButtonClick([FromBody] AutoReplyButtonClickDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n\n            _logger.LogInformation(\"üîò Button clicked: BusinessId={BusinessId}, Phone={Phone}, Button={ButtonText}, RefMsg={RefMessageId}\",\n                businessId, dto.Phone, dto.ButtonText, dto.RefMessageId?.ToString() ?? \"null\");\n\n            await _runtimeService.TryRunAutoReplyFlowByButtonAsync(\n                businessId,\n                dto.Phone,\n                dto.ButtonText,\n                dto.RefMessageId\n            );\n\n            return Ok(new { success = true });\n        }\n\n        // üß™ Manual test (canvas-based flow trigger)\n        [HttpPost(\"flow-by-button\")]\n        public async Task<IActionResult> TriggerFlowByButton([FromBody] AutoReplyButtonClickDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Phone) || string.IsNullOrWhiteSpace(dto.ButtonText))\n                return BadRequest(\"Phone and ButtonText are required.\");\n\n            try\n            {\n                _logger.LogInformation(\"üöÄ Triggering flow from button: FlowId={FlowId}, BusinessId={BusinessId}, ContactId={ContactId}, Phone={Phone}, ButtonText={ButtonText}\",\n                    dto.FlowId, dto.BusinessId, dto.ContactId, dto.Phone, dto.ButtonText);\n\n                await _runtimeService.RunFlowFromButtonAsync(\n                    dto.FlowId,\n                    dto.BusinessId,\n                    dto.ContactId,\n                    dto.Phone,\n                    dto.ButtonText.Trim()\n                );\n\n                return Ok(new\n                {\n                    success = true,\n                    flowId = dto.FlowId,\n                    contactId = dto.ContactId,\n                    triggeredAt = DateTime.UtcNow\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to trigger flow from button click: FlowId={FlowId}, Phone={Phone}, Button={ButtonText}\",\n                    dto.FlowId, dto.Phone, dto.ButtonText);\n\n                return StatusCode(500, \"Internal server error\");\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/TemplatesController.cs",
      "sha256": "555d0e0c3deaa65e82290ddcf55e06bb4fa67bbcf43e5b9d56ea5109f7c236b8",
      "language": "csharp",
      "size": 995,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateMessages.DTOs;\n\nnamespace xbytechat.api.Features.TemplateMessages.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TemplatesController : ControllerBase\n    {\n        private static readonly List<TemplateDto> MockTemplates = new()\n        {\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Welcome Template\",\n                Placeholders = 2\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Offer Reminder\",\n                Placeholders = 1\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Follow Up\",\n                Placeholders = 3\n            }\n        };\n\n        [HttpGet]\n        public ActionResult<List<TemplateDto>> GetAll()\n        {\n            return Ok(MockTemplates);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyButtonClickDto.cs",
      "sha256": "c33e345f9a02ff4d627ba42ba92505f5819a034035b07bde678784a244b9d6ac",
      "language": "csharp",
      "size": 412,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyButtonClickDto\n    {\n        public Guid FlowId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string Phone { get; set; } = string.Empty;\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? RefMessageId { get; set; }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyLogDto.cs",
      "sha256": "4674e27873c9ca6a52ab8c85ac1fb97864c6a1e653138b78096a19b3b230124e",
      "language": "csharp",
      "size": 596,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerType { get; set; } = \"rule\"; // or \"flow\"\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyContent { get; set; } = string.Empty;\n\n        public DateTime TriggeredAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        public Guid? MessageLogId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyRuleDto.cs",
      "sha256": "47945e41d0ce9fc41bf7949aea8b58a0caf3bb5083fae0bc6d4815ea846d23ab",
      "language": "csharp",
      "size": 783,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    /// <summary>\n    /// DTO used to create or retrieve AutoReplyRule.\n    /// </summary>\n    public class AutoReplyRuleDto\n    {\n        public Guid? Id { get; set; } // Nullable to allow re-use for Create and Update\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyMessage { get; set; } = string.Empty;\n        public string? MediaUrl { get; set; } // Optional media\n        public int Priority { get; set; } = 0; // Lower = higher priority\n        public bool IsActive { get; set; } = true;\n\n        // Audit Fields (optional for now, useful for admin UI)\n        public DateTime? CreatedAt { get; set; }\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ButtonChoiceNodeConfig.cs",
      "sha256": "a573ed18c3b3cce438f3f126b958408f9c6245ac01be98c3db1d0c4a92adbb18",
      "language": "csharp",
      "size": 577,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ButtonChoiceNodeConfig\n    {\n        public string PromptText { get; set; } = \"Please choose an option:\";\n\n        public List<ButtonOption> Options { get; set; } = new();\n    }\n\n    public class ButtonOption\n    {\n        public string Label { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n\n        // Optional metadata to control button behavior\n        public string? NextStepHint { get; set; } // Can guide user or be used for logging\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ConditionNodeConfig.cs",
      "sha256": "836736c40f25f700d3a84836ee147930568713f5f623bcdc1569b42ff5b4432e",
      "language": "csharp",
      "size": 306,
      "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ConditionNodeConfig\n    {\n    \n        public string InputKey { get; set; } = \"buttonText\";\n\n        public Dictionary<string, string> PathMap { get; set; } = new();\n       \n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/DecisionNodeConfig.cs",
      "sha256": "5575668b5865a5bb2847165208e60278c44386e8f710abb968606e22bb52fe70",
      "language": "csharp",
      "size": 418,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class DecisionNodeConfig\n    {\n        public string ConditionType { get; set; } = \"keyword\"; // or \"tag\", \"time\", \"plan\", etc.\n        public string Parameter { get; set; } = string.Empty;   // e.g. \"yes\", \"vip\", \"evening\"\n        public string SourceChannel { get; set; } = \"whatsapp\"; // Optional for multi-channel control\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormInputNodeConfig.cs",
      "sha256": "34b1ef9a54bc19dbb2163a80371edaf8d5bf75420e9924e90e82762fa4831216",
      "language": "csharp",
      "size": 596,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormInputNodeConfig\n    {\n        public string QuestionText { get; set; } = \"Please enter your response:\";\n\n        public string FieldKey { get; set; } = \"customer_name\";\n        // Used for storing user response under a label\n\n        public string? ValidationRegex { get; set; }\n        // Optional, e.g., @\"^[0-9]{10}$\" for phone numbers\n\n        public string? PlaceholderHint { get; set; }\n        // e.g., \"Full Name\", \"10-digit Phone\"\n\n        public bool IsRequired { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormNodeConfig.cs",
      "sha256": "f839475742eb0fc23ab0c6e58e1f23a0583e4b649301ac588feb0808dd1c243d",
      "language": "csharp",
      "size": 818,
      "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormNodeConfig\n    {\n        public string Title { get; set; } = \"Please fill out this form\";\n\n        public List<FormFieldConfig> Fields { get; set; } = new();\n\n        public bool SaveToContact { get; set; } = true; // Whether to update contact info\n\n        public string? SubmitMessage { get; set; } = \"Thanks for submitting!\";\n    }\n\n    public class FormFieldConfig\n    {\n        public string Key { get; set; } = string.Empty;      // contactName, email, phone\n        public string Label { get; set; } = string.Empty;    // \"Your Name\"\n        public string Type { get; set; } = \"text\";           // text, number, email, etc.\n        public bool Required { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ForwardToAgentNodeConfig.cs",
      "sha256": "486eab52256f3ee2bfea5f06ada3bf8fade4f055f1012e4a1291ac0e61c9f35c",
      "language": "csharp",
      "size": 268,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ForwardToAgentNodeConfig\n    {\n        public string? NoteToAgent { get; set; } // Optional instruction for agent\n        public bool MarkAsUrgent { get; set; } = false;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeIconMap.cs",
      "sha256": "e56ce9b9bdedf03682aaa6c56815fb85dd510ecd2ec1e4c82f53c0fa5c8f9401",
      "language": "csharp",
      "size": 591,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeIconMap\n    {\n        public static readonly Dictionary<string, string> IconMap = new()\n        {\n            { NodeTypeEnum.Message, \"üó®Ô∏è\" },\n            { NodeTypeEnum.Template, \"üìÑ\" },\n            { NodeTypeEnum.Tag, \"üè∑Ô∏è\" },\n            { NodeTypeEnum.Wait, \"‚è±Ô∏è\" },\n            { NodeTypeEnum.ButtonChoice, \"üîò\" },\n            { NodeTypeEnum.Branch, \"üåø\" },\n            { NodeTypeEnum.AgentHandoff, \"üë®‚Äçüíº\" },\n            { NodeTypeEnum.End, \"‚õî\" }\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeTypeEnum.cs",
      "sha256": "d21739b3b7651f2a026a4e412de76d45fe215ae50907b0c7ee025bee0c1ed189",
      "language": "csharp",
      "size": 572,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeTypeEnum\n    {\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Tag = \"tag\";\n        public const string Wait = \"wait\";\n        public const string ButtonChoice = \"button_choice\";\n        public const string Branch = \"branch\";\n        public const string End = \"end\"; // Optional: Used for flow exit\n        public const string AgentHandoff = \"agent_handoff\"; // Optional: Transfer to human\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/RenameFlowDto.cs",
      "sha256": "c2ad4577f121df77190a9463e0eb6528c20054bd0901e7bc9a355aedfb53031c",
      "language": "csharp",
      "size": 146,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class RenameFlowDto\n    {\n        public string NewName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/SaveFlowDto.cs",
      "sha256": "b4b9d49533bad3114236c255a28ecc08bc82a01f1141b981146f320c76cc39f4",
      "language": "csharp",
      "size": 2315,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n{\n    public class SaveFlowDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; }\n        public string? TriggerKeyword { get; set; }\n        public List<NodeDto> Nodes { get; set; } = new();\n        public List<EdgeDto> Edges { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n\n        public string? IndustryTag { get; set; }     // e.g. \"restaurant\", \"clinic\", etc.\n        public string? UseCase { get; set; }         // e.g. \"Order Flow\", \"Appointment Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag for prebuilt templates\n\n    }\n\n    public class NodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public AutoPositionDto Position { get; set; } = new();\n        public NodeDataDto Data { get; set; } = new();\n    }\n\n    public class AutoPositionDto\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n    public class NodeDataDto\n    {\n        public string Label { get; set; } = string.Empty;\n        public object Config { get; set; } = new { };\n    }\n\n    public class EdgeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Source { get; set; } = string.Empty;\n        public string Target { get; set; } = string.Empty;\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string SourceHandle { get; set; } = string.Empty;\n        public string TargetHandle { get; set; } = string.Empty;\n    }\n}\n\n\n//using System;\n\n//namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n//{\n//    public class SaveFlowDto\n//    {\n//        public Guid Id { get; set; }\n//        public Guid BusinessId { get; set; }\n//        public string Name { get; set; } = string.Empty;\n//        public List<Dictionary<string, object>> Nodes { get; set; }\n\n//        public List<Dictionary<string, object>> Edges { get; set; }\n//        public DateTime CreatedAt { get; set; }\n//        public string? TriggerKeyword { get; set; }\n\n//    }\n//}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/TemplateDto.cs",
      "sha256": "42ae32842447bb89f8178a8bae3c490d1fe646b526c27cbe72571e23536f7116",
      "language": "csharp",
      "size": 240,
      "content": "namespace xbytechat.api.Features.TemplateMessages.DTOs\n{\n    public class TemplateDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public int Placeholders { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/AutoReplyEdgeDto.cs",
      "sha256": "5cbac1daff177794f7ae69aabf6b323f279f0b7132dc060e462a91226849f868",
      "language": "csharp",
      "size": 264,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class AutoReplyEdgeDto\n    {\n        public string Id { get; set; }\n        public string SourceNodeId { get; set; }\n        public string TargetNodeId { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/MessageConfig.cs",
      "sha256": "6e7673134b9b3fabb432529dd4b510007ff1d934f016b3a2d831a4503d01c2c7",
      "language": "csharp",
      "size": 201,
      "content": "// MessageConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/RuntimeConfigs.cs",
      "sha256": "280793d810ae7ce0f016f2671b3627cd52a4029b6ea574d0fee20e0c0e11e5ae",
      "language": "csharp",
      "size": 125,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class RuntimeConfigs\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TagNodeConfig.cs",
      "sha256": "d9fade9fca5845b7cb33279a01288a4dd94a90aaaed58d384a778209656b5ead",
      "language": "csharp",
      "size": 197,
      "content": "// TagConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TemplateConfig.cs",
      "sha256": "5c7ea8f78b131705f6bccf1ced0e21a754dadf67bbd6420696995f565c07767a",
      "language": "csharp",
      "size": 682,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TemplateConfig\n    {\n        public string TemplateName { get; set; } = string.Empty;\n        public List<string> Placeholders { get; set; } = new();\n        public string? Language { get; set; } = \"en_US\";\n        public string? ImageUrl { get; set; }\n        public List<TemplateButtonDto>? MultiButtons { get; set; } = new();\n    }\n\n    public class TemplateButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"url\"; // or \"quick_reply\"\n        public string TargetUrl { get; set; } = string.Empty;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/WaitConfig.cs",
      "sha256": "afe336952d0d4959422bbbc499884b286291888fcbd64dd068f26013160261c6",
      "language": "csharp",
      "size": 179,
      "content": "// WaitConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/Enum/NodeTypes.cs",
      "sha256": "94b210bd5bbbbce823c3a1beb8172eddf708305bfbb8b897d1e3c7ef10097b36",
      "language": "csharp",
      "size": 538,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.Enum\n{\n    public class NodeTypes\n    {\n        public const string Start = \"start\";\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Wait = \"wait\";\n        public const string Tag = \"tag\";\n        public const string Agent = \"agent\";\n        public const string Condition = \"condition\"; // Coming soon\n        public const string Form = \"form\";           // For ‚ÄúAsk Name‚Äù, ‚ÄúAsk Email‚Äù\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlow.cs",
      "sha256": "2825905f983da1290a44badeda57c8ff26c8920d7fa13e7ebd85dd0da2e0aaca",
      "language": "csharp",
      "size": 1021,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Models\n{\n    public class AutoReplyFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        public string NodesJson { get; set; } = string.Empty;\n\n        [Required]\n        public string EdgesJson { get; set; } = string.Empty;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? TriggerKeyword { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public string? IndustryTag { get; set; }    // e.g., \"restaurant\", \"clinic\", \"education\"\n        public string? UseCase { get; set; }        // e.g., \"Order Flow\", \"Booking Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag to indicate system-provided template\n        public string? Keyword { get; set; }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowEdge.cs",
      "sha256": "7996bdb8fa1917943e90dad9ad4225984a34b6342eb153028849b30ca63abd7f",
      "language": "csharp",
      "size": 763,
      "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowEdge\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n    \n        public string? SourceHandle { get; set; }\n        public string? TargetHandle { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowNode.cs",
      "sha256": "88a50d45fe3b72f6c3bc0593104b7ee549180c842628cb3d9048c5227a025871",
      "language": "csharp",
      "size": 1013,
      "content": "using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowNode\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        // üîÑ Use a constrained string or enum (recommended for future)\n        [Required]\n        public string NodeType { get; set; } = string.Empty;\n\n        public string Label { get; set; } = string.Empty;\n\n        public string? NodeName { get; set; } // üÜï Optional internal label for debugging\n\n        [Required]\n        public string ConfigJson { get; set; } = string.Empty;\n\n        public Position Position { get; set; } = new();\n\n        public int Order { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyLog.cs",
      "sha256": "d2949264f0ac5b81395d2dee6578df20759d95d300da30d5f0f9003e0ed1c5eb",
      "language": "csharp",
      "size": 915,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    [Table(\"AutoReplyLogs\")]\n    public class AutoReplyLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty; // e.g., \"hi\", \"price\"\n        public string TriggerType { get; set; } = string.Empty;     // \"flow\" or \"rule\"\n\n        public string ReplyContent { get; set; } = string.Empty;    // Plaintext summary of what was sent\n        public string? FlowName { get; set; }                       // Nullable if rule-based\n\n        public Guid? MessageLogId { get; set; }                     // Optional link to MessageLog\n        public DateTime TriggeredAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyRule.cs",
      "sha256": "c3049863f7add2dfd09dd962dbdbc904585fa5db4e12ac189193077bfee08a78",
      "language": "csharp",
      "size": 1137,
      "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyRule\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty;\n\n        public string ReplyMessage { get; set; } = string.Empty;\n\n        public string? MediaUrl { get; set; }\n\n        public int Priority { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        // ‚úÖ NEW: Link to the flow\n        public Guid? FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow? Flow { get; set; }\n\n        public string? IndustryTag { get; set; } // e.g., \"restaurant\", \"clinic\", \"real_estate\"\n        public string? SourceChannel { get; set; } // e.g., \"whatsapp\", \"instagram\"\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowExecutionContext.cs",
      "sha256": "0d3e6415c151099db94a6f0f6dc8f695fd31492808dc09079919950efedf0776",
      "language": "csharp",
      "size": 494,
      "content": "using xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowExecutionContext\n    {\n        public AutoReplyFlow Flow { get; set; } = null!;\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = null!;\n        public string SourceChannel { get; set; } = \"whatsapp\";\n        public string IndustryTag { get; set; } = \"\";\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowNode.cs",
      "sha256": "8991ad6277d58a2785f6a93fd8b8ca815af4ce80351d38f30aaf47890909471f",
      "language": "csharp",
      "size": 318,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowNode\n    {\n        public string Id { get; set; }\n        public string Type { get; set; }\n        public Position Position { get; set; }\n        public Dictionary<string, object> Data { get; set; }  // This should capture config\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowRunResult.cs",
      "sha256": "67982580319a635214c13b2ec05cc279d9afc21fdeb1224248a8060036e27f5c",
      "language": "csharp",
      "size": 463,
      "content": "// File: Features/AutoReplyBuilder/Models/FlowRunResult.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    /// <summary>\n    /// Encapsulates the result of running a visual flow, including agent handoff status.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n\n        public Guid? HandoffNodeId { get; set; }\n\n        public string? ContextJson { get; set; }\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Models/Position.cs",
      "sha256": "0c352c43f4dfcebdc462622ca0acdcd8c1eaafa07a91a70804793d8c76724201",
      "language": "csharp",
      "size": 176,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class Position\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyFlowRepository.cs",
      "sha256": "d919b1d695c3c29ccc653b806d4884197b3d52fb9eb5f86c0f32f893eb198671",
      "language": "csharp",
      "size": 4350,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\npublic class AutoReplyFlowRepository : IAutoReplyFlowRepository\n{\n    private readonly AppDbContext _context;\n    private readonly ILogger<AutoReplyFlowRepository> _logger;\n\n    public AutoReplyFlowRepository(AppDbContext context, ILogger<AutoReplyFlowRepository> logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    public async Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow)\n    {\n        _context.AutoReplyFlows.Add(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return flow;\n    }\n\n    public async Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges)\n    {\n        _context.AutoReplyFlowNodes.AddRange(nodes);\n        _context.AutoReplyFlowEdges.AddRange(edges);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n    }\n\n    public async Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId)\n            .OrderByDescending(f => f.CreatedAt)\n            .ToListAsync();\n    }\n\n    public async Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n    }\n\n    public async Task<int> GetFlowCountAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows.CountAsync(f => f.BusinessId == businessId);\n    }\n\n    public async Task<bool> RenameFlowAsync(Guid id, string newName)\n    {\n        var flow = await _context.AutoReplyFlows.FindAsync(id);\n        if (flow == null) return false;\n\n        flow.Name = newName;\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n\n    public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n    {\n        var flow = await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == id && f.BusinessId == businessId);\n\n        if (flow == null) return false;\n\n        _context.AutoReplyFlows.Remove(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"‚ùå Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n    public async Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n    public async Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId && f.IsActive && f.TriggerKeyword == keyword)\n            .OrderByDescending(f => f.CreatedAt)\n            .FirstOrDefaultAsync();\n    }\n    public async Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyLogRepository.cs",
      "sha256": "4a8777aecfb95fef141063dfa3475992a3848fdd582209819e66ab552d045f71",
      "language": "csharp",
      "size": 1569,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Models;\nusing xbytechat.api.Shared;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyLogRepository : IAutoReplyLogRepository\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyLogRepository> _logger;\n\n        public AutoReplyLogRepository(AppDbContext context, ILogger<AutoReplyLogRepository> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task SaveAsync(AutoReplyLogDto dto)\n        {\n            try\n            {\n                var log = new AutoReplyLog\n                {\n                    Id = dto.Id,\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    TriggerKeyword = dto.TriggerKeyword,\n                    TriggerType = dto.TriggerType,\n                    ReplyContent = dto.ReplyContent,\n                    TriggeredAt = dto.TriggeredAt,\n                    FlowName = dto.FlowName,\n                    MessageLogId = dto.MessageLogId\n                };\n\n                _context.AutoReplyLogs.Add(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to save AutoReplyLog\");\n                throw;\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyRepository.cs",
      "sha256": "6339294423a06a5ebeacfa42db916a0e6fcac770f4082cb3db53569c2dd80483",
      "language": "csharp",
      "size": 4077,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyRepository : IAutoReplyRepository\n    {\n        private readonly AppDbContext _dbContext;\n\n        public AutoReplyRepository(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task<AutoReplyRule> AddAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Add(rule);\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n        public async Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .ToListAsync();\n        }\n\n        public async Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.Id == ruleId && r.BusinessId == businessId);\n        }\n\n        public async Task<bool> UpdateAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Update(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<bool> DeleteAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await GetByIdAsync(ruleId, businessId);\n            if (rule == null) return false;\n\n            _dbContext.AutoReplyRules.Remove(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .FirstOrDefaultAsync(r => incomingMessage.Contains(r.TriggerKeyword));\n        }\n\n        public async Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == keyword.ToLower());\n\n            if (rule == null) return false;\n\n            rule.FlowId = flowId;\n            rule.FlowName = flowName ?? \"\";\n            rule.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            // Ensure keyword is normalized\n            var normalizedKeyword = keyword.ToLower().Trim();\n\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == normalizedKeyword);\n\n            if (rule != null)\n            {\n                // Update existing rule\n                rule.FlowId = flowId;\n                rule.FlowName = flowName ?? \"\";\n                rule.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // Create new rule\n                rule = new AutoReplyRule\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    TriggerKeyword = normalizedKeyword,\n                    FlowId = flowId,\n                    FlowName = flowName ?? \"\",\n                    CreatedAt = DateTime.UtcNow,\n                    IsActive = true,\n                    Priority = 1,\n                    ReplyMessage = \"\" // Fallback (optional)\n                };\n\n                _dbContext.AutoReplyRules.Add(rule);\n            }\n\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/FlowRepository.cs",
      "sha256": "215b4fc5005e126adf33375390d0ac254a146dbdae11aa8c98eb52aa9054551b",
      "language": "csharp",
      "size": 111,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class FlowRepository\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyFlowRepository.cs",
      "sha256": "f78ae431c2892c49cc0844c2f19e5df301598c964326722b3ca52aec7e9ba61d",
      "language": "csharp",
      "size": 1161,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories\n{\n    public interface IAutoReplyFlowRepository\n    {\n        Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow);\n        Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n        Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<int> GetFlowCountAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges);\n        Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId);\n        Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword);\n        Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyLogRepository.cs",
      "sha256": "49f1ecf8c4ab7bb6a0122d7d98e22eb4cb6e2b4b522c99c3963ca64d57889264",
      "language": "csharp",
      "size": 255,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyLogRepository\n    {\n        Task SaveAsync(AutoReplyLogDto logDto);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyRepository.cs",
      "sha256": "136fdda2ad552eadc942d50774dc0ba7cf0796c507e703b6aa20f4fd64fd40d5",
      "language": "csharp",
      "size": 939,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyRepository\n    {\n        Task<AutoReplyRule> AddAsync(AutoReplyRule rule);\n        Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateAsync(AutoReplyRule rule);\n        Task<bool> DeleteAsync(Guid ruleId, Guid businessId);\n\n        // Runtime keyword match logic\n        Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage);\n        Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n        Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IFlowRepository.cs",
      "sha256": "dc4b9a1195add53536172098cfd18c52a19a3a5c767ba81f25e2bceb2a483e14",
      "language": "csharp",
      "size": 112,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class IFlowRepository\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyFlowService.cs",
      "sha256": "60a2f344bc7993fa13dd56c9514c142e4a3bb6100c4e6f48056178d09d8d71b4",
      "language": "csharp",
      "size": 24746,
      "content": "using Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Numerics;\nusing System.Text.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public class AutoReplyFlowService : IAutoReplyFlowService\n    {\n        private readonly IAutoReplyFlowRepository _flowRepository;\n        private readonly ILogger<AutoReplyFlowService> _logger;\n        private readonly IMessageEngineService _messageService;\n        private readonly ITagService _tagService;\n        private readonly IAutoReplyRepository _autoReplyRepository;\n        public AutoReplyFlowService(IAutoReplyFlowRepository flowrepository, ILogger<AutoReplyFlowService> logger,\n            IMessageEngineService messageService, ITagService tagService, IAutoReplyRepository autoReplyRepository)\n        {\n            _flowRepository = flowrepository;\n            _logger = logger;\n            _messageService = messageService;\n            _tagService = tagService;\n            _autoReplyRepository = autoReplyRepository;\n        }\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name,\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ‚úÖ Save parsed nodes\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n        //    var nodes = dto.Nodes as List<Dictionary<string, object>>;\n\n        //    if (nodes != null)\n        //    {\n        //        foreach (var nodeDict in nodes)\n        //        {\n        //            if (!nodeDict.ContainsKey(\"type\") || !nodeDict.ContainsKey(\"data\") || !nodeDict.ContainsKey(\"position\"))\n        //            {\n        //                _logger.LogWarning(\"‚ö†Ô∏è Skipped malformed node during flow save: {Node}\", JsonConvert.SerializeObject(nodeDict));\n        //                continue;\n        //            }\n\n        //            var data = nodeDict[\"data\"] as Dictionary<string, object>;\n        //            var positionDict = nodeDict[\"position\"] as Dictionary<string, object>;\n\n        //            var position = new Position\n        //            {\n        //                X = Convert.ToDouble(positionDict?[\"x\"] ?? 0),\n        //                Y = Convert.ToDouble(positionDict?[\"y\"] ?? 0)\n        //            };\n\n        //            parsedNodes.Add(new AutoReplyFlowNode\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                NodeType = nodeDict[\"type\"]?.ToString() ?? \"\",\n        //                Label = data?[\"label\"]?.ToString() ?? \"\",\n        //                ConfigJson = JsonConvert.SerializeObject(data?[\"config\"] ?? new { }),\n        //                Position = position // ‚úÖ strongly typed\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"üß© Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ‚úÖ Save parsed edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n        //    var edges = dto.Edges as List<Dictionary<string, object>>;\n\n        //    if (edges != null)\n        //    {\n        //        foreach (var edgeDict in edges)\n        //        {\n        //            if (!edgeDict.ContainsKey(\"source\") || !edgeDict.ContainsKey(\"target\"))\n        //            {\n        //                _logger.LogWarning(\"‚ö†Ô∏è Skipped malformed edge during flow save: {Edge}\", JsonConvert.SerializeObject(edgeDict));\n        //                continue;\n        //            }\n\n        //            parsedEdges.Add(new AutoReplyFlowEdge\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                SourceNodeId = edgeDict[\"source\"]?.ToString() ?? \"\",\n        //                TargetNodeId = edgeDict[\"target\"]?.ToString() ?? \"\",\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"üîó Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n\n        //    _logger.LogInformation(\"‚úÖ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    // ‚úÖ Step 1: Save main flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ‚úÖ Step 2: Build ID map and parse nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id))\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Skipped node with missing Id\");\n        //            continue;\n        //        }\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = saved.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = JsonConvert.SerializeObject(n.Data?.Config ?? new { }),\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üß© Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ‚úÖ Step 3: Map Source/TargetNodeId from external ‚Üí internal GUIDs\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId))\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Edge skipped: SourceNodeId '{Source}' not found\", e.SourceNodeId);\n        //            continue;\n        //        }\n\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId))\n        //        {\n        //            _logger.LogWarning(\"‚ö†Ô∏è Edge skipped: TargetNodeId '{Target}' not found\", e.TargetNodeId);\n        //            continue;\n        //        }\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = saved.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üîó Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ‚úÖ Final Save\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"‚úÖ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto?.BusinessId, dto?.TriggerKeyword);\n\n        //    if (dto == null) throw new ArgumentNullException(nameof(dto));\n        //    if (dto.BusinessId == Guid.Empty) throw new ArgumentException(\"BusinessId is required.\");\n        //    if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n        //    if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n        //    dto.Edges ??= new List<EdgeDto>();\n\n        //    // ‚úÖ Step 1: Save Flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var savedFlow = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", savedFlow.Id);\n\n        //    // ‚úÖ Step 2: Parse Nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id)) continue;\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        string configJson = n.Data?.Config is JsonElement elem\n        //            ? elem.GetRawText()\n        //            : JsonConvert.SerializeObject(n.Data?.Config ?? new { });\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = savedFlow.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = configJson,\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üß© Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ‚úÖ Step 3: Parse Edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId)) continue;\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId)) continue;\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = savedFlow.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            SourceHandle = e.SourceHandle, \n        //            TargetHandle = e.TargetHandle, \n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"üîó Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ‚úÖ Step 4: Save Nodes + Edges\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"‚úÖ Node + edge persistence complete for flow {FlowId}\", savedFlow.Id);\n\n        //    // ‚úÖ Step 5: Link to Rule via Repository\n        //    var keyword = dto.TriggerKeyword.Trim().ToLower();\n        //    var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(dto.BusinessId, keyword, savedFlow.Id, dto.Name);\n\n        //    _logger.LogInformation(\"üîÅ Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n        //    return savedFlow.Id;\n        //}\n        public async Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId)\n        {\n            _logger.LogInformation(\"üîÑ Starting flow save for business {BusinessId} with keyword '{Keyword}'\", businessId, dto?.TriggerKeyword);\n\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n            if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n            dto.Edges ??= new List<EdgeDto>();\n\n            // ‚úÖ Step 1: Save Flow\n            var flow = new AutoReplyFlow\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId, // << Use parameter, not from dto!\n                Name = dto.Name?.Trim() ?? \"\",\n                NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n                EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n                TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var savedFlow = await _flowRepository.SaveAsync(flow);\n            _logger.LogInformation(\"‚úÖ Flow saved: {FlowId}\", savedFlow.Id);\n\n            // ... rest of code unchanged ...\n\n            // ‚úÖ Step 5: Link to Rule via Repository\n            var keyword = dto.TriggerKeyword.Trim().ToLower();\n            var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(\n                businessId, // << Use parameter, not from dto!\n                keyword, savedFlow.Id, dto.Name);\n\n            _logger.LogInformation(\"üîÅ Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n            return savedFlow.Id;\n        }\n\n        public async Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId)\n        {\n            _logger.LogInformation(\"üì• Fetching auto-reply flows for business {BusinessId}\", businessId);\n\n            var flows = await _flowRepository.GetAllByBusinessIdAsync(businessId);\n\n            var results = flows.Select(f => new SaveFlowDto\n            {\n                Id = f.Id,\n                BusinessId = f.BusinessId,\n                Name = f.Name,\n                Nodes = string.IsNullOrEmpty(f.NodesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<NodeDto>>(f.NodesJson),\n\n                Edges = string.IsNullOrEmpty(f.EdgesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<EdgeDto>>(f.EdgesJson),\n\n\n                CreatedAt = f.CreatedAt\n            }).ToList();\n\n            _logger.LogInformation(\"üì§ Returned {Count} auto-reply flows for business {BusinessId}\", results.Count, businessId);\n\n            return results;\n        }\n\n        public async Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _flowRepository.GetByIdAsync(flowId, businessId);\n            if (flow == null)\n            {\n                _logger.LogWarning(\"‚ùå No flow found for FlowId {FlowId} and BusinessId {BusinessId}\", flowId, businessId);\n                return null;\n            }\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flowId);\n\n            var mappedNodes = nodes.Select(n => new Dictionary<string, object>\n            {\n                [\"id\"] = n.Id,\n                [\"type\"] = n.NodeType,\n                [\"position\"] = new Dictionary<string, object>\n                {\n                    [\"x\"] = n.Position?.X ?? 0,\n                    [\"y\"] = n.Position?.Y ?? 0\n                },\n                [\"data\"] = new Dictionary<string, object>\n                {\n                    [\"label\"] = n.Label,\n                    [\"config\"] = string.IsNullOrEmpty(n.ConfigJson)\n                        ? null\n                        : JsonConvert.DeserializeObject<object>(n.ConfigJson)\n                }\n            }).ToList();\n\n            var mappedEdges = edges.Select(e => new Dictionary<string, object>\n            {\n                [\"id\"] = e.Id,\n                [\"source\"] = e.SourceNodeId,\n                [\"target\"] = e.TargetNodeId\n            }).ToList();\n\n            _logger.LogInformation(\"üì§ Returning flow {FlowId} with {NodeCount} nodes and {EdgeCount} edges\", flow.Id, mappedNodes.Count, mappedEdges.Count);\n\n            return new SaveFlowDto\n            {\n                Id = flow.Id,\n                BusinessId = flow.BusinessId,\n                Name = flow.Name,\n                Nodes = JsonConvert.DeserializeObject<List<NodeDto>>(JsonConvert.SerializeObject(mappedNodes)),\n                Edges = JsonConvert.DeserializeObject<List<EdgeDto>>(JsonConvert.SerializeObject(mappedEdges)),\n                CreatedAt = flow.CreatedAt\n            };\n\n        }\n\n        public async Task<int> GetFlowCountForBusinessAsync(Guid businessId)\n        {\n            return await _flowRepository.GetFlowCountAsync(businessId);\n        }\n\n        public async Task<bool> RenameFlowAsync(Guid id, string newName)\n        {\n            return await _flowRepository.RenameFlowAsync(id, newName);\n        }\n        public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            return await _flowRepository.DeleteFlowAsync(id, businessId);\n        }\n        public async Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhone)\n        {\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, triggerKeyword);\n            if (flow == null) return;\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flow.Id);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flow.Id);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id, n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            var current = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            while (current != null)\n            {\n                switch (current.NodeType)\n                {\n                    case \"message\":\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(current.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = customerPhone,\n                            TextContent = msgCfg.Text\n                        });\n\n                        break;\n                    case \"template\":\n                        var tempCfg = JsonConvert.DeserializeObject<TemplateConfig>(current.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = customerPhone,\n                            TemplateName = tempCfg.TemplateName,\n                            TemplateParameters = tempCfg.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(current.ConfigJson);\n                        await Task.Delay(TimeSpan.FromSeconds(waitCfg.Seconds));\n                        break;\n\n                    case \"tag\":\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(current.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId, customerPhone, tagCfg.Tags);\n                        break;\n                }\n\n                var nextEdge = edgeMap.ContainsKey(current.Id.ToString())\n                     ? edgeMap[current.Id.ToString()].FirstOrDefault()\n                        : null;\n\n                if (nextEdge == null) break;\n\n                current = nodeMap.ContainsKey(Guid.Parse(nextEdge.TargetNodeId))\n                    ? nodeMap[Guid.Parse(nextEdge.TargetNodeId)]\n                    : null;\n\n            }\n        }\n        public async Task TriggerAutoReplyAsync(Guid businessId, string incomingText, string phone)\n        {\n            // Step 1: Find flow matching keyword\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, incomingText.ToLower());\n            if (flow == null) return;\n\n            // Step 2: Load flow nodes + edges\n            var nodes = await _flowRepository.GetStructuredNodesAsync(flow.Id);\n            var edges = await _flowRepository.GetStructuredEdgesAsync(flow.Id);\n\n            // Step 3: Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null) return;\n\n            var visited = new HashSet<string>();\n            var currentNodeId = startNode.Id.ToString();\n\n            while (!string.IsNullOrEmpty(currentNodeId) && !visited.Contains(currentNodeId))\n            {\n                visited.Add(currentNodeId);\n\n                var currentNode = nodes.FirstOrDefault(n => n.Id.ToString() == currentNodeId);\n                if (currentNode == null) break;\n\n                // Step 4: Handle current node\n                switch (currentNode.NodeType)\n                {\n                    case \"message\":\n                        var config = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = phone,\n                            TextContent = config.Text\n                        });\n                        break;\n\n                    case \"template\":\n                        var tpl = JsonConvert.DeserializeObject<TemplateConfig>(currentNode.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = phone,\n                            TemplateName = tpl.TemplateName,\n                            TemplateParameters = tpl.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitConfig = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitConfig.Seconds * 1000); // Can replace with async scheduling later\n                        break;\n\n                    case \"tag\":\n                        var tagConfig = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId,phone, tagConfig.Tags);\n                        break;\n\n                }\n\n                // Step 5: Find next node\n                var nextEdge = edges.FirstOrDefault(e => e.SourceNodeId == currentNodeId);\n                currentNodeId = nextEdge?.TargetNodeId;\n            }\n        }\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyRuntimeService.cs",
      "sha256": "f9e35069e50bbf3a57f0c5134ae99c32f604d94885000c29aacb8ddab0d00d94",
      "language": "csharp",
      "size": 26209,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Services;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.CRM.Interfaces;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyRuntimeService : IAutoReplyRuntimeService\n    {\n        private readonly IAutoReplyRepository _autoReplyRepo;\n        private readonly IAutoReplyFlowRepository _flowRepo;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyRuntimeService> _logger;\n        private readonly IContactService _contactService;\n        private readonly ITagService _tagService;\n        private readonly ITemplateMessageSender _templateSender;\n        public AutoReplyRuntimeService(\n            IAutoReplyRepository autoReplyRepo,\n            IAutoReplyFlowRepository flowRepo,\n            IMessageEngineService messageEngine,\n            AppDbContext context,\n            ILogger<AutoReplyRuntimeService> logger, IContactService contactService, ITagService tagService, ITemplateMessageSender templateSender)\n        {\n            _autoReplyRepo = autoReplyRepo;\n            _flowRepo = flowRepo;\n            _messageEngine = messageEngine;\n            _context = context;\n            _logger = logger;\n            _contactService = contactService;\n            _tagService = tagService;\n            _templateSender = templateSender;\n        }\n\n        public async Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string keyword, Guid contactId, string phone)\n        {\n            _logger.LogInformation(\"üîç Auto-reply trigger: '{Keyword}' from {Phone}\", keyword, phone);\n\n            try\n            {\n                // 1Ô∏è‚É£ Try matching a flow by keyword\n                var flow = await _flowRepo.FindFlowByKeywordAsync(businessId, keyword);\n                if (flow != null)\n                {\n                    _logger.LogInformation(\"‚úÖ Flow matched: {FlowName}\", flow.Name);\n                    await RunFlowAsync(flow.Id, businessId, contactId, phone, keyword, flow.Name);\n                    return true;\n                }\n\n                // 2Ô∏è‚É£ Fallback: Try matching auto-reply rule\n                var rule = await _autoReplyRepo.MatchByKeywordAsync(businessId, keyword);\n                if (rule != null)\n                {\n                    _logger.LogInformation(\"üîÅ Fallback auto-reply triggered: {Rule}\", rule.TriggerKeyword);\n\n                    var messageDto = new TextMessageSendDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = phone,\n                        TextContent = rule.ReplyMessage\n                    };\n\n                    var result = await _messageEngine.SendTextDirectAsync(messageDto);\n\n                    await LogAutoReplyAsync(\n                        businessId,\n                        contactId,\n                        keyword,\n                        \"fallback\",\n                        rule.ReplyMessage,\n                        null,\n                        result?.LogId\n                    );\n\n                    return true;\n                }\n\n                _logger.LogWarning(\"‚ùå No flow or fallback rule matched for: {Keyword}\", keyword);\n                return false;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Error in TryRunAutoReplyFlowAsync\");\n                return false;\n            }\n        }\n\n        public async Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeDict = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeLookup = edges.GroupBy(e => e.SourceNodeId)\n                                  .ToDictionary(g => g.Key, g => g.ToList());\n\n            var currentNodeId = nodes.FirstOrDefault(n => n.NodeType == \"start\")?.Id.ToString();\n            if (string.IsNullOrEmpty(currentNodeId)) return;\n\n            // ‚úÖ Ensure contact exists\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n\n            while (!string.IsNullOrEmpty(currentNodeId))\n            {\n                if (!nodeDict.TryGetValue(currentNodeId, out var node)) break;\n\n                _logger.LogInformation(\"‚öôÔ∏è Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"start\":\n                            _logger.LogInformation(\"üö¶ Start node reached: {NodeId}\", node.Id);\n\n                            // üõë If Start node contains buttons, STOP and wait for user interaction\n                            try\n                            {\n                                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(node.ConfigJson ?? \"{}\");\n                                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                                {\n                                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                                    if (buttons.Count > 0)\n                                    {\n                                        _logger.LogInformation(\"üõë Start node has buttons ‚Äì waiting for user interaction. Halting flow.\");\n                                        return;\n                                    }\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse start node config for button detection.\");\n                            }\n                            break;\n\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n\n                          \n                                try\n                                {\n                                    var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                    if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                    {\n                                        _logger.LogInformation(\"üõë Template node has buttons ‚Äì halting flow for user click.\");\n                                        return;\n                                    }\n                                }\n\n                            \n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            try\n                            {\n                                var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                                var delayMs = (waitCfg?.Seconds ?? 1) * 1000;\n                                _logger.LogInformation(\"‚è≥ Wait node delay: {Seconds}s\", waitCfg?.Seconds ?? 1);\n                                await Task.Delay(delayMs);\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse wait config for node {NodeId}\", node.Id);\n                            }\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"‚ùå Error while executing node {NodeId} of type {NodeType}\", node.Id, node.NodeType);\n                }\n\n                currentNodeId = edgeLookup.TryGetValue(currentNodeId, out var next)\n                    ? next.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n        private bool TryNodeHasButtons(string? configJson)\n        {\n            if (string.IsNullOrWhiteSpace(configJson)) return false;\n\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(configJson);\n                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                {\n                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                    return buttons.Count > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ö†Ô∏è Failed to parse buttons from template config\");\n            }\n\n            return false;\n        }\n\n        private async Task LogAutoReplyAsync(Guid businessId, Guid contactId, string keyword, string type, string replyText, string? flowName, Guid? messageLogId)\n        {\n            var log = new AutoReplyLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contactId,\n                TriggerKeyword = keyword,\n                TriggerType = type,\n                ReplyContent = replyText,\n                FlowName = flowName,\n                MessageLogId = messageLogId,\n                TriggeredAt = DateTime.UtcNow\n            };\n\n            _context.AutoReplyLogs.Add(log);\n            await _context.SaveChangesAsync();\n        }\n\n\n        //    private async Task ExecuteTemplateNodeAsync(\n        //    AutoReplyFlowNode node,\n        //    Guid businessId,\n        //    Guid contactId,\n        //    string phone,\n        //    string keyword,\n        //    string? flowName)\n        //    {\n        //        _logger.LogInformation(\"üß† Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n        //        TemplateConfig? tmpl;\n        //        try\n        //        {\n        //            tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            _logger.LogError(ex, \"‚ùå Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n        //            return;\n        //        }\n\n        //        if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n        //        {\n        //            _logger.LogWarning(\"‚ùå Template node config is missing or invalid.\");\n        //            return;\n        //        }\n\n        //        var contact = await _context.Contacts\n        //            .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"‚ùå Contact not found for AutoReply.\");\n        //            return;\n        //        }\n\n        //        //var buttons = tmpl.MultiButtons?.Select(b => new CampaignButton\n        //        //{\n        //        //    Title = b.ButtonText,\n        //        //    Type = b.ButtonType,\n        //        //    Value = b.TargetUrl\n        //        //}).ToList();\n        //        var buttons = tmpl.MultiButtons?\n        //.Where(b => !string.IsNullOrWhiteSpace(b.ButtonText)) // ‚úÖ Avoid empty\n        //.Select((b, idx) => new\n        //{\n        //    type = \"button\",\n        //    sub_type = b.ButtonType.ToLowerInvariant(), // must be 'quick_reply' or 'url'\n        //    index = idx.ToString(),\n        //    parameters = new List<object>\n        //    {\n        //        new {\n        //            type = \"text\",\n        //            text = b.ButtonText\n        //        }\n        //    }\n        //}).ToList();\n\n        //        var response = await _templateSender.SendTemplateMessageToContactAsync(\n        //            businessId: businessId,\n        //            contact: contact,\n        //            templateName: tmpl.TemplateName,\n        //            templateParams: tmpl.Placeholders ?? new List<string>(),\n        //            imageUrl: tmpl.ImageUrl,\n        //            buttons: buttons,\n        //            source: \"auto_reply\",\n        //            refMessageId: null\n        //        );\n\n        //        await LogAutoReplyAsync(\n        //            businessId,\n        //            contactId,\n        //            keyword,\n        //            \"flow\",\n        //            $\"Template: {tmpl.TemplateName}\",\n        //            flowName,\n        //            response.LogId\n        //        );\n        //    }\n\n\n        private async Task ExecuteTemplateNodeAsync(\n    AutoReplyFlowNode node,\n    Guid businessId,\n    Guid contactId,\n    string phone,\n    string keyword,\n    string? flowName)\n        {\n            _logger.LogInformation(\"üß† Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n            TemplateConfig? tmpl;\n            try\n            {\n                tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n            {\n                _logger.LogWarning(\"‚ùå Template node config is missing or invalid.\");\n                return;\n            }\n\n            var contact = await _context.Contacts\n                .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n            if (contact == null)\n            {\n                _logger.LogWarning(\"‚ùå Contact not found for AutoReply.\");\n                return;\n            }\n\n            var buttons = tmpl.MultiButtons?\n                .Where(b => !string.IsNullOrWhiteSpace(b.ButtonText))\n                .Select(b => new CampaignButton\n                {\n                    Title = b.ButtonText,\n                    Type = b.ButtonType,\n                    Value = b.TargetUrl\n                })\n                .ToList();\n\n            var response = await _templateSender.SendTemplateMessageToContactAsync(\n                businessId: businessId,\n                contact: contact,\n                templateName: tmpl.TemplateName,\n                templateParams: tmpl.Placeholders ?? new List<string>(),\n                imageUrl: tmpl.ImageUrl,\n                buttons: buttons,\n                source: \"auto_reply\",\n                refMessageId: null\n            );\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                $\"Template: {tmpl.TemplateName}\",\n                flowName,\n                response.LogId\n            );\n        }\n\n        private async Task ExecuteMessageNodeAsync( AutoReplyFlowNode node, Guid businessId, Guid contactId,string phone, string keyword, string? flowName)\n        {\n            _logger.LogInformation(\"üß† Raw config JSON for message node: {Json}\", node.ConfigJson);\n\n            MessageConfig? config = null;\n            try\n            {\n                config = JsonConvert.DeserializeObject<MessageConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to parse config for message node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (config == null || string.IsNullOrWhiteSpace(config.Text))\n            {\n                _logger.LogWarning(\"‚ö†Ô∏è Message node config missing or empty.\");\n                return;\n            }\n\n            var result = await _messageEngine.SendTextDirectAsync(new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                RecipientNumber = phone,\n                TextContent = config.Text\n            });\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                config.Text,\n                flowName,\n                result?.LogId\n            );\n        }\n        private async Task ExecuteTagNodeAsync(Guid businessId, Guid contactId, AutoReplyFlowNode node)\n        {\n            if (node == null || string.IsNullOrWhiteSpace(node.ConfigJson))\n                return;\n\n            try\n            {\n                var config = System.Text.Json.JsonSerializer.Deserialize<TagNodeConfig>(node.ConfigJson);\n\n                if (config?.Tags != null && config.Tags.Any())\n                {\n                    // ‚úÖ Load contact from DB\n                    var contact = await _context.Contacts.FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n                    if (contact == null)\n                    {\n                        _logger.LogWarning(\"‚ö†Ô∏è TagNode: Contact not found for {ContactId}\", contactId);\n                        return;\n                    }\n\n                    await _tagService.AssignTagsAsync(businessId, contact.PhoneNumber, config.Tags);\n                    _logger.LogInformation(\"‚úÖ TagNode: Tags [{Tags}] assigned to contact {Phone}\", string.Join(\", \", config.Tags), contact.PhoneNumber);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå TagNode: Failed to execute for contact {ContactId}\", contactId);\n            }\n        }\n\n        public async Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null)\n        {\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n            if (contact == null)\n            {\n                _logger.LogWarning(\"‚ùå Contact not found or could not be created for phone: {Phone}\", phone);\n                return;\n            }\n\n            _logger.LogInformation(\"üì© Button clicked: '{ButtonText}' by {Phone}\", buttonText, phone);\n\n            var flows = await _flowRepo.GetAllByBusinessIdAsync(businessId);\n            if (flows == null || !flows.Any())\n            {\n                _logger.LogInformation(\"üì≠ No flows found for business {BusinessId}\", businessId);\n                return;\n            }\n\n            foreach (var flow in flows)\n            {\n                var nodes = await _flowRepo.GetNodesByFlowIdAsync(flow.Id);\n                var edges = await _flowRepo.GetEdgesByFlowIdAsync(flow.Id);\n\n                var matchedStartNode = nodes\n                    .Where(n => n.NodeType == \"start\")\n                    .FirstOrDefault(n =>\n                    {\n                        try\n                        {\n                            var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(n.ConfigJson ?? \"{}\");\n\n                            if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                            {\n                                var keywordArray = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n\n                                return keywordArray.Any(k =>\n                                    string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                            }\n\n                            return false;\n                        }\n                        catch\n                        {\n                            return false;\n                        }\n                    });\n\n                if (matchedStartNode != null)\n                {\n                    _logger.LogInformation(\"‚úÖ Matched flow {FlowName} by button '{ButtonText}'\", flow.Name, buttonText);\n                   // await RunFlowAsync(flow.Id, businessId, contact.Id, phone, buttonText, flow.Name);\n                  await RunFlowFromButtonAsync(flow.Id, businessId, contact.Id, phone, buttonText);\n                    return;\n                }\n            }\n\n            _logger.LogInformation(\"‚ùå No flow matched for button: {ButtonText}\", buttonText);\n        }\n        public async Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            // üü¢ 1. Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null)\n            {\n                _logger.LogWarning(\"‚ùå No start node found in flow {FlowId}\", flowId);\n                return;\n            }\n\n            // üîç 2. Find button index from triggerKeywords\n            int matchedIndex = -1;\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(startNode.ConfigJson ?? \"{}\");\n\n                if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                {\n                    var keywordList = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n                    matchedIndex = keywordList.FindIndex(k =>\n                        string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"‚ùå Failed to parse Start node config\");\n                return;\n            }\n\n            if (matchedIndex < 0)\n            {\n                _logger.LogWarning(\"‚ùå No trigger match for buttonText '{Button}'\", buttonText);\n                return;\n            }\n\n            // ‚úÖ 3. Lookup edge from StartNode using SourceHandle = button-{index}\n            var nextNodeId = edgeMap.TryGetValue(startNode.Id.ToString(), out var list)\n                ? list.FirstOrDefault(e => e.SourceHandle == $\"button-{matchedIndex}\")?.TargetNodeId\n                : null;\n\n            if (string.IsNullOrEmpty(nextNodeId))\n            {\n                _logger.LogWarning(\"‚ùå No outgoing edge found for button index {Index}\", matchedIndex);\n                return;\n            }\n\n            var visited = new HashSet<string>();\n\n            while (!string.IsNullOrEmpty(nextNodeId) && !visited.Contains(nextNodeId))\n            {\n                visited.Add(nextNodeId);\n\n                if (!nodeMap.TryGetValue(nextNodeId, out var node))\n                    break;\n\n                _logger.LogInformation(\"‚öôÔ∏è Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, buttonText, null);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, buttonText, null);\n\n                            // ‚úÖ Check buttons and halt if any button exists\n                            try\n                            {\n                                var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                {\n                                    _logger.LogInformation(\"üõë Template node has buttons ‚Äì halting flow for user click.\");\n                                    return;\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"‚ùå Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                            await Task.Delay((waitCfg?.Seconds ?? 1) * 1000);\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"‚ùå Error executing node {NodeId}\", node.Id);\n                }\n\n                nextNodeId = edgeMap.TryGetValue(nextNodeId, out var nextList)\n                    ? nextList.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n    }\n}\n\n\n\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyService.cs",
      "sha256": "df6edf428cebc4dc2d292bef7eb4e47f8cdcbe402b71d79ff9e6ae300502cf70",
      "language": "csharp",
      "size": 3226,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyService : IAutoReplyService\n    {\n        private readonly IAutoReplyRepository _repository;\n\n        public AutoReplyService(IAutoReplyRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var model = new AutoReplyRule\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                TriggerKeyword = dto.TriggerKeyword,\n                ReplyMessage = dto.ReplyMessage,\n                MediaUrl = dto.MediaUrl,\n                Priority = dto.Priority,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var saved = await _repository.AddAsync(model);\n\n            return ToDto(saved);\n        }\n\n        public async Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId)\n        {\n            var rules = await _repository.GetAllByBusinessIdAsync(businessId);\n            return rules.Select(ToDto);\n        }\n\n        public async Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await _repository.GetByIdAsync(ruleId, businessId);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        public async Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var existing = await _repository.GetByIdAsync(dto.Id!.Value, businessId);\n            if (existing == null) return false;\n\n            existing.TriggerKeyword = dto.TriggerKeyword;\n            existing.ReplyMessage = dto.ReplyMessage;\n            existing.MediaUrl = dto.MediaUrl;\n            existing.Priority = dto.Priority;\n            existing.IsActive = dto.IsActive;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            return await _repository.UpdateAsync(existing);\n        }\n\n        public async Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId)\n        {\n            return await _repository.DeleteAsync(ruleId, businessId);\n        }\n\n        public async Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            var rule = await _repository.MatchByKeywordAsync(businessId, incomingMessage);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        private AutoReplyRuleDto ToDto(AutoReplyRule rule)\n        {\n            return new AutoReplyRuleDto\n            {\n                Id = rule.Id,\n                TriggerKeyword = rule.TriggerKeyword,\n                ReplyMessage = rule.ReplyMessage,\n                MediaUrl = rule.MediaUrl,\n                Priority = rule.Priority,\n                IsActive = rule.IsActive,\n                CreatedAt = rule.CreatedAt,\n                UpdatedAt = rule.UpdatedAt\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/FlowRunner.cs",
      "sha256": "d8c0004b19eb4964915bcf51a0ecdadf6dc89cfe50220970befa0fe58a5d4307",
      "language": "csharp",
      "size": 103,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class FlowRunner\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyFlowService.cs",
      "sha256": "dfa67a436f77fb405478dfff58668d94aaed35d2e14d087bffd2fa6eb5b0112b",
      "language": "csharp",
      "size": 721,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public interface IAutoReplyFlowService\n    {\n        Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId);\n        Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId);\n        Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n        Task<int> GetFlowCountForBusinessAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhoneNumber);\n\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyRuntimeService.cs",
      "sha256": "444b22549b3c870a3e8cef485bfbf318b5c82a42194255e035be52e27262d4e9",
      "language": "csharp",
      "size": 646,
      "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyRuntimeService\n    {\n        Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string messageText, Guid contactId, string phoneNumber);\n        Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName);\n        Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null);\n        Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText);\n\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyService.cs",
      "sha256": "b2816300ae56acd5368c993c2bccc75ff481290ca8379e745ac361e2d27e620f",
      "language": "csharp",
      "size": 763,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyService\n    {\n        Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId);\n        Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId);\n\n        // For runtime matching\n        Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IFlowRunner.cs",
      "sha256": "11438f4864857ba65f652f4ed62baf47119c77fcd6933106db70602675dce48b",
      "language": "csharp",
      "size": 104,
      "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class IFlowRunner\n    {\n    }\n}\n"
    }
  ]
}
