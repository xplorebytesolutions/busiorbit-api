{
  "name": "xbytechat-api/xbytechat-api",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/AuditLoggingHelper.cs",
      "sha256": "c5b311d19b5c69b6b78d7ca335b984e43795ef1e140c2239dea1ed7190e188c6",
      "language": "csharp",
      "size": 1690,
      "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\n\npublic static class AuditLoggingHelper\n{\n    private static IServiceProvider? _serviceProvider;\n\n    public static void Configure(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public static void Log(\n        string actionType,\n        string? entityName,\n        string? entityId,\n        string? description,\n        IHttpContextAccessor contextAccessor)\n    {\n        if (_serviceProvider == null) return;\n\n        var scope = _serviceProvider.CreateScope();\n        var auditLogService = scope.ServiceProvider.GetRequiredService<IAuditLogService>();\n\n        var httpContext = contextAccessor.HttpContext;\n        var user = httpContext?.User;\n        var claims = user?.Identities?.FirstOrDefault();\n\n        var log = new AuditLog\n        {\n            Id = Guid.NewGuid(),\n            ActionType = actionType,\n            Description = description,\n            BusinessId = TryParseGuid(claims?.FindFirst(\"businessId\")?.Value),\n            PerformedByUserId = TryParseGuid(claims?.FindFirst(\"sub\")?.Value),\n            PerformedByUserName = claims?.FindFirst(\"email\")?.Value,\n            RoleAtTime = claims?.FindFirst(\"role\")?.Value,\n            IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n            UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString(),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        _ = Task.Run(() => auditLogService.SaveLogAsync(log));\n    }\n\n    private static Guid TryParseGuid(string? input) =>\n        Guid.TryParse(input, out var guid) ? guid : Guid.Empty;\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/JwtCookieHelper.cs",
      "sha256": "50ed48ffead96168a429fe26398cbc9b3021ecfebafabcbba8dc8e59f9a12885",
      "language": "csharp",
      "size": 3279,
      "content": "// üìÑ File: Helpers/JwtCookieHelper.cs\nusing Microsoft.AspNetCore.Http;\nusing System;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class JwtCookieHelper\n    {\n        // ‚úÖ Set Access Token (short-lived)\n        public static void SetJwtCookie(HttpContext httpContext, string cookieName, string token, int expiryHours = 12)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"‚ö†Ô∏è Cannot set JWT cookie '{cookieName}' ‚Äî response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, token, new CookieOptions\n            {\n                HttpOnly = true,\n                ///*Secure*/ = isProduction,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddHours(expiryHours)\n            }); ;\n        }\n\n        // ‚úÖ Clear Access Token cookie\n        public static void ClearJwtCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"‚ö†Ô∏è Cannot clear JWT cookie '{cookieName}' ‚Äî response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n\n        // ‚úÖ Set Refresh Token (long-lived)\n        public static void SetRefreshTokenCookie(HttpContext httpContext, string cookieName, string refreshToken, int expiryDays = 30)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"‚ö†Ô∏è Cannot set refresh cookie '{cookieName}' ‚Äî response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, refreshToken, new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = isProduction,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(expiryDays)\n            });\n        }\n\n        // ‚úÖ Clear Refresh Token cookie\n        public static void ClearRefreshTokenCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"‚ö†Ô∏è Cannot clear refresh cookie '{cookieName}' ‚Äî response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/ResponseResult.cs",
      "sha256": "e179ac827eca18c7316cf0dff9d2d9741653f9bde358cbda401ff1e978cd30ec",
      "language": "csharp",
      "size": 1743,
      "content": "namespace xbytechat.api.Helpers\n{\n    /// <summary>\n    /// Represents a standardized response structure for service layer results.\n    /// </summary>\n    public class ResponseResult\n    {\n        public bool Success { get; set; }                  // ‚úÖ Whether operation succeeded\n        public string Message { get; set; }                // ‚úÖ User-friendly message\n        public object? Data { get; set; }                  // Optional payload (if needed)\n\n        // ‚úÖ WhatsApp-specific diagnostics\n        public string? ErrorMessage { get; set; }          // Error from API or exception\n        public string? RawResponse { get; set; }           // Full API raw response\n\n        public string? MessageId { get; set; } // üåê WhatsApp WAMID (Message ID)\n\n        public Guid? LogId { get; set; } // ‚úÖ Unique ID of MessageLog for tracking\n                                         // ‚úÖ Factory method for successful result\n\n        public string? Token { get; set; }\n\n        public string? RefreshToken { get; set; }\n        public static ResponseResult SuccessInfo(string message, object? data = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = true,\n                Message = message,\n                Data = data,\n                RawResponse = raw\n            };\n        }\n\n        // ‚ùå Factory method for error result\n        public static ResponseResult ErrorInfo(string message, string? error = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = false,\n                Message = message,\n                ErrorMessage = error,\n                RawResponse = raw\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/SendResultExtended.cs",
      "sha256": "d70ced23d36d879eb80982f4a2508398175f5a06bc3e524c5c426cfe59635a0a",
      "language": "csharp",
      "size": 252,
      "content": "using xbytechat.api.Helpers;\n\npublic class SendResultExtended : ResponseResult\n{\n   // public string? MessageId { get; set; }         // WAMID from WhatsApp\n    public Guid? MessageLogId { get; set; }        // Our DB log ID (from MessageLogs table)\n}\n"
    },
    {
      "path": "xbytechat-api/xbytechat-api/Helpers/UserContextHelper.cs",
      "sha256": "ebabfd85a8a344a40535bccbbdb67a5241b585ecca9f9688e3eb6201b71fda0d",
      "language": "csharp",
      "size": 1432,
      "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class UserContextHelper\n    {\n        /// <summary>\n        /// Returns the logged-in user's unique ID from JWT.\n        /// </summary>\n        public static Guid GetUserId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"sub\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the business ID (tenant) from JWT claims.\n        /// </summary>\n        public static Guid GetBusinessId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the role of the logged-in user.\n        /// </summary>\n        public static string GetRole(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"role\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns company name for UI display (optional).\n        /// </summary>\n        public static string GetCompanyName(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"companyName\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns plan info if needed for plan-based access control.\n        /// </summary>\n        public static string GetPlan(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"plan\")?.Value ?? \"\";\n        }\n    }\n}\n"
    }
  ]
}
