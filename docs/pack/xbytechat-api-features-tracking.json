{
  "name": "xbytechat-api/Features/Tracking",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
      "sha256": "eff454d0f22519fc547f7489d9205cb738600a0d241003c5f0ac3f38694b517a",
      "language": "csharp",
      "size": 11562,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared.TrackingUtils;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n\n        public TrackingController(ITrackingService tracker)\n        {\n            _tracker = tracker;\n        }\n        #region \"Tracking Logs\"\n        //       [HttpGet(\"redirect\")]\n        //       public async Task<IActionResult> TrackAndRedirect(\n        //                                        [FromQuery] string src,\n        //                                        [FromQuery] Guid id,\n        //                                        [FromQuery] string btn,\n        //                                        [FromQuery] string? to = null,\n        //                                        [FromQuery] string? type = null,\n        //                                        [FromQuery] Guid? msg = null,\n        //                                        [FromQuery] Guid? contact = null,\n        //                                        [FromQuery] string? phone = null,\n        //                                        [FromQuery] string? session = null,\n        //                                        [FromQuery] string? thread = null\n        //)\n        //       {\n        //           var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n        //           var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n        //                        ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n        //           var country = await GeoHelper.GetCountryFromIP(ipAddress);\n        //           var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n        //           var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n        //           if (!Guid.TryParse(businessIdClaim, out var businessId))\n        //               return Unauthorized(\"Invalid business context\");\n\n        //           var dto = new TrackingLogDto\n        //           {\n        //               BusinessId = businessId,// Guid.Empty, // TODO: Replace with actual business lookup if available\n        //               ContactId = contact,\n        //               ContactPhone = phone,\n        //               SourceType = src,\n        //               SourceId = id,\n        //               ButtonText = btn,\n        //               CTAType = type ?? btn,\n        //               MessageId = msg?.ToString(),\n        //               SessionId = session,\n        //               ThreadId = thread,\n        //               ClickedAt = DateTime.UtcNow,\n        //               IPAddress = ipAddress,\n        //               Browser = userAgent,\n        //               DeviceType = deviceType,\n        //               Country = country,\n        //               ClickedVia = \"web\"\n        //           };\n\n        //           await _tracker.LogCTAClickAsync(dto);\n\n        //           if (string.IsNullOrWhiteSpace(to))\n        //               return BadRequest(\"Missing redirect target.\");\n\n        //           var decodedUrl = Uri.UnescapeDataString(to);\n        //           return Redirect(decodedUrl);\n        //       }\n\n        #endregion\n\n        //        [HttpGet(\"redirect\")]\n        //        public async Task<IActionResult> TrackAndRedirect(\n        //            [FromQuery] string src,\n        //            [FromQuery] Guid id,\n        //            [FromQuery] string btn,\n        //            [FromQuery] string? to = null,\n        //            [FromQuery] string? type = null,\n        //            [FromQuery] Guid? msg = null,\n        //            [FromQuery] Guid? contact = null,\n        //            [FromQuery] string? phone = null,\n        //            [FromQuery] string? session = null,\n        //            [FromQuery] string? thread = null\n        //)\n        //        {\n        //            var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n        //            var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n        //                         ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n        //            var country = await GeoHelper.GetCountryFromIP(ipAddress);\n        //            var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n        //            // üîç 1. Attempt to extract businessId from claims\n        //            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n        //            var hasBusinessId = Guid.TryParse(businessIdClaim, out var businessId);\n\n        //            // üß† 2. Create base DTO\n        //            var dto = new TrackingLogDto\n        //            {\n        //                BusinessId = hasBusinessId ? businessId : Guid.Empty, // fallback ‚Äî will enrich later\n        //                ContactId = contact,\n        //                ContactPhone = phone,\n        //                SourceType = src,\n        //                SourceId = id,\n        //                ButtonText = btn,\n        //                CTAType = type ?? btn,\n        //                MessageId = msg?.ToString(),\n        //                SessionId = session,\n        //                ThreadId = thread,\n        //                ClickedAt = DateTime.UtcNow,\n        //                IPAddress = ipAddress,\n        //                Browser = userAgent,\n        //                DeviceType = deviceType,\n        //                Country = country,\n        //                ClickedVia = \"web\"\n        //            };\n\n        //            // üîÅ 3. Fallback enrichment from MessageLog\n        //            if (msg.HasValue)\n        //            {\n        //                var messageLog = await _context.MessageLogs\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(m => m.Id == msg.Value || m.MessageId == msg.ToString());\n\n        //                if (messageLog != null)\n        //                {\n        //                    // üß© Backfill missing fields if needed\n        //                    dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n        //                    dto.ContactId ??= messageLog.ContactId;\n        //                    dto.CampaignId ??= messageLog.CampaignId;\n        //                    dto.MessageLogId ??= messageLog.Id;\n        //                }\n        //            }\n\n        //            // üîÅ 4. Fallback from CampaignSendLog (if SourceType is \"campaign\")\n        //            if (src == \"campaign\" && msg.HasValue && dto.CampaignId == null)\n        //            {\n        //                var sendLog = await _context.CampaignSendLogs\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(c => c.MessageId == msg.ToString());\n\n        //                if (sendLog != null)\n        //                {\n        //                    dto.BusinessId = dto.BusinessId == Guid.Empty ? sendLog.BusinessId : dto.BusinessId;\n        //                    dto.ContactId ??= sendLog.ContactId;\n        //                    dto.CampaignId ??= sendLog.CampaignId;\n        //                    dto.CampaignSendLogId ??= sendLog.Id;\n        //                }\n        //            }\n\n        //            // ‚úÖ 5. Final safety check\n        //            if (dto.BusinessId == Guid.Empty)\n        //            {\n        //                Log.Warning(\"‚ö†Ô∏è TrackingLog DTO missing valid BusinessId. msg={@msg}\", msg);\n        //                return Unauthorized(\"Business context missing or invalid.\");\n        //            }\n\n        //            // üíæ 6. Save to database\n        //            await _tracker.LogCTAClickAsync(dto);\n\n        //            // üåê 7. Redirect to final URL\n        //            if (string.IsNullOrWhiteSpace(to))\n        //                return BadRequest(\"Missing redirect target.\");\n\n        //            var decodedUrl = Uri.UnescapeDataString(to);\n        //            return Redirect(decodedUrl);\n        //        }\n        [HttpGet(\"redirect\")]\n        public async Task<IActionResult> TrackAndRedirect([FromQuery] string src, [FromQuery] Guid id,\n            [FromQuery] string btn, [FromQuery] string? to = null, [FromQuery] string? type = null,\n            [FromQuery] Guid? msg = null, [FromQuery] Guid? contact = null, [FromQuery] string? phone = null,\n            [FromQuery] string? session = null, [FromQuery] string? thread = null)\n        {\n            var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n            var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n                         ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n            var country = await GeoHelper.GetCountryFromIP(ipAddress);\n            var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var hasBusinessId = Guid.TryParse(businessIdClaim, out var businessId);\n\n            var dto = new TrackingLogDto\n            {\n                BusinessId = hasBusinessId ? businessId : Guid.Empty,\n                ContactId = contact,\n                ContactPhone = phone,\n                SourceType = src,\n                SourceId = id,\n                ButtonText = btn,\n                CTAType = type ?? btn,\n                MessageId = msg?.ToString(),\n                SessionId = session,\n                ThreadId = thread,\n                ClickedAt = DateTime.UtcNow,\n                IPAddress = ipAddress,\n                Browser = userAgent,\n                DeviceType = deviceType,\n                Country = country,\n                ClickedVia = \"web\"\n            };\n\n            var result = await _tracker.LogCTAClickWithEnrichmentAsync(dto);\n            if (!result.Success)\n                return Unauthorized(result.Message);\n\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target.\");\n\n            return Redirect(Uri.UnescapeDataString(to));\n        }\n\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n        [HttpGet(\"flow-clicks\")]\n       \n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"‚ùå Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
      "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
      "language": "csharp",
      "size": 1584,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
      "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
      "language": "csharp",
      "size": 453,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
      "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
      "language": "csharp",
      "size": 1798,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // üß© Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // üë§ CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // üîó Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // üîò CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // üì® Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // üß† Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // üì° Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üîñ Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ‚úÖ Add this if not already there\n\n        public string? TemplateName { get; set; } // ‚úÖ Needed for follow-up matcher\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
      "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
      "language": "csharp",
      "size": 2252,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // üß© Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // üë§ CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ‚úÖ NEW\n\n        // üîó Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ‚úÖ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ‚úÖ Optional\n\n        // üîò Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // üì® Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ‚úÖ Optional\n\n        // üß† Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // üïí Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // üîñ Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // üßµ Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ‚úÖ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
      "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
      "language": "csharp",
      "size": 528,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingService.cs",
      "sha256": "90d3f4b3c6a0d5d10d83300d0c3ed58fc81149c2dec145768cfafe2886dccb0b",
      "language": "csharp",
      "size": 9142,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Shared.TrackingUtils;\nusing Serilog;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing AutoMapper;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class TrackingService : ITrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMapper _mapper;\n        public TrackingService(AppDbContext context, IMapper mapper)\n        {\n            _context = context;\n            _mapper = mapper;\n        }\n\n\n        public async Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                // üß† 1. Try enrich from MessageLog (if msg ID provided)\n                if (!string.IsNullOrEmpty(dto.MessageId))\n                {\n                    var messageLog = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m => m.MessageId == dto.MessageId || m.Id.ToString() == dto.MessageId);\n\n                    if (messageLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n                        dto.ContactId ??= messageLog.ContactId;\n                        dto.CampaignId ??= messageLog.CampaignId;\n                        dto.MessageLogId ??= messageLog.Id;\n                    }\n                }\n\n                // üß© 2. Enrich from CampaignSendLog if sourceType = campaign\n                CampaignSendLog? sendLog = null;\n\n                if (dto.SourceType == \"campaign\")\n                {\n                    if (!string.IsNullOrEmpty(dto.MessageId))\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .FirstOrDefaultAsync(c => c.MessageId == dto.MessageId);\n                    }\n\n                    if (sendLog == null && dto.CampaignId != null)\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .Where(c => c.CampaignId == dto.CampaignId)\n                            .OrderByDescending(c => c.CreatedAt)\n                            .FirstOrDefaultAsync();\n                    }\n\n                    if (sendLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty\n                            ? sendLog.Recipient?.BusinessId ?? Guid.Empty\n                            : dto.BusinessId;\n\n                        dto.ContactId ??= sendLog.ContactId;\n                        dto.CampaignId ??= sendLog.CampaignId;\n                        dto.CampaignSendLogId ??= sendLog.Id;\n\n                        // ‚úÖ Update campaign send log click details\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = dto.ClickedAt ?? DateTime.UtcNow;\n                        sendLog.ClickType = dto.ButtonText;\n\n                        await _context.SaveChangesAsync();\n                    }\n                }\n\n                // ‚úÖ 3. Validate business context\n                if (dto.BusinessId == Guid.Empty)\n                {\n                    Log.Warning(\"‚ùå TrackingLog failed: No BusinessId available for click.\");\n                    return ResponseResult.ErrorInfo(\"Business context is missing.\");\n                }\n\n                // üíæ 4. Save tracking log (inline instead of separate method)\n                var trackingLog = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(trackingLog);\n                await _context.SaveChangesAsync();\n\n                // ‚úÖ Return the TrackingLog.Id in the response\n                return ResponseResult.SuccessInfo(\"CTA click tracked successfully.\", trackingLog.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Exception during CTA tracking enrichment\");\n                return ResponseResult.ErrorInfo(\"Exception during tracking: \" + ex.Message);\n            }\n        }\n\n        public async Task LogCTAClickAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                var log = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"‚ùå Failed to log CTA click\");\n            }\n        }\n        public async Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId)\n        {\n            var tracking = await _context.TrackingLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (tracking == null)\n                return null;\n\n            var contact = tracking.ContactId != null\n                ? await _context.Contacts.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.ContactId)\n                : null;\n\n            var campaign = tracking.CampaignId != null\n                ? await _context.Campaigns.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.CampaignId)\n                : null;\n\n            var messageLog = tracking.MessageLogId != null\n                ? await _context.MessageLogs.AsNoTracking().FirstOrDefaultAsync(m => m.Id == tracking.MessageLogId)\n                : null;\n\n            return new TrackingLogDetailsDto\n            {\n                Tracking = _mapper.Map<TrackingLogDto>(tracking),\n                Contact = contact != null ? _mapper.Map<ContactDto>(contact) : null,\n                Campaign = campaign != null ? _mapper.Map<CampaignDto>(campaign) : null,\n                MessageLog = messageLog != null ? _mapper.Map<MessageLogDto>(messageLog) : null\n            };\n        }\n        public async Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId)\n        {\n            return await _context.TrackingLogs\n                .Where(x => x.BusinessId == businessId && x.SourceType == \"cta-flow\")\n                .OrderByDescending(x => x.ClickedAt)\n                .ToListAsync();\n        }\n    }\n}\n"
    }
  ]
}
