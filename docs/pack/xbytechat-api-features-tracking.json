{
  "name": "xbytechat-api/Features/Tracking",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
      "sha256": "2268baa219ea50c48a2af49ee42830c0426f28333713b4caba7833cd10fbc3d6",
      "language": "csharp",
      "size": 6440,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api; // Your using for AppDbContext\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Worker; // Your using for DTOs\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n        private readonly AppDbContext _context;\n        private readonly IContactJourneyService _journeyService;\n        public TrackingController(ITrackingService tracker, AppDbContext context, IContactJourneyService journeyService)\n        {\n            _tracker = tracker;\n            _context = context;\n            _journeyService = journeyService;\n        }\n\n        [HttpGet(\"journeys/{campaignSendLogId}\")]\n        public async Task<IActionResult> GetJourney(Guid campaignSendLogId)\n        {\n            var journeyEvents = await _journeyService.GetJourneyEventsAsync(campaignSendLogId);\n            return Ok(journeyEvents);\n        }\n\n\n        //[HttpGet(\"redirect/{campaignSendLogId}\")]\n        //public async Task<IActionResult> TrackCampaignClick(\n        //    Guid campaignSendLogId,\n        //    [FromQuery] string type,\n        //    [FromQuery] string to)\n        //{\n        //    if (string.IsNullOrWhiteSpace(to))\n        //    {\n        //        return BadRequest(\"Missing redirect target URL.\");\n        //    }\n\n        //    var log = await _context.CampaignSendLogs.FindAsync(campaignSendLogId);\n        //    if (log != null)\n        //    {\n        //        log.IsClicked = true;\n        //        log.ClickedAt = DateTime.UtcNow;\n        //        log.ClickType = type;\n        //        log.IpAddress = HttpContext.Connection.RemoteIpAddress?.ToString();\n        //        await _context.SaveChangesAsync();\n        //    }\n\n        //    return Redirect(to);\n        //}\n\n        [HttpGet(\"redirect/{campaignSendLogId}\")]\n        public async Task<IActionResult> TrackCampaignClick(\n                            Guid campaignSendLogId,\n                            [FromQuery] string type,\n                            [FromQuery] string to,\n                            [FromQuery] int? idx = null,                // optional button index if caller knows it\n                            CancellationToken ct = default)\n        {\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target URL.\");\n\n            // Normalize & validate destination\n            if (!Uri.TryCreate(to, UriKind.Absolute, out var destUri))\n                return BadRequest(\"Destination URL is invalid.\");\n\n            // Derive a clickType when not provided\n            string clickType = string.IsNullOrWhiteSpace(type)\n                ? ClassifyClickType(destUri)\n                : type.Trim().ToLowerInvariant();\n\n            // Load parent CSL (so we can copy RunId etc.)\n            var log = await _context.CampaignSendLogs.FindAsync(new object[] { campaignSendLogId }, ct);\n            if (log != null)\n            {\n                // First-click fast path on the send\n                log.IsClicked = true;\n                log.ClickedAt = DateTime.UtcNow;\n                log.ClickType = clickType;\n                log.IpAddress = HttpContext.Connection.RemoteIpAddress?.ToString();\n\n                // Persist a CampaignClickLog row (ties this click to the same run)\n                var ua = Request.Headers.UserAgent.ToString();\n                await _context.CampaignClickLogs.AddAsync(new CampaignClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignSendLogId = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    ButtonIndex = (short)(idx ?? 0),\n                    ButtonTitle = string.IsNullOrWhiteSpace(type) ? \"link\" : type,\n                    Destination = destUri.ToString(),\n                    ClickedAt = DateTime.UtcNow,\n                    Ip = log.IpAddress ?? \"\",\n                    UserAgent = ua ?? \"\",\n                    ClickType = clickType,\n                    RunId = log.RunId              // ← remove if your schema doesn't have RunId yet\n                }, ct);\n\n                await _context.SaveChangesAsync(ct);\n            }\n\n            // Simple 302 redirect\n            return Redirect(destUri.ToString());\n        }\n\n        // Simple classifier used above\n        private static string ClassifyClickType(Uri u)\n        {\n            if (u == null) return \"web\";\n            var scheme = u.Scheme?.ToLowerInvariant() ?? \"\";\n            if (scheme == \"tel\") return \"call\";\n            if (scheme == \"whatsapp\") return \"whatsapp\";\n            if (scheme is \"http\" or \"https\")\n            {\n                var host = u.Host?.ToLowerInvariant() ?? \"\";\n                if (host.Contains(\"wa.me\") || host.Contains(\"api.whatsapp.com\"))\n                    return \"whatsapp\";\n            }\n            return \"web\";\n        }\n\n        /// <summary>\n        /// Gets detailed information for a specific tracking log entry.\n        /// </summary>\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Retrieves click logs specifically related to automation flows.\n        /// </summary>\n        [HttpGet(\"flow-clicks\")]\n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
      "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
      "language": "csharp",
      "size": 1584,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyEventDto.cs",
      "sha256": "34abc81cfaea73e66ebb64431d3723ede8e2ac5cab0fcd6e8f4a1b2bbfe20320",
      "language": "csharp",
      "size": 727,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyEventDto\n    {\n        public DateTime Timestamp { get; set; }\n        public string Source { get; set; } = \"System\"; // System/User/Provider\n        public string EventType { get; set; } = \"\";    // MessageSent/Delivered/Read/ButtonClicked/FlowStep/FlowSend/Redirect/Error\n        public string Title { get; set; } = \"\";\n        public string Details { get; set; } = \"\";\n        public Guid? StepId { get; set; }\n        public string? StepName { get; set; }\n        public int? ButtonIndex { get; set; }\n        public string? ButtonTitle { get; set; }\n        public string? Url { get; set; }\n        public string? TemplateName { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/JourneyResponseDto.cs",
      "sha256": "0dd5d4a7faf319e281c5c96d6a7164a6e763aba0de03a617e58165196f48dffa",
      "language": "csharp",
      "size": 549,
      "content": "namespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class JourneyResponseDto\n    {\n        public string CampaignType { get; set; } = \"dynamic_url\"; // or \"flow\"\n        public string? FlowName { get; set; }\n        public Guid? FlowId { get; set; }\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = \"\";\n        public List<JourneyEventDto> Events { get; set; } = new();\n        public string? LeftOffAt { get; set; }  // step title or reason\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
      "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
      "language": "csharp",
      "size": 453,
      "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
      "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
      "language": "csharp",
      "size": 1798,
      "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // 🔘 CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // 📡 Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ✅ Add this if not already there\n\n        public string? TemplateName { get; set; } // ✅ Needed for follow-up matcher\n\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
      "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
      "language": "csharp",
      "size": 2252,
      "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ✅ NEW\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ✅ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ✅ Optional\n\n        // 🔘 Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ✅ Optional\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // 🕒 Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // 🧵 Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ✅ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ContactJourneyService.cs",
      "sha256": "e45aedc7431343417385b05cf199aa7a315e9d79105d38de4a604e890a637d45",
      "language": "csharp",
      "size": 13691,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n// Add other necessary using statements for your project\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class ContactJourneyService : IContactJourneyService\n    {\n        private readonly AppDbContext _context;\n\n        public ContactJourneyService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId)\n        {\n            var resp = new JourneyResponseDto();\n            var events = new List<JourneyEventDto>();\n\n            // 0) Load the selected send\n            var sentLog = await _context.CampaignSendLogs\n                .AsNoTracking()\n                .Include(x => x.Campaign)\n                .Include(x => x.Contact)\n                .FirstOrDefaultAsync(x => x.Id == initialCampaignSendLogId);\n\n            if (sentLog == null || sentLog.Campaign == null || sentLog.Contact == null)\n            {\n                resp.Events = events;\n                return resp;\n            }\n\n            resp.CampaignId = sentLog.CampaignId;\n            resp.ContactId = sentLog.ContactId;\n            resp.ContactPhone = sentLog.Contact.PhoneNumber ?? \"\";\n            resp.CampaignType = sentLog.CTAFlowConfigId.HasValue ? \"flow\" : \"dynamic_url\";\n            resp.FlowId = sentLog.CTAFlowConfigId;\n\n            // 1) Establish a \"session window\" for THIS run of the campaign to THIS contact\n            var sessionStart = sentLog.SentAt ?? sentLog.CreatedAt;\n\n            // next send to same contact for same campaign\n            var nextSameCampaignAt = await _context.CampaignSendLogs.AsNoTracking()\n                .Where(x => x.ContactId == sentLog.ContactId &&\n                            x.CampaignId == sentLog.CampaignId &&\n                            x.CreatedAt > sessionStart)\n                .OrderBy(x => x.CreatedAt)\n                .Select(x => (DateTime?)x.CreatedAt)\n                .FirstOrDefaultAsync();\n\n            // next send to same contact for same flow (if this is a flow)\n            DateTime? nextSameFlowAt = null;\n            if (sentLog.CTAFlowConfigId.HasValue)\n            {\n                nextSameFlowAt = await _context.CampaignSendLogs.AsNoTracking()\n                    .Where(x => x.ContactId == sentLog.ContactId &&\n                                x.CTAFlowConfigId == sentLog.CTAFlowConfigId &&\n                                x.CreatedAt > sessionStart)\n                    .OrderBy(x => x.CreatedAt)\n                    .Select(x => (DateTime?)x.CreatedAt)\n                    .FirstOrDefaultAsync();\n            }\n\n            // session end = earliest “next run” OR +24h cap\n            var sessionEnd = new[] { nextSameCampaignAt, nextSameFlowAt }\n                .Where(dt => dt.HasValue)\n                .Select(dt => dt!.Value)\n                .DefaultIfEmpty(sessionStart.AddHours(24))\n                .Min();\n\n            // 2) Initial \"sent\" + statuses from CSL\n            events.Add(new JourneyEventDto\n            {\n                Timestamp = sessionStart,\n                Source = \"System\",\n                EventType = \"MessageSent\",\n                Title = $\"Campaign '{sentLog.Campaign.Name}' sent\",\n                Details = $\"Template '{sentLog.TemplateId}' to {resp.ContactPhone}\",\n                TemplateName = sentLog.TemplateId\n            });\n\n            if (sentLog.DeliveredAt.HasValue && sentLog.DeliveredAt.Value >= sessionStart && sentLog.DeliveredAt.Value < sessionEnd)\n                events.Add(new JourneyEventDto { Timestamp = sentLog.DeliveredAt.Value, Source = \"Provider\", EventType = \"Delivered\", Title = \"Message delivered\", Details = $\"Delivered to {resp.ContactPhone}\", TemplateName = sentLog.TemplateId });\n\n            if (sentLog.ReadAt.HasValue && sentLog.ReadAt.Value >= sessionStart && sentLog.ReadAt.Value < sessionEnd)\n                events.Add(new JourneyEventDto { Timestamp = sentLog.ReadAt.Value, Source = \"Provider\", EventType = \"Read\", Title = \"Message read\", Details = $\"Read by {resp.ContactPhone}\", TemplateName = sentLog.TemplateId });\n\n            // 3) URL clicks for THIS send within the window\n            var urlClicksInitial = await _context.CampaignClickLogs\n                .AsNoTracking()\n                .Where(c => c.CampaignSendLogId == sentLog.Id &&\n                            c.ClickedAt >= sessionStart &&\n                            c.ClickedAt < sessionEnd)\n                .OrderBy(c => c.ClickedAt)\n                .ToListAsync();\n\n            foreach (var c in urlClicksInitial)\n            {\n                events.Add(new JourneyEventDto\n                {\n                    Timestamp = c.ClickedAt,\n                    Source = \"User\",\n                    EventType = \"ButtonClicked\",\n                    Title = $\"Clicked URL Button: '{c.ButtonTitle}'\",\n                    Details = $\"Redirected to {c.Destination}\",\n                    ButtonIndex = c.ButtonIndex,\n                    ButtonTitle = c.ButtonTitle,\n                    Url = c.Destination\n                });\n            }\n\n            // 4) FLOW chain (if any) scoped to THIS session window\n            if (sentLog.CTAFlowConfigId.HasValue)\n            {\n                // Flow label\n                resp.FlowName = await _context.CTAFlowConfigs\n                    .Where(f => f.Id == sentLog.CTAFlowConfigId.Value)\n                    .Select(f => f.FlowName)\n                    .FirstOrDefaultAsync();\n\n                // All flow sends (CSLs) for same contact+flow within the window\n                var flowCslChain = await _context.CampaignSendLogs\n                    .AsNoTracking()\n                    .Where(csl => csl.BusinessId == sentLog.BusinessId &&\n                                  csl.ContactId == sentLog.ContactId &&\n                                  csl.CTAFlowConfigId == sentLog.CTAFlowConfigId &&\n                                  csl.CreatedAt >= sessionStart &&\n                                  csl.CreatedAt < sessionEnd)\n                    .OrderBy(csl => csl.CreatedAt)\n                    .Select(csl => new { csl.Id, csl.MessageLogId, csl.SentAt, csl.CreatedAt, csl.TemplateId, csl.CTAFlowStepId, csl.DeliveredAt, csl.ReadAt })\n                    .ToListAsync();\n\n                var chainCslIds = flowCslChain.Select(x => x.Id).ToList();\n                var chainMsgLogIds = flowCslChain.Where(x => x.MessageLogId.HasValue).Select(x => x.MessageLogId!.Value).ToList();\n\n                // FlowExecutionLogs joined by CSL id\n                var execByCsl = await _context.FlowExecutionLogs\n                    .AsNoTracking()\n                    .Where(f => f.CampaignSendLogId.HasValue &&\n                                chainCslIds.Contains(f.CampaignSendLogId.Value) &&\n                                f.ExecutedAt >= sessionStart &&\n                                f.ExecutedAt < sessionEnd)\n                    .OrderBy(f => f.ExecutedAt)\n                    .ToListAsync();\n\n                // Or by message log id\n                var execByMsg = chainMsgLogIds.Count == 0 ? new List<FlowExecutionLog>()\n                    : await _context.FlowExecutionLogs\n                        .AsNoTracking()\n                        .Where(f => f.MessageLogId.HasValue &&\n                                    chainMsgLogIds.Contains(f.MessageLogId.Value) &&\n                                    f.ExecutedAt >= sessionStart &&\n                                    f.ExecutedAt < sessionEnd)\n                        .OrderBy(f => f.ExecutedAt)\n                        .ToListAsync();\n\n                // Phone fallback (strictly within the session window; accept + or digits-only)\n                var phoneA = resp.ContactPhone ?? \"\";\n                var phoneB = phoneA.StartsWith(\"+\") ? phoneA.Substring(1) : \"+\" + phoneA;\n                var execByPhone = await _context.FlowExecutionLogs\n                    .AsNoTracking()\n                    .Where(f => f.BusinessId == sentLog.BusinessId &&\n                                f.FlowId == sentLog.CTAFlowConfigId &&\n                                (f.ContactPhone == phoneA || f.ContactPhone == phoneB) &&\n                                f.ExecutedAt >= sessionStart &&\n                                f.ExecutedAt < sessionEnd)\n                    .OrderBy(f => f.ExecutedAt)\n                    .ToListAsync();\n\n                var flowExec = execByCsl.Concat(execByMsg).Concat(execByPhone)\n                    .GroupBy(x => x.Id).Select(g => g.First())\n                    .OrderBy(x => x.ExecutedAt).ToList();\n\n                foreach (var fe in flowExec)\n                {\n                    if (!string.IsNullOrWhiteSpace(fe.TriggeredByButton))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked Quick Reply: '{fe.TriggeredByButton}'\",\n                            Details = string.IsNullOrWhiteSpace(fe.TemplateName) ? $\"Advanced in flow at step '{fe.StepName}'\" : $\"Triggered next template: '{fe.TemplateName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            ButtonIndex = fe.ButtonIndex.HasValue ? (int?)fe.ButtonIndex.Value : null,\n                            ButtonTitle = fe.TriggeredByButton,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n\n                    if (!string.IsNullOrWhiteSpace(fe.TemplateName))\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = fe.ExecutedAt,\n                            Source = \"System\",\n                            EventType = \"FlowSend\",\n                            Title = $\"Flow sent template '{fe.TemplateName}'\",\n                            Details = $\"Step '{fe.StepName}'\",\n                            StepId = fe.StepId,\n                            StepName = fe.StepName,\n                            TemplateName = fe.TemplateName\n                        });\n                    }\n                }\n\n                // Include the flow CSLs themselves + statuses (within window)\n                foreach (var csl in flowCslChain.Where(x => x.Id != sentLog.Id))\n                {\n                    var ts = csl.SentAt ?? csl.CreatedAt;\n                    events.Add(new JourneyEventDto\n                    {\n                        Timestamp = ts,\n                        Source = \"System\",\n                        EventType = \"FlowSend\",\n                        Title = $\"Flow sent template '{csl.TemplateId}'\",\n                        Details = csl.CTAFlowStepId.HasValue ? $\"Step: {csl.CTAFlowStepId}\" : null,\n                        StepId = csl.CTAFlowStepId,\n                        TemplateName = csl.TemplateId\n                    });\n\n                    if (csl.DeliveredAt.HasValue && csl.DeliveredAt.Value >= sessionStart && csl.DeliveredAt.Value < sessionEnd)\n                        events.Add(new JourneyEventDto { Timestamp = csl.DeliveredAt.Value, Source = \"Provider\", EventType = \"Delivered\", Title = \"Message delivered\", Details = \"\", TemplateName = csl.TemplateId, StepId = csl.CTAFlowStepId });\n\n                    if (csl.ReadAt.HasValue && csl.ReadAt.Value >= sessionStart && csl.ReadAt.Value < sessionEnd)\n                        events.Add(new JourneyEventDto { Timestamp = csl.ReadAt.Value, Source = \"Provider\", EventType = \"Read\", Title = \"Message read\", Details = \"\", TemplateName = csl.TemplateId, StepId = csl.CTAFlowStepId });\n                }\n\n                // URL clicks during the flow (within window)\n                if (chainCslIds.Count > 0)\n                {\n                    var flowClicks = await _context.CampaignClickLogs\n                        .AsNoTracking()\n                        .Where(c => chainCslIds.Contains(c.CampaignSendLogId) &&\n                                    c.ClickedAt >= sessionStart &&\n                                    c.ClickedAt < sessionEnd)\n                        .OrderBy(c => c.ClickedAt)\n                        .ToListAsync();\n\n                    foreach (var c in flowClicks)\n                    {\n                        events.Add(new JourneyEventDto\n                        {\n                            Timestamp = c.ClickedAt,\n                            Source = \"User\",\n                            EventType = \"ButtonClicked\",\n                            Title = $\"Clicked URL: '{c.ButtonTitle}'\",\n                            Details = $\"Redirected to {c.Destination}\",\n                            ButtonIndex = c.ButtonIndex,\n                            ButtonTitle = c.ButtonTitle,\n                            Url = c.Destination\n                        });\n                    }\n                }\n\n                // Where the user left off in this session\n                var lastFlowEvent = events\n                    .Where(e => e.EventType == \"FlowSend\" || e.EventType == \"ButtonClicked\")\n                    .OrderBy(e => e.Timestamp)\n                    .LastOrDefault();\n\n                resp.LeftOffAt = lastFlowEvent?.StepName ?? lastFlowEvent?.Title;\n            }\n\n            resp.Events = events.OrderBy(e => e.Timestamp).ToList();\n            return resp;\n        }\n    }\n\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IContactJourneyService.cs",
      "sha256": "e073e1050a64e2ac4cd335378ce53f0ed653944621efaefbd090223ab818c8fe",
      "language": "csharp",
      "size": 341,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs; // Updated namespace\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IContactJourneyService\n    {\n        Task<JourneyResponseDto> GetJourneyEventsAsync(Guid initialCampaignSendLogId);\n    }\n}"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
      "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
      "language": "csharp",
      "size": 528,
      "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/IUrlBuilderService.cs",
      "sha256": "2415363e2bcc41b916d5b2836a0c28ac68dabd407d67b63661da9feb8372bd56",
      "language": "csharp",
      "size": 273,
      "content": "namespace xbytechat.api.Features.Tracking.Services\n{\n    public interface IUrlBuilderService\n    {\n\n         string BuildTrackedButtonUrl(\n        Guid campaignSendLogId,\n        int buttonIndex,\n        string? buttonTitle,\n        string destinationUrlAbsolute);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingService.cs",
      "sha256": "90d3f4b3c6a0d5d10d83300d0c3ed58fc81149c2dec145768cfafe2886dccb0b",
      "language": "csharp",
      "size": 9142,
      "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Shared.TrackingUtils;\nusing Serilog;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing AutoMapper;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class TrackingService : ITrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMapper _mapper;\n        public TrackingService(AppDbContext context, IMapper mapper)\n        {\n            _context = context;\n            _mapper = mapper;\n        }\n\n\n        public async Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                // 🧠 1. Try enrich from MessageLog (if msg ID provided)\n                if (!string.IsNullOrEmpty(dto.MessageId))\n                {\n                    var messageLog = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m => m.MessageId == dto.MessageId || m.Id.ToString() == dto.MessageId);\n\n                    if (messageLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n                        dto.ContactId ??= messageLog.ContactId;\n                        dto.CampaignId ??= messageLog.CampaignId;\n                        dto.MessageLogId ??= messageLog.Id;\n                    }\n                }\n\n                // 🧩 2. Enrich from CampaignSendLog if sourceType = campaign\n                CampaignSendLog? sendLog = null;\n\n                if (dto.SourceType == \"campaign\")\n                {\n                    if (!string.IsNullOrEmpty(dto.MessageId))\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .FirstOrDefaultAsync(c => c.MessageId == dto.MessageId);\n                    }\n\n                    if (sendLog == null && dto.CampaignId != null)\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .Where(c => c.CampaignId == dto.CampaignId)\n                            .OrderByDescending(c => c.CreatedAt)\n                            .FirstOrDefaultAsync();\n                    }\n\n                    if (sendLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty\n                            ? sendLog.Recipient?.BusinessId ?? Guid.Empty\n                            : dto.BusinessId;\n\n                        dto.ContactId ??= sendLog.ContactId;\n                        dto.CampaignId ??= sendLog.CampaignId;\n                        dto.CampaignSendLogId ??= sendLog.Id;\n\n                        // ✅ Update campaign send log click details\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = dto.ClickedAt ?? DateTime.UtcNow;\n                        sendLog.ClickType = dto.ButtonText;\n\n                        await _context.SaveChangesAsync();\n                    }\n                }\n\n                // ✅ 3. Validate business context\n                if (dto.BusinessId == Guid.Empty)\n                {\n                    Log.Warning(\"❌ TrackingLog failed: No BusinessId available for click.\");\n                    return ResponseResult.ErrorInfo(\"Business context is missing.\");\n                }\n\n                // 💾 4. Save tracking log (inline instead of separate method)\n                var trackingLog = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(trackingLog);\n                await _context.SaveChangesAsync();\n\n                // ✅ Return the TrackingLog.Id in the response\n                return ResponseResult.SuccessInfo(\"CTA click tracked successfully.\", trackingLog.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception during CTA tracking enrichment\");\n                return ResponseResult.ErrorInfo(\"Exception during tracking: \" + ex.Message);\n            }\n        }\n\n        public async Task LogCTAClickAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                var log = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log CTA click\");\n            }\n        }\n        public async Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId)\n        {\n            var tracking = await _context.TrackingLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (tracking == null)\n                return null;\n\n            var contact = tracking.ContactId != null\n                ? await _context.Contacts.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.ContactId)\n                : null;\n\n            var campaign = tracking.CampaignId != null\n                ? await _context.Campaigns.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.CampaignId)\n                : null;\n\n            var messageLog = tracking.MessageLogId != null\n                ? await _context.MessageLogs.AsNoTracking().FirstOrDefaultAsync(m => m.Id == tracking.MessageLogId)\n                : null;\n\n            return new TrackingLogDetailsDto\n            {\n                Tracking = _mapper.Map<TrackingLogDto>(tracking),\n                Contact = contact != null ? _mapper.Map<ContactDto>(contact) : null,\n                Campaign = campaign != null ? _mapper.Map<CampaignDto>(campaign) : null,\n                MessageLog = messageLog != null ? _mapper.Map<MessageLogDto>(messageLog) : null\n            };\n        }\n        public async Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId)\n        {\n            return await _context.TrackingLogs\n                .Where(x => x.BusinessId == businessId && x.SourceType == \"cta-flow\")\n                .OrderByDescending(x => x.ClickedAt)\n                .ToListAsync();\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/TrackingToken.cs",
      "sha256": "b5250fc25e3e0ca598d78eba428d651a345550debbc5696ceb32b55ce684019e",
      "language": "csharp",
      "size": 809,
      "content": "using System.Text.Json;\nusing Microsoft.AspNetCore.WebUtilities;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public static class TrackingToken\n    {\n        public static string Create(object payload)\n        {\n            var json = JsonSerializer.Serialize(payload);\n            var bytes = System.Text.Encoding.UTF8.GetBytes(json);\n            return WebEncoders.Base64UrlEncode(bytes);\n        }\n\n        public static T Decode<T>(string token)\n        {\n            var bytes = WebEncoders.Base64UrlDecode(token);\n            var json = System.Text.Encoding.UTF8.GetString(bytes);\n            return JsonSerializer.Deserialize<T>(json)!;\n        }\n    }\n\n    // What we put inside the token:\n    public record ClickToken(Guid cid, int btnIndex, string btnTitle, string to, string phone);\n}\n"
    },
    {
      "path": "xbytechat-api/Features/Tracking/Services/UrlBuilderService.cs",
      "sha256": "8f3156fd79a3ab196299a3f0ebb88e74ebe340db9a0d13bd47189ecc5996109d",
      "language": "csharp",
      "size": 4999,
      "content": "// Features/Tracking/Services/UrlBuilderService.cs\nusing System;\nusing Microsoft.Extensions.Options;\nusing xbytechat.api.Features.CampaignTracking.Config;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class UrlBuilderService : IUrlBuilderService\n    {\n        private readonly IClickTokenService _token;\n        private readonly TrackingOptions _opt;\n\n        // Allowed schemes for destination links\n        private static readonly string[] AllowedSchemes = new[] { \"http\", \"https\", \"tel\", \"wa\", \"whatsapp\" };\n\n        public UrlBuilderService(IClickTokenService token, IOptions<TrackingOptions> opt)\n        {\n            _token = token;\n            _opt = opt.Value;\n        }\n\n        /// <summary>\n        /// Normalizes destination and enforces an allowlist of schemes:\n        /// http, https, tel, wa, whatsapp.\n        /// Also supports shorthand WhatsApp hosts: wa.me/... and api.whatsapp.com/...\n        /// </summary>\n        private static string NormalizeAbsoluteUrlOrThrow(string input)\n        {\n            if (input is null) throw new ArgumentException(\"Destination URL is null.\", nameof(input));\n\n            // Trim and remove any non-printable/control whitespace characters\n            var s = input.Trim();\n            s = new string(Array.FindAll(s.ToCharArray(), c => !char.IsControl(c)));\n\n            if (s.Length == 0)\n                throw new ArgumentException(\"Destination URL is empty after trimming.\", nameof(input));\n\n            // Short-circuit for already tracked links, just in case this ever gets called that way\n            if (s.Contains(\"/r/\", StringComparison.Ordinal))\n                return s;\n\n            // Support common WhatsApp shorthands without scheme\n            // e.g. \"wa.me/9170...\" or \"api.whatsapp.com/send?phone=...\"\n            if (!s.Contains(\"://\", StringComparison.Ordinal))\n            {\n                if (s.StartsWith(\"wa.me/\", StringComparison.OrdinalIgnoreCase) ||\n                    s.StartsWith(\"api.whatsapp.com/\", StringComparison.OrdinalIgnoreCase))\n                {\n                    var guessWa = \"https://\" + s;\n                    if (Uri.TryCreate(guessWa, UriKind.Absolute, out var waAbs))\n                        return waAbs.AbsoluteUri;\n                }\n            }\n\n            // Accept absolute URIs with allowed schemes\n            if (Uri.TryCreate(s, UriKind.Absolute, out var abs))\n            {\n                var scheme = abs.Scheme ?? string.Empty;\n\n                // Allow only whitelisted schemes\n                var isAllowed = false;\n                for (int i = 0; i < AllowedSchemes.Length; i++)\n                {\n                    if (scheme.Equals(AllowedSchemes[i], StringComparison.OrdinalIgnoreCase))\n                    {\n                        isAllowed = true;\n                        break;\n                    }\n                }\n\n                if (!isAllowed)\n                    throw new ArgumentException(\n                        $\"Destination must use one of: http, https, tel, wa, whatsapp. Got '{scheme}:'\",\n                        nameof(input));\n\n                // http/https → return canonical AbsoluteUri\n                if (scheme.Equals(Uri.UriSchemeHttp, StringComparison.OrdinalIgnoreCase) ||\n                    scheme.Equals(Uri.UriSchemeHttps, StringComparison.OrdinalIgnoreCase))\n                {\n                    return abs.AbsoluteUri;\n                }\n\n                // tel:/wa:/whatsapp://send → return as provided (trimmed), do not modify\n                return s;\n            }\n\n            // Human input like \"www.example.com/...\" or \"example.com/...\"\n            if (!s.Contains(\"://\", StringComparison.Ordinal) && s.Contains('.', StringComparison.Ordinal))\n            {\n                var guess = \"https://\" + s;\n                if (Uri.TryCreate(guess, UriKind.Absolute, out var httpAbs))\n                    return httpAbs.AbsoluteUri;\n            }\n\n            throw new ArgumentException(\n                $\"Destination must be an absolute URL or allowed deep link (http, https, tel, wa, whatsapp). Got: '{input}'\",\n                nameof(input));\n        }\n\n        public string BuildTrackedButtonUrl(\n            Guid campaignSendLogId,\n            int buttonIndex,\n            string? buttonTitle,\n            string destinationUrlAbsolute)\n        {\n            var dest = NormalizeAbsoluteUrlOrThrow(destinationUrlAbsolute);\n\n            var now = DateTimeOffset.UtcNow.ToUnixTimeSeconds();\n            var exp = now + (long)_opt.TokenTtl.TotalSeconds;\n\n            var payload = new ClickTokenPayload(\n                cid: campaignSendLogId,\n                bi: buttonIndex,\n                bt: buttonTitle ?? string.Empty,\n                to: dest,\n                iat: now,\n                exp: exp\n            );\n\n            var token = _token.Create(payload);\n            return $\"{_opt.BaseUrl.TrimEnd('/')}/r/{token}\";\n        }\n    }\n}\n\n\n"
    }
  ]
}
