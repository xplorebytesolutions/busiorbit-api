{
  "name": "xbytechat-api/Features/CTAManagement",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/CTAManagement/Controllers/CTAManagementController.cs",
      "sha256": "3d06022ca06d6b4e214bf6e571b79d311da0902eeadebddc1f7d48c18a1ecb99",
      "language": "csharp",
      "size": 2535,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Services;\n\nnamespace xbytechat.api.Features.CTAManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/ctamanagement\")]\n    [Authorize] // ‚úÖ Ensures only authenticated users can access\n    public class CTAManagementController : ControllerBase\n    {\n        private readonly ICTAManagementService _ctaService;\n\n        public CTAManagementController(ICTAManagementService ctaService)\n        {\n            _ctaService = ctaService;\n        }\n\n        // ‚úÖ GET: api/ctamanagement/get-all\n        [HttpGet(\"get-all\")]\n        public async Task<IActionResult> GetAll()\n        {\n            var data = await _ctaService.GetAllAsync();\n            return Ok(data);\n        }\n\n        // üìå GET: api/ctamanagement/get/{id}\n        [HttpGet(\"get/{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _ctaService.GetByIdAsync(id);\n            return result == null ? NotFound(\"CTA not found\") : Ok(result);\n        }\n\n        // ‚úÖ POST: api/ctamanagement/create\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> Create([FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"‚ùå Invalid CTA payload.\");\n\n            var success = await _ctaService.AddAsync(dto);\n            return success\n                ? Ok(new { message = \"‚úÖ CTA created.\" })\n                : StatusCode(500, \"‚ùå Failed to create CTA.\");\n        }\n\n        // ‚úèÔ∏è PUT: api/ctamanagement/update/{id}\n        [HttpPut(\"update/{id}\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"‚ùå Invalid CTA payload.\");\n\n            var success = await _ctaService.UpdateAsync(id, dto);\n            return success\n                ? Ok(new { message = \"‚úÖ CTA updated.\" })\n                : NotFound(\"CTA not found or update failed.\");\n        }\n\n        // üóëÔ∏è DELETE: api/ctamanagement/delete/{id}\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var success = await _ctaService.DeleteAsync(id);\n            return success\n                ? Ok(new { message = \"‚úÖ CTA deleted (soft).\" })\n                : NotFound(\"CTA not found or delete failed.\");\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/DTOs/CTADefinitionDto.cs",
      "sha256": "1472d3694a4cebf363c3a632675fe61b8646f610f7a96a2687286bfb47d8eacf",
      "language": "csharp",
      "size": 707,
      "content": "namespace xbytechat.api.Features.CTAManagement.DTOs\n{\n    public class CTADefinitionDto\n    {\n        public Guid Id { get; set; }\n\n        public string Title { get; set; } = string.Empty; // üè∑Ô∏è CTA label (e.g., \"Buy Now\")\n\n        public string ButtonText { get; set; } = string.Empty; // üí¨ Visible button label (e.g., \"Buy Now\")\n\n        public string ButtonType { get; set; } = \"url\"; // üîò Expected values: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // üåê Redirect or action target\n\n        public string? Description { get; set; } // üìù Optional description (for context/tooltip)\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Models/CTADefinition.cs",
      "sha256": "96216798bd31e2098b9a2ba43dac62e067f7062f5e5c36bb318a8dab2f74da38",
      "language": "csharp",
      "size": 913,
      "content": "using System;\n\nnamespace xbytechat.api.Features.CTAManagement.Models\n{\n    public class CTADefinition\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; } // üîó Business that owns this CTA\n\n        public string Title { get; set; } = string.Empty; // üè∑Ô∏è CTA label/title, e.g., \"Buy Now\"\n\n        public string ButtonText { get; set; } = string.Empty; // üí¨ Visible button label\n\n        public string ButtonType { get; set; } = \"url\"; // üîò Options: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // üåê Action URL or value (depending on type)\n\n        public string Description { get; set; } = string.Empty; // üìù Optional additional context\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/CTAManagementService.cs",
      "sha256": "a9388986726208c45f05afa2bd4ed3c74b33d7d79eb0e5863b7256e061ba4081",
      "language": "csharp",
      "size": 4621,
      "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Models;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public class CTAManagementService : ICTAManagementService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CTAManagementService(AppDbContext dbContext, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        // üîÑ Get all active CTAs for the current business\n        public async Task<List<CTADefinitionDto>> GetAllAsync()\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            return await _dbContext.CTADefinitions\n                .Where(c => c.IsActive && c.BusinessId == businessId)\n                .Select(c => new CTADefinitionDto\n                {\n                    Id = c.Id,\n                    Title = c.Title,\n                    ButtonText = c.ButtonText,\n                    ButtonType = c.ButtonType,\n                    TargetUrl = c.TargetUrl,\n                    Description = c.Description,\n                    IsActive = c.IsActive\n                }).ToListAsync();\n        }\n\n        // ‚úÖ Add new CTA\n        public async Task<bool> AddAsync(CTADefinitionDto dto)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = new CTADefinition\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Title = dto.Title,\n                ButtonText = dto.ButtonText,\n                ButtonType = dto.ButtonType,\n                TargetUrl = dto.TargetUrl,\n                Description = dto.Description ?? \"\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _dbContext.CTADefinitions.AddAsync(cta);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üìå Get CTA by ID\n        public async Task<CTADefinitionDto?> GetByIdAsync(Guid id)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = await _dbContext.CTADefinitions\n                .FirstOrDefaultAsync(c => c.Id == id && c.IsActive && c.BusinessId == businessId);\n\n            if (cta == null) return null;\n\n            return new CTADefinitionDto\n            {\n                Id = cta.Id,\n                Title = cta.Title,\n                ButtonText = cta.ButtonText,\n                ButtonType = cta.ButtonType,\n                TargetUrl = cta.TargetUrl,\n                Description = cta.Description,\n                IsActive = cta.IsActive\n            };\n        }\n\n\n        // ‚úèÔ∏è Update CTA\n        public async Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to modify this CTA.\");\n\n            cta.Title = dto.Title;\n            cta.ButtonText = dto.ButtonText;\n            cta.ButtonType = dto.ButtonType;\n            cta.TargetUrl = dto.TargetUrl;\n            cta.Description = dto.Description ?? \"\";\n            cta.IsActive = dto.IsActive;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üóëÔ∏è Soft Delete CTA\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to delete this CTA.\");\n\n            cta.IsActive = false;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // üîê Reusable method to extract BusinessId\n        private Guid GetBusinessIdFromClaims()\n        {\n            var claim = _httpContextAccessor.HttpContext?.User?.FindFirst(\"businessId\");\n            if (claim == null || string.IsNullOrWhiteSpace(claim.Value) || !Guid.TryParse(claim.Value, out var businessId))\n                throw new UnauthorizedAccessException(\"‚ùå Invalid or missing BusinessId claim.\");\n\n            return businessId;\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/CTAManagement/Services/ICTAManagementService.cs",
      "sha256": "f05abf40bdd4a593e8c8f8980c288884dc5701a5c9ba29261588816002758bcd",
      "language": "csharp",
      "size": 814,
      "content": "using xbytechat.api.Features.CTAManagement.DTOs;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public interface ICTAManagementService\n    {\n        /// <summary>Returns all active CTAs for the current business.</summary>\n        Task<List<CTADefinitionDto>> GetAllAsync();\n\n        /// <summary>Returns a single CTA by ID (if exists).</summary>\n        Task<CTADefinitionDto?> GetByIdAsync(Guid id);\n\n        /// <summary>Adds a new CTA for the logged-in business.</summary>\n        Task<bool> AddAsync(CTADefinitionDto dto);\n\n        /// <summary>Updates an existing CTA if it belongs to the business.</summary>\n        Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto);\n\n        /// <summary>Soft deletes (deactivates) a CTA entry.</summary>\n        Task<bool> DeleteAsync(Guid id);\n    }\n}\n"
    }
  ]
}
