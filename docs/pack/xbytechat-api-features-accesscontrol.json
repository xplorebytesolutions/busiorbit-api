{
  "name": "xbytechat-api/Features/AccessControl",
  "generatedAt": "2025-08-11 18:04:10 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/AccessControl/Controllers/PlanController.cs",
      "sha256": "a399de549f2643097d77c637a587c5d555fec9810c5970e605ed1c9a85ff1086",
      "language": "csharp",
      "size": 2475,
      "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Features.Inbox.Services;\n\nnamespace xbytechat.api.Features.AccessControl.Controllers\n{\n    [ApiController]\n    [Route(\"api/admin/plans\")]\n    [Authorize(Roles = \"SuperAdmin\")] // Only SuperAdmin can access\n    public class PlanController : ControllerBase\n    {\n        private readonly IPlanService _planService;\n        \n        private readonly ILogger<PlanController> _logger;\n        public PlanController(IPlanService planService)\n        {\n            _planService = planService;\n        }\n\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> CreatePlan([FromBody] CreatePlanRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.Name))\n                return BadRequest(\"Plan name is required.\");\n\n            var plan = await _planService.CreatePlanAsync(request.Name, request.Description);\n            return Ok(plan);\n        }\n\n        [HttpPost(\"{planId}/assign-permissions\")]\n        public async Task<IActionResult> AssignPermissions(Guid planId, [FromBody] AssignPermissionsRequest request)\n        {\n            await _planService.AssignPermissionsAsync(planId, request.PermissionIds);\n            return Ok(new { success = true });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllPlans()\n        {\n            var plans = await _planService.GetAllPlansAsync();\n            return Ok(plans);\n        }\n\n        [HttpGet(\"{planId}\")]\n        public async Task<IActionResult> GetPlanDetails(Guid planId)\n        {\n            var plan = await _planService.GetPlanByIdAsync(planId);\n            if (plan == null) return NotFound();\n\n            return Ok(plan);\n        }\n\n        [HttpGet(\"{planId}/permissions\")]\n        public async Task<IActionResult> GetPermissionsForPlan(Guid planId)\n        {\n            var permissions = await _planService.GetPermissionsByPlanAsync(planId);\n            return Ok(permissions);\n        }\n    }\n\n    // ✅ DTOs\n\n    public class CreatePlanRequest\n    {\n        public string Name { get; set; }\n        public string? Description { get; set; }\n    }\n\n    public class AssignPermissionsRequest\n    {\n        public List<Guid> PermissionIds { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Permission.cs",
      "sha256": "fcd9e1246cb604b09ae39112c767a3725356276976f6c9dfa886a6c04b8f7937",
      "language": "csharp",
      "size": 758,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Permission\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // Unique key like \"ViewDashboard\"\n\n        public string Name { get; set; } // Friendly name like \"View Dashboard\"\n\n        public string? Group { get; set; } // Optional grouping, e.g., \"CRM\", \"Catalog\", \"Admin\"\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n\n        public ICollection<UserPermission> UserPermissions { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Plan.cs",
      "sha256": "ff7331ee580eb764c3179cfb14fc53ab20cef71361c044577b09fa6e6b4d1b8d",
      "language": "csharp",
      "size": 566,
      "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Plan\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // e.g. \"FREE\", \"SMART\", \"ADVANCED\"\n        public string Name { get; set; } // Friendly display name\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<PlanPermission> PlanPermissions { get; set; }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/PlanPermission.cs",
      "sha256": "e6e65f0ae33c19e9d2585d73812bcf99ed207d52ac6d804a3c2bf86b3152eca7",
      "language": "csharp",
      "size": 525,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class PlanPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid PlanId { get; set; }\n        public Plan Plan { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin email or ID\n    }\n}\n\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/Role.cs",
      "sha256": "4c2e237e65d702febee355976cfc64209fd4cf2d98f87e7ef6de4b199dd048a4",
      "language": "csharp",
      "size": 760,
      "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Role\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; } // e.g. SuperAdmin, PartnerAdmin, BusinessAdmin, Staff, etc.\n\n        public string? Description { get; set; }\n\n        public bool IsSystemDefined { get; set; } = false; // true for SuperAdmin, PartnerAdmin\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n        public ICollection<User> Users { get; set; } // 🧩 One-to-many relation: Role → Users\n\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/RolePermission.cs",
      "sha256": "d9b31669bec3fbda1b95c89def9a6cc641e0dd21f5e38583b8dae4c0239b9a8a",
      "language": "csharp",
      "size": 619,
      "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class RolePermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid RoleId { get; set; }\n        public Role Role { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin user email or ID\n\n        public bool IsActive { get; set; } = true; // ✅ Add this line\n        public bool IsRevoked { get; set; } = false; // ✅ Required\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Models/UserPermission.cs",
      "sha256": "6b85321ec68fced21477222e85ac56594106c4654b5d99061c42bc1c46d876aa",
      "language": "csharp",
      "size": 677,
      "content": "using System;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class UserPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid UserId { get; set; }\n        public User User { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsGranted { get; set; } = true; // ✅ true = allow, false = explicitly deny\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin or system\n\n        public bool IsRevoked { get; set; } = false; // ✅ Required\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Seeder/PermissionConstants.cs",
      "sha256": "47104d91bf08a96917121e247b83aac03fe402f24bb851d3fa4b1b9ee5375469",
      "language": "csharp",
      "size": 1126,
      "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class PermissionConstants\n    {\n        public static class Dashboard\n        {\n            public const string View = \"dashboard.view\";\n        }\n\n        public static class Campaigns\n        {\n            public const string View = \"campaign.view\";\n            public const string Create = \"campaign.create\";\n            public const string Delete = \"campaign.delete\";\n        }\n\n        public static class Products\n        {\n            public const string View = \"product.view\";\n            public const string Create = \"product.create\";\n            public const string Delete = \"product.delete\";\n        }\n\n        public static class CRM\n        {\n            public const string ContactsView = \"contacts.view\";\n            public const string TagsEdit = \"tags.edit\";\n        }\n\n        public static class Admin\n        {\n            public const string BusinessApprove = \"admin.business.approve\";\n            public const string ViewLogs = \"admin.logs.view\";\n        }\n\n        // 🆕 Add more modules and permissions here as needed\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Seeder/RolePermissionMapping.cs",
      "sha256": "47f001a1b2d6404c28e73be68faf79485c10c1c0a7dab0a5346cc06fff4f049a",
      "language": "csharp",
      "size": 1302,
      "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class RolePermissionMapping\n    {\n        public static readonly Dictionary<string, List<string>> RolePermissions = new()\n        {\n            [\"admin\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.Campaigns.Create,\n                PermissionConstants.Campaigns.Delete,\n                PermissionConstants.Products.View,\n                PermissionConstants.Products.Create,\n                PermissionConstants.Products.Delete,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.CRM.TagsEdit,\n                PermissionConstants.Admin.BusinessApprove,\n                PermissionConstants.Admin.ViewLogs\n            },\n\n            [\"business\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.Products.View\n            },\n\n            [\"staff\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.CRM.ContactsView\n            }\n        };\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/AccessControlService.cs",
      "sha256": "61ef8b78157d0d313e9872c31df8b6d0e7a5139d4ae1de38dc8da55ae9f01cc9",
      "language": "csharp",
      "size": 2936,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Repositories.Interfaces;\nusing System.Linq.Expressions;\n\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class AccessControlService : IAccessControlService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<RolePermission> _rolePermissionRepo;\n        private readonly IGenericRepository<UserPermission> _userPermissionRepo;\n        private readonly IGenericRepository<Permission> _permissionRepo;\n\n        public AccessControlService(\n            IGenericRepository<User> userRepo,\n            IGenericRepository<RolePermission> rolePermissionRepo,\n            IGenericRepository<UserPermission> userPermissionRepo,\n            IGenericRepository<Permission> permissionRepo\n        )\n        {\n            _userRepo = userRepo;\n            _rolePermissionRepo = rolePermissionRepo;\n            _userPermissionRepo = userPermissionRepo;\n            _permissionRepo = permissionRepo;\n        }\n\n        /// <summary>\n        /// ✅ Fetch all permissions (Role-based + User-specific) for a given user\n        /// </summary>\n        public async Task<List<string>> GetPermissionsAsync(Guid userId)\n        {\n            var user = await _userRepo.FindByIdAsync(userId);\n            if (user == null || user.RoleId == null)\n                return new List<string>();\n\n            // 🔐 Get Role-based permissions\n            var rolePerms = await _rolePermissionRepo\n                .WhereAsync(rp => rp.RoleId == user.RoleId && !rp.IsRevoked);\n\n            // 🔐 Get User-specific extra permissions\n            var userPerms = await _userPermissionRepo\n                .WhereAsync(up => up.UserId == userId && !up.IsRevoked);\n\n            // 🧠 Merge permission IDs\n            var permissionIds = rolePerms.Select(r => r.PermissionId)\n                .Union(userPerms.Select(u => u.PermissionId))\n                .Distinct()\n                .ToList();\n\n            // 🎯 Get full permission names from Permission table\n            var allPerms = await _permissionRepo\n                .WhereAsync(p => permissionIds.Contains(p.Id));\n\n            return allPerms.Select(p => p.Code).Distinct().ToList(); // Use Code (standard)\n        }\n\n        /// <summary>\n        /// ✅ Runtime permission checker (for controller/middleware)\n        /// </summary>\n        public bool HasPermission(ClaimsPrincipal user, string requiredPermission)\n        {\n            var perms = user.Claims\n                .Where(c => c.Type == \"permissions\")\n                .Select(c => c.Value)\n                .ToList();\n\n            return perms.Contains(requiredPermission);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/IAccessControlService.cs",
      "sha256": "1596c83e56e4da37e66e5e211aee92e040132bf01e57a9f3fa97659d4086e0c3",
      "language": "csharp",
      "size": 276,
      "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IAccessControlService\n    {\n        Task<List<string>> GetPermissionsAsync(Guid userId);\n        bool HasPermission(ClaimsPrincipal user, string permission);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/IPlanService.cs",
      "sha256": "d8608c41fe95d4dc1ee574bf1fbf39016cc3ab08db8aba49f8c64f003f32b2f7",
      "language": "csharp",
      "size": 548,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IPlanService\n    {\n        Task<Plan> CreatePlanAsync(string name, string description);\n        Task AssignPermissionsAsync(Guid planId, List<Guid> permissionIds);\n        Task<List<Permission>> GetPermissionsByPlanAsync(Guid planId);\n        Task<List<Plan>> GetAllPlansAsync();\n        Task<Plan?> GetPlanByIdAsync(Guid planId);\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/AccessControl/Services/PlanService.cs",
      "sha256": "f72638ec141e47c33274e31d49fd10046b6b4fa292e216ff10f4b3a1de2cf0f2",
      "language": "csharp",
      "size": 2303,
      "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class PlanService : IPlanService\n    {\n        private readonly AppDbContext _context;\n\n        public PlanService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<Plan> CreatePlanAsync(string name, string description)\n        {\n            var plan = new Plan\n            {\n                Id = Guid.NewGuid(),\n                Name = name,\n                Description = description,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.Plans.Add(plan);\n            await _context.SaveChangesAsync();\n            return plan;\n        }\n\n        public async Task AssignPermissionsAsync(Guid planId, List<Guid> permissionIds)\n        {\n            var existing = await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId)\n                .ToListAsync();\n\n            _context.PlanPermissions.RemoveRange(existing);\n\n            var newLinks = permissionIds.Select(pid => new PlanPermission\n            {\n                Id = Guid.NewGuid(),\n                PlanId = planId,\n                PermissionId = pid,\n                AssignedAt = DateTime.UtcNow\n            });\n\n            await _context.PlanPermissions.AddRangeAsync(newLinks);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<Permission>> GetPermissionsByPlanAsync(Guid planId)\n        {\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId)\n                .Include(pp => pp.Permission)\n                .Select(pp => pp.Permission)\n                .ToListAsync();\n        }\n\n        public async Task<List<Plan>> GetAllPlansAsync()\n        {\n            return await _context.Plans.ToListAsync();\n        }\n\n        public async Task<Plan?> GetPlanByIdAsync(Guid planId)\n        {\n            return await _context.Plans\n                .Include(p => p.PlanPermissions)\n                .ThenInclude(pp => pp.Permission)\n                .FirstOrDefaultAsync(p => p.Id == planId);\n        }\n    }\n}\n"
    }
  ]
}
