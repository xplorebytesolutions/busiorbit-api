{
  "name": "xbytechat.Tests",
  "generatedAt": "2025-08-11 17:45:59 +00:00",
  "files": [
    {
      "path": "xbytechat.Tests/Features/AuthModule/Service/AuthServiceTests.cs",
      "sha256": "fa5236efc250b61225dea1b4d27337f8eb25bc5323738364a4513085b782ae66",
      "language": "csharp",
      "size": 223,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.Tests.Features.AuthModule.Service\n{\n    internal class AuthServiceTests\n    {\n    }\n}\n"
    },
    {
      "path": "xbytechat.Tests/Features/Catalog/Services/CatalogTrackingServiceTests.cs",
      "sha256": "cc27316d9e50e0500faabd7b9fb8d5f1c9af9e12418b8f3aa86a5d2684a623ac",
      "language": "csharp",
      "size": 9276,
      "content": "// File: Features/Catalog/Services/CatalogTrackingServiceTests.cs\n\nusing System;\nusing System.Threading.Tasks;\nusing Xunit;\nusing Moq;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Models.BusinessModel; // For BusinessPlanInfo\nusing xbytechat.api.Features.PlanManagement.Models; // For PlanType\n\nnamespace xbytechat.Tests.Features.Catalog.Services\n{\n    public class CatalogTrackingServiceTests\n    {\n        private AppDbContext GetInMemoryDbContext()\n        {\n            var options = new DbContextOptionsBuilder<AppDbContext>()\n                .UseInMemoryDatabase(Guid.NewGuid().ToString())\n                .Options;\n            return new AppDbContext(options);\n        }\n\n        [Fact]\n        public async Task LogClickAsync_Should_Log_Click_And_Create_Contact_If_Not_Exists()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n\n            // Mock IMessageService and ILeadTimelineService\n            var mockMessageService = new Mock<IMessageService>();\n            mockMessageService.Setup(m => m.SendFollowUpAsync(It.IsAny<string>(), It.IsAny<string>()))\n                .Returns(Task.CompletedTask);\n\n            var mockTimelineService = new Mock<ILeadTimelineService>();\n            mockTimelineService.Setup(m => m.AddFromCatalogClickAsync(It.IsAny<CatalogClickLog>()))\n                .Returns(Task.CompletedTask);\n\n            var service = new CatalogTrackingService(context, mockMessageService.Object, mockTimelineService.Object);\n\n            // Create a dummy business to avoid orphaned foreign key\n            var businessId = Guid.NewGuid();\n            context.Businesses.Add(new xbytechat.api.Features.BusinessModule.Models.Business\n            {\n                Id = businessId,\n                CompanyName = \"Test Business\",\n                BusinessName = \"Test Business Pvt Ltd\",\n                BusinessEmail = \"test@email.com\",\n                CreatedAt = DateTime.UtcNow,\n                BusinessPlanInfo = new BusinessPlanInfo\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Plan = PlanType.Basic,\n                    TotalMonthlyQuota = 100,\n                    RemainingMessages = 100,\n                    QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                    WalletBalance = 0.00m,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            });\n            await context.SaveChangesAsync();\n\n            var dto = new CatalogClickLogDto\n            {\n                BusinessId = businessId,\n                ProductId = Guid.NewGuid(),\n                UserPhone = \"1234567890\",\n                UserName = \"Test Lead\",\n                CTAJourney = \"BuyNow\",\n                ButtonText = \"Buy Now\",\n                TemplateId = \"template123\"\n            };\n\n            // Act\n            await service.LogClickAsync(dto);\n\n            // Assert\n            var log = await context.CatalogClickLogs.FirstOrDefaultAsync();\n            Assert.NotNull(log);\n            Assert.Equal(dto.UserPhone, log.UserPhone);\n            Assert.Equal(dto.CTAJourney, log.CTAJourney);\n\n            var contact = await context.Contacts.FirstOrDefaultAsync(c => c.PhoneNumber == dto.UserPhone);\n            Assert.NotNull(contact);\n            Assert.Equal(dto.UserName, contact.Name);\n\n            mockTimelineService.Verify(m => m.AddFromCatalogClickAsync(It.IsAny<CatalogClickLog>()), Times.Once);\n        }\n\n        [Fact]\n        public async Task LogClickAsync_Should_Send_FollowUp_If_Business_Is_Advanced()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n\n            // Create a business with an Advanced plan\n            var businessId = Guid.NewGuid();\n            context.Businesses.Add(new xbytechat.api.Features.BusinessModule.Models.Business\n            {\n                Id = businessId,\n                CompanyName = \"Test Business\",\n                BusinessName = \"Test Business Pvt Ltd\",\n                BusinessEmail = \"advanced@email.com\",\n                CreatedAt = DateTime.UtcNow,\n                BusinessPlanInfo = new BusinessPlanInfo\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Plan = PlanType.Advanced,\n                    TotalMonthlyQuota = 1000,\n                    RemainingMessages = 1000,\n                    QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                    WalletBalance = 0.00m,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            });\n            await context.SaveChangesAsync();\n\n            // Mock services\n            var mockMessageService = new Mock<IMessageService>();\n            mockMessageService\n                .Setup(m => m.SendFollowUpAsync(It.IsAny<string>(), It.IsAny<string>()))\n                .Returns(Task.CompletedTask)\n                .Verifiable();\n\n            var mockTimelineService = new Mock<ILeadTimelineService>();\n            mockTimelineService.Setup(m => m.AddFromCatalogClickAsync(It.IsAny<CatalogClickLog>()))\n                .Returns(Task.CompletedTask);\n\n            var service = new CatalogTrackingService(context, mockMessageService.Object, mockTimelineService.Object);\n\n            var dto = new CatalogClickLogDto\n            {\n                BusinessId = businessId,\n                ProductId = Guid.NewGuid(),\n                UserPhone = \"9876543210\",\n                UserName = \"Advanced User\",\n                CTAJourney = \"LearnMore\",\n                ButtonText = \"Learn More\",\n                TemplateId = \"tpl-001\"\n            };\n\n            // Act\n            await service.LogClickAsync(dto);\n\n            // Assert\n            var contact = await context.Contacts.FirstOrDefaultAsync(c => c.PhoneNumber == dto.UserPhone);\n            Assert.NotNull(contact);\n            Assert.Equal(dto.UserName, contact.Name);\n\n            var log = await context.CatalogClickLogs.FirstOrDefaultAsync(l => l.UserPhone == dto.UserPhone);\n            Assert.NotNull(log);\n\n            mockMessageService.Verify(m => m.SendFollowUpAsync(dto.UserPhone, It.IsAny<string>()), Times.Once);\n        }\n\n        [Fact]\n        public async Task LogClickAsync_Should_Not_Send_FollowUp_If_Business_Is_Not_Advanced()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n\n            // Create a business with a Basic plan\n            var businessId = Guid.NewGuid();\n            context.Businesses.Add(new xbytechat.api.Features.BusinessModule.Models.Business\n            {\n                Id = businessId,\n                CompanyName = \"Basic Business\",\n                BusinessName = \"Basic Business Pvt Ltd\",\n                BusinessEmail = \"basic@email.com\",\n                CreatedAt = DateTime.UtcNow,\n                BusinessPlanInfo = new BusinessPlanInfo\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Plan = PlanType.Basic,\n                    TotalMonthlyQuota = 100,\n                    RemainingMessages = 100,\n                    QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                    WalletBalance = 0.00m,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            });\n            await context.SaveChangesAsync();\n\n            // Mock services\n            var mockMessageService = new Mock<IMessageService>();\n            mockMessageService\n                .Setup(m => m.SendFollowUpAsync(It.IsAny<string>(), It.IsAny<string>()))\n                .Returns(Task.CompletedTask);\n\n            var mockTimelineService = new Mock<ILeadTimelineService>();\n            mockTimelineService.Setup(m => m.AddFromCatalogClickAsync(It.IsAny<CatalogClickLog>()))\n                .Returns(Task.CompletedTask);\n\n            var service = new CatalogTrackingService(context, mockMessageService.Object, mockTimelineService.Object);\n\n            var dto = new CatalogClickLogDto\n            {\n                BusinessId = businessId,\n                ProductId = Guid.NewGuid(),\n                UserPhone = \"9876543210\",\n                UserName = \"Basic User\",\n                CTAJourney = \"LearnMore\",\n                ButtonText = \"Learn More\",\n                TemplateId = \"tpl-001\"\n            };\n\n            // Act\n            await service.LogClickAsync(dto);\n\n            // Assert\n            var contact = await context.Contacts.FirstOrDefaultAsync(c => c.PhoneNumber == dto.UserPhone);\n            Assert.NotNull(contact);\n\n            var log = await context.CatalogClickLogs.FirstOrDefaultAsync(l => l.UserPhone == dto.UserPhone);\n            Assert.NotNull(log);\n\n            mockMessageService.Verify(m => m.SendFollowUpAsync(It.IsAny<string>(), It.IsAny<string>()), Times.Never);\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat.Tests/Features/Catalog/Services/ProductServiceTests.cs",
      "sha256": "54bfed016d98ee54f8b2ed0155c88f4cbfb388db24b0e5c74967f165bb7a21a6",
      "language": "csharp",
      "size": 11417,
      "content": "using System;\nusing System.Threading.Tasks;\nusing Xunit;\nusing Moq;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api;\n\nnamespace xbytechat.Tests.Features.Catalog.Services\n{\n    public class ProductServiceTests\n    {\n        // Setup helper method for in-memory DB context\n        private AppDbContext GetInMemoryDbContext()\n        {\n            var options = new DbContextOptionsBuilder<AppDbContext>()\n                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())\n                .Options;\n            return new AppDbContext(options);\n        }\n\n        [Fact]\n        public async Task AddProductAsync_Should_Add_Product_And_Return_Success()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var dto = new CreateProductDto\n            {\n                BusinessId = Guid.NewGuid(),\n                Name = \"Test Product\",\n                Description = \"Test Desc\",\n                Price = 99.99m,\n                Currency = \"INR\",\n                ImageUrl = \"img.jpg\"\n            };\n\n            // Act\n            var result = await service.AddProductAsync(dto);\n\n            // Assert\n            Assert.True(result.Success);\n            Assert.Contains(context.Products, p => p.Name == \"Test Product\");\n        }\n\n        // More tests for update, delete, duplicate etc. can be added here\n        [Fact]\n        public async Task AddProductAsync_Should_Return_Error_If_Duplicate()\n        {\n            // Arrange\n            var dbName = Guid.NewGuid().ToString(); // Unique DB per test run\n            var dbContext = GetInMemoryDbContext();\n            var service = new ProductService(dbContext);\n\n            var businessId = Guid.NewGuid();\n            var productName = \"Test Product\";\n\n            // Add the first product\n            var createDto = new CreateProductDto\n            {\n                BusinessId = businessId,\n                Name = productName,\n                Description = \"First product\",\n                Price = 100,\n                Currency = \"INR\",\n                ImageUrl = \"\"\n            };\n            var firstResult = await service.AddProductAsync(createDto);\n            Assert.True(firstResult.Success);\n\n            // Act: Try to add a duplicate product (same name, same business)\n            var duplicateDto = new CreateProductDto\n            {\n                BusinessId = businessId,\n                Name = productName, // same name!\n                Description = \"Duplicate product\",\n                Price = 200,\n                Currency = \"INR\",\n                ImageUrl = \"\"\n            };\n            var duplicateResult = await service.AddProductAsync(duplicateDto);\n\n            // Assert\n            Assert.False(duplicateResult.Success);\n            Assert.Contains(\"already exists\", duplicateResult.Message, StringComparison.OrdinalIgnoreCase);\n        }\n\n        [Fact]\n        public async Task AddProductAsync_Should_Fail_When_Product_Name_Already_Exists_For_Business()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var businessId = Guid.NewGuid();\n            var dto = new CreateProductDto\n            {\n                BusinessId = businessId,\n                Name = \"Test Product\",\n                Description = \"Test Desc\",\n                Price = 99.99m,\n                Currency = \"INR\",\n                ImageUrl = \"img.jpg\"\n            };\n\n            // Add first product\n            var firstResult = await service.AddProductAsync(dto);\n            Assert.True(firstResult.Success);\n\n            // Try to add duplicate\n            var secondResult = await service.AddProductAsync(dto);\n\n            // Assert\n            Assert.False(secondResult.Success);\n            Assert.Contains(\"already exists\", secondResult.Message ?? \"\", StringComparison.OrdinalIgnoreCase);\n        }\n\n   \n        [Fact]\n        public async Task RemoveProductAsync_Should_Delete_Product_And_Return_Success()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var businessId = Guid.NewGuid();\n\n            // Add product to delete later\n            var createDto = new CreateProductDto\n            {\n                BusinessId = businessId,\n                Name = \"Delete Me\",\n                Description = \"To be deleted\",\n                Price = 10.0m,\n                Currency = \"INR\",\n                ImageUrl = \"delete.jpg\"\n            };\n            var addResult = await service.AddProductAsync(createDto);\n            Assert.True(addResult.Success);\n\n            var product = await context.Products.FirstOrDefaultAsync(p => p.BusinessId == businessId && p.Name == \"Delete Me\");\n            Assert.NotNull(product);\n\n            // Act\n            var deleteResult = await service.RemoveProductAsync(product.Id, businessId);\n\n            // Assert\n            Assert.True(deleteResult.Success);\n            var deleted = await context.Products.FindAsync(product.Id);\n            Assert.Null(deleted);\n        }\n\n        [Fact]\n        public async Task RemoveProductAsync_Should_Return_Error_If_Product_Not_Found()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var fakeProductId = Guid.NewGuid();\n            var fakeBusinessId = Guid.NewGuid();\n\n            // Act\n            var result = await service.RemoveProductAsync(fakeProductId, fakeBusinessId);\n\n            // Assert\n            Assert.False(result.Success);\n            Assert.Contains(\"not found\", result.Message, StringComparison.OrdinalIgnoreCase);\n        }\n        [Fact]\n        public async Task UpdateProductAsync_Should_Update_Product_And_Return_Success()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            // First, add a product to update\n            var businessId = Guid.NewGuid();\n            var product = new Product\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Original\",\n                Description = \"Old\",\n                Price = 10,\n                Currency = \"INR\",\n                ImageUrl = \"old.jpg\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n            context.Products.Add(product);\n            await context.SaveChangesAsync();\n\n            var updateDto = new UpdateProductDto\n            {\n                Id = product.Id,\n                BusinessId = businessId,\n                Name = \"Updated\",\n                Description = \"Updated Desc\",\n                Price = 20,\n                Currency = \"USD\",\n                ImageUrl = \"new.jpg\"\n            };\n\n            // Act\n            var result = await service.UpdateProductAsync(updateDto);\n\n            // Assert\n            Assert.True(result.Success);\n            var updated = await context.Products.FindAsync(product.Id);\n            Assert.Equal(\"Updated\", updated.Name);\n            Assert.Equal(\"Updated Desc\", updated.Description);\n            Assert.Equal(20, updated.Price);\n            Assert.Equal(\"USD\", updated.Currency);\n            Assert.Equal(\"new.jpg\", updated.ImageUrl);\n        }\n        [Fact]\n        public async Task UpdateProductAsync_Should_Return_Error_If_Product_Not_Found()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var updateDto = new UpdateProductDto\n            {\n                Id = Guid.NewGuid(), // Non-existent ID\n                BusinessId = Guid.NewGuid(),\n                Name = \"Doesn't Matter\",\n                Description = \"\",\n                Price = 0,\n                Currency = \"\",\n                ImageUrl = \"\"\n            };\n\n            // Act\n            var result = await service.UpdateProductAsync(updateDto);\n\n            // Assert\n            Assert.False(result.Success);\n            Assert.Contains(\"not found\", result.Message, StringComparison.OrdinalIgnoreCase);\n        }\n\n        [Fact]\n        public async Task GetProductsByBusinessIdAsync_Should_Return_Products_For_Business()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var businessId = Guid.NewGuid();\n\n            // Seed with products for this business\n            context.Products.AddRange(\n                new Product\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = \"Product 1\",\n                    Description = \"Desc 1\",\n                    Price = 10,\n                    Currency = \"INR\",\n                    ImageUrl = \"1.jpg\",\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow\n                },\n                new Product\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = \"Product 2\",\n                    Description = \"Desc 2\",\n                    Price = 20,\n                    Currency = \"INR\",\n                    ImageUrl = \"2.jpg\",\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow\n                },\n                // Product for another business (should not be returned)\n                new Product\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = Guid.NewGuid(),\n                    Name = \"Other Business\",\n                    Description = \"\",\n                    Price = 5,\n                    Currency = \"INR\",\n                    ImageUrl = \"other.jpg\",\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow\n                }\n            );\n            await context.SaveChangesAsync();\n\n            // Act\n            var result = await service.GetProductsByBusinessIdAsync(businessId);\n\n            // Assert\n            Assert.True(result.Success);\n            var list = Assert.IsAssignableFrom<System.Collections.IEnumerable>(result.Data);\n            var products = ((System.Collections.Generic.IEnumerable<object>)list).Cast<dynamic>().ToList();\n\n            Assert.Equal(2, products.Count);\n            Assert.All(products, p => Assert.Equal(businessId, (Guid)p.BusinessId));\n        }\n        [Fact]\n        public async Task GetProductsByBusinessIdAsync_Should_Return_Empty_If_None()\n        {\n            // Arrange\n            var context = GetInMemoryDbContext();\n            var service = new ProductService(context);\n\n            var businessId = Guid.NewGuid(); // No products for this ID\n\n            // Act\n            var result = await service.GetProductsByBusinessIdAsync(businessId);\n\n            // Assert\n            Assert.True(result.Success);\n            var list = Assert.IsAssignableFrom<System.Collections.IEnumerable>(result.Data);\n            Assert.Empty(list);\n        }\n\n    }\n}\n"
    },
    {
      "path": "xbytechat.Tests/Features/Catalog/Services/TestHelper.cs",
      "sha256": "5545c0575509a71be460aaaaba366680b660dd067b71ecd33ebaf56aa810942d",
      "language": "csharp",
      "size": 2162,
      "content": "// File: xbytechat.Tests/TestHelper.cs\n\nusing System;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Models.BusinessModel;\n\nnamespace xbytechat.Tests\n{\n    public static class TestHelper\n    {\n        /// <summary>\n        /// Creates a ready-to-use Business entity, including BusinessPlanInfo.\n        /// </summary>\n        public static Business CreateTestBusiness(\n            Guid? id = null,\n            string? companyName = null,\n            string? businessEmail = null,\n            PlanType plan = PlanType.Basic)\n        {\n            var businessId = id ?? Guid.NewGuid();\n            return new Business\n            {\n                Id = businessId,\n                CompanyName = companyName ?? \"TestCompany\",\n                BusinessName = companyName ?? \"TestCompany Pvt Ltd\",\n                BusinessEmail = businessEmail ?? \"info@testcompany.com\",\n                CreatedAt = DateTime.UtcNow,\n                BusinessPlanInfo = new BusinessPlanInfo\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Plan = plan,\n                    TotalMonthlyQuota = 1000,\n                    RemainingMessages = 1000,\n                    QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                    WalletBalance = 0,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow\n                }\n            };\n        }\n\n        /// <summary>\n        /// Creates a Contact for a given business.\n        /// </summary>\n        public static Contact CreateTestContact(\n            Guid? id = null,\n            Guid? businessId = null,\n            string? name = null,\n            string? phone = null)\n        {\n            return new Contact\n            {\n                Id = id ?? Guid.NewGuid(),\n                BusinessId = businessId ?? Guid.NewGuid(),\n                Name = name ?? \"Test User\",\n                PhoneNumber = phone ?? \"9990001111\",\n                CreatedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat.Tests/Features/Contacts/ContactServiceTests.cs",
      "sha256": "a73eb62f81599d2f2034b371b0aaeb771a0271cd16bf6b2b2a9231e3345fbdb8",
      "language": "csharp",
      "size": 8175,
      "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing CsvHelper.Configuration;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing Moq;\nusing Xunit;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.Tests.CRM.Services\n{\n    public class ContactServiceTests : IDisposable\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly Mock<ILogger<ContactService>> _loggerMock;\n        private readonly ContactService _contactService;\n\n        public ContactServiceTests()\n        {\n            var options = new DbContextOptionsBuilder<AppDbContext>()\n                .UseInMemoryDatabase(databaseName: $\"TestDb_{Guid.NewGuid()}\")\n                .Options;\n\n            _dbContext = new AppDbContext(options);\n            _loggerMock = new Mock<ILogger<ContactService>>();\n            _contactService = new ContactService(_dbContext, _loggerMock.Object);\n        }\n\n        public void Dispose()\n        {\n            _dbContext?.Dispose();\n        }\n\n        [Fact]\n        public async Task AddContactAsync_ShouldAddContact()\n        {\n            var dto = new ContactDto\n            {\n                Name = \"Test User\",\n                PhoneNumber = \"1234567890\",\n                Email = \"test@example.com\"\n            };\n            var businessId = Guid.NewGuid();\n\n            var result = await _contactService.AddContactAsync(businessId, dto);\n\n            Assert.NotNull(result);\n            Assert.Equal(dto.Name, result.Name);\n            Assert.Equal(dto.PhoneNumber, result.PhoneNumber);\n\n            var contactInDb = await _dbContext.Contacts.FindAsync(result.Id);\n            Assert.NotNull(contactInDb);\n            Assert.Equal(businessId, contactInDb.BusinessId);\n            Assert.True(contactInDb.IsActive);\n        }\n\n        [Fact]\n        public async Task GetContactByIdAsync_ShouldReturnContact_WhenExists()\n        {\n            var businessId = Guid.NewGuid();\n            var contact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Existing User\",\n                PhoneNumber = \"0987654321\",\n                IsActive = true\n            };\n            _dbContext.Contacts.Add(contact);\n            await _dbContext.SaveChangesAsync();\n\n            var result = await _contactService.GetContactByIdAsync(businessId, contact.Id);\n\n            Assert.NotNull(result);\n            Assert.Equal(contact.Name, result.Name);\n        }\n\n        [Fact]\n        public async Task GetContactByIdAsync_ShouldReturnNull_WhenInactive()\n        {\n            var businessId = Guid.NewGuid();\n            var contact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Inactive User\",\n                PhoneNumber = \"0000000000\",\n                IsActive = false\n            };\n            _dbContext.Contacts.Add(contact);\n            await _dbContext.SaveChangesAsync();\n\n            var result = await _contactService.GetContactByIdAsync(businessId, contact.Id);\n\n            Assert.Null(result);\n        }\n\n        [Fact]\n        public async Task UpdateContactAsync_ShouldReturnFalse_WhenNotFound()\n        {\n            var businessId = Guid.NewGuid();\n            var dto = new ContactDto { Id = Guid.NewGuid(), Name = \"New Name\" };\n\n            var success = await _contactService.UpdateContactAsync(businessId, dto);\n\n            Assert.False(success);\n        }\n\n        [Fact]\n        public async Task UpdateContactAsync_ShouldUpdateContact_WhenFound()\n        {\n            var businessId = Guid.NewGuid();\n            var contact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Old Name\",\n                PhoneNumber = \"1112223333\",\n                IsActive = true\n            };\n            _dbContext.Contacts.Add(contact);\n            await _dbContext.SaveChangesAsync();\n\n            var dto = new ContactDto\n            {\n                Id = contact.Id,\n                Name = \"Updated Name\",\n                PhoneNumber = contact.PhoneNumber\n            };\n\n            var success = await _contactService.UpdateContactAsync(businessId, dto);\n\n            Assert.True(success);\n\n            var updated = await _dbContext.Contacts.FindAsync(contact.Id);\n            Assert.Equal(\"Updated Name\", updated.Name);\n        }\n\n        [Fact]\n        public async Task DeleteContactAsync_ShouldSoftDelete_WhenFound()\n        {\n            var businessId = Guid.NewGuid();\n            var contact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"To Delete\",\n                PhoneNumber = \"9998887777\",\n                IsActive = true\n            };\n            _dbContext.Contacts.Add(contact);\n            await _dbContext.SaveChangesAsync();\n\n            var success = await _contactService.DeleteContactAsync(businessId, contact.Id);\n\n            Assert.True(success);\n\n            var deleted = await _dbContext.Contacts.FindAsync(contact.Id);\n            Assert.False(deleted.IsActive);\n        }\n\n        [Fact]\n        public async Task GetPagedContactsAsync_ShouldReturnCorrectPage()\n        {\n            var businessId = Guid.NewGuid();\n\n            for (int i = 1; i <= 50; i++)\n            {\n                _dbContext.Contacts.Add(new Contact\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = $\"User {i}\",\n                    PhoneNumber = $\"100000000{i}\",\n                    IsActive = true\n                });\n            }\n            await _dbContext.SaveChangesAsync();\n\n            //var page1 = await _contactService.GetPagedContactsAsync(businessId, page: 1, pageSize: 10);\n            //var page2 = await _contactService.GetPagedContactsAsync(businessId, page: 2, pageSize: 10);\n\n            Assert.Equal(50, page1.TotalCount);\n            Assert.Equal(10, page1.Items.Count);\n            Assert.Equal(\"User 1\", page1.Items.First().Name);\n\n            Assert.Equal(10, page2.Items.Count);\n            Assert.Equal(\"User 11\", page2.Items.First().Name);\n        }\n\n        [Fact]\n        public async Task ToggleFavoriteAsync_ShouldToggleValue()\n        {\n            var businessId = Guid.NewGuid();\n            var contact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = \"Fav User\",\n                PhoneNumber = \"5554443333\",\n                IsFavorite = false,\n                IsActive = true\n            };\n            _dbContext.Contacts.Add(contact);\n            await _dbContext.SaveChangesAsync();\n\n            var firstToggle = await _contactService.ToggleFavoriteAsync(businessId, contact.Id);\n            Assert.True(firstToggle);\n\n            var updated = await _dbContext.Contacts.FindAsync(contact.Id);\n            Assert.True(updated.IsFavorite);\n\n            var secondToggle = await _contactService.ToggleFavoriteAsync(businessId, contact.Id);\n            Assert.True(secondToggle);\n\n            updated = await _dbContext.Contacts.FindAsync(contact.Id);\n            Assert.False(updated.IsFavorite);\n        }\n\n        [Fact]\n        public async Task ParseCsvToContactsAsync_ShouldReturnSuccessAndErrors()\n        {\n            var csvContent = \"Name,PhoneNumber,Email\\nJohn Doe,1234567890,john@example.com\\nInvalid Line\\nJane Doe,0987654321,jane@example.com\\n\";\n            using var stream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(csvContent));\n\n            var result = await _contactService.ParseCsvToContactsAsync(Guid.NewGuid(), stream);\n\n            Assert.NotNull(result);\n            Assert.Equal(2, result.SuccessRecords.Count);\n            Assert.Single(result.Errors);\n            Assert.Contains(\"RowNumber\", result.Errors[0].RowNumber.ToString());\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat.Tests/GlobalUsings.cs",
      "sha256": "e8de9b91579ba661cbfebd3912328c2dc917d2a519cc565b717446c7f39e6d33",
      "language": "csharp",
      "size": 19,
      "content": "global using Xunit;"
    },
    {
      "path": "xbytechat.Tests/UnitTest1.cs",
      "sha256": "bd14646b373937ec32275b7af527748d842f8b42ab55c57ffcf44849057e150d",
      "language": "csharp",
      "size": 132,
      "content": "namespace xbytechat.Tests\n{\n    public class UnitTest1\n    {\n        [Fact]\n        public void Test1()\n        {\n\n        }\n    }\n}"
    },
    {
      "path": "xbytechat.Tests/xbytechat.Tests.csproj",
      "sha256": "968d958f7ae388ba6e9afc6fd3e78d7597f7f988c03a9b2331604db4dca47bcd",
      "language": "text",
      "size": 1417,
      "content": "<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"Features\\Contacts\\ContactServiceTests.cs\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"FluentAssertions\" Version=\"8.3.0\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" Version=\"8.0.15\" />\n<!---->    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.6.0\" />\n    <PackageReference Include=\"Moq\" Version=\"4.20.72\" />\n    <PackageReference Include=\"xunit\" Version=\"2.4.2\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.5\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\" Version=\"6.0.0\">\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      <PrivateAssets>all</PrivateAssets>\n    </PackageReference>\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\xbytechat-api\\xbytechat.api.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <Folder Include=\"Features\\Contacts\\\" />\n  </ItemGroup>\n\n</Project>\n"
    }
  ]
}
