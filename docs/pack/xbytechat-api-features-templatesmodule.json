{
  "name": "xbytechat-api/Features/TemplatesModule",
  "generatedAt": "2025-09-05 11:57:45 +00:00",
  "files": [
    {
      "path": "xbytechat-api/Features/TemplatesModule/Controllers/TemplatesController.cs",
      "sha256": "b7014e9c08b5d3cf85e8dbd5edf632bc51e34a2acac661dbb3109dcd259edf4c",
      "language": "csharp",
      "size": 1479,
      "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateModule.Services;\n\nnamespace xbytechat.api.Features.TemplateModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateService _templateService;\n        private readonly ILogger<TemplatesController> _logger;\n\n        public TemplatesController(IWhatsAppTemplateService templateService, ILogger<TemplatesController> logger)\n        {\n            _templateService = templateService;\n            _logger = logger;\n        }\n\n        /// <summary>\n        /// Fetches WhatsApp template metadata (name, language, body, placeholders)\n        /// </summary>\n        [HttpGet(\"metadata\")]\n        public async Task<IActionResult> GetTemplates()\n        {\n            try\n            {\n                var templates = await _templateService.FetchTemplatesAsync();\n                return Ok(new\n                {\n                    success = true,\n                    templates\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error fetching template metadata: \" + ex.Message);\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"‚ùå Failed to retrieve template metadata\",\n                    error = ex.Message\n                });\n            }\n        }\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/IWhatsAppTemplateService.cs",
      "sha256": "2ed5f5891246b4fec02e29892760c3d033e76572488701c525fd801763f742a9",
      "language": "csharp",
      "size": 226,
      "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public interface IWhatsAppTemplateService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync();\n    }\n}\n"
    },
    {
      "path": "xbytechat-api/Features/TemplatesModule/Services/WhatsAppTemplateService.cs",
      "sha256": "ee70376834e701f63425a69d50a4ea5d02170321edf828fe7fd2bd5d100bf3a1",
      "language": "csharp",
      "size": 2815,
      "content": "using Microsoft.Extensions.Configuration;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public class WhatsAppTemplateService : IWhatsAppTemplateService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n\n        public WhatsAppTemplateService(HttpClient httpClient, IConfiguration config, ILogger<WhatsAppTemplateService> logger)\n        {\n            _httpClient = httpClient;\n            _config = config;\n            _logger = logger;\n        }\n\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var token = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v18.0/{wabaId}/message_templates\";\n\n            var templates = new List<TemplateMetadataDto>();\n\n            try\n            {\n                _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", token);\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch WhatsApp templates: \" + json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n\n                    foreach (var component in tpl.components)\n                    {\n                        if (component.type == \"BODY\")\n                        {\n                            body = component.text;\n                            break;\n                        }\n                    }\n\n                    // Count {{placeholders}}\n                    var placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount\n                    });\n                }\n\n                return templates;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error while fetching templates from Meta: \" + ex.Message);\n                return templates;\n            }\n        }\n    }\n}\n"
    }
  ]
}
