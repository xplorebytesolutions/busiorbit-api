{
  "version": "1.0",
  "generatedAt": "2025-08-11 13:31:07 +00:00",
  "modules": [
    {
      "name": "Backend",
      "files": [
        {
          "path": "xbytechat-api/appsettings.Development.json",
          "sha256": "35b022f5fc4de497478a081242e17f923b0e21a2c3759fd915dbd31f7704e8cb",
          "language": "json",
          "content": "{\n  \"ConnectionStrings\": {\n    // \"DefaultConnection\": \"Host=localhost;Port=5432;Database=xplorebyte_db;Username=postgres;Password=xplore2025\"\n    // \"DefaultConnection\": \"Host=db.lxsqynuvccxyhltureew.supabase.co;Port=5432;Database=postgres;Username=postgres;Password=M_Eys9K@r/#PACt;SSL Mode=Require;Trust Server Certificate=true;\",\n    \"DefaultConnection\": \"Host=ep-sweet-bar-aa16yopw-pooler.westus3.azure.neon.tech; Database=neondb; Username=neondb_owner; Password=npg_LW6vslyGz4YA; SSL Mode=VerifyFull; Channel Binding=Require;\"\n\n  },\n  \"Cors\": {\n    \"AllowedOrigins\": [\n      \"http://localhost:3000\",\n      \"https://lively-field-0de5b8a00.1.azurestaticapps.net\",\n      \"http://localhost:7113\",\n      \"https://localhost:7114\"\n    ]\n  },\n  \"JwtSettings\": {\n    \"SecretKey\": \"dev-sevictcret-key-only-cliff-0a-for-tevictsting\"\n  },\n  \"WhatsApp\": {\n    \"ApiToken\": \"EAAIo1fBYKV8BO6tGEYsdH461nPYdyJzlMorCAHYtiasvUorEYUcGCaRdzy0IMhh1D6h1ZBYHLbNWbvF2FrvlaviZCwhZCPeGKE2t62BTp77Ha1IwGvNlEeagFiZBiU7LrkMw11fOPng2PgDphl2vp3DTyZBtICJkhy6ikPGvylZA5aM2oWLoIBS6zZB6vOygIFLmgFKoC7lqYPpP8JydDJI9bVN6Kx73CZAtGS9abjGxnHAZD\",\n    \"PhoneNumberId\": \"601884673011340\",\n    \"MetaToken\": \"xbytechat-secret-token\"\n  }\n}\n\n\n\n//{\n//  \"Logging\": {\n//    \"LogLevel\": {\n//      \"Default\": \"Information\",\n//      \"Microsoft.AspNetCore\": \"Warning\"\n//    }\n//  },\n//  \"Cors\": {\n//    \"AllowedOrigins\": [\n//      \"https://victorious-cliff-0ae029a00.1.azurestaticapps.net\",\n//      \"http://localhost:3000\"\n\n//    ]\n//  }\n//}\n"
        },
        {
          "path": "xbytechat-api/appsettings.json",
          "sha256": "058d76bd941f2b897aa4c3aba08e9314331322f189d187547969a9819ca3e9a1",
          "language": "json",
          "content": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"JwtSettings\": {\n    \"Issuer\": \"xbytechat-api\",\n    \"Audience\": \"xbytechat-client\",\n    \"ExpiryMinutes\": 60\n    // Leave SecretKey blank here\n  },\n  \"WhatsApp\": {\n    // Put only non-secret defaults here (e.g. API base URL)\n    \"ApiUrl\": \"https://graph.facebook.com/v22.0/601884673011340/messages\",\n    \"WABA_ID\": \"999432368375320\"\n  },\n  \"Cors\": {\n    \"AllowedOrigins\": []\n    // you override this per environment\n  },\n  \"ConnectionStrings\": {\n    // leave empty; override via environment or Key Vault\n    \"DefaultConnection\": \"\"\n  }\n}\n\n\n//{\n//  \"Logging\": {\n//    \"LogLevel\": {\n//      \"Default\": \"Information\",\n//      \"Microsoft.AspNetCore\": \"Warning\",\n//      \"Microsoft.Hosting.Lifetime\": \"Information\" // this lines is used to display log in output window\n//    }\n//  },\n//  \"AllowedHosts\": \"*\",\n//  \"WhatsApp\": {\n//    \"ApiUrl\": \"https://graph.facebook.com/v22.0/601884673011340/messages\",\n//    \"ApiToken\": \"EAAIo1fBYKV8BO6tGEYsdH461nPYdyJzlMorCAHYtiasvUorEYUcGCaRdzy0IMhh1D6h1ZBYHLbNWbvF2FrvlaviZCwhZCPeGKE2t62BTp77Ha1IwGvNlEeagFiZBiU7LrkMw11fOPng2PgDphl2vp3DTyZBtICJkhy6ikPGvylZA5aM2oWLoIBS6zZB6vOygIFLmgFKoC7lqYPpP8JydDJI9bVN6Kx73CZAtGS9abjGxnHAZD\",\n//    \"PhoneNumberId\": \"601884673011340\",\n//    \"MetaToken\": \"xbytechat-secret-token\",\n//    \"WABA_ID\": \"999432368375320\"\n\n//  },\n//  \"ConnectionStrings\": {\n//    \"DefaultConnection\": \"Host=localhost;Port=5432;Database=xplorebyte_db;Username=postgres;Password=xplore2025\",\n//    \"postgresql\": null, //postgres:[YOUR-PASSWORD]@db.lxsqynuvccxyhltureew.supabase.co:5432/postgres\n//    \"DefaultConnection\": \"Host=db.lxsqynuvccxyhltureew.supabase.co;Port=5432;Database=postgres;Username=postgres;Password=M_Eys9K@r/#PACt;SSL Mode=Require;Trust Server Certificate=true;\"\n\n//  },\n//  \"JwtSettings\": {\n//    \"SecretKey\": \"your_super_secret_key_here_1234567890\", // 🔒 make it strong\n//    \"Issuer\": \"xbytechat-api\",\n//    \"Audience\": \"xbytechat-client\",\n//    \"ExpiryMinutes\": 60\n//  }\n\n\n\n//}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Controllers/AuthController.cs",
          "sha256": "ce71246c74ec02c0bea6716f2f97e3cec601650c44bd545fd698c7b1935f1e65",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.Features.BusinessModule.DTOs;\n\nnamespace xbytechat.api.AuthModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class AuthController : ControllerBase\n    {\n        private readonly IAuthService _authService;\n\n        public AuthController(IAuthService authService)\n        {\n            _authService = authService;\n        }\n\n        // ✅ Login → return { token } (NO cookies)\n        [AllowAnonymous]\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] UserLoginDto dto)\n        {\n            var result = await _authService.LoginAsync(dto);\n            if (!result.Success || string.IsNullOrWhiteSpace(result.Token))\n                return Unauthorized(new { success = false, message = result.Message });\n\n            return Ok(new { token = result.Token });\n        }\n\n        // (Optional) Refresh token endpoint if you still issue refresh tokens.\n        // Returns tokens in body (NO cookies).\n        [AllowAnonymous]\n        [HttpPost(\"refresh-token\")]\n        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)\n        {\n            var result = await _authService.RefreshTokenAsync(request.RefreshToken);\n            if (!result.Success) return Unauthorized(new { success = false, message = result.Message });\n\n            dynamic data = result.Data!;\n            return Ok(new\n            {\n                accessToken = data.accessToken,\n                refreshToken = data.refreshToken\n            });\n        }\n        // ✅ Signup\n        [HttpPost(\"business-user-signup\")]\n        public async Task<IActionResult> Signup([FromBody] SignupBusinessDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values\n                    .SelectMany(v => v.Errors)\n                    .Select(e => e.ErrorMessage)\n                    .ToList();\n\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"❌ Validation failed.\",\n                    errors\n                });\n            }\n\n            var result = await _authService.SignupAsync(dto);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        // ✅ Logout (stateless JWT): nothing server-side to do\n        [Authorize]\n        [HttpPost(\"logout\")]\n        public IActionResult Logout() => Ok(new { success = true, message = \"Logged out\" });\n\n        // ✅ (Optional) lightweight session echo from claims (works with Bearer)\n        [Authorize]\n        [HttpGet(\"session\")]\n        public IActionResult GetSession()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true }) return BadRequest(\"Invalid session\");\n\n            var email = user.FindFirst(ClaimTypes.Email)?.Value ?? \"unknown\";\n            var role = user.FindFirst(ClaimTypes.Role)?.Value\n                       ?? user.FindFirst(\"role\")?.Value\n                       ?? \"unknown\";\n            var plan = user.FindFirst(\"plan\")?.Value ?? \"basic\";\n            var biz = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new { isAuthenticated = true, role, email, plan, businessId = biz });\n        }\n\n        [Authorize]\n        [HttpGet(\"features\")]\n        public async Task<IActionResult> GetFeatureAccess()\n        {\n            var result = await _authService.GetFeatureAccessForUserAsync(User);\n            return Ok(result.Features);\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using xbytechat.api.AuthModule.DTOs;\n//using xbytechat.api.AuthModule.Services;\n//using xbytechat.api.Features.BusinessModule.DTOs;\n//using System.Security.Claims;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Features.FeatureAccessModule.Services;\n//using xbytechat.api.Features.FeatureAccess;\n//namespace xbytechat.api.AuthModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class AuthController : ControllerBase\n//    {\n//        private readonly IAuthService _authService;\n//        private readonly IFeatureAccessService _featureAccessService;\n//        public AuthController(IAuthService authService, IFeatureAccessService featureAccessService)\n//        {\n//            _authService = authService;\n//            _featureAccessService = featureAccessService;\n//        }\n\n//        // ✅ Login\n//        [AllowAnonymous]\n//        [HttpPost(\"login\")]\n//        public async Task<IActionResult> Login([FromBody] UserLoginDto dto)\n//        {\n//            var result = await _authService.LoginAsync(dto);\n\n//            if (!result.Success || string.IsNullOrWhiteSpace(result.Token))\n//                return Unauthorized(result);\n\n//            JwtCookieHelper.SetJwtCookie(HttpContext, \"xbyte_token\", result.Token);\n\n//            if (!string.IsNullOrEmpty(result.RefreshToken))\n//            {\n//                JwtCookieHelper.SetRefreshTokenCookie(HttpContext, \"xbyte_refresh\", result.RefreshToken);\n//            }\n\n//            return Ok(new\n//            {\n//                success = true,\n//                message = result.Message,\n//                data = result.Data\n//            });\n//        }\n\n//        // ✅ Refresh Token\n//        // ✅ Refresh Token with cookie update\n//        [AllowAnonymous]\n//        [HttpPost(\"refresh-token\")]\n//        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)\n//        {\n//            var result = await _authService.RefreshTokenAsync(request.RefreshToken);\n\n//            if (!result.Success)\n//                return Unauthorized(result);\n\n//            dynamic data = result.Data;\n//            var newAccessToken = data?.accessToken?.ToString();\n//            var newRefreshToken = data?.refreshToken?.ToString();\n\n//            // ✅ Set new JWT token in cookie\n//            if (!string.IsNullOrEmpty(newAccessToken))\n//                JwtCookieHelper.SetJwtCookie(HttpContext, \"xbyte_token\", newAccessToken);\n\n//            // ✅ Set new refresh token in cookie (rotated)\n//            if (!string.IsNullOrEmpty(newRefreshToken))\n//                JwtCookieHelper.SetRefreshTokenCookie(HttpContext, \"xbyte_refresh\", newRefreshToken);\n\n//            return Ok(new\n//            {\n//                success = true,\n//                message = result.Message\n//            });\n//        }\n\n//        // ✅ Logout\n//        [HttpPost(\"logout\")]\n//        public IActionResult Logout()\n//        {\n//            JwtCookieHelper.ClearJwtCookie(HttpContext, \"xbyte_token\");\n//            return Ok(new\n//            {\n//                success = true,\n//                message = \"🚪 Logged out successfully\"\n//            });\n//        }\n\n//        // ✅ Signup\n//        [HttpPost(\"business-user-signup\")]\n//        public async Task<IActionResult> Signup([FromBody] SignupBusinessDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//            {\n//                var errors = ModelState.Values\n//                    .SelectMany(v => v.Errors)\n//                    .Select(e => e.ErrorMessage)\n//                    .ToList();\n\n//                return BadRequest(new\n//                {\n//                    success = false,\n//                    message = \"❌ Validation failed.\",\n//                    errors\n//                });\n//            }\n\n//            var result = await _authService.SignupAsync(dto);\n//            return result.Success ? Ok(result) : BadRequest(result);\n//        }\n\n//        // 🔁 Resend confirmation\n//        [HttpPost(\"resend-confirmation\")]\n//        public async Task<IActionResult> ResendConfirmation([FromBody] ResendConfirmationDto dto)\n//        {\n//            var result = await _authService.ResendConfirmationAsync(dto);\n//            return result.Success ? Ok(result) : BadRequest(result);\n//        }\n\n//        // 🔐 Reset password\n//        [HttpPost(\"reset-password\")]\n//        public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordDto dto)\n//        {\n//            var result = await _authService.ResetPasswordAsync(dto);\n//            return result.Success ? Ok(result) : BadRequest(result);\n//        }\n//        [Authorize]\n//        [HttpGet(\"features\")]\n//        public async Task<IActionResult> GetFeatureAccess()\n//        {\n//            var result = await _authService.GetFeatureAccessForUserAsync(User);\n//            return Ok(result.Features);\n//        }\n//        // ✅ Session Info\n//        [Authorize]\n//        [HttpGet(\"session\")]\n//        public IActionResult GetSession()\n//        {\n//            var identity = HttpContext.User.Identity as ClaimsIdentity;\n//            if (identity == null || !identity.IsAuthenticated)\n//                return BadRequest(\"Invalid session\");\n\n//            var email = identity.FindFirst(ClaimTypes.Email)?.Value ?? \"unknown\";\n//            var role = identity.FindFirst(ClaimTypes.Role)?.Value ?? \"unknown\";\n//            var plan = identity.FindFirst(\"Plan\")?.Value ?? \"basic\";\n\n//            return Ok(new\n//            {\n//                isAuthenticated = true,\n//                role = role,\n//                email = email,\n//                plan = plan\n//            });\n//        }\n\n\n//    }\n\n//}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Controllers/TestJwtController.cs",
          "sha256": "c407c3fdf8977cffcb0cd6131f617087ede160fd75646be61000b68f7a455a22",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.AuthModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/auth/test\")]\n    public class TestJwtController : ControllerBase\n    {\n        [Authorize]\n        [HttpGet(\"get-logged-in\")]\n        public IActionResult GetLoggedInUserInfo()\n        {\n            var userId = UserContextHelper.GetUserId(User);\n            var businessId = UserContextHelper.GetBusinessId(User);\n            var role = UserContextHelper.GetRole(User);\n            var plan = UserContextHelper.GetPlan(User);\n            var companyName = UserContextHelper.GetCompanyName(User);\n\n            return Ok(new\n            {\n                success = true,\n                message = \"🔐 JWT is valid. Here's your decoded info:\",\n                data = new\n                {\n                    userId,\n                    businessId,\n                    role,\n                    plan,\n                    companyName\n                }\n            });\n        }\n\n        [HttpGet(\"get-current-user\")]\n        public IActionResult GetCurrentUser()\n        {\n            if (User?.Identity?.IsAuthenticated != true)\n            {\n                return Unauthorized(new { success = false, message = \"❌ Not authenticated\" });\n            }\n\n            var userId = User.FindFirst(\"sub\")?.Value;\n            var email = User.FindFirst(\"email\")?.Value;\n            var role = User.FindFirst(\"role\")?.Value;\n            var businessId = User.FindFirst(\"businessId\")?.Value;\n            var plan = User.FindFirst(\"plan\")?.Value;\n            var permissions = User.FindFirst(\"permissions\")?.Value;\n\n            return Ok(new\n            {\n                success = true,\n                message = \"✅ Token is valid\",\n                user = new\n                {\n                    userId,\n                    email,\n                    role,\n                    businessId,\n                    plan,\n                    permissions\n                }\n            });\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/AuthModule/DTOs/FeatureAccessDto.cs",
          "sha256": "2cd5dd1900f770fb91216632561ec241edda181aa0f8f394ca384f8ce04f70b0",
          "language": "csharp",
          "content": "// 📁 xbytechat.api/AuthModule/DTOs/FeatureAccessDto.cs\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Dictionary<string, bool> Features { get; set; } = new();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/DTOs/RefreshTokenRequest.cs",
          "sha256": "5f68342bebd5c2664561285523bcabe509a7ffe5fe9c995eeeaf821aba238e2d",
          "language": "csharp",
          "content": "namespace xbytechat.api.AuthModule.DTOs\n{\n    public class RefreshTokenRequest\n    {\n        public string RefreshToken { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/DTOs/ResendConfirmationDto.cs",
          "sha256": "c390da7f0aa2324928025edc1a4ce1c65e079357cb2219fade8cdc4153734982",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class ResendConfirmationDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/AuthModule/DTOs/ResetPasswordDto.cs",
          "sha256": "33b22ea5acec9376aef19d7c09ff580b689f7a6bc04ea1d6f214dd9b203de0c4",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class ResetPasswordDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        [MinLength(6, ErrorMessage = \"Password must be at least 6 characters long.\")]\n        public string NewPassword { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/DTOs/UserDto.cs",
          "sha256": "c8fac7c15eafd37ea475d69d23d7448809fe9be92d3b2617370b705721b860d3",
          "language": "csharp",
          "content": "namespace xbytechat.api.AuthModule.DTOs\n{\n    public class UserDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Email { get; set; }\n        public string Role { get; set; }\n        public string Status { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n        // ✅ Extra fields\n        public Guid BusinessId { get; set; }\n        public string CompanyName { get; set; }\n        public string Plan { get; set; }\n        public string AccessToken { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/DTOs/UserLoginDto.cs",
          "sha256": "d0b1140af88b221c2cb7dbd58223d5803643620b16d27f016aba26ed9b816482",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.AuthModule.DTOs\n{\n    public class UserLoginDto\n    {\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string Password { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Models/User.cs",
          "sha256": "25f82a426c60ebda55385071a527cb10389e2f164415031be0a718cc4dc8f768",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models; // 🆕 Required for navigation\n\nnamespace xbytechat.api.AuthModule.Models\n{\n    public class User\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 FK to Business\n        public Guid? BusinessId { get; set; }\n        public Business Business { get; set; }\n\n        // 👤 User Info\n        [Required]\n        public string Name { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string PasswordHash { get; set; }\n\n        // 🛡️ Role System\n        // 🛡️ Role System (FK + Navigation)\n        public Guid? RoleId { get; set; }\n        public Role Role { get; set; }// admin / business / agent / staff\n\n        // ✅ Status Management\n        public string Status { get; set; } = \"Pending\"; // Active / Hold / Rejected / Pending\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // 🗑️ Soft Delete Role \n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n\n        public List<CampaignSendLog> SendLogs { get; set; }\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // 🆕 Permission Navigation\n        public ICollection<UserPermission> UserPermissions { get; set; } // 💡 Enables .WithMany(u => u.UserPermissions)\n        public string? RefreshToken { get; set; }\n        public DateTime? RefreshTokenExpiry { get; set; }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Roles/UserRoles.cs",
          "sha256": "5a91bb09b9b5fc0f5fe14cf1b9727c0c8a8de225c71455452a14d491125209c5",
          "language": "csharp",
          "content": "namespace xbytechat.api.AuthModule.Roles\n{\n    public static class UserRoles\n    {\n        public const string Admin = \"admin\";         // xByte Admin\n        public const string Business = \"business\";   // Tenant Admin\n        public const string Staff = \"staff\";         // CRM Staff (future)\n        public const string Agent = \"agent\";         // WhatsApp/chat agent\n        public const string CRM = \"crm\";             // CRM-only user (future)\n        public const string Partner = \"partner\";\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Services/AuthService.cs",
          "sha256": "b7d8a43e90f99562d5b03847cec6fbd79fd7009215f4a89c58388c1dc8212aed",
          "language": "csharp",
          "content": "using System.Security.Cryptography;\nusing System.Text;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Features.AccessControl.Services;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.AspNetCore.Http;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing System.Security.Claims;\nusing System.IdentityModel.Tokens.Jwt;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public class AuthService : IAuthService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IBusinessService _businessService;\n        private readonly IJwtTokenService _jwtTokenService;\n        private readonly IAccessControlService _accessControlService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly ILogger<AuthService> _logger;\n        private readonly AppDbContext _dbContext;\n        public AuthService(\n            IGenericRepository<User> userRepo,\n            IBusinessService businessService,\n            IJwtTokenService jwtTokenService,\n            IAccessControlService accessControlService,\n            IHttpContextAccessor httpContextAccessor,\n            ILogger<AuthService> logger,\n            AppDbContext dbContext)\n        {\n            _userRepo = userRepo;\n            _businessService = businessService;\n            _jwtTokenService = jwtTokenService;\n            _accessControlService = accessControlService;\n            _httpContextAccessor = httpContextAccessor;\n            _logger = logger;\n            _dbContext = dbContext;\n        }\n\n        // 🔑 Production-grade Login\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"🔑 Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"❌ Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"❌ Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"❌ Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"❌ Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"⏳ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"⏳ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName;\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    var claims = new List<Claim>\n        //    {\n        //        new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n        //        new Claim(JwtRegisteredClaimNames.Email, user.Email ?? \"\"),\n        //        new Claim(\"name\", user.Name ?? \"\"),\n        //        new Claim(ClaimTypes.Role, roleName),\n        //        new Claim(\"role\", roleName),\n        //        new Claim(\"status\", user.Status ?? \"unknown\"),\n        //        new Claim(\"plan\", planName ?? \"\"),\n        //        new Claim(\"businessId\", businessId),\n        //        new Claim(\"companyName\", companyName ?? \"\")\n        //    };\n\n        //    if (permissions?.Any() == true)\n        //    {\n        //        claims.AddRange(permissions.Select(p => new Claim(\"perm\", p)));\n        //    }\n\n        //    var token = _jwtTokenService.GenerateToken(claims);\n\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"✅ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"✅ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        // 🟢 Signup Business User\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"🔑 Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"❌ Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"❌ Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"❌ Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"❌ Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"⏳ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"⏳ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // 'superadmin', 'admin', etc.\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    // ✅ Generate token with full claims\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ✅ User info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"✅ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"✅ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"🔑 Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"❌ Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n        //    _logger.LogInformation(\"User role detected: {Role} (AdminType: {IsAdminType})\", roleName, isAdminType);\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"❌ Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService\n        //            .Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"❌ Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"❌ Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"⏳ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"⏳ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // 'superadmin', 'admin', etc.\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\";\n        //        _logger.LogInformation(\"Admin/superadmin login. Plan set as role: {Plan}\", planName);\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //        _logger.LogInformation(\"Business login. Plan: {Plan}, Company: {Company}\", planName, companyName);\n        //    }\n\n        //    // ✅ Generate token with full claims\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ✅ Store token in secure HttpOnly cookie\n        //    _httpContextAccessor.HttpContext.Response.Cookies.Append(\"xbyte_token\", token, new CookieOptions\n        //    {\n        //        HttpOnly = true,\n        //        Secure = true, // Set to false only for localhost if needed\n        //        SameSite = SameSiteMode.Lax,\n        //        Expires = DateTime.UtcNow.AddDays(7)\n        //    });\n\n        //    // ✅ User info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null\n        //    };\n\n        //    _logger.LogInformation(\"✅ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"✅ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        #region // Below Code comeneted to replace cokkies to bearer\n\n        //public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        //{\n        //    _logger.LogInformation(\"🔑 Login attempt for email: {Email}\", dto.Email);\n        //    var hashedPassword = HashPassword(dto.Password);\n\n        //    var user = await _userRepo\n        //        .AsQueryable()\n        //        .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n        //        .Include(u => u.Role)\n        //        .FirstOrDefaultAsync();\n\n        //    if (user == null)\n        //    {\n        //        _logger.LogWarning(\"❌ Login failed: Invalid email or password for {Email}\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Invalid email or password\");\n        //    }\n\n        //    var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n        //    var isAdminType = roleName == \"admin\" || roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n\n        //    if (user.BusinessId == null && !isAdminType)\n        //    {\n        //        _logger.LogWarning(\"❌ Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n        //        return ResponseResult.ErrorInfo(\"❌ Your account approval is pending. Please contact your administrator or support.\");\n        //    }\n\n        //    Business business = null;\n        //    if (user.BusinessId != null)\n        //    {\n        //        business = await _businessService.Query()\n        //            .Include(b => b.BusinessPlanInfo)\n        //            .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n        //        if (business == null)\n        //        {\n        //            _logger.LogError(\"❌ Login error: Business not found for user {UserId}\", user.Id);\n        //            return ResponseResult.ErrorInfo(\"❌ Associated business not found.\");\n        //        }\n\n        //        if (business.Status == Business.StatusType.Pending)\n        //        {\n        //            _logger.LogWarning(\"⏳ Login blocked: Business under review (BusinessId: {BusinessId})\", business.Id);\n        //            return ResponseResult.ErrorInfo(\"⏳ Your business is under review. Please wait for approval.\");\n        //        }\n        //    }\n\n        //    var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n        //    string planName;\n        //    string companyName;\n        //    string businessId = user.BusinessId?.ToString() ?? \"\";\n\n        //    if (isAdminType)\n        //    {\n        //        planName = roleName; // e.g., 'superadmin'\n        //        companyName = \"xByte Admin\";\n        //        businessId = \"\"; // Admins are not tied to a business\n        //    }\n        //    else\n        //    {\n        //        planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n        //        companyName = business?.CompanyName ?? \"\";\n        //    }\n\n        //    // ✅ Generate JWT with lowercase claim keys\n        //    var token = _jwtTokenService.GenerateToken(\n        //        user.Id.ToString(),\n        //        roleName,\n        //        user.Name ?? \"\",\n        //        user.Email ?? \"\",\n        //        user.Status ?? \"unknown\",\n        //        businessId,\n        //        companyName,\n        //        planName,\n        //        permissions ?? new List<string>()\n        //    );\n\n        //    // ✅ Store token securely as cookie (must match JwtBearer event)\n        //    _httpContextAccessor.HttpContext.Response.Cookies.Append(\"xbyte_token\", token, \n\n        //        new CookieOptions\n        //    {\n        //        HttpOnly = true,\n        //        Secure = true,\n        //       // SameSite = SameSiteMode.Strict,\n        //        SameSite = SameSiteMode.None,\n        //        Expires = DateTime.UtcNow.AddDays(7),\n        //        Domain = \"http://localhost:3000\"\n        //    });\n\n        //    // ✅ Build user info for frontend\n        //    var userDto = new UserDto\n        //    {\n        //        Id = user.Id,\n        //        Name = user.Name,\n        //        Email = user.Email,\n        //        Role = roleName,\n        //        Status = user.Status,\n        //        CreatedAt = user.CreatedAt,\n        //        BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n        //        CompanyName = companyName,\n        //        Plan = planName,\n        //        AccessToken = null // Not needed since we're using secure cookie\n        //    };\n\n        //    _logger.LogInformation(\"✅ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n        //    return new ResponseResult\n        //    {\n        //        Success = true,\n        //        Message = \"✅ Login successful\",\n        //        Data = userDto,\n        //        Token = token\n        //    };\n        //}\n\n        #endregion\n\n        public async Task<ResponseResult> LoginAsync(UserLoginDto dto)\n        {\n            _logger.LogInformation(\"🔑 Login attempt for email: {Email}\", dto.Email);\n            var hashedPassword = HashPassword(dto.Password);\n\n            var user = await _userRepo\n                .AsQueryable()\n                .Where(u => u.Email == dto.Email && u.PasswordHash == hashedPassword && !u.IsDeleted)\n                .Include(u => u.Role)\n                .FirstOrDefaultAsync();\n\n            if (user == null)\n            {\n                _logger.LogWarning(\"❌ Login failed: Invalid email or password for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"❌ Invalid email or password\");\n            }\n\n            var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n            var isAdminType = roleName is \"admin\" or \"superadmin\" or \"partner\" or \"reseller\";\n\n            if (user.BusinessId == null && !isAdminType)\n            {\n                _logger.LogWarning(\"❌ Login denied for {Email}: No BusinessId and not admin\", dto.Email);\n                return ResponseResult.ErrorInfo(\"❌ Your account approval is pending. Please contact your administrator or support.\");\n            }\n\n            Business? business = null;\n            if (user.BusinessId != null)\n            {\n                business = await _businessService.Query()\n                    .Include(b => b.BusinessPlanInfo)\n                    .FirstOrDefaultAsync(b => b.Id == user.BusinessId.Value);\n\n                if (business == null)\n                    return ResponseResult.ErrorInfo(\"❌ Associated business not found.\");\n\n                if (business.Status == Business.StatusType.Pending)\n                    return ResponseResult.ErrorInfo(\"⏳ Your business is under review. Please wait for approval.\");\n            }\n\n            var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n\n            string planName;\n            string companyName;\n            string businessId = user.BusinessId?.ToString() ?? \"\";\n\n            if (isAdminType)\n            {\n                planName = roleName;        // admin types treated as plan in UI\n                companyName = \"xByte Admin\";\n                businessId = \"\";\n            }\n            else\n            {\n                planName = business?.BusinessPlanInfo?.Plan.ToString() ?? \"basic\";\n                companyName = business?.CompanyName ?? \"\";\n            }\n\n            // ✅ Generate JWT (includes role/plan/biz + ClaimTypes.Role)\n            var token = _jwtTokenService.GenerateToken(\n                user.Id.ToString(),\n                roleName,\n                user.Name ?? \"\",\n                user.Email ?? \"\",\n                user.Status ?? \"unknown\",\n                businessId,\n                companyName,\n                planName,\n                permissions ?? new List<string>()\n            );\n\n            // ❌ NO cookie writes in Bearer mode\n\n            var userDto = new UserDto\n            {\n                Id = user.Id,\n                Name = user.Name,\n                Email = user.Email,\n                Role = roleName,\n                Status = user.Status,\n                CreatedAt = user.CreatedAt,\n                BusinessId = string.IsNullOrEmpty(businessId) ? Guid.Empty : Guid.Parse(businessId),\n                CompanyName = companyName,\n                Plan = planName,\n                AccessToken = null\n            };\n\n            _logger.LogInformation(\"✅ Login successful for {Email}, Role: {Role}, Plan: {Plan}\", dto.Email, roleName, planName);\n\n            return new ResponseResult\n            {\n                Success = true,\n                Message = \"✅ Login successful\",\n                Data = userDto,\n                Token = token\n            };\n        }\n\n        public async Task<ResponseResult> SignupAsync(SignupBusinessDto dto)\n        {\n            _logger.LogInformation(\"🟢 Signup attempt: {Email}\", dto.Email);\n            var result = await _businessService.SignupBusinessAsync(dto);\n\n            if (!result.Success)\n            {\n                _logger.LogWarning(\"❌ Signup failed for {Email}: {Msg}\", dto.Email, result.Message);\n                return ResponseResult.ErrorInfo(result.Message);\n            }\n\n            var business = await _businessService.GetBusinessByEmailAsync(dto.Email);\n\n            if (business == null)\n            {\n                _logger.LogError(\"❌ Signup succeeded but business retrieval failed for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"❌ Signup succeeded but business retrieval failed.\");\n            }\n\n            try\n            {\n                // 🆕 Set BusinessAssignedTo if available\n                if (dto.CreatedByPartnerId.HasValue && business.CreatedByPartnerId == null)\n                {\n                    business.CreatedByPartnerId = dto.CreatedByPartnerId;\n                    await _businessService.UpdateBusinessAsync(business);\n                    _logger.LogInformation(\"✅ Partner assigned during signup: {PartnerId} for Business: {BusinessId}\", dto.CreatedByPartnerId, business.Id);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Signup succeeded but assigning partner failed for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"❌ Signup succeeded but assigning partner failed: \" + ex.Message);\n            }\n\n            _logger.LogInformation(\"✅ Signup successful for {Email} (BusinessId: {BusinessId})\", dto.Email, business.Id);\n            return ResponseResult.SuccessInfo(\"✅ Signup successful. Pending approval.\", new { BusinessId = business.Id });\n        }\n\n        // 🔄 Refresh JWT Token (and Rotate)\n        public async Task<ResponseResult> RefreshTokenAsync(string refreshToken)\n        {\n            _logger.LogInformation(\"🔄 RefreshToken attempt\");\n\n            var user = await _userRepo\n                .AsQueryable()\n                .Include(u => u.Role)\n                .Include(u => u.Business)\n                    .ThenInclude(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(u => u.RefreshToken == refreshToken && u.RefreshTokenExpiry > DateTime.UtcNow);\n\n            if (user == null)\n            {\n                _logger.LogWarning(\"❌ Invalid or expired refresh token.\");\n                return ResponseResult.ErrorInfo(\"❌ Invalid or expired refresh token.\");\n            }\n\n            var permissions = await _accessControlService.GetPermissionsAsync(user.Id);\n            var roleName = user.Role?.Name?.Trim().ToLower() ?? \"unknown\";\n            var isAdminType = roleName == \"superadmin\" || roleName == \"partner\" || roleName == \"reseller\";\n\n            string planName;\n            string companyName;\n            string businessId = user.BusinessId?.ToString() ?? \"\";\n\n            if (isAdminType)\n            {\n                planName = roleName;\n                companyName = \"xByte Admin\";\n                businessId = \"\";\n            }\n            else\n            {\n                planName = user.Business?.BusinessPlanInfo?.Plan.ToString() ?? \"\";\n                companyName = user.Business?.CompanyName ?? \"\";\n            }\n\n            var claims = new List<Claim>\n            {\n                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),\n                new Claim(JwtRegisteredClaimNames.Email, user.Email ?? \"\"),\n                new Claim(\"name\", user.Name ?? \"\"),\n                new Claim(ClaimTypes.Role, roleName),\n                new Claim(\"role\", roleName),\n                new Claim(\"status\", user.Status ?? \"unknown\"),\n                new Claim(\"plan\", planName ?? \"\"),\n                new Claim(\"businessId\", businessId),\n                new Claim(\"companyName\", companyName ?? \"\")\n            };\n\n            if (permissions?.Any() == true)\n            {\n                claims.AddRange(permissions.Select(p => new Claim(\"perm\", p)));\n            }\n\n            var token = _jwtTokenService.GenerateToken(claims);\n\n            // 🔁 Rotate refresh token\n            var newRefreshToken = Guid.NewGuid().ToString(\"N\");\n            user.RefreshToken = newRefreshToken;\n            user.RefreshTokenExpiry = DateTime.UtcNow.AddDays(30);\n            _userRepo.Update(user);\n\n            _logger.LogInformation(\"🔄 Token refreshed for user {UserId}, role {Role}\", user.Id, roleName);\n\n            return ResponseResult.SuccessInfo(\"🔄 Token refreshed\", new\n            {\n                accessToken = token,\n                refreshToken = newRefreshToken\n            });\n        }\n\n        // 🔁 Resend confirmation\n        public async Task<ResponseResult> ResendConfirmationAsync(ResendConfirmationDto dto)\n        {\n            _logger.LogInformation(\"🔁 Resend confirmation attempt for {Email}\", dto.Email);\n            var business = await _businessService.GetBusinessByEmailAsync(dto.Email);\n            if (business == null)\n            {\n                _logger.LogWarning(\"❌ Resend confirmation failed: No business for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"❌ No business registered with this email\");\n            }\n\n            _logger.LogInformation(\"✅ Resend confirmation request processed for {Email}\", dto.Email);\n            return ResponseResult.SuccessInfo(\"📨 Confirmation request resent.\");\n        }\n        public async Task<FeatureAccessDto> GetFeatureAccessForUserAsync(ClaimsPrincipal user)\n        {\n            var role = user.FindFirstValue(\"role\")?.ToLower();\n            var dto = new FeatureAccessDto();\n\n            if (role == \"superadmin\")\n            {\n                // Grant all known frontend features\n                dto.Features = await _dbContext.FeatureAccess\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToDictionaryAsync(name => name, name => true);\n\n                return dto;\n            }\n\n            var plan = user.FindFirstValue(\"plan\")?.ToLower();\n            var businessIdStr = user.FindFirstValue(\"businessId\");\n\n            if (!Guid.TryParse(businessIdStr, out var businessId))\n                return dto;\n\n            // Plan-level or per-business override\n            var features = await _dbContext.FeatureAccess\n                .Where(f => f.BusinessId == businessId || f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            foreach (var feature in features)\n            {\n                dto.Features[feature.FeatureName] = feature.IsEnabled;\n            }\n\n            return dto;\n        }\n\n        // 🔒 Reset password\n        public async Task<ResponseResult> ResetPasswordAsync(ResetPasswordDto dto)\n        {\n            _logger.LogInformation(\"🔒 Reset password attempt for {Email}\", dto.Email);\n            var user = await _userRepo.FirstOrDefaultAsync(u => u.Email == dto.Email);\n            if (user == null)\n            {\n                _logger.LogWarning(\"❌ Reset password failed: No user for {Email}\", dto.Email);\n                return ResponseResult.ErrorInfo(\"❌ No user found with this email\");\n            }\n\n            user.PasswordHash = HashPassword(dto.NewPassword);\n            _userRepo.Update(user);\n\n            _logger.LogInformation(\"✅ Password reset successfully for {Email}\", dto.Email);\n            return ResponseResult.SuccessInfo(\"✅ Password reset successfully\");\n        }\n\n        // Utility: Hash password using SHA256\n        private string HashPassword(string password)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Services/IAuthService.cs",
          "sha256": "7d563b4b118d631a798738eddf29e7637d5defe5bf5863d10d24b3e31bd897db",
          "language": "csharp",
          "content": "using System.Security.Claims;\nusing xbytechat.api.AuthModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public interface IAuthService\n    {\n        Task<ResponseResult> LoginAsync(UserLoginDto dto);\n        Task<ResponseResult> SignupAsync(SignupBusinessDto dto);                  // ✅ Add this\n        Task<ResponseResult> ResetPasswordAsync(ResetPasswordDto dto);           // ✅ Add this\n        Task<ResponseResult> ResendConfirmationAsync(ResendConfirmationDto dto); // ✅ Add this\n        Task<ResponseResult> RefreshTokenAsync(string refreshToken);\n        Task<FeatureAccessDto> GetFeatureAccessForUserAsync(ClaimsPrincipal user);\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Services/IJwtTokenService.cs",
          "sha256": "e5e833dc3a672f0f856a64cb36fc6fb4a8f9474ba97db60bd097bcfa689a7206",
          "language": "csharp",
          "content": "using Microsoft.IdentityModel.Tokens;\nusing System.Collections.Generic;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public interface IJwtTokenService\n    {\n        string GenerateToken(\n            string userId,\n            string role,\n            string userName,\n            string email,\n            string status,\n            string businessId,\n            string companyName,\n            string plan,\n            List<string> permissions\n        );\n        string GenerateToken(IEnumerable<Claim> claims);\n        TokenValidationParameters GetValidationParameters(); // ✅ For Middleware validation\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/AuthModule/Services/JwtTokenService.cs",
          "sha256": "225345dede31917d760c8f1a0fa0d82983cfc72e90607a591ee3eaa3f47bca14",
          "language": "csharp",
          "content": "using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing System;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Text;\n\nnamespace xbytechat.api.AuthModule.Services\n{\n    public class JwtTokenService : IJwtTokenService\n    {\n        private readonly IConfiguration _config;\n        private readonly ILogger<JwtTokenService> _logger;\n\n        public JwtTokenService(IConfiguration config, ILogger<JwtTokenService> logger)\n        {\n            _config = config;\n            _logger = logger;\n        }\n\n        //public string GenerateToken(\n        //    string userId,\n        //    string role,\n        //    string userName,\n        //    string email,\n        //    string status,\n        //    string businessId,\n        //    string companyName,\n        //    string plan,\n        //    List<string> permissions)\n        //{\n        //    try\n        //    {\n        //        var permissionString = string.Join(\",\", permissions ?? new List<string>());\n\n        //        var claims = new List<Claim>\n        //        {\n        //            new Claim(JwtRegisteredClaimNames.Sub, userId),\n        //            new Claim(\"id\", userId),\n        //            new Claim(ClaimTypes.NameIdentifier, userId),\n        //            new Claim(\"email\", email ?? \"\"),\n        //            new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),    // lowercased!\n        //            new Claim(\"name\", userName ?? \"\"),\n        //            new Claim(\"status\", status ?? \"unknown\"),\n        //            new Claim(\"businessId\", businessId ?? \"\"),                   // lowercased!\n        //            new Claim(\"companyName\", companyName ?? \"\"),\n        //            new Claim(\"plan\", plan?.ToLowerInvariant() ?? \"basic\"),      // lowercased!\n        //            new Claim(\"permissions\", permissionString)\n        //        };\n\n        //        return GenerateToken(claims);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ Error generating token for userId: {UserId}\", userId);\n        //        throw;\n        //    }\n        //}\n        public string GenerateToken(\n    string userId,\n    string role,\n    string userName,\n    string email,\n    string status,\n    string businessId,\n    string companyName,\n    string plan,\n    List<string> permissions)\n        {\n            try\n            {\n                var permissionString = string.Join(\",\", permissions ?? new List<string>());\n\n                var claims = new List<Claim>\n        {\n            new Claim(JwtRegisteredClaimNames.Sub, userId),\n            new Claim(\"id\", userId),\n            new Claim(ClaimTypes.NameIdentifier, userId),\n            new Claim(\"email\", email ?? \"\"),\n            new Claim(\"name\", userName ?? \"\"),\n            new Claim(\"status\", status ?? \"unknown\"),\n            new Claim(\"businessId\", businessId ?? \"\"),\n            new Claim(\"companyName\", companyName ?? \"\"),\n            new Claim(\"plan\", plan?.ToLowerInvariant() ?? \"basic\"),\n            new Claim(\"permissions\", permissionString),\n            \n            // ✅ Proper role mapping for both ASP.NET and frontend\n            new Claim(\"role\", role?.ToLowerInvariant() ?? \"unknown\"),           // for React\n            new Claim(ClaimTypes.Role, role?.ToLowerInvariant() ?? \"unknown\")   // for ASP.NET\n        };\n\n                return GenerateToken(claims);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Error generating token for userId: {UserId}\", userId);\n                throw;\n            }\n        }\n\n        public string GenerateToken(IEnumerable<Claim> claims)\n        {\n            try\n            {\n                var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n                var secret = jwtSettings[\"SecretKey\"];\n                if (string.IsNullOrEmpty(secret))\n                {\n                    _logger.LogWarning(\"⚠️ JWT SecretKey is missing from configuration.\");\n                    throw new Exception(\"JWT SecretKey is not configured.\");\n                }\n\n                var expiry = jwtSettings[\"ExpiryMinutes\"];\n                if (!int.TryParse(expiry, out var expiryMinutes))\n                {\n                    _logger.LogWarning(\"⚠️ JWT ExpiryMinutes is invalid or missing. Defaulting to 60 minutes.\");\n                    expiryMinutes = 60;\n                }\n\n                var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret));\n                var creds = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256);\n\n                var expires = DateTime.UtcNow.AddMinutes(expiryMinutes);\n                var unixExp = new DateTimeOffset(expires).ToUnixTimeSeconds();\n\n                var finalClaims = claims.ToList();\n                finalClaims.Add(new Claim(JwtRegisteredClaimNames.Exp, unixExp.ToString()));\n\n                var token = new JwtSecurityToken(\n                    issuer: jwtSettings[\"Issuer\"],\n                    audience: jwtSettings[\"Audience\"],\n                    claims: finalClaims,\n                    expires: expires,\n                    signingCredentials: creds\n                );\n\n                _logger.LogInformation(\"✅ Token generated for: {Email}\", finalClaims.FirstOrDefault(c => c.Type == \"email\")?.Value);\n\n                return new JwtSecurityTokenHandler().WriteToken(token);\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Error generating JWT from claims.\");\n                throw;\n            }\n        }\n\n        public TokenValidationParameters GetValidationParameters()\n        {\n            var jwtSettings = _config.GetSection(\"JwtSettings\");\n\n            return new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateIssuerSigningKey = true,\n                ValidateLifetime = true,\n                RequireSignedTokens = true,\n                RequireExpirationTime = true,\n                ValidIssuer = jwtSettings[\"Issuer\"],\n                ValidAudience = jwtSettings[\"Audience\"],\n                IssuerSigningKey = new SymmetricSecurityKey(\n                    Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])\n                ),\n                ClockSkew = TimeSpan.Zero,\n                RoleClaimType = \"role\",   // standardized!\n                NameClaimType = \"name\"\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Controllers/BusinessLoginController.cs",
          "sha256": "7eda997e4bb632f6a487b52c57910c7c83ca50c17597d2a02e818cb3ed2459be",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.DTOs;\nusing xbytechat.api.DTOs.Tenants;\nusing xbytechat.api.Services.Interfaces;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/tenants\")]\n    public class BusinessLoginController : ControllerBase\n    {\n        private readonly IBusinessService _tenantService;\n\n        public BusinessLoginController(IBusinessService tenantService)\n        {\n            _tenantService = tenantService;\n        }\n\n        [HttpPost(\"login\")]\n        public async Task<IActionResult> Login([FromBody] BusinessLoginRequest request)\n        {\n            try\n            {\n                var tenant = await _tenantService.LoginAsync(request);\n\n                return Ok(new\n                {\n                    tenant.Id,\n                    tenant.Email,\n                    tenant.CompanyName,\n                    //tenant.Role,\n                    //tenant.Plan,\n                    Message = \"Login successful\"\n                });\n            }\n            catch (Exception ex)\n            {\n                return Unauthorized(new { Message = ex.Message });\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Controllers/HealthCheckController.cs",
          "sha256": "f21f78c4303d754e255e05ed501dcefe6aaff8d18a8a9aa878e4bfa22da44eb2",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\n\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class HealthCheckController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult Get() => Ok(\"✅ xByteChat backend is running 🚀\");\n}\n"
        },
        {
          "path": "xbytechat-api/Controllers/MessageLogsController.cs",
          "sha256": "e36c308f0d6e42ec75e8db9797ab4ea5e68366e503e0bb04a51824491c22620a",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessageLogsController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public MessageLogsController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Get()\n        {\n            var logs = await _db.MessageLogs\n                .OrderByDescending(log => log.CreatedAt)\n                .ToListAsync();\n\n            return Ok(logs);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Controllers/MessagesController.cs",
          "sha256": "c23a3ca95ebcc60cdb6a1762b7c1d9605de6427a56dd4b91332e15eecfbb4500",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Services.Messages.Interfaces;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessagesController : ControllerBase\n    {\n        private readonly IMessageService _messageService;\n\n        public MessagesController(IMessageService messageService)\n        {\n            _messageService = messageService;\n        }\n\n        /// ✅ SEND TEXT MESSAGE\n        [HttpPost(\"send-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"❌ Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ✅ SEND IMAGE MESSAGE\n        [HttpPost(\"send-image\")]\n        public async Task<IActionResult> SendImageMessage([FromBody] ImageMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"❌ Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ✅ SEND TEMPLATE MESSAGE\n        [HttpPost(\"send-template\")]\n        public async Task<IActionResult> SendTemplateMessage([FromBody] TemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"❌ Validation failed\",\n                    errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage)\n                });\n            }\n\n            var result = await _messageService.SendMessageAsync(dto);\n\n            return result.Success\n                ? Ok(new { success = true, message = result.Message, response = result.Data })\n                : StatusCode(500, new { success = false, message = result.Message, error = result.ErrorMessage });\n        }\n\n        /// ✅ SEND CTA BUTTON MESSAGE (Free-form Interactive)\n        [HttpPost(\"send-cta\")]\n        public async Task<IActionResult> SendCtaMessage([FromBody] CtaMessageDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.RecipientPhone) || string.IsNullOrWhiteSpace(dto.BodyText) || dto.Buttons == null || dto.Buttons.Count == 0)\n            {\n                return BadRequest(new\n                {\n                    success = false,\n                    message = \"❌ Invalid request — phone, body text and buttons are required\"\n                });\n            }\n\n            // Optional tracking\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _messageService.SendInteractiveMessageAsync(dto.RecipientPhone, dto.BodyText, dto.Buttons);\n\n            return result.Success\n                ? Ok(new\n                {\n                    success = true,\n                    message = result.Message,\n                    messageId = result.MessageId,\n                    logId = result.MessageLogId,\n                    raw = result.RawResponse\n                })\n                : StatusCode(500, new\n                {\n                    success = false,\n                    message = result.Message,\n                    error = result.ErrorMessage\n                });\n        }\n\n        /// ✅ SEND BULK MESSAGES\n        //[HttpPost(\"send-bulk\")]\n        //public async Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto)\n        //{\n        //    var result = new SendResultExtended\n        //    {\n        //        Success = true,\n        //        Message = \"✅ All messages processed.\",\n        //        LogId = null,\n        //        MessageId = null\n        //    };\n\n        //    try\n        //    {\n        //        foreach (var contactId in dto.ContactIds)\n        //        {\n        //            var contact = await _dbContext.Contacts\n        //                .Include(c => c.Business)\n        //                .FirstOrDefaultAsync(c => c.Id == contactId);\n\n        //            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n        //                continue;\n\n        //            BaseMessageDto message;\n\n        //            if (dto.MessageType.ToLower() == \"template\")\n        //            {\n        //                message = new TemplateMessageDto\n        //                {\n        //                    RecipientNumber = contact.PhoneNumber,\n        //                    MessageContent = dto.MessageTemplate,\n        //                    MessageType = \"template\",\n        //                    TemplateName = dto.TemplateName!,\n        //                    TemplateParameters = dto.TemplateParams ?? new List<string>(),\n        //                    BusinessId = contact.BusinessId\n        //                };\n        //            }\n        //            else\n        //            {\n        //                message = new TextMessageDto\n        //                {\n        //                    RecipientNumber = contact.PhoneNumber,\n        //                    MessageContent = dto.MessageTemplate,\n        //                    MessageType = \"text\",\n        //                    BusinessId = contact.BusinessId\n        //                };\n        //            }\n\n        //            await SendMessageAsync(message); // already returns SendResultExtended\n        //        }\n\n        //        return result;\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return new SendResultExtended\n        //        {\n        //            Success = false,\n        //            Message = \"❌ Bulk send failed.\",\n        //            ErrorMessage = ex.Message\n        //        };\n        //    }\n        //}\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Controllers/SendMessageController.cs",
          "sha256": "f2cf8e138d7177000e595b752d8da0ab54cec8a56df32328388c4a4f58f328d9",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Services;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppController : ControllerBase\n    {\n        private readonly WhatsAppService _whatsAppService;\n\n        public WhatsAppController(WhatsAppService whatsAppService)\n        {\n            _whatsAppService = whatsAppService;\n        }\n\n        /// <summary>\n        /// Endpoint to send a WhatsApp message.\n        /// </summary>\n        /// <param name=\"recipientPhone\">Recipient's phone number (including country code).</param>\n        /// <param name=\"messageText\">Text message to send.</param>\n        /// <returns>Response with the result of the send operation.</returns>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromQuery] string recipientPhone, [FromQuery] string messageText)\n        {\n            if (string.IsNullOrEmpty(recipientPhone) || string.IsNullOrEmpty(messageText))\n            {\n                return BadRequest(new { success = false, message = \"Phone number and message text are required.\" });\n            }\n\n            // Call WhatsApp service to send the message\n            var result = await _whatsAppService.SendMessageAsync(recipientPhone, messageText);\n\n            if (result.Success)\n            {\n                return Ok(new\n                {\n                    success = true,\n                    message = \"✅ Message sent successfully.\",\n                    response = result.RawResponse\n                });\n            }\n            else\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = result.ErrorMessage ?? \"❌ Failed to send message.\",\n                    response = result.RawResponse\n                });\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Controllers/ContactsController.cs",
          "sha256": "f2dbd9957b7089c440789b75a5bea341be7057f77f82514eb3c66b0007a7add2",
          "language": "csharp",
          "content": "using CsvHelper.Configuration;\nusing CsvHelper;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Globalization;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Helpers; // <-- For ResponseResult\nusing xbytechat.api.Shared;  // <-- For GetBusinessId extension\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ContactsController : ControllerBase\n    {\n        private readonly IContactService _contactService;\n        private readonly ILogger<ContactsController> _logger;\n        public ContactsController(IContactService contactService, ILogger<ContactsController> logger)\n        {\n            _contactService = contactService;\n            _logger = logger;\n        }\n\n        // POST: api/contacts\n        [HttpPost]\n        public async Task<IActionResult> AddContact([FromBody] ContactDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _contactService.AddContactAsync(businessId, dto);\n            return Ok(ResponseResult.SuccessInfo(\"Contact created.\", result));\n        }\n\n     \n\n        // GET: api/contacts/{id}\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetContactById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var contact = await _contactService.GetContactByIdAsync(businessId, id);\n            if (contact == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact loaded.\", contact));\n        }\n\n        // PUT: api/contacts/{id}\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateContact(Guid id, [FromBody] ContactDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            dto.Id = id;\n            var success = await _contactService.UpdateContactAsync(businessId, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact updated.\"));\n        }\n\n        // DELETE: api/contacts/{id}\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteContact(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.DeleteContactAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Contact deleted.\"));\n        }\n\n        // POST: api/contacts/parse-csv\n        [ApiExplorerSettings(IgnoreApi = true)]\n        [HttpPost(\"parse-csv\")]\n        [Consumes(\"multipart/form-data\")]\n        public async Task<IActionResult> ParseCsvToContactsAsync([FromForm] IFormFile file)\n        {\n            if (file == null || file.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n            using var stream = file.OpenReadStream();\n\n            try\n            {\n                var parseResult = await _contactService.ParseCsvToContactsAsync(businessId, stream);\n                return Ok(ResponseResult.SuccessInfo(\"CSV parsed with detailed results.\", parseResult));\n            }\n            catch (Exception ex)\n            {\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV parsing failed: \" + ex.Message));\n            }\n        }\n\n        // PATCH: /api/contacts/{id}/favorite\n        [HttpPatch(\"{id}/favorite\")]\n        public async Task<IActionResult> ToggleFavorite(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.ToggleFavoriteAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Favorite toggled.\"));\n        }\n\n        // PATCH: /api/contacts/{id}/archive\n        [HttpPatch(\"{id}/archive\")]\n        public async Task<IActionResult> ToggleArchive(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _contactService.ToggleArchiveAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Contact not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Archive toggled.\"));\n        }\n\n        // POST: api/contacts/bulk-assign-tag\n        [HttpPost(\"bulk-assign-tag\")]\n        public async Task<IActionResult> AssignTagToContacts([FromBody] AssignTagToContactsDto dto)\n        {\n            if (dto.ContactIds == null || !dto.ContactIds.Any())\n                return BadRequest(ResponseResult.ErrorInfo(\"No contact IDs provided.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n            await _contactService.AssignTagToContactsAsync(businessId, dto.ContactIds, dto.TagId);\n\n            return Ok(ResponseResult.SuccessInfo(\"Tag assigned to selected contacts.\"));\n        }\n\n        //[HttpGet(\"contacts\")]\n        [HttpGet]\n        public async Task<IActionResult> GetAllContacts(\n        [FromQuery] string? tab = \"all\",\n        [FromQuery] int page = 1,\n        [FromQuery] int pageSize = 25)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var pagedResult = await _contactService.GetPagedContactsAsync(businessId, tab, page, pageSize);\n            return Ok(ResponseResult.SuccessInfo(\"Contacts loaded.\", pagedResult));\n        }\n        // GET: api/contacts/all\n        [HttpGet(\"all\")]\n        public async Task<IActionResult> GetAllContactsFlat()\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var allContacts = await _contactService.GetAllContactsAsync(businessId); // This returns IEnumerable<ContactDto>\n            return Ok(allContacts); // Returns plain array!\n        }\n\n        [HttpPost(\"filter-by-tags\")]\n        public async Task<IActionResult> GetContactsByTags([FromBody] List<string> tags)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n\n            // ✅ Convert to Guid list safely\n            var tagGuids = tags\n                .Where(x => Guid.TryParse(x, out _))\n                .Select(Guid.Parse)\n                .ToList();\n\n            var contacts = await _contactService.GetContactsByTagsAsync(businessId, tagGuids);\n\n            return Ok(ResponseResult.SuccessInfo(\"Contacts filtered successfully\", contacts));\n        }\n\n        [HttpPost(\"bulk-import\")]\n        [Consumes(\"multipart/form-data\")]\n        public async Task<IActionResult> BulkImportContactsAsync(IFormFile file)\n        {\n            if (file == null || file.Length == 0)\n                return BadRequest(ResponseResult.ErrorInfo(\"CSV file is required.\"));\n\n            var businessId = HttpContext.User.GetBusinessId();\n\n            try\n            {\n                var result = await _contactService.BulkImportAsync(businessId, file.OpenReadStream());\n                return Ok(ResponseResult.SuccessInfo(\"Contacts imported successfully.\", result));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Bulk import failed.\");\n                return BadRequest(ResponseResult.ErrorInfo(\"Import failed: \" + ex.Message));\n            }\n        }\n       \n        [HttpGet(\"by-tags\")]\n        public async Task<IActionResult> GetContactsByTags([FromQuery] List<Guid> tagIds)\n        {\n            var businessId = User.GetBusinessId();  // Your tenant logic\n            var contacts = await _contactService.GetContactsByTagsAsync(businessId, tagIds);\n            return Ok(contacts);\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Controllers/NotesController.cs",
          "sha256": "c1ed18be16d3c10dbf5792386063ef23934ed457387572ec3e40ae8582d802b1",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Helpers; // For ResponseResult\nusing xbytechat.api.Shared;  // For GetBusinessId extension\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class NotesController : ControllerBase\n    {\n        private readonly INoteService _noteService;\n\n        public NotesController(INoteService noteService)\n        {\n            _noteService = noteService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddNote([FromBody] NoteDto dto)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _noteService.AddNoteAsync(businessId, dto);\n                return Ok(ResponseResult.SuccessInfo(\"Note created.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Error creating note\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"contact/{contactId}\")]\n        public async Task<IActionResult> GetNotesByContact(Guid contactId)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var result = await _noteService.GetNotesByContactAsync(businessId, contactId);\n                return Ok(ResponseResult.SuccessInfo(\"Notes loaded.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Error fetching notes\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetNoteById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _noteService.GetNoteByIdAsync(businessId, id);\n            if (result == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note loaded.\", result));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateNote(Guid id, [FromBody] NoteDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _noteService.UpdateNoteAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note updated.\"));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteNote(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _noteService.DeleteNoteAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Note not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Note deleted.\"));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Controllers/RemindersController.cs",
          "sha256": "3413344e2dc9f58f165ae5e0eaeb97e8c89d0d10e9d6a1d2690d05c6f374148a",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Helpers; // For ResponseResult\nusing xbytechat.api.Shared;  // For GetBusinessId extension\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class RemindersController : ControllerBase\n    {\n        private readonly IReminderService _reminderService;\n\n        public RemindersController(IReminderService reminderService)\n        {\n            _reminderService = reminderService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddReminder(ReminderDto dto)\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                if (dto == null)\n                    return BadRequest(ResponseResult.ErrorInfo(\"Reminder data is missing.\"));\n\n                var result = await _reminderService.AddReminderAsync(businessId, dto);\n                return Ok(ResponseResult.SuccessInfo(\"Reminder created.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"An error occurred while adding the reminder.\", ex.Message));\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllReminders()\n        {\n            try\n            {\n                var businessId = HttpContext.User.GetBusinessId();\n                var reminders = await _reminderService.GetAllRemindersAsync(businessId);\n                return Ok(ResponseResult.SuccessInfo(\"Reminders loaded.\", reminders));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"An error occurred while fetching reminders.\", ex.Message));\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetReminderById(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var reminder = await _reminderService.GetReminderByIdAsync(businessId, id);\n            if (reminder == null)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder loaded.\", reminder));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateReminder(Guid id, [FromBody] ReminderDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _reminderService.UpdateReminderAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder updated.\"));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteReminder(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _reminderService.DeleteReminderAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Reminder not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Reminder deleted.\"));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Controllers/TagsController.cs",
          "sha256": "11c3bb8832d2e988ed374ddd872288b5af98ce8ce963987e821de0d3107f4971",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Helpers; // For ResponseResult\nusing xbytechat.api.Shared;  // For GetBusinessId extension\n\nnamespace xbytechat.api.CRM.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TagsController : ControllerBase\n    {\n        private readonly ITagService _tagService;\n\n        public TagsController(ITagService tagService)\n        {\n            _tagService = tagService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddTag([FromBody] TagDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var result = await _tagService.AddTagAsync(businessId, dto);\n            return Ok(ResponseResult.SuccessInfo(\"Tag created.\", result));\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateTag(Guid id, [FromBody] TagDto dto)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _tagService.UpdateTagAsync(businessId, id, dto);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Tag not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Tag updated.\"));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllTags()\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var tags = await _tagService.GetAllTagsAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"Tags loaded.\", tags));\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteTag(Guid id)\n        {\n            var businessId = HttpContext.User.GetBusinessId();\n            var success = await _tagService.DeleteTagAsync(businessId, id);\n            if (!success)\n                return NotFound(ResponseResult.ErrorInfo(\"Tag not found.\"));\n            return Ok(ResponseResult.SuccessInfo(\"Tag deleted.\"));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/AssignTagToContactsDto.cs",
          "sha256": "69c9b7fc83bbaf32fab62812c210f204eca0b723301878252850f6527f71a7f3",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class AssignTagToContactsDto\n    {\n        public List<Guid> ContactIds { get; set; } = new();\n        public Guid TagId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/BulkImportResultDto.cs",
          "sha256": "05392f5b522d34ba8069854727ab513053a529252f41be0f45e827f4df613eac",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class BulkImportResultDto\n    {\n        public int Imported { get; set; }\n        public List<CsvImportError> Errors { get; set; } = new();\n    }\n\n    public class CsvImportErrorMsg\n    {\n        public int RowNumber { get; set; }\n        public string ErrorMessage { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/ContactDto.cs",
          "sha256": "218a964e202fd90d764b7a4deccc1466eb7d4d35cdb1472bf4a808c1304df08a",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ContactDto\n    {\n        public Guid? Id { get; set; } // Nullable for Create (used in PUT)\n\n        public string Name { get; set; } // Contact full name\n\n        public string PhoneNumber { get; set; } // WhatsApp-compatible number\n\n        public string? Email { get; set; } // Optional email address\n\n        public string? LeadSource { get; set; } // e.g., \"WhatsApp\", \"Facebook\", \"Landing Page\"\n\n        public DateTime? LastContactedAt { get; set; } // Last WhatsApp or CRM interaction\n\n        public DateTime? NextFollowUpAt { get; set; } // For scheduling reminders\n\n        public string? Notes { get; set; } // Internal notes for the contact\n\n        public DateTime? CreatedAt { get; set; } // Read-only timestamp\n\n        // ✅ NEW: Structured Tags (replaces comma-separated strings)\n        // Example: [{ id: 1, name: \"VIP\" }, { id: 2, name: \"Follow-up\" }]\n        public List<ContactTagDto> Tags { get; set; } = new();\n\n        public bool IsFavorite { get; set; } = false;\n        public bool IsArchived { get; set; } = false;\n        public string? Group { get; set; }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/ContactDtoCsvMap.cs",
          "sha256": "5dd22482c7625ce4ada21b1595015bd0273b921d8a5ac8787486b4f2ad874570",
          "language": "csharp",
          "content": "using CsvHelper.Configuration;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ContactDtoCsvMap : ClassMap<ContactDto>\n    {\n        public ContactDtoCsvMap()\n        {\n            Map(m => m.Name).Name(\"name\", \"Name\", \"full name\");\n            Map(m => m.PhoneNumber).Name(\"phone\", \"Phone\", \"mobile\", \"mobile number\");\n            Map(m => m.Email).Name(\"email\", \"Email\").Optional();\n            Map(m => m.Notes).Name(\"notes\", \"Notes\").Optional();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/ContactTagDto.cs",
          "sha256": "4b81638e7806bd28b702637f4d9e379725b86e63045e558d2abbdc54663b7650",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class ContactTagDto\n    {\n        public Guid TagId { get; set; }\n        public string TagName { get; set; } = string.Empty;\n        public string? ColorHex { get; set; }\n        public string? Category { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/CsvImportResult.cs",
          "sha256": "7e0d39bb56ef6fa9d80f69f7c37ece658407016ae68b838cd425050ed5f31680",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class CsvImportResult<T>\n    {\n        public List<T> SuccessRecords { get; set; } = new();\n        public List<CsvImportError> Errors { get; set; } = new();\n    }\n\n    public class CsvImportError\n    {\n        public int RowNumber { get; set; }\n        public string ErrorMessage { get; set; } = string.Empty;\n    }\n}"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/NoteDto.cs",
          "sha256": "a324df31b2679d4db34a15ec6a647792e8a9456a0684e01787d9baeff44f3c8f",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class NoteDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public string Source { get; set; }\n        public string CreatedBy { get; set; }\n        public bool IsPinned { get; set; }\n        public bool IsInternal { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? EditedAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/PagedResult.cs",
          "sha256": "e4a94c533f112f0f35359486e8c904e0afe1168d0e704dc0df7990ced5fd3ad6",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class PagedResult<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/ReminderDto.cs",
          "sha256": "9d68d6f7f4b48cada2f4160bc381166930f0fdfb5212ad239fe27abf981f5d0f",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.CRM.Dtos\n{\n    public class ReminderDto\n    {\n        public Guid? Id { get; set; }  // Null when creating, present when updating\n\n        public Guid? ContactId { get; set; }\n\n        public string Title { get; set; } = default!;\n\n        public string? Description { get; set; }\n\n        public DateTime DueAt { get; set; }\n\n        public string? Status { get; set; } = \"Pending\";\n\n        public string? ReminderType { get; set; }\n\n        public int? Priority { get; set; }\n\n        public bool IsRecurring { get; set; }\n\n        public string? RecurrencePattern { get; set; }\n\n        public bool SendWhatsappNotification { get; set; }\n\n        public string? LinkedCampaign { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime? CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public DateTime? CompletedAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Dtos/TagDto.cs",
          "sha256": "c13472528bbecc527f9c37b069e6b80729380492eb7126891fe189c354298a04",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Dtos\n{\n    public class TagDto\n    {\n        public Guid? Id { get; set; }\n\n        public string Name { get; set; } = default!;\n\n        public string? ColorHex { get; set; }\n\n        public string? Category { get; set; }\n\n        public string? Notes { get; set; }\n\n        public bool IsSystemTag { get; set; } = false;\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime? CreatedAt { get; set; }\n\n        public DateTime? LastUsedAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Interfaces/IContactService.cs",
          "sha256": "c38a3f42be25b4c4a40f653f2aff4014d6a28e042bcc286ab6481e6f066b797f",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    /// <summary>\n    /// Defines the contract for all operations related to managing contacts.\n    /// </summary>\n    public interface IContactService\n    {\n\n        Task<ContactDto> AddContactAsync(Guid businessId, ContactDto dto);\n        Task<ContactDto> GetContactByIdAsync(Guid businessId, Guid contactId);\n        Task<bool> UpdateContactAsync(Guid businessId, ContactDto dto);\n        Task<bool> DeleteContactAsync(Guid businessId, Guid contactId);\n        Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream);\n\n        Task<Contact> FindOrCreateAsync(Guid businessId, string phoneNumber);\n        Task<bool> ToggleFavoriteAsync(Guid businessId, Guid contactId);\n        Task<bool> ToggleArchiveAsync(Guid businessId, Guid contactId);\n        Task<IEnumerable<ContactDto>> GetAllContactsAsync(Guid businessId, string? tab = \"all\");\n        Task AssignTagToContactsAsync(Guid businessId, List<Guid> contactIds, Guid tagId);\n        Task<PagedResult<ContactDto>> GetPagedContactsAsync(\n     Guid businessId,\n     string? tab = \"all\",\n     int page = 1,\n     int pageSize = 25,\n     string? searchTerm = null\n );\n        // ✅ Tag-based filtering support\n        Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<Guid> tags);\n\n        Task<BulkImportResultDto> BulkImportAsync(Guid businessId, Stream csvStream);\n        // 📌 New method to support flow node → tag assignment\n        Task<bool> AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tags);\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/CRM/Interfaces/INoteService.cs",
          "sha256": "c7f3f36ea21a7508514c9054225df94aef67048fa1290fb84f860cd103764e87",
          "language": "csharp",
          "content": "using xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface INoteService\n    {\n        // For creating new note\n        Task<NoteDto> AddNoteAsync(Guid businessId, NoteDto dto);\n\n        // List all notes for dashboard view\n        Task<IEnumerable<NoteDto>> GetNotesByContactAsync(Guid businessId, Guid contactId);\n\n        // For loading note in edit mode\n        Task<NoteDto?> GetNoteByIdAsync(Guid businessId, Guid noteId);\n        // Handles editing\n        Task<bool> UpdateNoteAsync(Guid businessId, Guid noteId, NoteDto dto);\n        // Soft delete → IsActive = false\n        Task<bool> DeleteNoteAsync(Guid businessId, Guid noteId);\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/CRM/Interfaces/IReminderService.cs",
          "sha256": "b495104def7199c6e12aa28db2fad8c0c13dc551ab0cba0f8c0797361e14d8c3",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface IReminderService\n    {\n        //For creating new reminder\n        Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto);\n\n        //List all reminders for dashboard view\n        Task<IEnumerable<ReminderDto>> GetAllRemindersAsync(Guid businessId);\n\n        //For loading reminder in edit mode\n        Task<ReminderDto?> GetReminderByIdAsync(Guid businessId, Guid reminderId);\n\n        //Handles editing\n        Task<bool> UpdateReminderAsync(Guid businessId, Guid reminderId, ReminderDto dto);\n        //Soft delete → IsActive = false\n        Task<bool> DeleteReminderAsync(Guid businessId, Guid reminderId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Interfaces/ITagService.cs",
          "sha256": "bf7f3ea814c33020416ac25cd9d3b6f600c58c7dc849701f93e8093bf2949681",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Dtos;\n\nnamespace xbytechat.api.CRM.Interfaces\n{\n    public interface ITagService\n    {\n        Task<TagDto> AddTagAsync(Guid businessId, TagDto dto);\n\n        Task<IEnumerable<TagDto>> GetAllTagsAsync(Guid businessId);\n        Task<bool> UpdateTagAsync(Guid businessId, Guid tagId, TagDto dto);\n        Task<bool> DeleteTagAsync(Guid businessId, Guid tagId);\n       // Task AssignTagAsync(Guid businessId, string phone, string tag);\n        Task AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tagNames);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Mappers/ContactDtoCsvMap.cs",
          "sha256": "41e1be6be963984ed9a757aa1575fd03a556851cdea04c287a91c4358696e166",
          "language": "csharp",
          "content": "using CsvHelper.Configuration;\nusing xbytechat.api.CRM.Dtos;\n\npublic sealed class ContactDtoCsvMap : ClassMap<ContactDto>\n{\n    public ContactDtoCsvMap()\n    {\n        Map(m => m.Name).Name(\"Name\");\n        Map(m => m.PhoneNumber).Name(\"Phone\");\n        Map(m => m.Email).Name(\"Email\");\n        Map(m => m.LeadSource).Name(\"LeadSource\");\n        Map(m => m.Notes).Name(\"Notes\");\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Mappers/NoteMapper.cs",
          "sha256": "e26b6156b9aca01214bd18633cce4bee5e8ce187f220ff8857ab6c496e4fb933",
          "language": "csharp",
          "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Mappers\n{\n    public static class NoteMapper\n    {\n        public static NoteDto MapToDto(Note note)\n        {\n            return new NoteDto\n            {\n                Id = note.Id,\n                ContactId = note.ContactId,\n                Title = note.Title,\n                Content = note.Content,\n                Source = note.Source,\n                CreatedBy = note.CreatedBy,\n                IsPinned = note.IsPinned,\n                IsInternal = note.IsInternal,\n                CreatedAt = note.CreatedAt,\n                EditedAt = note.EditedAt\n            };\n        }\n\n        public static Note MapToEntity(NoteDto dto, Guid businessId)\n        {\n            return new Note\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                Title = dto.Title,\n                Content = dto.Content,\n                Source = dto.Source,\n                CreatedBy = dto.CreatedBy,\n                IsPinned = dto.IsPinned,\n                IsInternal = dto.IsInternal,\n                CreatedAt = DateTime.UtcNow\n            };\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/CRM/Mappers/ReminderMapper.cs",
          "sha256": "53c9d6d5cbdcb101f0bfc0225af4e6afc6b29111d75fb565263bf55135999e2d",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Mappers\n{\n    using xbytechat.api.CRM.Models;\n    using xbytechat.api.CRM.Dtos;\n\n    public static class ReminderMapper\n    {\n        public static ReminderDto MapToDto(Reminder r)\n        {\n            return new ReminderDto\n            {\n                Id = r.Id,\n                Title = r.Title,\n                Description = r.Description,\n                DueAt = r.DueAt,\n                ReminderType = r.ReminderType,\n                Priority = r.Priority,\n                IsRecurring = r.IsRecurring,\n                RecurrencePattern = r.RecurrencePattern,\n                SendWhatsappNotification = r.SendWhatsappNotification,\n                LinkedCampaign = r.LinkedCampaign,\n                Status = r.Status,\n                CreatedAt = r.CreatedAt,\n                ContactId = r.ContactId\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Models/Contact.cs",
          "sha256": "3d14b66f4de55b9c4de89fedbfd11849b1856950b7b87af1f6dda1771ac640da",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Contact\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; } = null!;\n        // 🔗 FK to Business\n        [Required]\n        [MaxLength(100)]\n        public string Name { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PhoneNumber { get; set; }\n\n        [MaxLength(100)]\n        public string? Email { get; set; }\n\n        [MaxLength(50)]\n        public string? LeadSource { get; set; }\n\n        [MaxLength(200)]\n        public string? Tags { get; set; } // Legacy, will be deprecated after ContactTag rollout\n\n        public DateTime? LastContactedAt { get; set; }\n        public DateTime? NextFollowUpAt { get; set; }\n\n        [MaxLength(500)]\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // 🧩 NEW: Link to Tags\n        public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>();\n        // ✅ New: Navigation property for many-to-many tags\n        //public ICollection<ContactTag> TagsLink { get; set; } = new List<ContactTag>();\n\n        public DateTime? LastCTAInteraction { get; set; }\n        public string? LastCTAType { get; set; }\n        public Guid? LastClickedProductId { get; set; }\n\n        // 🚦 If true, skip automation flows (manually or programmatically paused)\n        public bool IsAutomationPaused { get; set; } = false;\n\n        // 👤 If agent assigned, automation should pause (runtime check)\n        public Guid? AssignedAgentId { get; set; }\n\n        public bool IsFavorite { get; set; } = false;\n        public bool IsArchived { get; set; } = false;\n        public string? Group { get; set; }\n        public bool IsActive { get; set; } = true;\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Models/ContactTag.cs",
          "sha256": "422118f780b163abab39572c97ce858dcf1288cc05ae98138b8bdb3dc4329322",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\nusing xbytechat.api.CRM.Models;\n\npublic class ContactTag\n{\n    [Key]\n    public Guid Id { get; set; }\n\n    [Required]\n    public Guid ContactId { get; set; }\n\n    public Contact Contact { get; set; }\n\n    [Required]\n    public Guid TagId { get; set; }\n\n    public Tag Tag { get; set; }\n\n    [Required]\n    public Guid BusinessId { get; set; }\n\n    public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n\n    public string? AssignedBy { get; set; }\n}\n\n"
        },
        {
          "path": "xbytechat-api/CRM/Models/Note.cs",
          "sha256": "200a2bd5f7ef4bb6ed3fa7cf3dc7403ea1b2e236a843b985dfc1c02c4fe75112",
          "language": "csharp",
          "content": "namespace xbytechat.api.CRM.Models\n{\n    public class Note\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Ownership & Association\n        public Guid? BusinessId { get; set; }\n        public Guid? ContactId { get; set; }\n\n        // 📝 Core Content\n        public string Title { get; set; } // Optional short title (for pinning or preview)\n        public string Content { get; set; }\n\n        // 🔖 Contextual Intelligence\n        public string Source { get; set; } // e.g., \"Manual\", \"Call Log\", \"WhatsApp\", \"LeadForm\"\n        public string CreatedBy { get; set; } // Store agent/user name or userId\n\n        // 📌 UX Flags\n        public bool IsPinned { get; set; } = false;\n        public bool IsInternal { get; set; } = false; // if true, only visible to team\n\n        // 🕓 Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? EditedAt { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/CRM/Models/Reminder.cs",
          "sha256": "bc1e21ef857422a3ea4524863c8adefe038dc7cd43c474ae463ca6ca5379a830",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Reminder\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }   // For multi-tenant isolation\n\n        public Guid ContactId { get; set; }    // Which contact this reminder is for\n\n        public string Title { get; set; } = default!; // Main reminder title (e.g., \"Call back about invoice\")\n\n        public string? Description { get; set; } // Longer notes, optional (for internal detail)\n\n        public DateTime DueAt { get; set; }    // When reminder should notify\n\n        public string Status { get; set; } = \"Pending\"; // \"Pending\", \"Done\", \"Overdue\"\n\n        public string? ReminderType { get; set; } // e.g., \"Call\", \"Email\", \"Follow-up\", \"Meeting\"\n\n        public int? Priority { get; set; } // e.g., 1 (High), 2 (Medium), 3 (Low)\n\n        public bool IsRecurring { get; set; } = false; // For future → repeat reminder\n\n        public string? RecurrencePattern { get; set; } // e.g., \"Weekly\", \"Monthly\" (optional)\n\n        public bool SendWhatsappNotification { get; set; } = false; // Future: auto-WA message trigger\n\n        public string? LinkedCampaign { get; set; } // Optional: which campaign this reminder relates to\n\n        public bool IsActive { get; set; } = true;  // Soft delete support\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public DateTime? CompletedAt { get; set; } // Track when it was marked Done\n\n        public string? LastCTAType { get; set; } // e.g., Confirm, Reschedule\n        public DateTime? LastClickedAt { get; set; }\n        public bool FollowUpSent { get; set; } = false;\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/CRM/Models/Tag.cs",
          "sha256": "e654598a682f6c55d536da4b9e18ace295abe7d611603fd18eaf61f4a5baff54",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.CRM.Models\n{\n    public class Tag\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }             // Multi-tenant isolation\n\n        public string Name { get; set; } = default!;     // e.g., \"VIP\", \"Follow-up\"\n\n        public string? ColorHex { get; set; }            // For UI tag styling (e.g., #FF5733)\n\n        public string? Category { get; set; }            // e.g., \"Priority\", \"Campaign\", \"Stage\"\n\n        public string? Notes { get; set; }               // Admin/internal notes about this tag\n\n        public bool IsSystemTag { get; set; } = false;   // Reserved tags like \"New\", \"Subscribed\"\n\n        public bool IsActive { get; set; } = true;       // For soft-deactivation (future bulk ops)\n\n        public DateTime CreatedAt { get; set; }          // For analytics / sorting\n\n        public DateTime? LastUsedAt { get; set; }        // Useful for CRM insights later\n\n        public ICollection<ContactTag> ContactTags { get; set; } = new List<ContactTag>(); // Linked contacts\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Services/ContactService.cs",
          "sha256": "cad7c60170297a52cb81725b735932da01f726445ee3f9a86cc00eb5e5213708",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing CsvHelper;\nusing CsvHelper.Configuration;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class ContactService : IContactService\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<ContactService> _logger;\n\n        public ContactService(AppDbContext db, ILogger<ContactService> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<ContactDto> AddContactAsync(Guid businessId, ContactDto dto)\n        {\n            _logger.LogInformation(\"AddContactAsync called for businessId={BusinessId}, Name={Name}\", businessId, dto.Name);\n\n            var contact = new Contact\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = dto.Name,\n                PhoneNumber = dto.PhoneNumber,\n                Email = dto.Email,\n                LeadSource = dto.LeadSource,\n                LastContactedAt = dto.LastContactedAt?.ToUniversalTime(),\n                NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime(),\n                Notes = dto.Notes,\n                CreatedAt = DateTime.UtcNow,\n                IsFavorite = dto.IsFavorite,\n                IsArchived = dto.IsArchived,\n                Group = dto.Group\n            };\n\n            if (dto.Tags != null && dto.Tags.Any())\n            {\n                contact.ContactTags = dto.Tags.Select(t => new ContactTag\n                {\n                    Id = Guid.NewGuid(),\n                    ContactId = contact.Id,\n                    TagId = t.TagId,\n                    BusinessId = businessId,\n                    AssignedAt = DateTime.UtcNow,\n                    AssignedBy = \"system\"\n                }).ToList();\n            }\n\n            _db.Contacts.Add(contact);\n\n            try\n            {\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact added: {ContactId} for businessId={BusinessId}\", contact.Id, businessId);\n            }\n            catch (DbUpdateException ex)\n            {\n                _logger.LogError(ex, \"DB error in AddContactAsync (Contact: {Contact}, BusinessId={BusinessId})\", contact, businessId);\n                var innerMessage = ex.InnerException?.Message ?? ex.Message;\n                throw new Exception(\"❌ DB save error (Contact): \" + innerMessage, ex);\n            }\n\n            return new ContactDto\n            {\n                Id = contact.Id,\n                Name = contact.Name,\n                PhoneNumber = contact.PhoneNumber,\n                Email = contact.Email,\n                LeadSource = contact.LeadSource,\n                LastContactedAt = contact.LastContactedAt,\n                NextFollowUpAt = contact.NextFollowUpAt,\n                Notes = contact.Notes,\n                CreatedAt = contact.CreatedAt,\n                Tags = dto.Tags ?? new List<ContactTagDto>()\n            };\n        }\n\n        public async Task<ContactDto> GetContactByIdAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"GetContactByIdAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts\n                     .Where(c => c.BusinessId == businessId && c.Id == contactId && c.IsActive)\n                    .Include(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync();\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return null;\n                }\n\n                return new ContactDto\n                {\n                    Id = contact.Id,\n                    Name = contact.Name,\n                    PhoneNumber = contact.PhoneNumber,\n                    Email = contact.Email,\n                    LeadSource = contact.LeadSource,\n                    LastContactedAt = contact.LastContactedAt,\n                    NextFollowUpAt = contact.NextFollowUpAt,\n                    Notes = contact.Notes,\n                    CreatedAt = contact.CreatedAt,\n                    Tags = contact.ContactTags?\n                        .Where(ct => ct.Tag != null)\n                        .Select(ct => new ContactTagDto\n                        {\n                            TagId = ct.TagId,\n                            TagName = ct.Tag.Name\n                        })\n                        .ToList() ?? new List<ContactTagDto>()\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error fetching contact by id: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task<bool> UpdateContactAsync(Guid businessId, ContactDto dto)\n        {\n            _logger.LogInformation(\"UpdateContactAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n            try\n            {\n                var contact = await _db.Contacts\n                    .Include(c => c.ContactTags)\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == dto.Id);\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for update: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n                    return false;\n                }\n\n                contact.Name = dto.Name;\n                contact.PhoneNumber = dto.PhoneNumber;\n                contact.Email = dto.Email;\n                contact.LeadSource = dto.LeadSource;\n                contact.LastContactedAt = dto.LastContactedAt?.ToUniversalTime();\n                contact.NextFollowUpAt = dto.NextFollowUpAt?.ToUniversalTime();\n                contact.Notes = dto.Notes;\n\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact updated: {ContactId}\", contact.Id);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error updating contact: businessId={BusinessId}, contactId={ContactId}\", businessId, dto.Id);\n                throw;\n            }\n        }\n\n        public async Task<bool> DeleteContactAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"DeleteContactAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId && c.IsActive);\n\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for delete: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsActive = false; // 👈 Soft delete\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact soft-deleted: {ContactId}\", contactId);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error deleting contact: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        //public async Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream)\n        //{\n        //    _logger.LogInformation(\"ParseCsvToContactsAsync: businessId={BusinessId}\", businessId);\n        //    var result = new CsvImportResult<ContactDto>();\n\n        //    var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n        //    {\n        //        HeaderValidated = null,\n        //        MissingFieldFound = null\n        //    };\n\n        //    using var reader = new StreamReader(csvStream);\n        //    using var csv = new CsvReader(reader, config);\n\n        //    csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n        //    int rowNumber = 1; // Assuming header row is 1\n\n        //    await csv.ReadAsync();\n        //    csv.ReadHeader();\n\n        //    while (await csv.ReadAsync())\n        //    {\n        //        rowNumber++;\n        //        try\n        //        {\n        //            var record = csv.GetRecord<ContactDto>();\n        //            record.CreatedAt = DateTime.UtcNow;\n        //            result.SuccessRecords.Add(record);\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            result.Errors.Add(new CsvImportError\n        //            {\n        //                RowNumber = rowNumber, \n        //                ErrorMessage = ex.Message\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"CSV parsed with {SuccessCount} successes and {ErrorCount} errors.\",\n        //        result.SuccessRecords.Count, result.Errors.Count);\n\n        //    return result;\n        //}\n\n        public async Task<CsvImportResult<ContactDto>> ParseCsvToContactsAsync(Guid businessId, Stream csvStream)\n        {\n            _logger.LogInformation(\"ParseCsvToContactsAsync: businessId={BusinessId}\", businessId);\n\n            var result = new CsvImportResult<ContactDto>();\n\n            var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n            {\n                HeaderValidated = null,\n                MissingFieldFound = null\n            };\n\n            using var reader = new StreamReader(csvStream);\n            using var csv = new CsvReader(reader, config);\n\n            // Register custom column mapping for ContactDto\n            csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n            int rowNumber = 1;\n\n            await csv.ReadAsync();     // Move to first row\n            csv.ReadHeader();          // Read header row\n\n            while (await csv.ReadAsync())\n            {\n                rowNumber++;\n                try\n                {\n                    var record = csv.GetRecord<ContactDto>();\n                    record.CreatedAt = DateTime.UtcNow;\n\n                    result.SuccessRecords.Add(record);\n                }\n                catch (Exception ex)\n                {\n                    // Avoid ambiguity by using explicit object instantiation\n                    var error = new CsvImportError\n                    {\n                        RowNumber = rowNumber,\n                        ErrorMessage = ex.Message\n                    };\n                    result.Errors.Add(error);\n                }\n            }\n\n            _logger.LogInformation(\"CSV parsed with {SuccessCount} successes and {ErrorCount} errors.\",\n                result.SuccessRecords.Count, result.Errors.Count);\n\n            return result;\n        }\n\n        public async Task<Contact> FindOrCreateAsync(Guid businessId, string phoneNumber)\n        {\n            _logger.LogInformation(\"FindOrCreateAsync: businessId={BusinessId}, phoneNumber={PhoneNumber}\", businessId, phoneNumber);\n            try\n            {\n                var contact = await _db.Contacts\n                    .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber);\n\n                if (contact != null)\n                {\n                    _logger.LogInformation(\"Contact already exists: contactId={ContactId}\", contact.Id);\n                    return contact;\n                }\n\n                var newContact = new Contact\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    Name = \"WhatsApp User\",\n                    PhoneNumber = phoneNumber,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _db.Contacts.Add(newContact);\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact created: {ContactId}\", newContact.Id);\n\n                return newContact;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in FindOrCreateAsync: businessId={BusinessId}, phoneNumber={PhoneNumber}\", businessId, phoneNumber);\n                throw;\n            }\n        }\n\n        public async Task<bool> ToggleFavoriteAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"ToggleFavoriteAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for favorite toggle: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsFavorite = !contact.IsFavorite;\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact favorite toggled: {ContactId} -> {IsFavorite}\", contactId, contact.IsFavorite);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error toggling favorite: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task AssignTagToContactsAsync(Guid businessId, List<Guid> contactIds, Guid tagId)\n        {\n            _logger.LogInformation(\"AssignTagToContactsAsync: businessId={BusinessId}, tagId={TagId}, contactIds={ContactIds}\", businessId, tagId, contactIds);\n            try\n            {\n                var contacts = await _db.Contacts\n                    .Where(c => c.BusinessId == businessId && contactIds.Contains(c.Id))\n                    .Include(c => c.ContactTags)\n                    .ToListAsync();\n\n                foreach (var contact in contacts)\n                {\n                    bool alreadyAssigned = contact.ContactTags.Any(link => link.TagId == tagId);\n                    if (!alreadyAssigned)\n                    {\n                        contact.ContactTags.Add(new ContactTag\n                        {\n                            ContactId = contact.Id,\n                            TagId = tagId\n                        });\n                    }\n                }\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Tags assigned to contacts\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error assigning tag: businessId={BusinessId}, tagId={TagId}\", businessId, tagId);\n                throw;\n            }\n        }\n\n        public async Task<bool> ToggleArchiveAsync(Guid businessId, Guid contactId)\n        {\n            _logger.LogInformation(\"ToggleArchiveAsync: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n            try\n            {\n                var contact = await _db.Contacts.FirstOrDefaultAsync(c => c.BusinessId == businessId && c.Id == contactId);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"Contact not found for archive toggle: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                    return false;\n                }\n\n                contact.IsArchived = !contact.IsArchived;\n                await _db.SaveChangesAsync();\n                _logger.LogInformation(\"Contact archive toggled: {ContactId} -> {IsArchived}\", contactId, contact.IsArchived);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error toggling archive: businessId={BusinessId}, contactId={ContactId}\", businessId, contactId);\n                throw;\n            }\n        }\n\n        public async Task<IEnumerable<ContactDto>> GetAllContactsAsync(Guid businessId, string? tab = \"all\")\n        {\n            _logger.LogInformation(\"GetAllContactsAsync: businessId={BusinessId}, tab={Tab}\", businessId, tab);\n            try\n            {\n                var baseQuery = _db.Contacts\n                    .Where(c => c.BusinessId == businessId && c.IsActive);\n\n                if (tab == \"favourites\")\n                    baseQuery = baseQuery.Where(c => c.IsFavorite);\n                else if (tab == \"archived\")\n                    baseQuery = baseQuery.Where(c => c.IsArchived);\n                else if (tab == \"groups\")\n                    baseQuery = baseQuery.Where(c => !string.IsNullOrEmpty(c.Group));\n\n                var query = baseQuery\n                    .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag);\n\n                var contacts = await query.ToListAsync();\n\n                var result = contacts.Select(c => new ContactDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    PhoneNumber = c.PhoneNumber,\n                    Email = c.Email,\n                    LeadSource = c.LeadSource,\n                    LastContactedAt = c.LastContactedAt,\n                    NextFollowUpAt = c.NextFollowUpAt,\n                    Notes = c.Notes,\n                    CreatedAt = c.CreatedAt,\n                    IsFavorite = c.IsFavorite,\n                    IsArchived = c.IsArchived,\n                    Group = c.Group,\n                    Tags = c.ContactTags?\n                        .Where(ct => ct.Tag != null)\n                        .Select(ct => new ContactTagDto\n                        {\n                            TagId = ct.TagId,\n                            TagName = ct.Tag.Name,\n                            ColorHex = ct.Tag.ColorHex,\n                            Category = ct.Tag.Category\n                        })\n                        .ToList() ?? new List<ContactTagDto>()\n                });\n\n                _logger.LogInformation(\"GetAllContactsAsync returned {Count} contacts\", contacts.Count);\n                return result;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in GetAllContactsAsync: businessId={BusinessId}\", businessId);\n                throw;\n            }\n        }\n        public async Task<PagedResult<ContactDto>> GetPagedContactsAsync(Guid businessId, string? tab, int page, int pageSize, string? searchTerm)\n        {\n            _logger.LogInformation(\"GetPagedContactsAsync: businessId={BusinessId}, tab={Tab}, page={Page}, pageSize={PageSize}\",\n                businessId, tab, page, pageSize);\n\n            if (page < 1) page = 1;\n            if (pageSize < 1) pageSize = 25;\n            if (pageSize > 100) pageSize = 100; // max limit\n\n            var baseQuery = _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.IsActive);\n\n            if (tab == \"favourites\")\n                baseQuery = baseQuery.Where(c => c.IsFavorite);\n            else if (tab == \"archived\")\n                baseQuery = baseQuery.Where(c => c.IsArchived);\n            else if (tab == \"groups\")\n                baseQuery = baseQuery.Where(c => !string.IsNullOrEmpty(c.Group));\n\n            var totalCount = await baseQuery.CountAsync();\n\n            var contacts = await baseQuery\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag)\n                .OrderBy(c => c.Name) // or any order preferred\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .ToListAsync();\n\n            var items = contacts.Select(c => new ContactDto\n            {\n                Id = c.Id,\n                Name = c.Name,\n                PhoneNumber = c.PhoneNumber,\n                Email = c.Email,\n                LeadSource = c.LeadSource,\n                LastContactedAt = c.LastContactedAt,\n                NextFollowUpAt = c.NextFollowUpAt,\n                Notes = c.Notes,\n                CreatedAt = c.CreatedAt,\n                IsFavorite = c.IsFavorite,\n                IsArchived = c.IsArchived,\n                Group = c.Group,\n                Tags = c.ContactTags?\n                    .Where(ct => ct.Tag != null)\n                    .Select(ct => new ContactTagDto\n                    {\n                        TagId = ct.TagId,\n                        TagName = ct.Tag.Name,\n                        ColorHex = ct.Tag.ColorHex,\n                        Category = ct.Tag.Category\n                    })\n                    .ToList() ?? new List<ContactTagDto>()\n            }).ToList();\n\n            return new PagedResult<ContactDto>\n            {\n                Items = items,\n                TotalCount = totalCount\n            };\n        }\n\n        public async Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<string> tags)\n        {\n            var contacts = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && !c.IsArchived)\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag)\n                .Where(c => c.ContactTags.Any(ct => tags.Contains(ct.Tag.Name))) // 🔍 Filter by tag names\n                .OrderBy(c => c.Name)\n                .Select(c => new ContactDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    PhoneNumber = c.PhoneNumber,\n                    Email = c.Email,\n                    Notes = c.Notes,\n                    Tags = c.ContactTags.Select(ct => new ContactTagDto\n                    {\n                        TagId = ct.Tag.Id,\n                        TagName = ct.Tag.Name,\n                        ColorHex = ct.Tag.ColorHex,\n                        Category = ct.Tag.Category\n                    }).ToList()\n                })\n                .ToListAsync();\n\n            return contacts;\n        }\n        public async Task<BulkImportResultDto> BulkImportAsync(Guid businessId, Stream csvStream)\n        {\n            _logger.LogInformation(\"Bulk import started for businessId={BusinessId}\", businessId);\n\n            var result = new BulkImportResultDto();\n            var config = new CsvConfiguration(CultureInfo.InvariantCulture)\n            {\n                HeaderValidated = null,\n                MissingFieldFound = null\n            };\n\n            using var reader = new StreamReader(csvStream);\n            using var csv = new CsvReader(reader, config);\n            csv.Context.RegisterClassMap<ContactDtoCsvMap>();\n\n            await csv.ReadAsync();\n            csv.ReadHeader();\n\n            var contactsToAdd = new List<Contact>();\n            int row = 1;\n\n            while (await csv.ReadAsync())\n            {\n                row++;\n                try\n                {\n                    var dto = csv.GetRecord<ContactDto>();\n                    if (string.IsNullOrWhiteSpace(dto.PhoneNumber)) continue;\n\n                    var contact = new Contact\n                    {\n                        Id = Guid.NewGuid(),\n                        Name = dto.Name?.Trim() ?? \"Unnamed\",\n                        PhoneNumber = dto.PhoneNumber.Trim(),\n                        Email = dto.Email?.Trim(),\n                        Notes = dto.Notes,\n                        BusinessId = businessId,\n                        CreatedAt = DateTime.UtcNow\n                    };\n\n                    contactsToAdd.Add(contact);\n                    result.Imported++;\n                }\n                catch (Exception ex)\n                {\n                    result.Errors.Add(new CsvImportError\n                    {\n                        RowNumber = row,\n                        ErrorMessage = ex.Message\n                    });\n                }\n            }\n\n            await _db.Contacts.AddRangeAsync(contactsToAdd);\n            await _db.SaveChangesAsync();\n\n            _logger.LogInformation(\"Bulk import completed: {Imported} contacts, {Errors} errors\",\n                result.Imported, result.Errors.Count);\n\n            return result;\n        }\n        public async Task<IEnumerable<ContactDto>> GetContactsByTagsAsync(Guid businessId, List<Guid> tagIds)\n        {\n            // Step 1: Prepare base query (without Include yet)\n            var baseQuery = _db.Contacts\n                .Where(c => c.BusinessId == businessId && !c.IsArchived);\n\n            // Step 2: Apply tag filter only if tagIds are provided\n            if (tagIds?.Any() == true)\n            {\n                baseQuery = baseQuery.Where(c =>\n                    c.ContactTags.Any(ct =>\n                        tagIds.Contains(ct.TagId)\n                    )\n                );\n            }\n\n            // Step 3: Add Includes after filtering to avoid cast issue\n            var queryWithIncludes = baseQuery\n                .Include(c => c.ContactTags)\n                    .ThenInclude(ct => ct.Tag);\n\n            // Step 4: Fetch data\n            var contacts = await queryWithIncludes.ToListAsync();\n\n            // Step 5: Project to DTO\n            return contacts.Select(c => new ContactDto\n            {\n                Id = c.Id,\n                Name = c.Name,\n                PhoneNumber = c.PhoneNumber,\n                Tags = c.ContactTags.Select(ct => new ContactTagDto\n                {\n                    TagId = ct.Tag.Id,\n                    TagName = ct.Tag.Name,\n                    ColorHex = ct.Tag.ColorHex,\n                    Category = ct.Tag.Category\n                }).ToList()\n            });\n        }\n        public async Task<bool> AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tags)\n        {\n            if (tags == null || tags.Count == 0)\n                return false;\n\n            // 🧠 Step 1: Find the contact by phone\n            var contact = await _db.Contacts\n                .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber && !c.IsArchived);\n\n            if (contact == null)\n                return false;\n\n            foreach (var tagName in tags)\n            {\n                if (string.IsNullOrWhiteSpace(tagName))\n                    continue;\n\n                // ✅ Step 2: Find or create the tag (by name)\n                var tag = await _db.Tags\n                    .FirstOrDefaultAsync(t => t.BusinessId == businessId && t.Name == tagName && t.IsActive);\n\n                if (tag == null)\n                {\n                    tag = new Tag\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        Name = tagName,\n                        ColorHex = \"#8c8c8c\", // default gray if not assigned\n                        IsActive = true,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    _db.Tags.Add(tag);\n                }\n\n                // 🧪 Step 3: Check if contact already has this tag\n                var alreadyTagged = await _db.ContactTags.AnyAsync(ct =>\n                    ct.ContactId == contact.Id && ct.TagId == tag.Id);\n\n                if (!alreadyTagged)\n                {\n                    _db.ContactTags.Add(new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        ContactId = contact.Id,\n                        TagId = tag.Id\n                    });\n                }\n            }\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/CRM/Services/NoteService.cs",
          "sha256": "b2087e02e5275e90dced5ed8e2b0c1cffcbca20c8c11ad2c68fe22cad1adb2fc",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Mappers;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Services;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class NoteService : INoteService\n    {\n        private readonly AppDbContext _db;\n        private readonly ITimelineService _timelineService; // ✅ Injected Timeline Service\n\n        // ✅ Constructor: Inject AppDbContext + TimelineService\n        public NoteService(AppDbContext db, ITimelineService timelineService)\n        {\n            _db = db;\n            _timelineService = timelineService;\n        }\n\n        // 📝 Add a new Note + Log into LeadTimeline\n        public async Task<NoteDto> AddNoteAsync(Guid businessId, NoteDto dto)\n        {\n            // 1️⃣ Map incoming DTO to Note entity\n            var note = NoteMapper.MapToEntity(dto, businessId);\n\n            // 2️⃣ Save the Note into database\n            _db.Notes.Add(note);\n            await _db.SaveChangesAsync();\n\n            // 3️⃣ Log this Note creation into LeadTimeline (only if ContactId is present)\n            if (dto.ContactId.HasValue)\n            {\n                try\n                {\n                    await _timelineService.LogNoteAddedAsync(new CRMTimelineLogDto\n                    {\n                        ContactId = dto.ContactId.Value,       // ➔ Which contact the note is related to\n                        BusinessId = businessId,               // ➔ Which business created this\n                        EventType = \"NoteAdded\",                // ➔ Timeline event type\n                        Description = $\"📝 Note added: {dto.Title ?? \"(Untitled)\"}\", // ➔ Friendly description\n                        ReferenceId = note.Id,                  // ➔ Link back to Note Id\n                        CreatedBy = dto.CreatedBy,              // ➔ Who created it\n                        Timestamp = DateTime.UtcNow             // ➔ When created\n                    });\n                }\n                catch (Exception ex)\n                {\n                    // 🛡 Timeline saving failure should not break note creation\n                    Console.WriteLine($\"⚠️ Timeline log failed for NoteId {note.Id}: {ex.Message}\");\n                }\n            }\n\n            // 4️⃣ Return the saved note as DTO\n            return NoteMapper.MapToDto(note);\n        }\n\n        // 📋 List all Notes by Contact\n        public async Task<IEnumerable<NoteDto>> GetNotesByContactAsync(Guid businessId, Guid contactId)\n        {\n            return await _db.Notes\n                .AsNoTracking()\n                .Where(n => n.BusinessId == businessId && n.ContactId == contactId)\n                .OrderByDescending(n => n.CreatedAt)\n                .Select(n => NoteMapper.MapToDto(n))\n                .ToListAsync();\n        }\n\n        // 📋 Get a single Note by Id\n        public async Task<NoteDto?> GetNoteByIdAsync(Guid businessId, Guid noteId)\n        {\n            var note = await _db.Notes\n                .AsNoTracking()\n                .FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n\n            return note == null ? null : NoteMapper.MapToDto(note);\n        }\n\n        // ✏️ Update an existing Note\n        public async Task<bool> UpdateNoteAsync(Guid businessId, Guid noteId, NoteDto dto)\n        {\n            var note = await _db.Notes.FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n            if (note == null) return false;\n\n            note.Title = dto.Title;\n            note.Content = dto.Content;\n            note.IsPinned = dto.IsPinned;\n            note.IsInternal = dto.IsInternal;\n            note.EditedAt = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc); // Always UTC timestamp\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        // 🗑️ Soft delete (actually remove) a Note\n        public async Task<bool> DeleteNoteAsync(Guid businessId, Guid noteId)\n        {\n            var note = await _db.Notes.FirstOrDefaultAsync(n => n.Id == noteId && n.BusinessId == businessId);\n            if (note == null) return false;\n\n            _db.Notes.Remove(note);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Services/ReminderService.cs",
          "sha256": "3ad4d8d834b958a925554f6aadbc8360ec657324fee3f939680f3c37df7076a0",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Mappers;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class ReminderService : IReminderService\n    {\n        private readonly AppDbContext _db;\n\n        public ReminderService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        //public async Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto)\n        //{\n        //    var reminder = new Reminder\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = businessId,\n        //        //ContactId = dto.ContactId,\n        //        Title = dto.Title,\n        //        Description = dto.Description,\n        //        DueAt = dto.DueAt,\n        //        Status = dto.Status ?? \"Pending\",\n        //        ReminderType = dto.ReminderType,\n        //        Priority = dto.Priority,\n        //        IsRecurring = dto.IsRecurring,\n        //        RecurrencePattern = dto.RecurrencePattern,\n        //        SendWhatsappNotification = dto.SendWhatsappNotification,\n        //        LinkedCampaign = dto.LinkedCampaign,\n        //        CreatedAt = DateTime.UtcNow,\n        //        IsActive = true\n        //    };\n\n        //    _db.Reminders.Add(reminder);\n        //    await _db.SaveChangesAsync();\n\n        //    return MapToDto(reminder);\n        //}\n        public async Task<ReminderDto> AddReminderAsync(Guid businessId, ReminderDto dto)\n        {\n            try\n            {\n                var reminder = new Reminder\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = dto.ContactId ?? Guid.Empty, // add default fallback\n                    Title = dto.Title,\n                    Description = dto.Description,\n                    DueAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc),\n                    Status = dto.Status ?? \"Pending\",\n                    ReminderType = dto.ReminderType,\n                    Priority = dto.Priority,\n                    IsRecurring = dto.IsRecurring,\n                    RecurrencePattern = dto.RecurrencePattern,\n                    SendWhatsappNotification = dto.SendWhatsappNotification,\n                    LinkedCampaign = dto.LinkedCampaign,\n                    CreatedAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc),\n                    IsActive = true\n                };\n\n                _db.Reminders.Add(reminder);\n                await _db.SaveChangesAsync();\n\n                return MapToDto(reminder);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Error in AddReminderAsync: \" + ex.Message);\n                throw;\n            }\n        }\n\n        public async Task<IEnumerable<ReminderDto>> GetAllRemindersAsync(Guid businessId)\n        {\n            return await _db.Reminders\n                .AsNoTracking()\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.DueAt)\n                .Select(r => ReminderMapper.MapToDto(r))\n                .ToListAsync();\n        }\n\n\n        public async Task<ReminderDto?> GetReminderByIdAsync(Guid businessId, Guid reminderId)\n        {\n            var reminder = await _db.Reminders\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n\n            return reminder == null ? null : MapToDto(reminder);\n        }\n\n        public async Task<bool> UpdateReminderAsync(Guid businessId, Guid reminderId, ReminderDto dto)\n        {\n            var reminder = await _db.Reminders.FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n            if (reminder == null) return false;\n\n            reminder.Title = dto.Title;\n            reminder.Description = dto.Description;\n            reminder.DueAt = DateTime.SpecifyKind(dto.DueAt, DateTimeKind.Utc);\n            reminder.Status = dto.Status ?? reminder.Status;\n            reminder.ReminderType = dto.ReminderType;\n            reminder.Priority = dto.Priority;\n            reminder.IsRecurring = dto.IsRecurring;\n            reminder.RecurrencePattern = dto.RecurrencePattern;\n            reminder.SendWhatsappNotification = dto.SendWhatsappNotification;\n            reminder.LinkedCampaign = dto.LinkedCampaign;\n            reminder.UpdatedAt = DateTime.UtcNow;\n\n            if (dto.Status?.ToLower() == \"done\")\n                reminder.CompletedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteReminderAsync(Guid businessId, Guid reminderId)\n        {\n            var reminder = await _db.Reminders.FirstOrDefaultAsync(r => r.BusinessId == businessId && r.Id == reminderId && r.IsActive);\n            if (reminder == null) return false;\n\n            reminder.IsActive = false;\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        private ReminderDto MapToDto(Reminder r)\n        {\n            return new ReminderDto\n            {\n                Id = r.Id,\n                ContactId = r.ContactId,\n                Title = r.Title,\n                Description = r.Description,\n                DueAt = r.DueAt,\n                Status = r.Status,\n                ReminderType = r.ReminderType,\n                Priority = r.Priority,\n                IsRecurring = r.IsRecurring,\n                RecurrencePattern = r.RecurrencePattern,\n                SendWhatsappNotification = r.SendWhatsappNotification,\n                LinkedCampaign = r.LinkedCampaign,\n                CreatedAt = r.CreatedAt,\n                UpdatedAt = r.UpdatedAt,\n                CompletedAt = r.CompletedAt,\n                IsActive = r.IsActive\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/CRM/Services/TagService.cs",
          "sha256": "e6319aeaf570d7b97052cbcabccb0de70ab4649b141cea3a48e625b620caa0c1",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Services;\n\nnamespace xbytechat.api.CRM.Services\n{\n    public class TagService : ITagService\n    {\n        private readonly AppDbContext _db;\n        private readonly ITimelineService _timelineService; // ✅ Injected TimelineService\n        private readonly ILogger<TagService> _logger;\n        public TagService(AppDbContext db, ITimelineService timelineService, ILogger<TagService> logger)\n        {\n            _db = db;\n            _timelineService = timelineService;\n            _logger = logger;\n        }\n\n        public async Task<TagDto> AddTagAsync(Guid businessId, TagDto dto)\n        {\n            var tag = new Tag\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = dto.Name,\n                ColorHex = dto.ColorHex,\n                Category = dto.Category,\n                Notes = dto.Notes,\n                IsSystemTag = dto.IsSystemTag,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow,\n                LastUsedAt = null\n            };\n\n            _db.Tags.Add(tag);\n            await _db.SaveChangesAsync();\n\n            // ✅ After saving tag → try logging into Timeline (non-blocking)\n            try\n            {\n                await _timelineService.LogTagAppliedAsync(new CRMTimelineLogDto\n                {\n                    ContactId = Guid.Empty,    // ➡️ No specific contact, general event\n                    BusinessId = businessId,\n                    EventType = \"TagCreated\",\n                    Description = $\"🏷️ New tag created: {dto.Name}\",\n                    ReferenceId = tag.Id,\n                    CreatedBy = \"System\",\n                    Timestamp = DateTime.UtcNow,\n                    Category = \"CRM\"\n                });\n            }\n            catch (Exception ex)\n            {\n                // 🛡 Fail-safe: Do not block tag creation if timeline fails\n                Console.WriteLine($\"⚠️ Timeline log failed for TagId {tag.Id}: {ex.Message}\");\n            }\n\n            return new TagDto\n            {\n                Id = tag.Id,\n                Name = tag.Name,\n                ColorHex = tag.ColorHex,\n                Category = tag.Category,\n                Notes = tag.Notes,\n                IsSystemTag = tag.IsSystemTag,\n                IsActive = tag.IsActive,\n                CreatedAt = tag.CreatedAt,\n                LastUsedAt = tag.LastUsedAt\n            };\n        }\n\n        public async Task<IEnumerable<TagDto>> GetAllTagsAsync(Guid businessId)\n        {\n            return await _db.Tags\n                .Where(t => t.BusinessId == businessId && t.IsActive)\n                .OrderByDescending(t => t.CreatedAt)\n                .Select(t => new TagDto\n                {\n                    Id = t.Id,\n                    Name = t.Name,\n                    ColorHex = t.ColorHex,\n                    Category = t.Category,\n                    Notes = t.Notes,\n                    IsSystemTag = t.IsSystemTag,\n                    IsActive = t.IsActive,\n                    CreatedAt = t.CreatedAt,\n                    LastUsedAt = t.LastUsedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<bool> UpdateTagAsync(Guid businessId, Guid tagId, TagDto dto)\n        {\n            var tag = await _db.Tags.FirstOrDefaultAsync(t => t.Id == tagId && t.BusinessId == businessId);\n            if (tag == null) return false;\n\n            tag.Name = dto.Name;\n            tag.ColorHex = dto.ColorHex;\n            tag.Category = dto.Category;\n            tag.Notes = dto.Notes;\n            tag.IsSystemTag = dto.IsSystemTag;\n            tag.IsActive = dto.IsActive;\n            tag.LastUsedAt = DateTime.UtcNow;\n\n            await _db.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteTagAsync(Guid businessId, Guid tagId)\n        {\n            var tag = await _db.Tags.FirstOrDefaultAsync(t => t.Id == tagId && t.BusinessId == businessId);\n            if (tag == null) return false;\n\n            tag.IsActive = false;\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        //public async Task AssignTagAsync(Guid businessId, string phone, string tag)\n        //{\n        //    try\n        //    {\n        //        // ✅ Step 1: Lookup contact\n        //        var contact = await _db.Contacts\n        //            .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phone);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"⚠️ Contact not found for phone: {Phone}\", phone);\n        //            return;\n        //        }\n\n        //        // ✅ Step 2: Check if tag exists\n        //        var existingTag = await _db.Tags\n        //            .FirstOrDefaultAsync(t => t.BusinessId == businessId && t.Name == tag);\n\n        //        if (existingTag == null)\n        //        {\n        //            existingTag = new Tag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                BusinessId = businessId,\n        //                Name = tag,\n        //                CreatedAt = DateTime.UtcNow\n        //            };\n\n        //            await _db.Tags.AddAsync(existingTag);\n        //        }\n\n        //        // ✅ Step 3: Associate tag with contact if not already\n        //        var alreadyTagged = await _db.ContactTags\n        //            .AnyAsync(ct => ct.ContactId == contact.Id && ct.TagId == existingTag.Id);\n\n        //        if (!alreadyTagged)\n        //        {\n        //            await _db.ContactTags.AddAsync(new ContactTag\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                ContactId = contact.Id,\n        //                TagId = existingTag.Id,\n        //                AssignedAt = DateTime.UtcNow\n        //            });\n\n        //            _logger.LogInformation(\"🏷 Tag '{Tag}' assigned to contact {ContactId}\", tag, contact.Id);\n        //        }\n\n        //        await _db.SaveChangesAsync();\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ Error assigning tag to contact.\");\n        //        throw;\n        //    }\n        //}\n        public async Task AssignTagsAsync(Guid businessId, string phoneNumber, List<string> tagNames)\n        {\n            if (tagNames == null || !tagNames.Any())\n                return;\n\n            // 🔍 Fetch the contact and existing tag links\n            var contact = await _db.Contacts\n             .Include(c => c.ContactTags)\n             .FirstOrDefaultAsync(c => c.BusinessId == businessId && c.PhoneNumber == phoneNumber);\n\n\n            if (contact == null) return;\n\n            var existingTagIds = contact.ContactTags.Select(t => t.TagId).ToHashSet();\n\n            // 🔍 Ensure tags exist or create them\n            var tags = await _db.Tags\n                .Where(t => t.BusinessId == businessId && tagNames.Contains(t.Name))\n                .ToListAsync();\n\n            var existingNames = tags.Select(t => t.Name).ToHashSet(StringComparer.OrdinalIgnoreCase);\n            var missingNames = tagNames.Where(t => !existingNames.Contains(t)).Distinct().ToList();\n\n            foreach (var name in missingNames)\n            {\n                var newTag = new Tag\n                {\n                    Id = Guid.NewGuid(),\n                    Name = name,\n                    BusinessId = businessId,\n                    CreatedAt = DateTime.UtcNow\n                };\n                _db.Tags.Add(newTag);\n                tags.Add(newTag);\n            }\n\n            await _db.SaveChangesAsync(); // Save new tags before linking\n\n            // ✅ Link new tags to contact\n            foreach (var tag in tags)\n            {\n                if (!existingTagIds.Contains(tag.Id))\n                {\n                    contact.ContactTags.Add(new ContactTag\n                    {\n                        Id = Guid.NewGuid(),\n                        TagId = tag.Id,\n                        ContactId = contact.Id,\n                        BusinessId = businessId,\n                        AssignedAt = DateTime.UtcNow,\n                        AssignedBy = \"automation\" // optional: set to flow name\n                    });\n                }\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Data/AppDbContext.cs",
          "sha256": "1d0133425b58fdc5b25f76370481d0709aacc757a52ddc7ca1ec139c82dd5a74",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing System.Globalization;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AccessControl.Seeder;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api\n{\n    public class AppDbContext : DbContext\n    {\n        public AppDbContext(DbContextOptions<AppDbContext> options)\n            : base(options) { }\n\n        // ✅ Table Registrations\n        public DbSet<Business> Businesses { get; set; }\n        public DbSet<User> Users { get; set; }\n        public DbSet<MessageLog> MessageLogs { get; set; }\n        public DbSet<Product> Products { get; set; }\n        public DbSet<CatalogClickLog> CatalogClickLogs { get; set; }\n        public DbSet<Contact> Contacts { get; set; }\n        public DbSet<Tag> Tags { get; set; }\n        public DbSet<Reminder> Reminders { get; set; }\n        public DbSet<Note> Notes { get; set; }\n        public DbSet<LeadTimeline> LeadTimelines { get; set; }\n        public DbSet<ContactTag> ContactTags { get; set; }\n        public DbSet<Campaign> Campaigns { get; set; }\n        public DbSet<CampaignRecipient> CampaignRecipients { get; set; }\n        public DbSet<CampaignSendLog> CampaignSendLogs { get; set; }\n        public DbSet<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        // 🧩 Access Control\n        public DbSet<Role> Roles { get; set; }\n        public DbSet<Permission> Permissions { get; set; }\n        public DbSet<RolePermission> RolePermissions { get; set; }\n        public DbSet<UserPermission> UserPermissions { get; set; }\n        public DbSet<AuditLog> AuditLogs { get; set; }\n        public DbSet<WhatsAppSettingEntity> WhatsAppSettings { get; set; }\n        public DbSet<BusinessPlanInfo> BusinessPlanInfos { get; set; }\n\n        public DbSet<TrackingLog> TrackingLogs { get; set; }\n        public DbSet<CTADefinition> CTADefinitions { get; set; }\n        public DbSet<CampaignButton> CampaignButtons { get; set; }\n        public DbSet<FailedWebhookLog> FailedWebhookLogs { get; set; }\n        public DbSet<WebhookSettings> WebhookSettings { get; set; }\n\n        public DbSet<CTAFlowConfig> CTAFlowConfigs { get; set; }\n        public DbSet<CTAFlowStep> CTAFlowSteps { get; set; }\n        public DbSet<FlowButtonLink> FlowButtonLinks { get; set; }\n\n        public DbSet<CampaignFlowOverride> CampaignFlowOverrides { get; set; }\n        public DbSet<FlowExecutionLog> FlowExecutionLogs { get; set; }\n        public DbSet<ContactRead> ContactReads { get; set; }\n\n        public DbSet<AutoReplyRule> AutoReplyRules { get; set; }\n        public DbSet<AutoReplyFlow> AutoReplyFlows { get; set; }\n        public DbSet<AutoReplyFlowNode> AutoReplyFlowNodes { get; set; }\n        public DbSet<AutoReplyFlowEdge> AutoReplyFlowEdges { get; set; }\n        public DbSet<AutoReplyLog> AutoReplyLogs { get; set; }\n        public DbSet<ChatSessionState> ChatSessionStates { get; set; }\n        public DbSet<Plan> Plans { get; set; }\n        public DbSet<PlanPermission> PlanPermissions { get; set; }\n        public DbSet<FeatureAccess> FeatureAccess { get; set; }\n        public DbSet<PlanFeatureMatrix> PlanFeatureMatrix { get; set; }\n        public DbSet<UserFeatureAccess> UserFeatureAccess { get; set; }\n        public DbSet<FeatureMaster> FeatureMasters { get; set; }\n        public DbSet<AutomationFlow> AutomationFlows { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            // ✅ Seed Role IDs (keep them consistent)\n            var superadminRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000001\");\n            var partnerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000002\");\n            var resellerRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000003\");\n            var businessRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000004\");\n            var agentRoleId = Guid.Parse(\"00000000-0000-0000-0000-000000000005\");\n\n            // ✅ Roles\n            modelBuilder.Entity<Role>().HasData(\n                new Role { Id = superadminRoleId, Name = \"admin\", Description = \"Super Admin\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = partnerRoleId, Name = \"partner\", Description = \"Business Partner\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = resellerRoleId, Name = \"reseller\", Description = \"Reseller Partner\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = businessRoleId, Name = \"business\", Description = \"Business Owner\", CreatedAt = DateTime.UtcNow },\n                new Role { Id = agentRoleId, Name = \"staff\", Description = \"Staff\", CreatedAt = DateTime.UtcNow }\n            );\n\n            // ✅ Permissions from RolePermissionMapping\n            var allPermissions = RolePermissionMapping.RolePermissions\n                .SelectMany(p => p.Value)\n                .Distinct()\n                .ToList();\n\n            var permissionEntities = allPermissions.Select((perm, index) => new Permission\n            {\n                Id = Guid.Parse($\"30000000-0000-0000-0000-{index.ToString(\"D12\", CultureInfo.InvariantCulture)}\"),\n                Name = perm,\n                Code = perm,\n                Description = $\"Permission for {perm}\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            }).ToList();\n            modelBuilder.Entity<Permission>().HasData(permissionEntities);\n\n            // ✅ RolePermission mappings\n            var permissionMap = permissionEntities.ToDictionary(p => p.Name, p => p.Id);\n            var roleMap = new Dictionary<string, Guid>\n            {\n                [\"admin\"] = superadminRoleId,\n                [\"partner\"] = partnerRoleId,\n                [\"reseller\"] = resellerRoleId,\n                [\"business\"] = businessRoleId,\n                [\"staff\"] = agentRoleId\n            };\n\n            var rolePermissions = RolePermissionMapping.RolePermissions\n                .SelectMany(rp => rp.Value.Select(permissionName => new RolePermission\n                {\n                    Id = Guid.NewGuid(),\n                    RoleId = roleMap[rp.Key],\n                    PermissionId = permissionMap[permissionName],\n                    IsActive = true,\n                    AssignedAt = DateTime.UtcNow\n                }))\n                .ToList();\n\n            modelBuilder.Entity<RolePermission>().HasData(rolePermissions);\n\n            // ========== 🧩 CORRECT RELATIONSHIPS ==========\n\n            // Role ↔️ RolePermission (One-to-Many)\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Role)\n                .WithMany(r => r.RolePermissions)\n                .HasForeignKey(rp => rp.RoleId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // Permission ↔️ RolePermission (One-to-Many)\n            modelBuilder.Entity<RolePermission>()\n                .HasOne(rp => rp.Permission)\n                .WithMany(p => p.RolePermissions)\n                .HasForeignKey(rp => rp.PermissionId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // User ↔️ UserPermission (One-to-Many)\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.User)\n                .WithMany(u => u.UserPermissions)\n                .HasForeignKey(up => up.UserId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // Permission ↔️ UserPermission (One-to-Many)\n            modelBuilder.Entity<UserPermission>()\n                .HasOne(up => up.Permission)\n                .WithMany(p => p.UserPermissions)\n                .HasForeignKey(up => up.PermissionId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            // ========== (Rest of your model mappings below remain the same) ==========\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.MessageLog)\n                .WithMany()\n                .HasForeignKey(s => s.MessageLogId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<LeadTimeline>()\n                .HasOne(t => t.Contact)\n                .WithMany()\n                .HasForeignKey(t => t.ContactId);\n\n            modelBuilder.Entity<Campaign>()\n                .HasOne(c => c.Business)\n                .WithMany(b => b.Campaigns)\n                .HasForeignKey(c => c.BusinessId)\n                .IsRequired();\n\n            modelBuilder.Entity<CampaignRecipient>()\n                .HasOne(r => r.Campaign)\n                .WithMany(c => c.Recipients)\n                .HasForeignKey(r => r.CampaignId);\n\n            modelBuilder.Entity<CampaignRecipient>()\n                .HasOne(r => r.Contact)\n                .WithMany()\n                .HasForeignKey(r => r.ContactId);\n\n            modelBuilder.Entity<CampaignRecipient>()\n                .HasOne(r => r.Business)\n                .WithMany()\n                .HasForeignKey(r => r.BusinessId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.Recipient)\n                .WithMany(r => r.SendLogs)\n                .HasForeignKey(s => s.RecipientId);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.Contact)\n                .WithMany()\n                .HasForeignKey(s => s.ContactId);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .HasOne(s => s.Campaign)\n                .WithMany(c => c.SendLogs)\n                .HasForeignKey(s => s.CampaignId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<ContactTag>()\n                .HasOne(ct => ct.Contact)\n                .WithMany(c => c.ContactTags)\n                .HasForeignKey(ct => ct.ContactId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<ContactTag>()\n                .HasOne(ct => ct.Tag)\n                .WithMany(t => t.ContactTags)\n                .HasForeignKey(ct => ct.TagId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<Role>()\n                .HasMany(r => r.Users)\n                .WithOne(u => u.Role)\n                .HasForeignKey(u => u.RoleId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<Campaign>()\n                .HasMany(c => c.MultiButtons)\n                .WithOne(b => b.Campaign)\n                .HasForeignKey(b => b.CampaignId)\n                .OnDelete(DeleteBehavior.Cascade);\n\n            modelBuilder.Entity<MessageLog>()\n                .HasOne(m => m.SourceCampaign)\n                .WithMany(c => c.MessageLogs)\n                .HasForeignKey(m => m.CampaignId)\n                .OnDelete(DeleteBehavior.Restrict);\n\n            modelBuilder.Entity<CampaignSendLog>()\n                .Property(s => s.BusinessId)\n                .IsRequired();\n\n            modelBuilder.Entity<FlowButtonLink>()\n                .HasKey(b => b.Id);\n\n            modelBuilder.Entity<Business>()\n                .HasOne(b => b.WhatsAppSettings)\n                .WithOne()\n                .HasForeignKey<WhatsAppSettingEntity>(s => s.BusinessId);\n\n            modelBuilder.Entity<ContactRead>()\n                .HasIndex(cr => new { cr.ContactId, cr.UserId })\n                .IsUnique();\n\n            modelBuilder.Entity<AutoReplyFlowNode>()\n                .OwnsOne(n => n.Position);\n\n            modelBuilder.Entity<FeatureAccess>()\n            .HasIndex(f => new { f.BusinessId, f.FeatureName })\n            .IsUnique();\n\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/BaseMessageDto.cs",
          "sha256": "9af6b10a0f81ca1fef4fa6f55228cf022cf8f574e7dc66dcee263cde3074a20d",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public abstract class BaseMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; }\n\n        public abstract string MessageContent { get; set; }\n\n        //[Required]\n        //public string MessageType { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/BulkMessageDto.cs",
          "sha256": "c9cf233e8ad3bf868c53de4f40343b326e34c668d015097e2aa6a1221696b9c4",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class BulkMessageDto\n    {\n        [Required]\n        public List<Guid> ContactIds { get; set; } = new();\n\n        [Required]\n        public string MessageType { get; set; } = string.Empty; // \"text\" or \"template\"\n\n        [Required]\n        public string MessageTemplate { get; set; } = string.Empty;\n\n        public string? TemplateName { get; set; }\n\n        public List<string>? TemplateParams { get; set; }\n\n        public DateTime? ScheduledAt { get; set; } // Optional future scheduling\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/CtaMessageDto.cs",
          "sha256": "80af1338096deb56a727a9ac543829c364442d6f67637455296e227a56abbd7b",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class CtaMessageDto\n    {\n        // 🎯 Required Fields\n        public string RecipientPhone { get; set; } = string.Empty;\n        public string BodyText { get; set; } = string.Empty;\n        public List<string> Buttons { get; set; } = new();\n\n        // 🔗 Optional Source Info\n        public Guid? BusinessId { get; set; }          // Optional: Track for MessageLog\n        public Guid? CampaignId { get; set; }          // Optional: If triggered via Campaign\n        public string? SourceModule { get; set; }      // e.g., \"Catalog\", \"CRM\", \"Timeline\"\n\n        // 👤 Customer Context (Optional Enrichment)\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n\n        // 📦 Advanced (Optional but useful)\n        public string? BotId { get; set; }             // Bot which served this (optional)\n        public string? RefMessageId { get; set; }      // Link to previous message (thread)\n        public string? CTATriggeredFrom { get; set; }  // e.g., “Buy Now”, “Know More”\n\n        // ⏱️ Timestamps / Meta\n        public DateTime? ScheduledAt { get; set; }     // For future automation (optional)\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/ImageMessageDto.cs",
          "sha256": "f5c8436e0d3055ef94a5fd88067f1497534a889f1296174babd92385a36494cf",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class ImageMessageDto : BaseMessageDto\n    {\n        [Required]\n        public override string MessageContent { get; set; } = string.Empty;\n\n        [Required]\n        [Url]\n        public string MediaUrl { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/RawMessageWrapper.cs",
          "sha256": "d7ac355237d8f59f61eeeee123e9450f669ff9eb387359212b8c2c2456ac4353",
          "language": "csharp",
          "content": "// DTOs/Messages/RawMessageWrapper.cs\nusing Newtonsoft.Json.Linq;\n\npublic class RawMessageWrapper\n{\n    public string MessageType { get; set; } = string.Empty;\n    public JObject Payload { get; set; } = new JObject();\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/TemplateMessageDto.cs",
          "sha256": "06b028cea23f4720af49039d87a58cf7134087ad5744eae187c7900c0a2daa35",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    /// <summary>\n    /// DTO for sending WhatsApp template-based messages.\n    /// </summary>\n    public class TemplateMessageDto : BaseMessageDto\n    {\n        [Required]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        public string LanguageCode { get; set; } = \"en_US\";\n\n        public Dictionary<string, string> TemplateParameters { get; set; }\n\n        public List<ButtonPayloadDto>? ButtonParams { get; set; } // ✅ NEW\n\n        public override string MessageContent { get; set; } = \"[Template]\";\n    }\n\n    /// <summary>\n    /// DTO for each button in a WhatsApp template.\n    /// </summary>\n    public class ButtonPayloadDto\n    {\n        public string SubType { get; set; } = \"url\"; // or \"phone_number\"\n        public string Index { get; set; } = \"0\";      // 0-based index as string\n        public string Param { get; set; } = string.Empty; // dynamic value for URL or phone number\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/DTOs/Messages/TextMessageDto.cs",
          "sha256": "a899c48829d76e7fdf88be5bdafe15ab5307342c557b6431ba43c60f51a8ee11",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.DTOs.Messages\n{\n    public class TextMessageDto : BaseMessageDto\n    {\n        [Required]\n        public override string MessageContent { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Controllers/PlanController.cs",
          "sha256": "a399de549f2643097d77c637a587c5d555fec9810c5970e605ed1c9a85ff1086",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Features.Inbox.Services;\n\nnamespace xbytechat.api.Features.AccessControl.Controllers\n{\n    [ApiController]\n    [Route(\"api/admin/plans\")]\n    [Authorize(Roles = \"SuperAdmin\")] // Only SuperAdmin can access\n    public class PlanController : ControllerBase\n    {\n        private readonly IPlanService _planService;\n        \n        private readonly ILogger<PlanController> _logger;\n        public PlanController(IPlanService planService)\n        {\n            _planService = planService;\n        }\n\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> CreatePlan([FromBody] CreatePlanRequest request)\n        {\n            if (string.IsNullOrWhiteSpace(request.Name))\n                return BadRequest(\"Plan name is required.\");\n\n            var plan = await _planService.CreatePlanAsync(request.Name, request.Description);\n            return Ok(plan);\n        }\n\n        [HttpPost(\"{planId}/assign-permissions\")]\n        public async Task<IActionResult> AssignPermissions(Guid planId, [FromBody] AssignPermissionsRequest request)\n        {\n            await _planService.AssignPermissionsAsync(planId, request.PermissionIds);\n            return Ok(new { success = true });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllPlans()\n        {\n            var plans = await _planService.GetAllPlansAsync();\n            return Ok(plans);\n        }\n\n        [HttpGet(\"{planId}\")]\n        public async Task<IActionResult> GetPlanDetails(Guid planId)\n        {\n            var plan = await _planService.GetPlanByIdAsync(planId);\n            if (plan == null) return NotFound();\n\n            return Ok(plan);\n        }\n\n        [HttpGet(\"{planId}/permissions\")]\n        public async Task<IActionResult> GetPermissionsForPlan(Guid planId)\n        {\n            var permissions = await _planService.GetPermissionsByPlanAsync(planId);\n            return Ok(permissions);\n        }\n    }\n\n    // ✅ DTOs\n\n    public class CreatePlanRequest\n    {\n        public string Name { get; set; }\n        public string? Description { get; set; }\n    }\n\n    public class AssignPermissionsRequest\n    {\n        public List<Guid> PermissionIds { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Models/Permission.cs",
          "sha256": "fcd9e1246cb604b09ae39112c767a3725356276976f6c9dfa886a6c04b8f7937",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Permission\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // Unique key like \"ViewDashboard\"\n\n        public string Name { get; set; } // Friendly name like \"View Dashboard\"\n\n        public string? Group { get; set; } // Optional grouping, e.g., \"CRM\", \"Catalog\", \"Admin\"\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n\n        public ICollection<UserPermission> UserPermissions { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Models/Plan.cs",
          "sha256": "ff7331ee580eb764c3179cfb14fc53ab20cef71361c044577b09fa6e6b4d1b8d",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Plan\n    {\n        public Guid Id { get; set; }\n\n        public string Code { get; set; } // e.g. \"FREE\", \"SMART\", \"ADVANCED\"\n        public string Name { get; set; } // Friendly display name\n\n        public string? Description { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<PlanPermission> PlanPermissions { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Models/PlanPermission.cs",
          "sha256": "e6e65f0ae33c19e9d2585d73812bcf99ed207d52ac6d804a3c2bf86b3152eca7",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class PlanPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid PlanId { get; set; }\n        public Plan Plan { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin email or ID\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Models/Role.cs",
          "sha256": "4c2e237e65d702febee355976cfc64209fd4cf2d98f87e7ef6de4b199dd048a4",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class Role\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; } // e.g. SuperAdmin, PartnerAdmin, BusinessAdmin, Staff, etc.\n\n        public string? Description { get; set; }\n\n        public bool IsSystemDefined { get; set; } = false; // true for SuperAdmin, PartnerAdmin\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public ICollection<RolePermission> RolePermissions { get; set; }\n        public ICollection<User> Users { get; set; } // 🧩 One-to-many relation: Role → Users\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Models/RolePermission.cs",
          "sha256": "d9b31669bec3fbda1b95c89def9a6cc641e0dd21f5e38583b8dae4c0239b9a8a",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class RolePermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid RoleId { get; set; }\n        public Role Role { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin user email or ID\n\n        public bool IsActive { get; set; } = true; // ✅ Add this line\n        public bool IsRevoked { get; set; } = false; // ✅ Required\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Models/UserPermission.cs",
          "sha256": "6b85321ec68fced21477222e85ac56594106c4654b5d99061c42bc1c46d876aa",
          "language": "csharp",
          "content": "using System;\nusing xbytechat.api.AuthModule.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Models\n{\n    public class UserPermission\n    {\n        public Guid Id { get; set; }\n\n        public Guid UserId { get; set; }\n        public User User { get; set; }\n\n        public Guid PermissionId { get; set; }\n        public Permission Permission { get; set; }\n\n        public bool IsGranted { get; set; } = true; // ✅ true = allow, false = explicitly deny\n\n        public DateTime AssignedAt { get; set; } = DateTime.UtcNow;\n        public string? AssignedBy { get; set; } // Admin or system\n\n        public bool IsRevoked { get; set; } = false; // ✅ Required\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Seeder/PermissionConstants.cs",
          "sha256": "47104d91bf08a96917121e247b83aac03fe402f24bb851d3fa4b1b9ee5375469",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class PermissionConstants\n    {\n        public static class Dashboard\n        {\n            public const string View = \"dashboard.view\";\n        }\n\n        public static class Campaigns\n        {\n            public const string View = \"campaign.view\";\n            public const string Create = \"campaign.create\";\n            public const string Delete = \"campaign.delete\";\n        }\n\n        public static class Products\n        {\n            public const string View = \"product.view\";\n            public const string Create = \"product.create\";\n            public const string Delete = \"product.delete\";\n        }\n\n        public static class CRM\n        {\n            public const string ContactsView = \"contacts.view\";\n            public const string TagsEdit = \"tags.edit\";\n        }\n\n        public static class Admin\n        {\n            public const string BusinessApprove = \"admin.business.approve\";\n            public const string ViewLogs = \"admin.logs.view\";\n        }\n\n        // 🆕 Add more modules and permissions here as needed\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Seeder/RolePermissionMapping.cs",
          "sha256": "47f001a1b2d6404c28e73be68faf79485c10c1c0a7dab0a5346cc06fff4f049a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AccessControl.Seeder\n{\n    public static class RolePermissionMapping\n    {\n        public static readonly Dictionary<string, List<string>> RolePermissions = new()\n        {\n            [\"admin\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.Campaigns.Create,\n                PermissionConstants.Campaigns.Delete,\n                PermissionConstants.Products.View,\n                PermissionConstants.Products.Create,\n                PermissionConstants.Products.Delete,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.CRM.TagsEdit,\n                PermissionConstants.Admin.BusinessApprove,\n                PermissionConstants.Admin.ViewLogs\n            },\n\n            [\"business\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.Campaigns.View,\n                PermissionConstants.CRM.ContactsView,\n                PermissionConstants.Products.View\n            },\n\n            [\"staff\"] = new()\n            {\n                PermissionConstants.Dashboard.View,\n                PermissionConstants.CRM.ContactsView\n            }\n        };\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Services/AccessControlService.cs",
          "sha256": "61ef8b78157d0d313e9872c31df8b6d0e7a5139d4ae1de38dc8da55ae9f01cc9",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Repositories.Interfaces;\nusing System.Linq.Expressions;\n\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class AccessControlService : IAccessControlService\n    {\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<RolePermission> _rolePermissionRepo;\n        private readonly IGenericRepository<UserPermission> _userPermissionRepo;\n        private readonly IGenericRepository<Permission> _permissionRepo;\n\n        public AccessControlService(\n            IGenericRepository<User> userRepo,\n            IGenericRepository<RolePermission> rolePermissionRepo,\n            IGenericRepository<UserPermission> userPermissionRepo,\n            IGenericRepository<Permission> permissionRepo\n        )\n        {\n            _userRepo = userRepo;\n            _rolePermissionRepo = rolePermissionRepo;\n            _userPermissionRepo = userPermissionRepo;\n            _permissionRepo = permissionRepo;\n        }\n\n        /// <summary>\n        /// ✅ Fetch all permissions (Role-based + User-specific) for a given user\n        /// </summary>\n        public async Task<List<string>> GetPermissionsAsync(Guid userId)\n        {\n            var user = await _userRepo.FindByIdAsync(userId);\n            if (user == null || user.RoleId == null)\n                return new List<string>();\n\n            // 🔐 Get Role-based permissions\n            var rolePerms = await _rolePermissionRepo\n                .WhereAsync(rp => rp.RoleId == user.RoleId && !rp.IsRevoked);\n\n            // 🔐 Get User-specific extra permissions\n            var userPerms = await _userPermissionRepo\n                .WhereAsync(up => up.UserId == userId && !up.IsRevoked);\n\n            // 🧠 Merge permission IDs\n            var permissionIds = rolePerms.Select(r => r.PermissionId)\n                .Union(userPerms.Select(u => u.PermissionId))\n                .Distinct()\n                .ToList();\n\n            // 🎯 Get full permission names from Permission table\n            var allPerms = await _permissionRepo\n                .WhereAsync(p => permissionIds.Contains(p.Id));\n\n            return allPerms.Select(p => p.Code).Distinct().ToList(); // Use Code (standard)\n        }\n\n        /// <summary>\n        /// ✅ Runtime permission checker (for controller/middleware)\n        /// </summary>\n        public bool HasPermission(ClaimsPrincipal user, string requiredPermission)\n        {\n            var perms = user.Claims\n                .Where(c => c.Type == \"permissions\")\n                .Select(c => c.Value)\n                .ToList();\n\n            return perms.Contains(requiredPermission);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Services/IAccessControlService.cs",
          "sha256": "1596c83e56e4da37e66e5e211aee92e040132bf01e57a9f3fa97659d4086e0c3",
          "language": "csharp",
          "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IAccessControlService\n    {\n        Task<List<string>> GetPermissionsAsync(Guid userId);\n        bool HasPermission(ClaimsPrincipal user, string permission);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Services/IPlanService.cs",
          "sha256": "d8608c41fe95d4dc1ee574bf1fbf39016cc3ab08db8aba49f8c64f003f32b2f7",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public interface IPlanService\n    {\n        Task<Plan> CreatePlanAsync(string name, string description);\n        Task AssignPermissionsAsync(Guid planId, List<Guid> permissionIds);\n        Task<List<Permission>> GetPermissionsByPlanAsync(Guid planId);\n        Task<List<Plan>> GetAllPlansAsync();\n        Task<Plan?> GetPlanByIdAsync(Guid planId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AccessControl/Services/PlanService.cs",
          "sha256": "f72638ec141e47c33274e31d49fd10046b6b4fa292e216ff10f4b3a1de2cf0f2",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AccessControl.Models;\n\nnamespace xbytechat.api.Features.AccessControl.Services\n{\n    public class PlanService : IPlanService\n    {\n        private readonly AppDbContext _context;\n\n        public PlanService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<Plan> CreatePlanAsync(string name, string description)\n        {\n            var plan = new Plan\n            {\n                Id = Guid.NewGuid(),\n                Name = name,\n                Description = description,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.Plans.Add(plan);\n            await _context.SaveChangesAsync();\n            return plan;\n        }\n\n        public async Task AssignPermissionsAsync(Guid planId, List<Guid> permissionIds)\n        {\n            var existing = await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId)\n                .ToListAsync();\n\n            _context.PlanPermissions.RemoveRange(existing);\n\n            var newLinks = permissionIds.Select(pid => new PlanPermission\n            {\n                Id = Guid.NewGuid(),\n                PlanId = planId,\n                PermissionId = pid,\n                AssignedAt = DateTime.UtcNow\n            });\n\n            await _context.PlanPermissions.AddRangeAsync(newLinks);\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<Permission>> GetPermissionsByPlanAsync(Guid planId)\n        {\n            return await _context.PlanPermissions\n                .Where(pp => pp.PlanId == planId)\n                .Include(pp => pp.Permission)\n                .Select(pp => pp.Permission)\n                .ToListAsync();\n        }\n\n        public async Task<List<Plan>> GetAllPlansAsync()\n        {\n            return await _context.Plans.ToListAsync();\n        }\n\n        public async Task<Plan?> GetPlanByIdAsync(Guid planId)\n        {\n            return await _context.Plans\n                .Include(p => p.PlanPermissions)\n                .ThenInclude(pp => pp.Permission)\n                .FirstOrDefaultAsync(p => p.Id == planId);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AuditTrail/DTOs/CreateAuditLogDto.cs",
          "sha256": "845322cca23fe6666ea3c5947bf45d55d34363c27d5bacec30375a04b24a73ef",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AuditTrail.DTOs;\n\npublic class CreateAuditLogDto\n{\n    public string ActionType { get; set; }\n    public string Module { get; set; }\n    public string? RecordId { get; set; }\n\n    public string? OldValues { get; set; }\n    public string? NewValues { get; set; }\n    public string? Description { get; set; }\n\n    public string? IPAddress { get; set; }\n    public string? UserAgent { get; set; }\n    public string? Location { get; set; }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AuditTrail/Models/AuditLog.cs",
          "sha256": "91e4760f6e10564db50d99acec9f1c83de5fd0b8ca2e0d3bc5874d645ac93a45",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.AuditTrail.Models\n{\n    public class AuditLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 📍 Business Context (Multi-Tenant)\n        public Guid BusinessId { get; set; }\n\n        // 🙋 Who performed the action\n        public Guid PerformedByUserId { get; set; }\n        public string? PerformedByUserName { get; set; } // Optional for display\n        public string? RoleAtTime { get; set; } // admin / business / agent\n\n        // 🔍 Action Details\n        public string ActionType { get; set; } = \"\"; // e.g., campaign.created, user.login\n        public string? Description { get; set; } // Free text for summary or custom note\n\n        // 🌐 Optional: Technical metadata\n        public string? IPAddress { get; set; }\n        public string? UserAgent { get; set; }\n        public string? Location { get; set; } // Optional for geo-capture later\n\n        // 🕒 Timestamp\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AuditTrail/Services/AuditLogService.cs",
          "sha256": "6b18d820c4191681a1bf26d6672f189bce0cadcfba3c8beb9e29dbed4ad4fdd9",
          "language": "csharp",
          "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Repositories;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Features.AuditTrail.Services\n{\n    public class AuditLogService : IAuditLogService\n    {\n        private readonly IGenericRepository<AuditLog> _repo;\n\n        public AuditLogService(IGenericRepository<AuditLog> repo)\n        {\n            _repo = repo;\n        }\n\n        public async Task SaveLogAsync(AuditLog log)\n        {\n            await _repo.AddAsync(log);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AuditTrail/Services/IAuditLogService.cs",
          "sha256": "65d811af2c7dc349002b7b1a340a765025625f9fe31c241dccc8f3eaeab15330",
          "language": "csharp",
          "content": "using xbytechat.api.Features.AuditTrail.Models;\n\nnamespace xbytechat.api.Features.AuditTrail.Services\n{\n    public interface IAuditLogService\n    {\n        Task SaveLogAsync(AuditLog log);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Config/ChoiceConfig.cs",
          "sha256": "0d09e0bc40325856d625ab31e93694e661b6df532e5de78f2a55254783e40c1c",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Config\n{\n    public class ChoiceConfig\n    {\n        public List<ChoiceCondition> Conditions { get; set; } = new();\n        public string FallbackNodeId { get; set; }\n    }\n\n    public class ChoiceCondition\n    {\n        public string Match { get; set; }\n        public string NextNodeId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Config/MessageConfig.cs",
          "sha256": "564fbd35e79d9ef3f8b48ed54e15d55a9d0226b7d6ea72315d81b562a7a4ecae",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Future: Add support for media, buttons, templates\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Config/TagNodeConfig.cs",
          "sha256": "81144c1418ba70285c6af13bf7aee6346f8f6674416ffc9ab79614bceb3be4d0",
          "language": "csharp",
          "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Config/WaitConfig.cs",
          "sha256": "d13667732f9e18370123b10c2881aa385e8d11a33bc01acaf0f7eb96f4903bd6",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Models.Configs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 2; // Default wait time\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Controllers/AutomationController.cs",
          "sha256": "3a2f3e472a351808592f6357f3e907d20c118e1e0f86f035a76e49697013e4ff",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Automation.DTOs;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Controllers\n{\n    [ApiController]\n    [Route(\"api/automation\")]\n    [Authorize]\n    public class AutomationController : ControllerBase\n    {\n        private readonly IAutomationFlowRepository _automationRepository;\n        private readonly IAutomationRunner _automationRunner;\n        private readonly IContactService _contactService;\n\n        public AutomationController(\n            IAutomationFlowRepository automationRepository,\n            IAutomationRunner automationRunner,\n            IContactService contactService)\n        {\n            _automationRepository = automationRepository;\n            _automationRunner = automationRunner;\n            _contactService = contactService;\n        }\n\n        [HttpPost(\"trigger\")]\n        public async Task<IActionResult> TriggerByKeyword([FromBody] AutomationTriggerRequest request)\n        {\n            var businessId = User.GetBusinessId();\n            var userId = User.GetUserId();\n\n            if (string.IsNullOrWhiteSpace(request.Keyword) || string.IsNullOrWhiteSpace(request.Phone))\n                return BadRequest(\"Keyword and phone are required.\");\n\n            var flow = await _automationRepository.GetFlowByKeywordAsync(businessId, request.Keyword);\n            if (flow == null || !flow.IsActive)\n                return NotFound(\"⚠️ No matching active automation flow found.\");\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, request.Phone);\n\n            var result = await _automationRunner.RunFlowAsync(\n                flow,\n                businessId,\n                contact.Id,\n                request.Phone,\n                request.SourceChannel ?? \"manual\",\n                request.IndustryTag ?? \"manual\"\n            );\n\n            return Ok(result);\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/DTOs/AutomationEdgeDto.cs",
          "sha256": "d9093a43a35fa0c12238f7c78daec3980190c4160320cfe73c6b93ff2d41c5ce",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    /// <summary>\n    /// Represents a connection (edge) between two automation nodes.\n    /// </summary>\n    public class AutomationEdgeDto\n    {\n        public Guid SourceNodeId { get; set; }\n\n        public Guid TargetNodeId { get; set; }\n\n        public string? Condition { get; set; }  // Optional: for future conditional routing (e.g., \"if clicked\", \"if not responded\")\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/DTOs/AutomationTriggerRequest.cs",
          "sha256": "aeca572a0bab580b70dddd50cb6f4e1b282f17508311aaeb9beaefef34d8fa46",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class AutomationTriggerRequest\n    {\n        public string Keyword { get; set; }\n\n        public string Phone { get; set; }\n\n        public string? SourceChannel { get; set; }\n\n        public string? IndustryTag { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/DTOs/MessageNodeConfig.cs",
          "sha256": "8fdadb2bb6457b35ed85d89655b1f6d1d9bc5028a0ec212d9dd7eaa70b1a8e0d",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class MessageNodeConfig\n    {\n        public string Text { get; set; } = string.Empty;\n\n        // Optional: Later you can add buttons, media, etc.\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/DTOs/TagNodeConfig.cs",
          "sha256": "2feaf9902643a6bb0e59b019cfca34a41ada3abf9f66afffcac065c6bb545b6c",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.DTOs\n{\n    public class TagNodeConfig\n    {\n        public List<Guid> Tags { get; set; } = new();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/DTOs/WaitNodeConfig.cs",
          "sha256": "f520007158ae72db229b2a23f437666e64d34fcc96cdd728ad57a4320f152b75",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.DTOs\n{\n    public class WaitNodeConfig\n    {\n        public int Seconds { get; set; } = 3;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/AutomationFlow.cs",
          "sha256": "7dd5063615cfa824960a08fdd88d9fdf500a3c0461151b27e09fcaa7d97b45fe",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents a saved automation flow with nodes and edges.\n    /// </summary>\n    public class AutomationFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n\n        public string TriggerKeyword { get; set; } = string.Empty; // ✅ Better naming\n\n        public string NodesJson { get; set; } = \"[]\";\n\n        public string EdgesJson { get; set; } = \"[]\";\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/AutomationFlowEdge.cs",
          "sha256": "ad1f63ff8580807f996a658e2a95652c94370929e8dd75eac9f1fdc98c398105",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowEdge\n    {\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string? Condition { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/AutomationFlowNode.cs",
          "sha256": "c18876f0d4c8fdf851da8df67ddff902fee66217b804a6765a9b533f8402e76d",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowNode\n    {\n        public string Id { get; set; } = Guid.NewGuid().ToString(\"N\");\n        public string Label { get; set; } = string.Empty;\n        public NodeTypeEnum NodeType { get; set; }\n        public string ConfigJson { get; set; } = \"{}\";\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/AutomationFlowRunResult.cs",
          "sha256": "61407553e4f66fbfdc8c0a51868372170e58411cd6c74e857e8e9cab13e27b6b",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    public class AutomationFlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } = null;\n\n        public string? Notes { get; set; }  // Optional: track execution info (e.g., exit reason)\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/FlowExecutionContext.cs",
          "sha256": "aef2132567e314889ae4d98f06dd96c43873ab3513b6c02cd8553346e3e7ff57",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Context required to run an automation flow.\n    /// </summary>\n    public class FlowExecutionContext\n    {\n        public AutomationFlow Flow { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        public string ContactPhone { get; set; }\n\n        public string SourceChannel { get; set; } = \"manual\";\n\n        public string IndustryTag { get; set; } = \"manual\";\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/FlowRunResult.cs",
          "sha256": "64baa95c50dc4528fa36e8ad36a12ac82a0528c8c640797d16b58e17455d6125",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Automation.Models\n{\n    /// <summary>\n    /// Represents the result of running an automation flow.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n        public Guid? HandoffNodeId { get; set; } // If agent handoff requested\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/NodeConfigs.cs",
          "sha256": "0e8b3fb72dd676ec59568e34b569e1302a621a35a6efca4553736f89b15b21c4",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/NodeTypeEnum.cs",
          "sha256": "ac2b60c1ffd633136ef56df710b0cf7f141496e92e30cd1c4bd42f201f4d85d3",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Models\n{\n    public enum NodeTypeEnum\n    {\n        Message,\n        Wait,\n        Tag,\n        AgentHandoff,\n        Choice,\n        Condition,\n        Loop,\n        End\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/TagNodeConfig.cs",
          "sha256": "9cec10f188aea021e4b186075bf0f84e18cb4071046ade7098c2658d077559f5",
          "language": "csharp",
          "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Models/WaitConfig.cs",
          "sha256": "641533b56ae811de7505263f827bc5f89cc405f67645b053fd06737f1e5fa621",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Automation.Models.NodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; } = 1;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Repositories/AutomationFlowRepository.cs",
          "sha256": "0e6a38673480db7c067e41901c2725f6c93683975ffaacfdcefb67bcfe90820e",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public class AutomationFlowRepository : IAutomationFlowRepository\n    {\n        private readonly AppDbContext _db;\n\n        public AutomationFlowRepository(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                    f.BusinessId == businessId &&\n                    f.TriggerKeyword.ToLower() == keyword.ToLower() &&\n                    f.IsActive);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId)\n        {\n            return await _db.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderBy(f => f.Name)\n                .ToListAsync();\n        }\n\n        public async Task<AutomationFlow> CreateAsync(AutomationFlow flow)\n        {\n            flow.Id = Guid.NewGuid();\n            flow.CreatedAt = DateTime.UtcNow;\n            flow.IsActive = true;\n\n            _db.AutomationFlows.Add(flow);\n            await _db.SaveChangesAsync();\n            return flow;\n        }\n\n        public async Task<AutomationFlow> UpdateAsync(AutomationFlow flow)\n        {\n            var existing = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flow.Id && f.BusinessId == flow.BusinessId && f.IsActive);\n\n            if (existing == null)\n                throw new KeyNotFoundException(\"Automation flow not found.\");\n\n            existing.Name = flow.Name;\n            existing.TriggerKeyword = flow.TriggerKeyword;\n            existing.NodesJson = flow.NodesJson;\n            existing.EdgesJson = flow.EdgesJson;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(existing);\n            await _db.SaveChangesAsync();\n\n            return existing;\n        }\n\n        public async Task<bool> DeleteAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _db.AutomationFlows\n                .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId && f.IsActive);\n\n            if (flow == null)\n                return false;\n\n            flow.IsActive = false;\n            flow.UpdatedAt = DateTime.UtcNow;\n\n            _db.AutomationFlows.Update(flow);\n            await _db.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _db.AutomationFlows\n                .FirstOrDefaultAsync(f =>\n                f.BusinessId == businessId &&\n                EF.Functions.ILike(f.TriggerKeyword, keyword) &&\n                f.IsActive);\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Repositories/IAutomationFlowRepository.cs",
          "sha256": "3c0e87413a797f0b2cb7de16b419204f9f84555fd58a4435ca5bffc5f570b2fe",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Repositories\n{\n    public interface IAutomationFlowRepository\n    {\n        // 🔍 Get flow by unique FlowId + BusinessId (strict filtering)\n        Task<AutomationFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n\n        // 🔍 Get flow by keyword for auto-trigger\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // 📋 List all flows for business\n        Task<IEnumerable<AutomationFlow>> GetAllByBusinessAsync(Guid businessId);\n\n        // ➕ Create flow\n        Task<AutomationFlow> CreateAsync(AutomationFlow flow);\n\n        // ✏️ Update flow\n        Task<AutomationFlow> UpdateAsync(AutomationFlow flow);\n\n        // ❌ Delete flow\n        Task<bool> DeleteAsync(Guid flowId, Guid businessId);\n        Task<AutomationFlow?> GetByKeywordAsync(Guid businessId, string keyword);\n\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Services/AutomationRunner.cs",
          "sha256": "3f1cb7807540e05fcd7092da474d3784a3f5c6065fd4c98ca22abc2753b97765",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Models.Configs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Inbox.Models;\nusing xbytechat.api.Features.Automation.Config;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationRunner : IAutomationRunner\n    {\n        private readonly IMessageEngineService _messageService;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationRunner> _logger;\n        private readonly AppDbContext _appDbContext;\n        public AutomationRunner(\n            IMessageEngineService messageService,\n            IContactService contactService,\n            ILogger<AutomationRunner> logger, AppDbContext appDbContext)\n        {\n            _messageService = messageService;\n            _contactService = contactService;\n            _logger = logger;\n            _appDbContext = appDbContext;\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string contactPhone,\n            string sourceChannel,\n            string industryTag)\n        {\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var result = new AutomationFlowRunResult();\n            var currentNode = nodes.FirstOrDefault(); // Start from first node\n\n            if (currentNode == null)\n            {\n                _logger.LogWarning(\"🚫 Flow has no start node.\");\n                result.NeedsAgent = true;\n                result.Notes = \"No start node found.\";\n                return result;\n            }\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"➡️ Running node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        _logger.LogInformation(\"📤 Sending message: {Text}\", msgCfg.Text);\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"⏳ Waiting {Seconds}s\", waitCfg.Seconds);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        _logger.LogInformation(\"🏷️ Assigning tags: {Tags}\", string.Join(\", \", tagCfg.Tags));\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.AgentHandoff:\n                        result.NeedsAgent = true;\n                        if (Guid.TryParse(currentNode.Id, out var parsedId))\n                        {\n                            result.HandoffNodeId = parsedId;\n                        }\n                        else\n                        {\n                            _logger.LogWarning(\"⚠️ Invalid node ID format for AgentHandoff node: {Id}\", currentNode.Id);\n                            result.HandoffNodeId = null;\n                        }\n                        result.Notes = \"Flow routed to human agent.\";\n                        return result;\n\n                    case NodeTypeEnum.End:\n                        _logger.LogInformation(\"✅ End node reached.\");\n                        currentNode = null;\n                        continue;\n\n                    case NodeTypeEnum.Choice:\n                        _logger.LogInformation(\"🧠 Reached Choice node. Saving session state to wait for user input...\");\n\n                        var session = await _appDbContext.ChatSessionStates.FirstOrDefaultAsync(s =>\n                            s.BusinessId == businessId && s.ContactId == contactId);\n\n                        if (session == null)\n                        {\n                            session = new ChatSessionState\n                            {\n                                Id = Guid.NewGuid(),\n                                BusinessId = businessId,\n                                ContactId = contactId\n                            };\n                            _appDbContext.ChatSessionStates.Add(session);\n                        }\n\n                        session.Mode = \"awaiting_choice\";\n                        session.UpdatedBy = currentNode.Id.ToString();\n                        session.LastUpdatedAt = DateTime.UtcNow;\n\n                        await _appDbContext.SaveChangesAsync();\n\n                        result.Notes = \"Choice node reached. Flow paused.\";\n                        return result;\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            result.Notes = \"Flow completed.\";\n            return result;\n        }\n        public async Task<AutomationFlowRunResult> ResumeFlowAsync(\n           Guid businessId,\n           Guid contactId,\n           string contactPhone,\n           string incomingMessage)\n        {\n            var session = await _appDbContext.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (session == null || session.Mode != \"awaiting_choice\")\n            {\n                _logger.LogWarning(\"❌ No active automation session found or mode not awaiting_choice.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active automation session.\" };\n            }\n\n            var flow = await _appDbContext.AutomationFlows\n                .Where(f => f.BusinessId == businessId && f.IsActive)\n                .OrderByDescending(f => f.UpdatedAt)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n            {\n                _logger.LogWarning(\"❌ No active automation flow found for business.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"No active flow found.\" };\n            }\n\n            var nodes = JsonConvert.DeserializeObject<List<AutomationFlowNode>>(flow.NodesJson);\n            var edges = JsonConvert.DeserializeObject<List<AutomationFlowEdge>>(flow.EdgesJson);\n\n            var choiceNode = nodes.FirstOrDefault(n => n.Id == session.UpdatedBy && n.NodeType == NodeTypeEnum.Choice);\n            if (choiceNode == null)\n            {\n                _logger.LogWarning(\"❌ Stored session node not found or not a Choice node.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice node in session.\" };\n            }\n\n            var cfg = JsonConvert.DeserializeObject<ChoiceConfig>(choiceNode.ConfigJson);\n            if (cfg?.Conditions == null)\n            {\n                _logger.LogWarning(\"❌ Choice config is null or empty.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Invalid Choice config.\" };\n            }\n\n            var match = cfg.Conditions.FirstOrDefault(c =>\n                string.Equals(c.Match.Trim(), incomingMessage.Trim(), StringComparison.OrdinalIgnoreCase));\n\n            string nextNodeId = match?.NextNodeId ?? cfg.FallbackNodeId;\n            if (match == null)\n            {\n                _logger.LogWarning(\"🔁 No matching condition found. Using fallback: {Fallback}\", nextNodeId);\n            }\n\n            var nextNode = nodes.FirstOrDefault(n => n.Id == nextNodeId);\n            if (nextNode == null)\n            {\n                _logger.LogWarning(\"❌ Next node after choice not found.\");\n                return new AutomationFlowRunResult { NeedsAgent = true, Notes = \"Next node not found.\" };\n            }\n\n            // ✅ Clear session after resume\n            _appDbContext.ChatSessionStates.Remove(session);\n            await _appDbContext.SaveChangesAsync();\n\n            // ✅ Resume from the matched node using shared loop\n            return await ExecuteNodeLoopAsync(flow, nextNode, nodes, edges, businessId, contactId, contactPhone);\n        }\n\n\n        private async Task<AutomationFlowRunResult> ExecuteNodeLoopAsync(\n    AutomationFlow flow,\n    AutomationFlowNode startNode,\n    List<AutomationFlowNode> nodes,\n    List<AutomationFlowEdge> edges,\n    Guid businessId,\n    Guid contactId,\n    string contactPhone)\n        {\n            var result = new AutomationFlowRunResult();\n            var currentNode = startNode;\n\n            while (currentNode != null)\n            {\n                _logger.LogInformation(\"➡️ Executing node: {NodeType} | {NodeId}\", currentNode.NodeType, currentNode.Id);\n\n                switch (currentNode.NodeType)\n                {\n                    case NodeTypeEnum.Message:\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        var msgDto = new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            RecipientNumber = contactPhone,\n                            TextContent = msgCfg.Text,\n                            Source = \"automation\"\n                        };\n                        await _messageService.SendAutomationReply(msgDto);\n                        break;\n\n                    case NodeTypeEnum.Tag:\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _contactService.AssignTagsAsync(businessId, contactPhone, tagCfg.Tags);\n                        break;\n\n                    case NodeTypeEnum.Wait:\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitCfg.Seconds * 1000);\n                        break;\n\n                    case NodeTypeEnum.End:\n                        return new AutomationFlowRunResult { Notes = \"✅ Flow ended.\" };\n\n                    case NodeTypeEnum.AgentHandoff:\n                        return new AutomationFlowRunResult\n                        {\n                            NeedsAgent = true,\n                            Notes = \"Routed to human agent.\"\n                        };\n\n                    case NodeTypeEnum.Choice:\n                        var session = new ChatSessionState\n                        {\n                            Id = Guid.NewGuid(),\n                            BusinessId = businessId,\n                            ContactId = contactId,\n                            Mode = \"awaiting_choice\",\n                            UpdatedBy = currentNode.Id.ToString(),\n                            LastUpdatedAt = DateTime.UtcNow\n                        };\n                        _appDbContext.ChatSessionStates.Add(session);\n                        await _appDbContext.SaveChangesAsync();\n\n                        return new AutomationFlowRunResult { Notes = \"Paused at Choice node.\" };\n                }\n\n                var edge = edges.FirstOrDefault(e => e.SourceNodeId == currentNode.Id);\n                currentNode = edge == null ? null : nodes.FirstOrDefault(n => n.Id == edge.TargetNodeId);\n            }\n\n            return new AutomationFlowRunResult { Notes = \"Flow completed.\" };\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Services/AutomationService.cs",
          "sha256": "c42e37b6d7f110e3f94e15cae67213a79f8219feb763ecb1ba4ca86c636e423c",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.Automation.Models;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public class AutomationService : IAutomationService\n    {\n        private readonly IAutomationFlowRepository _flowRepository;\n        private readonly IAutomationRunner _runner;\n        private readonly IContactService _contactService;\n        private readonly ILogger<AutomationService> _logger;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public AutomationService(\n            IAutomationFlowRepository flowRepository,\n            IAutomationRunner runner,\n            IContactService contactService,\n            ILogger<AutomationService> logger,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _flowRepository = flowRepository;\n            _runner = runner;\n            _contactService = contactService;\n            _logger = logger;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.GetByIdAsync(flowId, businessId);\n        }\n\n        public async Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword)\n        {\n            return await _flowRepository.GetByKeywordAsync(businessId, keyword);\n        }\n\n        public async Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag)\n        {\n            return await _runner.RunFlowAsync(flow, businessId, contactId, phone, sourceChannel, industryTag);\n        }\n\n        public async Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId)\n        {\n            return await _flowRepository.GetAllByBusinessAsync(businessId);\n        }\n\n        public async Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow)\n        {\n            flow.BusinessId = businessId;\n            return await _flowRepository.CreateAsync(flow);\n        }\n\n        public async Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId)\n        {\n            return await _flowRepository.DeleteAsync(flowId, businessId);\n        }\n\n        public async Task RunByKeywordAsync(string messageText, string phoneNumber, string sourceChannel = \"whatsapp\")\n        {\n            var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                ?? throw new UnauthorizedAccessException(\"BusinessId could not be resolved from context.\");\n\n            var flow = await _flowRepository.GetByKeywordAsync(businessId, messageText);\n            if (flow == null)\n            {\n                _logger.LogInformation(\"No matching automation flow for keyword: {Keyword}\", messageText);\n                return;\n            }\n\n            var contact = await _contactService.FindOrCreateAsync(businessId, phoneNumber);\n            await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag: \"default\");\n        }\n\n        public async Task<bool> TryRunFlowByKeywordAsync(\n         Guid businessId,\n         string messageText,\n         string userPhone,\n         string sourceChannel,\n         string industryTag)\n        {\n            try\n            {\n                // 🔍 Normalize keyword\n                var normalizedKeyword = messageText.Trim().ToLower();\n\n                // ✅ Fetch flow by trigger keyword\n                var flow = await _flowRepository.GetByKeywordAsync(businessId, normalizedKeyword);\n                if (flow == null)\n                {\n                    _logger.LogInformation(\"TryRun: No matching automation flow found for keyword: '{Keyword}'\", normalizedKeyword);\n                    return false;\n                }\n\n                // 👤 Ensure contact exists\n                var contact = await _contactService.FindOrCreateAsync(businessId, userPhone);\n                if (contact == null)\n                {\n                    _logger.LogWarning(\"❌ TryRun: Failed to resolve or create contact for phone: {Phone}\", userPhone);\n                    return false;\n                }\n\n                // ▶️ Run automation flow\n                _logger.LogInformation(\"🚀 Running flow '{FlowName}' for keyword '{Keyword}'\", flow.Name, normalizedKeyword);\n                await _runner.RunFlowAsync(flow, businessId, contact.Id, contact.PhoneNumber, sourceChannel, industryTag);\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ TryRun: Exception while executing flow for keyword '{Keyword}'\", messageText);\n                return false;\n            }\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Services/IAutomationRunner.cs",
          "sha256": "0aa081c7006bb76ff84c8cee9da21e51a021a69c4e0b6d191ffdc1356b5e4001",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationRunner\n    {\n        Task<AutomationFlowRunResult> RunFlowAsync(\n             AutomationFlow flow,\n             Guid businessId,\n             Guid contactId,\n             string contactPhone,\n             string sourceChannel,\n             string industryTag\n );\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Automation/Services/IAutomationService.cs",
          "sha256": "fd32d83e0e970571048b14fb8805162a0b1139c917ed0bf99ad84b4a244ce609",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Automation.Models;\n\nnamespace xbytechat.api.Features.Automation.Services\n{\n    public interface IAutomationService\n    {\n        // 📌 Get flow by FlowId (for admin UI or debugging)\n        Task<AutomationFlow?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n\n        // 📌 Get flow by keyword match (used for auto-triggering)\n        Task<AutomationFlow?> GetFlowByKeywordAsync(Guid businessId, string keyword);\n\n        // 🛠️ Execute a flow with contact and channel info\n        Task<AutomationFlowRunResult> RunFlowAsync(\n            AutomationFlow flow,\n            Guid businessId,\n            Guid contactId,\n            string phone,\n            string sourceChannel,\n            string industryTag\n        );\n\n        // 📋 List all flows (for admin or dashboard)\n        Task<IEnumerable<AutomationFlow>> GetAllFlowsAsync(Guid businessId);\n\n        // ➕ Create new flow\n        Task<AutomationFlow> CreateFlowAsync(Guid businessId, AutomationFlow flow);\n\n        // ❌ Delete existing flow\n        Task<bool> DeleteFlowAsync(Guid flowId, Guid businessId);\n\n        // ⚡ Runtime entry point – called when a message arrives\n        Task RunByKeywordAsync(\n            string messageText,\n            string phoneNumber,\n            string sourceChannel = \"whatsapp\"\n        );\n\n        // ✅ Returns true if flow matched and executed\n        Task<bool> TryRunFlowByKeywordAsync(\n            Guid businessId,\n            string messageText,\n            string userPhone,\n            string sourceChannel,\n            string industryTag\n        );\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyController.cs",
          "sha256": "c575c41a8f3145df1332211adef4017099c86609c2981442039fcfbd0823a6de",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyController : ControllerBase\n    {\n        private readonly IAutoReplyService _service;\n\n        public AutoReplyController(IAutoReplyService service)\n        {\n            _service = service;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> CreateRule([FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var result = await _service.CreateRuleAsync(businessId, dto);\n            return Ok(result);\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllRules()\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rules = await _service.GetAllRulesAsync(businessId);\n            return Ok(rules);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetRuleById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var rule = await _service.GetRuleByIdAsync(id, businessId);\n            return rule == null ? NotFound() : Ok(rule);\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateRule(Guid id, [FromBody] AutoReplyRuleDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            dto.Id = id;\n            var success = await _service.UpdateRuleAsync(businessId, dto);\n            return success ? NoContent() : NotFound();\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteRule(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var success = await _service.DeleteRuleAsync(id, businessId);\n            return success ? NoContent() : NotFound();\n        }\n\n        // Optional — for debugging match logic (not exposed in prod)\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchByKeyword([FromQuery] string message)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var matchedRule = await _service.MatchRuleByKeywordAsync(businessId, message);\n            return matchedRule == null ? NotFound(\"No match found.\") : Ok(matchedRule);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyFlowsController.cs",
          "sha256": "442d35032e1265a4ba687db6033f7cd70d21c92e30f63d3122e43e50540bb763",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class AutoReplyFlowsController : ControllerBase\n    {\n        private readonly IAutoReplyFlowService _service;\n\n        public AutoReplyFlowsController(IAutoReplyFlowService service)\n        {\n            _service = service;\n        }\n\n        // [HttpPost(\"save\")]\n        //public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        //{\n        //    var id = await _service.SaveFlowAsync(dto);\n        //    return Ok(new { id });\n        //}\n        [HttpPost(\"save\")]\n        public async Task<IActionResult> SaveFlow([FromBody] SaveFlowDto dto)\n        {\n            Guid businessId;\n            try { businessId = User.GetBusinessId(); }\n            catch (UnauthorizedAccessException) { return Unauthorized(\"Missing or invalid business ID\"); }\n\n            var id = await _service.SaveFlowAsync(dto, businessId);\n            return Ok(new { id });\n        }\n\n        [HttpGet(\"business/{businessId}\")]\n        public async Task<IActionResult> GetFlowsByBusiness(Guid businessId)\n        {\n            var flows = await _service.GetFlowsByBusinessIdAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n            var flow = await _service.GetFlowByIdAsync(id, businessId);\n            return flow == null ? NotFound() : Ok(flow);\n        }\n        [HttpGet(\"business/{businessId}/count\")]\n        public async Task<IActionResult> GetFlowCount(Guid businessId)\n        {\n            var count = await _service.GetFlowCountForBusinessAsync(businessId);\n            return Ok(count);\n        }\n        [HttpPut(\"{id}/rename\")]\n        public async Task<IActionResult> RenameFlow(Guid id, [FromBody] RenameFlowDto dto)\n        {\n            var result = await _service.RenameFlowAsync(id, dto.NewName);\n            if (!result) return NotFound();\n            return Ok();\n        }\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ✅ Clean and secure\n            }\n            catch (UnauthorizedAccessException)\n            {\n                return Unauthorized(\"Missing or invalid business ID\");\n            }\n\n            var success = await _service.DeleteFlowAsync(id, businessId);\n            if (!success)\n                return NotFound(\"Flow not found or not owned by your business\");\n\n            return Ok(new { message = \"Flow deleted successfully\" });\n        }\n\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/AutoReplyRuntimeController.cs",
          "sha256": "a8f103874213b2129c6d59932b03582a9f21206d073f756ca97bfe08e0015e85",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/auto-reply-runtime\")]\n    [Authorize]\n    public class AutoReplyRuntimeController : ControllerBase\n    {\n        private readonly IAutoReplyRuntimeService _runtimeService;\n        private readonly ILogger<AutoReplyRuntimeController> _logger;\n\n        public AutoReplyRuntimeController(\n            IAutoReplyRuntimeService runtimeService,\n            ILogger<AutoReplyRuntimeController> logger)\n        {\n            _runtimeService = runtimeService;\n            _logger = logger;\n        }\n\n        // 🔁 Runtime button reply based on keyword (used in message click)\n        [HttpPost(\"button-click\")]\n        public async Task<IActionResult> HandleButtonClick([FromBody] AutoReplyButtonClickDto dto)\n        {\n            var businessId = ClaimsBusinessDetails.GetBusinessId(User);\n\n            _logger.LogInformation(\"🔘 Button clicked: BusinessId={BusinessId}, Phone={Phone}, Button={ButtonText}, RefMsg={RefMessageId}\",\n                businessId, dto.Phone, dto.ButtonText, dto.RefMessageId?.ToString() ?? \"null\");\n\n            await _runtimeService.TryRunAutoReplyFlowByButtonAsync(\n                businessId,\n                dto.Phone,\n                dto.ButtonText,\n                dto.RefMessageId\n            );\n\n            return Ok(new { success = true });\n        }\n\n        // 🧪 Manual test (canvas-based flow trigger)\n        [HttpPost(\"flow-by-button\")]\n        public async Task<IActionResult> TriggerFlowByButton([FromBody] AutoReplyButtonClickDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.Phone) || string.IsNullOrWhiteSpace(dto.ButtonText))\n                return BadRequest(\"Phone and ButtonText are required.\");\n\n            try\n            {\n                _logger.LogInformation(\"🚀 Triggering flow from button: FlowId={FlowId}, BusinessId={BusinessId}, ContactId={ContactId}, Phone={Phone}, ButtonText={ButtonText}\",\n                    dto.FlowId, dto.BusinessId, dto.ContactId, dto.Phone, dto.ButtonText);\n\n                await _runtimeService.RunFlowFromButtonAsync(\n                    dto.FlowId,\n                    dto.BusinessId,\n                    dto.ContactId,\n                    dto.Phone,\n                    dto.ButtonText.Trim()\n                );\n\n                return Ok(new\n                {\n                    success = true,\n                    flowId = dto.FlowId,\n                    contactId = dto.ContactId,\n                    triggeredAt = DateTime.UtcNow\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to trigger flow from button click: FlowId={FlowId}, Phone={Phone}, Button={ButtonText}\",\n                    dto.FlowId, dto.Phone, dto.ButtonText);\n\n                return StatusCode(500, \"Internal server error\");\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Controllers/TemplatesController.cs",
          "sha256": "555d0e0c3deaa65e82290ddcf55e06bb4fa67bbcf43e5b9d56ea5109f7c236b8",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateMessages.DTOs;\n\nnamespace xbytechat.api.Features.TemplateMessages.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class TemplatesController : ControllerBase\n    {\n        private static readonly List<TemplateDto> MockTemplates = new()\n        {\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Welcome Template\",\n                Placeholders = 2\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Offer Reminder\",\n                Placeholders = 1\n            },\n            new TemplateDto\n            {\n                Id = Guid.NewGuid(),\n                Name = \"Follow Up\",\n                Placeholders = 3\n            }\n        };\n\n        [HttpGet]\n        public ActionResult<List<TemplateDto>> GetAll()\n        {\n            return Ok(MockTemplates);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyButtonClickDto.cs",
          "sha256": "c33e345f9a02ff4d627ba42ba92505f5819a034035b07bde678784a244b9d6ac",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyButtonClickDto\n    {\n        public Guid FlowId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string Phone { get; set; } = string.Empty;\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? RefMessageId { get; set; }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyLogDto.cs",
          "sha256": "4674e27873c9ca6a52ab8c85ac1fb97864c6a1e653138b78096a19b3b230124e",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class AutoReplyLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerType { get; set; } = \"rule\"; // or \"flow\"\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyContent { get; set; } = string.Empty;\n\n        public DateTime TriggeredAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        public Guid? MessageLogId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/AutoReplyRuleDto.cs",
          "sha256": "47945e41d0ce9fc41bf7949aea8b58a0caf3bb5083fae0bc6d4815ea846d23ab",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    /// <summary>\n    /// DTO used to create or retrieve AutoReplyRule.\n    /// </summary>\n    public class AutoReplyRuleDto\n    {\n        public Guid? Id { get; set; } // Nullable to allow re-use for Create and Update\n        public string TriggerKeyword { get; set; } = string.Empty;\n        public string ReplyMessage { get; set; } = string.Empty;\n        public string? MediaUrl { get; set; } // Optional media\n        public int Priority { get; set; } = 0; // Lower = higher priority\n        public bool IsActive { get; set; } = true;\n\n        // Audit Fields (optional for now, useful for admin UI)\n        public DateTime? CreatedAt { get; set; }\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ButtonChoiceNodeConfig.cs",
          "sha256": "a573ed18c3b3cce438f3f126b958408f9c6245ac01be98c3db1d0c4a92adbb18",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ButtonChoiceNodeConfig\n    {\n        public string PromptText { get; set; } = \"Please choose an option:\";\n\n        public List<ButtonOption> Options { get; set; } = new();\n    }\n\n    public class ButtonOption\n    {\n        public string Label { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n\n        // Optional metadata to control button behavior\n        public string? NextStepHint { get; set; } // Can guide user or be used for logging\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ConditionNodeConfig.cs",
          "sha256": "836736c40f25f700d3a84836ee147930568713f5f623bcdc1569b42ff5b4432e",
          "language": "csharp",
          "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ConditionNodeConfig\n    {\n    \n        public string InputKey { get; set; } = \"buttonText\";\n\n        public Dictionary<string, string> PathMap { get; set; } = new();\n       \n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/DecisionNodeConfig.cs",
          "sha256": "5575668b5865a5bb2847165208e60278c44386e8f710abb968606e22bb52fe70",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class DecisionNodeConfig\n    {\n        public string ConditionType { get; set; } = \"keyword\"; // or \"tag\", \"time\", \"plan\", etc.\n        public string Parameter { get; set; } = string.Empty;   // e.g. \"yes\", \"vip\", \"evening\"\n        public string SourceChannel { get; set; } = \"whatsapp\"; // Optional for multi-channel control\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormInputNodeConfig.cs",
          "sha256": "34b1ef9a54bc19dbb2163a80371edaf8d5bf75420e9924e90e82762fa4831216",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormInputNodeConfig\n    {\n        public string QuestionText { get; set; } = \"Please enter your response:\";\n\n        public string FieldKey { get; set; } = \"customer_name\";\n        // Used for storing user response under a label\n\n        public string? ValidationRegex { get; set; }\n        // Optional, e.g., @\"^[0-9]{10}$\" for phone numbers\n\n        public string? PlaceholderHint { get; set; }\n        // e.g., \"Full Name\", \"10-digit Phone\"\n\n        public bool IsRequired { get; set; } = true;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/FormNodeConfig.cs",
          "sha256": "f839475742eb0fc23ab0c6e58e1f23a0583e4b649301ac588feb0808dd1c243d",
          "language": "csharp",
          "content": "using System.Collections.Generic;\nnamespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class FormNodeConfig\n    {\n        public string Title { get; set; } = \"Please fill out this form\";\n\n        public List<FormFieldConfig> Fields { get; set; } = new();\n\n        public bool SaveToContact { get; set; } = true; // Whether to update contact info\n\n        public string? SubmitMessage { get; set; } = \"Thanks for submitting!\";\n    }\n\n    public class FormFieldConfig\n    {\n        public string Key { get; set; } = string.Empty;      // contactName, email, phone\n        public string Label { get; set; } = string.Empty;    // \"Your Name\"\n        public string Type { get; set; } = \"text\";           // text, number, email, etc.\n        public bool Required { get; set; } = true;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/ForwardToAgentNodeConfig.cs",
          "sha256": "486eab52256f3ee2bfea5f06ada3bf8fade4f055f1012e4a1291ac0e61c9f35c",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class ForwardToAgentNodeConfig\n    {\n        public string? NoteToAgent { get; set; } // Optional instruction for agent\n        public bool MarkAsUrgent { get; set; } = false;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeIconMap.cs",
          "sha256": "e56ce9b9bdedf03682aaa6c56815fb85dd510ecd2ec1e4c82f53c0fa5c8f9401",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeIconMap\n    {\n        public static readonly Dictionary<string, string> IconMap = new()\n        {\n            { NodeTypeEnum.Message, \"🗨️\" },\n            { NodeTypeEnum.Template, \"📄\" },\n            { NodeTypeEnum.Tag, \"🏷️\" },\n            { NodeTypeEnum.Wait, \"⏱️\" },\n            { NodeTypeEnum.ButtonChoice, \"🔘\" },\n            { NodeTypeEnum.Branch, \"🌿\" },\n            { NodeTypeEnum.AgentHandoff, \"👨‍💼\" },\n            { NodeTypeEnum.End, \"⛔\" }\n        };\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/FlowNodeConfigs/NodeTypeEnum.cs",
          "sha256": "d21739b3b7651f2a026a4e412de76d45fe215ae50907b0c7ee025bee0c1ed189",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs.FlowNodeConfigs\n{\n    public class NodeTypeEnum\n    {\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Tag = \"tag\";\n        public const string Wait = \"wait\";\n        public const string ButtonChoice = \"button_choice\";\n        public const string Branch = \"branch\";\n        public const string End = \"end\"; // Optional: Used for flow exit\n        public const string AgentHandoff = \"agent_handoff\"; // Optional: Transfer to human\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/RenameFlowDto.cs",
          "sha256": "c2ad4577f121df77190a9463e0eb6528c20054bd0901e7bc9a355aedfb53031c",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.DTOs\n{\n    public class RenameFlowDto\n    {\n        public string NewName { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/SaveFlowDto.cs",
          "sha256": "b4b9d49533bad3114236c255a28ecc08bc82a01f1141b981146f320c76cc39f4",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n{\n    public class SaveFlowDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; }\n        public string? TriggerKeyword { get; set; }\n        public List<NodeDto> Nodes { get; set; } = new();\n        public List<EdgeDto> Edges { get; set; } = new();\n        public DateTime CreatedAt { get; set; }\n\n        public string? IndustryTag { get; set; }     // e.g. \"restaurant\", \"clinic\", etc.\n        public string? UseCase { get; set; }         // e.g. \"Order Flow\", \"Appointment Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag for prebuilt templates\n\n    }\n\n    public class NodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public AutoPositionDto Position { get; set; } = new();\n        public NodeDataDto Data { get; set; } = new();\n    }\n\n    public class AutoPositionDto\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n    public class NodeDataDto\n    {\n        public string Label { get; set; } = string.Empty;\n        public object Config { get; set; } = new { };\n    }\n\n    public class EdgeDto\n    {\n        public string Id { get; set; } = string.Empty;\n        public string Source { get; set; } = string.Empty;\n        public string Target { get; set; } = string.Empty;\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n        public string SourceHandle { get; set; } = string.Empty;\n        public string TargetHandle { get; set; } = string.Empty;\n    }\n}\n\n\n//using System;\n\n//namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs\n//{\n//    public class SaveFlowDto\n//    {\n//        public Guid Id { get; set; }\n//        public Guid BusinessId { get; set; }\n//        public string Name { get; set; } = string.Empty;\n//        public List<Dictionary<string, object>> Nodes { get; set; }\n\n//        public List<Dictionary<string, object>> Edges { get; set; }\n//        public DateTime CreatedAt { get; set; }\n//        public string? TriggerKeyword { get; set; }\n\n//    }\n//}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/DTOs/TemplateDto.cs",
          "sha256": "42ae32842447bb89f8178a8bae3c490d1fe646b526c27cbe72571e23536f7116",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.TemplateMessages.DTOs\n{\n    public class TemplateDto\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public int Placeholders { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/AutoReplyEdgeDto.cs",
          "sha256": "5cbac1daff177794f7ae69aabf6b323f279f0b7132dc060e462a91226849f868",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class AutoReplyEdgeDto\n    {\n        public string Id { get; set; }\n        public string SourceNodeId { get; set; }\n        public string TargetNodeId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/MessageConfig.cs",
          "sha256": "6e7673134b9b3fabb432529dd4b510007ff1d934f016b3a2d831a4503d01c2c7",
          "language": "csharp",
          "content": "// MessageConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class MessageConfig\n    {\n        public string Text { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/RuntimeConfigs.cs",
          "sha256": "280793d810ae7ce0f016f2671b3627cd52a4029b6ea574d0fee20e0c0e11e5ae",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class RuntimeConfigs\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TagNodeConfig.cs",
          "sha256": "d9fade9fca5845b7cb33279a01288a4dd94a90aaaed58d384a778209656b5ead",
          "language": "csharp",
          "content": "// TagConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TagNodeConfig\n    {\n        public List<string> Tags { get; set; } = new();\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/TemplateConfig.cs",
          "sha256": "5c7ea8f78b131705f6bccf1ced0e21a754dadf67bbd6420696995f565c07767a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class TemplateConfig\n    {\n        public string TemplateName { get; set; } = string.Empty;\n        public List<string> Placeholders { get; set; } = new();\n        public string? Language { get; set; } = \"en_US\";\n        public string? ImageUrl { get; set; }\n        public List<TemplateButtonDto>? MultiButtons { get; set; } = new();\n    }\n\n    public class TemplateButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"url\"; // or \"quick_reply\"\n        public string TargetUrl { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/DTOs/FlowNodeConfigs/WaitConfig.cs",
          "sha256": "afe336952d0d4959422bbbc499884b286291888fcbd64dd068f26013160261c6",
          "language": "csharp",
          "content": "// WaitConfig.cs\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs\n{\n    public class WaitConfig\n    {\n        public int Seconds { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Flows/Enum/NodeTypes.cs",
          "sha256": "94b210bd5bbbbce823c3a1beb8172eddf708305bfbb8b897d1e3c7ef10097b36",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Flows.Enum\n{\n    public class NodeTypes\n    {\n        public const string Start = \"start\";\n        public const string Message = \"message\";\n        public const string Template = \"template\";\n        public const string Wait = \"wait\";\n        public const string Tag = \"tag\";\n        public const string Agent = \"agent\";\n        public const string Condition = \"condition\"; // Coming soon\n        public const string Form = \"form\";           // For “Ask Name”, “Ask Email”\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlow.cs",
          "sha256": "2825905f983da1290a44badeda57c8ff26c8920d7fa13e7ebd85dd0da2e0aaca",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Models\n{\n    public class AutoReplyFlow\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public string Name { get; set; } = string.Empty;\n\n        [Required]\n        public string NodesJson { get; set; } = string.Empty;\n\n        [Required]\n        public string EdgesJson { get; set; } = string.Empty;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? TriggerKeyword { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public string? IndustryTag { get; set; }    // e.g., \"restaurant\", \"clinic\", \"education\"\n        public string? UseCase { get; set; }        // e.g., \"Order Flow\", \"Booking Flow\"\n        public bool IsDefaultTemplate { get; set; } = false; // Flag to indicate system-provided template\n        public string? Keyword { get; set; }\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowEdge.cs",
          "sha256": "7996bdb8fa1917943e90dad9ad4225984a34b6342eb153028849b30ca63abd7f",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowEdge\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        public string SourceNodeId { get; set; } = string.Empty;\n        public string TargetNodeId { get; set; } = string.Empty;\n    \n        public string? SourceHandle { get; set; }\n        public string? TargetHandle { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyFlowNode.cs",
          "sha256": "88a50d45fe3b72f6c3bc0593104b7ee549180c842628cb3d9048c5227a025871",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyFlowNode\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow Flow { get; set; }\n\n        // 🔄 Use a constrained string or enum (recommended for future)\n        [Required]\n        public string NodeType { get; set; } = string.Empty;\n\n        public string Label { get; set; } = string.Empty;\n\n        public string? NodeName { get; set; } // 🆕 Optional internal label for debugging\n\n        [Required]\n        public string ConfigJson { get; set; } = string.Empty;\n\n        public Position Position { get; set; } = new();\n\n        public int Order { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyLog.cs",
          "sha256": "d2949264f0ac5b81395d2dee6578df20759d95d300da30d5f0f9003e0ed1c5eb",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    [Table(\"AutoReplyLogs\")]\n    public class AutoReplyLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty; // e.g., \"hi\", \"price\"\n        public string TriggerType { get; set; } = string.Empty;     // \"flow\" or \"rule\"\n\n        public string ReplyContent { get; set; } = string.Empty;    // Plaintext summary of what was sent\n        public string? FlowName { get; set; }                       // Nullable if rule-based\n\n        public Guid? MessageLogId { get; set; }                     // Optional link to MessageLog\n        public DateTime TriggeredAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/AutoReplyRule.cs",
          "sha256": "c3049863f7add2dfd09dd962dbdbc904585fa5db4e12ac189193077bfee08a78",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class AutoReplyRule\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string TriggerKeyword { get; set; } = string.Empty;\n\n        public string ReplyMessage { get; set; } = string.Empty;\n\n        public string? MediaUrl { get; set; }\n\n        public int Priority { get; set; }\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? UpdatedAt { get; set; }\n\n        public string? FlowName { get; set; }\n\n        // ✅ NEW: Link to the flow\n        public Guid? FlowId { get; set; }\n\n        [ForeignKey(\"FlowId\")]\n        public AutoReplyFlow? Flow { get; set; }\n\n        public string? IndustryTag { get; set; } // e.g., \"restaurant\", \"clinic\", \"real_estate\"\n        public string? SourceChannel { get; set; } // e.g., \"whatsapp\", \"instagram\"\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowExecutionContext.cs",
          "sha256": "0d3e6415c151099db94a6f0f6dc8f695fd31492808dc09079919950efedf0776",
          "language": "csharp",
          "content": "using xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowExecutionContext\n    {\n        public AutoReplyFlow Flow { get; set; } = null!;\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactPhone { get; set; } = null!;\n        public string SourceChannel { get; set; } = \"whatsapp\";\n        public string IndustryTag { get; set; } = \"\";\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowNode.cs",
          "sha256": "8991ad6277d58a2785f6a93fd8b8ca815af4ce80351d38f30aaf47890909471f",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class FlowNode\n    {\n        public string Id { get; set; }\n        public string Type { get; set; }\n        public Position Position { get; set; }\n        public Dictionary<string, object> Data { get; set; }  // This should capture config\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/FlowRunResult.cs",
          "sha256": "67982580319a635214c13b2ec05cc279d9afc21fdeb1224248a8060036e27f5c",
          "language": "csharp",
          "content": "// File: Features/AutoReplyBuilder/Models/FlowRunResult.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    /// <summary>\n    /// Encapsulates the result of running a visual flow, including agent handoff status.\n    /// </summary>\n    public class FlowRunResult\n    {\n        public bool NeedsAgent { get; set; } = false;\n\n\n        public Guid? HandoffNodeId { get; set; }\n\n        public string? ContextJson { get; set; }\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Models/Position.cs",
          "sha256": "0c352c43f4dfcebdc462622ca0acdcd8c1eaafa07a91a70804793d8c76724201",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Models\n{\n    public class Position\n    {\n        public double X { get; set; }\n        public double Y { get; set; }\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyFlowRepository.cs",
          "sha256": "d919b1d695c3c29ccc653b806d4884197b3d52fb9eb5f86c0f32f893eb198671",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\npublic class AutoReplyFlowRepository : IAutoReplyFlowRepository\n{\n    private readonly AppDbContext _context;\n    private readonly ILogger<AutoReplyFlowRepository> _logger;\n\n    public AutoReplyFlowRepository(AppDbContext context, ILogger<AutoReplyFlowRepository> logger)\n    {\n        _context = context;\n        _logger = logger;\n    }\n\n    public async Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow)\n    {\n        _context.AutoReplyFlows.Add(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return flow;\n    }\n\n    public async Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges)\n    {\n        _context.AutoReplyFlowNodes.AddRange(nodes);\n        _context.AutoReplyFlowEdges.AddRange(edges);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n    }\n\n    public async Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId)\n            .OrderByDescending(f => f.CreatedAt)\n            .ToListAsync();\n    }\n\n    public async Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId)\n    {\n        return await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == flowId && f.BusinessId == businessId);\n    }\n\n    public async Task<int> GetFlowCountAsync(Guid businessId)\n    {\n        return await _context.AutoReplyFlows.CountAsync(f => f.BusinessId == businessId);\n    }\n\n    public async Task<bool> RenameFlowAsync(Guid id, string newName)\n    {\n        var flow = await _context.AutoReplyFlows.FindAsync(id);\n        if (flow == null) return false;\n\n        flow.Name = newName;\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n\n    public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n    {\n        var flow = await _context.AutoReplyFlows\n            .FirstOrDefaultAsync(f => f.Id == id && f.BusinessId == businessId);\n\n        if (flow == null) return false;\n\n        _context.AutoReplyFlows.Remove(flow);\n        try\n        {\n            await _context.SaveChangesAsync();\n        }\n        catch (DbUpdateException ex)\n        {\n            _logger.LogError(ex, \"❌ Save failed: {0}\", ex.InnerException?.Message);\n            throw;\n        }\n\n        return true;\n    }\n    public async Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n    public async Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword)\n    {\n        return await _context.AutoReplyFlows\n            .Where(f => f.BusinessId == businessId && f.IsActive && f.TriggerKeyword == keyword)\n            .OrderByDescending(f => f.CreatedAt)\n            .FirstOrDefaultAsync();\n    }\n    public async Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowNodes\n            .Where(n => n.FlowId == flowId)\n            .ToListAsync();\n    }\n\n    public async Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId)\n    {\n        return await _context.AutoReplyFlowEdges\n            .Where(e => e.FlowId == flowId)\n            .ToListAsync();\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyLogRepository.cs",
          "sha256": "4a8777aecfb95fef141063dfa3475992a3848fdd582209819e66ab552d045f71",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Models;\nusing xbytechat.api.Shared;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyLogRepository : IAutoReplyLogRepository\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyLogRepository> _logger;\n\n        public AutoReplyLogRepository(AppDbContext context, ILogger<AutoReplyLogRepository> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task SaveAsync(AutoReplyLogDto dto)\n        {\n            try\n            {\n                var log = new AutoReplyLog\n                {\n                    Id = dto.Id,\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    TriggerKeyword = dto.TriggerKeyword,\n                    TriggerType = dto.TriggerType,\n                    ReplyContent = dto.ReplyContent,\n                    TriggeredAt = dto.TriggeredAt,\n                    FlowName = dto.FlowName,\n                    MessageLogId = dto.MessageLogId\n                };\n\n                _context.AutoReplyLogs.Add(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to save AutoReplyLog\");\n                throw;\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/AutoReplyRepository.cs",
          "sha256": "6339294423a06a5ebeacfa42db916a0e6fcac770f4082cb3db53569c2dd80483",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class AutoReplyRepository : IAutoReplyRepository\n    {\n        private readonly AppDbContext _dbContext;\n\n        public AutoReplyRepository(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task<AutoReplyRule> AddAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Add(rule);\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n        public async Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .ToListAsync();\n        }\n\n        public async Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId)\n        {\n            return await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.Id == ruleId && r.BusinessId == businessId);\n        }\n\n        public async Task<bool> UpdateAsync(AutoReplyRule rule)\n        {\n            _dbContext.AutoReplyRules.Update(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<bool> DeleteAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await GetByIdAsync(ruleId, businessId);\n            if (rule == null) return false;\n\n            _dbContext.AutoReplyRules.Remove(rule);\n            return await _dbContext.SaveChangesAsync() > 0;\n        }\n\n        public async Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            return await _dbContext.AutoReplyRules\n                .Where(r => r.BusinessId == businessId && r.IsActive)\n                .OrderBy(r => r.Priority)\n                .FirstOrDefaultAsync(r => incomingMessage.Contains(r.TriggerKeyword));\n        }\n\n        public async Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == keyword.ToLower());\n\n            if (rule == null) return false;\n\n            rule.FlowId = flowId;\n            rule.FlowName = flowName ?? \"\";\n            rule.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n        public async Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName)\n        {\n            // Ensure keyword is normalized\n            var normalizedKeyword = keyword.ToLower().Trim();\n\n            var rule = await _dbContext.AutoReplyRules\n                .FirstOrDefaultAsync(r => r.BusinessId == businessId && r.TriggerKeyword.ToLower() == normalizedKeyword);\n\n            if (rule != null)\n            {\n                // Update existing rule\n                rule.FlowId = flowId;\n                rule.FlowName = flowName ?? \"\";\n                rule.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // Create new rule\n                rule = new AutoReplyRule\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    TriggerKeyword = normalizedKeyword,\n                    FlowId = flowId,\n                    FlowName = flowName ?? \"\",\n                    CreatedAt = DateTime.UtcNow,\n                    IsActive = true,\n                    Priority = 1,\n                    ReplyMessage = \"\" // Fallback (optional)\n                };\n\n                _dbContext.AutoReplyRules.Add(rule);\n            }\n\n            await _dbContext.SaveChangesAsync();\n            return rule;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/FlowRepository.cs",
          "sha256": "215b4fc5005e126adf33375390d0ac254a146dbdae11aa8c98eb52aa9054551b",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class FlowRepository\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyFlowRepository.cs",
          "sha256": "f78ae431c2892c49cc0844c2f19e5df301598c964326722b3ca52aec7e9ba61d",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories\n{\n    public interface IAutoReplyFlowRepository\n    {\n        Task<AutoReplyFlow> SaveAsync(AutoReplyFlow flow);\n        Task<AutoReplyFlow?> GetByIdAsync(Guid flowId, Guid businessId);\n        Task<List<AutoReplyFlow>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<int> GetFlowCountAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task SaveNodesAndEdgesAsync(IEnumerable<AutoReplyFlowNode> nodes, IEnumerable<AutoReplyFlowEdge> edges);\n        Task<List<AutoReplyFlowNode>> GetNodesByFlowIdAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetEdgesByFlowIdAsync(Guid flowId);\n        Task<AutoReplyFlow?> FindFlowByKeywordAsync(Guid businessId, string keyword);\n        Task<List<AutoReplyFlowNode>> GetStructuredNodesAsync(Guid flowId);\n        Task<List<AutoReplyFlowEdge>> GetStructuredEdgesAsync(Guid flowId);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyLogRepository.cs",
          "sha256": "49f1ecf8c4ab7bb6a0122d7d98e22eb4cb6e2b4b522c99c3963ca64d57889264",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyLogRepository\n    {\n        Task SaveAsync(AutoReplyLogDto logDto);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IAutoReplyRepository.cs",
          "sha256": "136fdda2ad552eadc942d50774dc0ba7cf0796c507e703b6aa20f4fd64fd40d5",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public interface IAutoReplyRepository\n    {\n        Task<AutoReplyRule> AddAsync(AutoReplyRule rule);\n        Task<IEnumerable<AutoReplyRule>> GetAllByBusinessIdAsync(Guid businessId);\n        Task<AutoReplyRule?> GetByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateAsync(AutoReplyRule rule);\n        Task<bool> DeleteAsync(Guid ruleId, Guid businessId);\n\n        // Runtime keyword match logic\n        Task<AutoReplyRule?> MatchByKeywordAsync(Guid businessId, string incomingMessage);\n        Task<bool> LinkFlowToRuleAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n        Task<AutoReplyRule> UpsertRuleLinkedToFlowAsync(Guid businessId, string keyword, Guid flowId, string? flowName);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Repositories/IFlowRepository.cs",
          "sha256": "dc4b9a1195add53536172098cfd18c52a19a3a5c767ba81f25e2bceb2a483e14",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Repositories\n{\n    public class IFlowRepository\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyFlowService.cs",
          "sha256": "60a2f344bc7993fa13dd56c9514c142e4a3bb6100c4e6f48056178d09d8d71b4",
          "language": "csharp",
          "content": "using Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Numerics;\nusing System.Text.Json;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public class AutoReplyFlowService : IAutoReplyFlowService\n    {\n        private readonly IAutoReplyFlowRepository _flowRepository;\n        private readonly ILogger<AutoReplyFlowService> _logger;\n        private readonly IMessageEngineService _messageService;\n        private readonly ITagService _tagService;\n        private readonly IAutoReplyRepository _autoReplyRepository;\n        public AutoReplyFlowService(IAutoReplyFlowRepository flowrepository, ILogger<AutoReplyFlowService> logger,\n            IMessageEngineService messageService, ITagService tagService, IAutoReplyRepository autoReplyRepository)\n        {\n            _flowRepository = flowrepository;\n            _logger = logger;\n            _messageService = messageService;\n            _tagService = tagService;\n            _autoReplyRepository = autoReplyRepository;\n        }\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name,\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"✅ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ✅ Save parsed nodes\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n        //    var nodes = dto.Nodes as List<Dictionary<string, object>>;\n\n        //    if (nodes != null)\n        //    {\n        //        foreach (var nodeDict in nodes)\n        //        {\n        //            if (!nodeDict.ContainsKey(\"type\") || !nodeDict.ContainsKey(\"data\") || !nodeDict.ContainsKey(\"position\"))\n        //            {\n        //                _logger.LogWarning(\"⚠️ Skipped malformed node during flow save: {Node}\", JsonConvert.SerializeObject(nodeDict));\n        //                continue;\n        //            }\n\n        //            var data = nodeDict[\"data\"] as Dictionary<string, object>;\n        //            var positionDict = nodeDict[\"position\"] as Dictionary<string, object>;\n\n        //            var position = new Position\n        //            {\n        //                X = Convert.ToDouble(positionDict?[\"x\"] ?? 0),\n        //                Y = Convert.ToDouble(positionDict?[\"y\"] ?? 0)\n        //            };\n\n        //            parsedNodes.Add(new AutoReplyFlowNode\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                NodeType = nodeDict[\"type\"]?.ToString() ?? \"\",\n        //                Label = data?[\"label\"]?.ToString() ?? \"\",\n        //                ConfigJson = JsonConvert.SerializeObject(data?[\"config\"] ?? new { }),\n        //                Position = position // ✅ strongly typed\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"🧩 Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ✅ Save parsed edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n        //    var edges = dto.Edges as List<Dictionary<string, object>>;\n\n        //    if (edges != null)\n        //    {\n        //        foreach (var edgeDict in edges)\n        //        {\n        //            if (!edgeDict.ContainsKey(\"source\") || !edgeDict.ContainsKey(\"target\"))\n        //            {\n        //                _logger.LogWarning(\"⚠️ Skipped malformed edge during flow save: {Edge}\", JsonConvert.SerializeObject(edgeDict));\n        //                continue;\n        //            }\n\n        //            parsedEdges.Add(new AutoReplyFlowEdge\n        //            {\n        //                Id = Guid.NewGuid(),\n        //                FlowId = saved.Id,\n        //                SourceNodeId = edgeDict[\"source\"]?.ToString() ?? \"\",\n        //                TargetNodeId = edgeDict[\"target\"]?.ToString() ?? \"\",\n        //                CreatedAt = DateTime.UtcNow\n        //            });\n        //        }\n        //    }\n\n        //    _logger.LogInformation(\"🔗 Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n\n        //    _logger.LogInformation(\"✅ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto.BusinessId, dto.TriggerKeyword);\n\n        //    // ✅ Step 1: Save main flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var saved = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"✅ Flow saved: {FlowId}\", saved.Id);\n\n        //    // ✅ Step 2: Build ID map and parse nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id))\n        //        {\n        //            _logger.LogWarning(\"⚠️ Skipped node with missing Id\");\n        //            continue;\n        //        }\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = saved.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = JsonConvert.SerializeObject(n.Data?.Config ?? new { }),\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🧩 Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ✅ Step 3: Map Source/TargetNodeId from external → internal GUIDs\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId))\n        //        {\n        //            _logger.LogWarning(\"⚠️ Edge skipped: SourceNodeId '{Source}' not found\", e.SourceNodeId);\n        //            continue;\n        //        }\n\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId))\n        //        {\n        //            _logger.LogWarning(\"⚠️ Edge skipped: TargetNodeId '{Target}' not found\", e.TargetNodeId);\n        //            continue;\n        //        }\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = saved.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🔗 Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ✅ Final Save\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"✅ Node + edge persistence complete for flow {FlowId}\", saved.Id);\n\n        //    return saved.Id;\n        //}\n        //public async Task<Guid> SaveFlowAsync(SaveFlowDto dto)\n        //{\n        //    _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", dto?.BusinessId, dto?.TriggerKeyword);\n\n        //    if (dto == null) throw new ArgumentNullException(nameof(dto));\n        //    if (dto.BusinessId == Guid.Empty) throw new ArgumentException(\"BusinessId is required.\");\n        //    if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n        //    if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n        //    dto.Edges ??= new List<EdgeDto>();\n\n        //    // ✅ Step 1: Save Flow\n        //    var flow = new AutoReplyFlow\n        //    {\n        //        Id = Guid.NewGuid(),\n        //        BusinessId = dto.BusinessId,\n        //        Name = dto.Name?.Trim() ?? \"\",\n        //        NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n        //        EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n        //        TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n        //        IsActive = true,\n        //        CreatedAt = DateTime.UtcNow\n        //    };\n\n        //    var savedFlow = await _flowRepository.SaveAsync(flow);\n        //    _logger.LogInformation(\"✅ Flow saved: {FlowId}\", savedFlow.Id);\n\n        //    // ✅ Step 2: Parse Nodes\n        //    var nodeIdMap = new Dictionary<string, Guid>();\n        //    var parsedNodes = new List<AutoReplyFlowNode>();\n\n        //    foreach (var n in dto.Nodes)\n        //    {\n        //        if (string.IsNullOrWhiteSpace(n.Id)) continue;\n\n        //        var internalNodeId = Guid.NewGuid();\n        //        nodeIdMap[n.Id] = internalNodeId;\n\n        //        string configJson = n.Data?.Config is JsonElement elem\n        //            ? elem.GetRawText()\n        //            : JsonConvert.SerializeObject(n.Data?.Config ?? new { });\n\n        //        parsedNodes.Add(new AutoReplyFlowNode\n        //        {\n        //            Id = internalNodeId,\n        //            FlowId = savedFlow.Id,\n        //            NodeType = n.Type,\n        //            Label = n.Data?.Label ?? \"\",\n        //            ConfigJson = configJson,\n        //            Position = new Position\n        //            {\n        //                X = n.Position?.X ?? 0,\n        //                Y = n.Position?.Y ?? 0\n        //            },\n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🧩 Parsed {NodeCount} nodes\", parsedNodes.Count);\n\n        //    // ✅ Step 3: Parse Edges\n        //    var parsedEdges = new List<AutoReplyFlowEdge>();\n\n        //    foreach (var e in dto.Edges)\n        //    {\n        //        if (!nodeIdMap.TryGetValue(e.SourceNodeId ?? \"\", out var sourceId)) continue;\n        //        if (!nodeIdMap.TryGetValue(e.TargetNodeId ?? \"\", out var targetId)) continue;\n\n        //        parsedEdges.Add(new AutoReplyFlowEdge\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            FlowId = savedFlow.Id,\n        //            SourceNodeId = sourceId.ToString(),\n        //            TargetNodeId = targetId.ToString(),\n        //            SourceHandle = e.SourceHandle, \n        //            TargetHandle = e.TargetHandle, \n        //            CreatedAt = DateTime.UtcNow\n        //        });\n        //    }\n\n        //    _logger.LogInformation(\"🔗 Parsed {EdgeCount} edges\", parsedEdges.Count);\n\n        //    // ✅ Step 4: Save Nodes + Edges\n        //    await _flowRepository.SaveNodesAndEdgesAsync(parsedNodes, parsedEdges);\n        //    _logger.LogInformation(\"✅ Node + edge persistence complete for flow {FlowId}\", savedFlow.Id);\n\n        //    // ✅ Step 5: Link to Rule via Repository\n        //    var keyword = dto.TriggerKeyword.Trim().ToLower();\n        //    var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(dto.BusinessId, keyword, savedFlow.Id, dto.Name);\n\n        //    _logger.LogInformation(\"🔁 Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n        //    return savedFlow.Id;\n        //}\n        public async Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId)\n        {\n            _logger.LogInformation(\"🔄 Starting flow save for business {BusinessId} with keyword '{Keyword}'\", businessId, dto?.TriggerKeyword);\n\n            if (dto == null) throw new ArgumentNullException(nameof(dto));\n            if (string.IsNullOrWhiteSpace(dto.TriggerKeyword)) throw new ArgumentException(\"TriggerKeyword is required.\");\n            if (dto.Nodes == null || !dto.Nodes.Any()) throw new ArgumentException(\"At least one node is required.\");\n\n            dto.Edges ??= new List<EdgeDto>();\n\n            // ✅ Step 1: Save Flow\n            var flow = new AutoReplyFlow\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId, // << Use parameter, not from dto!\n                Name = dto.Name?.Trim() ?? \"\",\n                NodesJson = JsonConvert.SerializeObject(dto.Nodes),\n                EdgesJson = JsonConvert.SerializeObject(dto.Edges),\n                TriggerKeyword = dto.TriggerKeyword?.Trim().ToLower(),\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var savedFlow = await _flowRepository.SaveAsync(flow);\n            _logger.LogInformation(\"✅ Flow saved: {FlowId}\", savedFlow.Id);\n\n            // ... rest of code unchanged ...\n\n            // ✅ Step 5: Link to Rule via Repository\n            var keyword = dto.TriggerKeyword.Trim().ToLower();\n            var rule = await _autoReplyRepository.UpsertRuleLinkedToFlowAsync(\n                businessId, // << Use parameter, not from dto!\n                keyword, savedFlow.Id, dto.Name);\n\n            _logger.LogInformation(\"🔁 Linked flow to auto-reply rule: {RuleId}\", rule.Id);\n\n            return savedFlow.Id;\n        }\n\n        public async Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId)\n        {\n            _logger.LogInformation(\"📥 Fetching auto-reply flows for business {BusinessId}\", businessId);\n\n            var flows = await _flowRepository.GetAllByBusinessIdAsync(businessId);\n\n            var results = flows.Select(f => new SaveFlowDto\n            {\n                Id = f.Id,\n                BusinessId = f.BusinessId,\n                Name = f.Name,\n                Nodes = string.IsNullOrEmpty(f.NodesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<NodeDto>>(f.NodesJson),\n\n                Edges = string.IsNullOrEmpty(f.EdgesJson)\n                    ? new()\n                    : JsonConvert.DeserializeObject<List<EdgeDto>>(f.EdgesJson),\n\n\n                CreatedAt = f.CreatedAt\n            }).ToList();\n\n            _logger.LogInformation(\"📤 Returned {Count} auto-reply flows for business {BusinessId}\", results.Count, businessId);\n\n            return results;\n        }\n\n        public async Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId)\n        {\n            var flow = await _flowRepository.GetByIdAsync(flowId, businessId);\n            if (flow == null)\n            {\n                _logger.LogWarning(\"❌ No flow found for FlowId {FlowId} and BusinessId {BusinessId}\", flowId, businessId);\n                return null;\n            }\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flowId);\n\n            var mappedNodes = nodes.Select(n => new Dictionary<string, object>\n            {\n                [\"id\"] = n.Id,\n                [\"type\"] = n.NodeType,\n                [\"position\"] = new Dictionary<string, object>\n                {\n                    [\"x\"] = n.Position?.X ?? 0,\n                    [\"y\"] = n.Position?.Y ?? 0\n                },\n                [\"data\"] = new Dictionary<string, object>\n                {\n                    [\"label\"] = n.Label,\n                    [\"config\"] = string.IsNullOrEmpty(n.ConfigJson)\n                        ? null\n                        : JsonConvert.DeserializeObject<object>(n.ConfigJson)\n                }\n            }).ToList();\n\n            var mappedEdges = edges.Select(e => new Dictionary<string, object>\n            {\n                [\"id\"] = e.Id,\n                [\"source\"] = e.SourceNodeId,\n                [\"target\"] = e.TargetNodeId\n            }).ToList();\n\n            _logger.LogInformation(\"📤 Returning flow {FlowId} with {NodeCount} nodes and {EdgeCount} edges\", flow.Id, mappedNodes.Count, mappedEdges.Count);\n\n            return new SaveFlowDto\n            {\n                Id = flow.Id,\n                BusinessId = flow.BusinessId,\n                Name = flow.Name,\n                Nodes = JsonConvert.DeserializeObject<List<NodeDto>>(JsonConvert.SerializeObject(mappedNodes)),\n                Edges = JsonConvert.DeserializeObject<List<EdgeDto>>(JsonConvert.SerializeObject(mappedEdges)),\n                CreatedAt = flow.CreatedAt\n            };\n\n        }\n\n        public async Task<int> GetFlowCountForBusinessAsync(Guid businessId)\n        {\n            return await _flowRepository.GetFlowCountAsync(businessId);\n        }\n\n        public async Task<bool> RenameFlowAsync(Guid id, string newName)\n        {\n            return await _flowRepository.RenameFlowAsync(id, newName);\n        }\n        public async Task<bool> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            return await _flowRepository.DeleteFlowAsync(id, businessId);\n        }\n        public async Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhone)\n        {\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, triggerKeyword);\n            if (flow == null) return;\n\n            var nodes = await _flowRepository.GetNodesByFlowIdAsync(flow.Id);\n            var edges = await _flowRepository.GetEdgesByFlowIdAsync(flow.Id);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id, n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            var current = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            while (current != null)\n            {\n                switch (current.NodeType)\n                {\n                    case \"message\":\n                        var msgCfg = JsonConvert.DeserializeObject<MessageConfig>(current.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = customerPhone,\n                            TextContent = msgCfg.Text\n                        });\n\n                        break;\n                    case \"template\":\n                        var tempCfg = JsonConvert.DeserializeObject<TemplateConfig>(current.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = customerPhone,\n                            TemplateName = tempCfg.TemplateName,\n                            TemplateParameters = tempCfg.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(current.ConfigJson);\n                        await Task.Delay(TimeSpan.FromSeconds(waitCfg.Seconds));\n                        break;\n\n                    case \"tag\":\n                        var tagCfg = JsonConvert.DeserializeObject<TagNodeConfig>(current.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId, customerPhone, tagCfg.Tags);\n                        break;\n                }\n\n                var nextEdge = edgeMap.ContainsKey(current.Id.ToString())\n                     ? edgeMap[current.Id.ToString()].FirstOrDefault()\n                        : null;\n\n                if (nextEdge == null) break;\n\n                current = nodeMap.ContainsKey(Guid.Parse(nextEdge.TargetNodeId))\n                    ? nodeMap[Guid.Parse(nextEdge.TargetNodeId)]\n                    : null;\n\n            }\n        }\n        public async Task TriggerAutoReplyAsync(Guid businessId, string incomingText, string phone)\n        {\n            // Step 1: Find flow matching keyword\n            var flow = await _flowRepository.FindFlowByKeywordAsync(businessId, incomingText.ToLower());\n            if (flow == null) return;\n\n            // Step 2: Load flow nodes + edges\n            var nodes = await _flowRepository.GetStructuredNodesAsync(flow.Id);\n            var edges = await _flowRepository.GetStructuredEdgesAsync(flow.Id);\n\n            // Step 3: Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null) return;\n\n            var visited = new HashSet<string>();\n            var currentNodeId = startNode.Id.ToString();\n\n            while (!string.IsNullOrEmpty(currentNodeId) && !visited.Contains(currentNodeId))\n            {\n                visited.Add(currentNodeId);\n\n                var currentNode = nodes.FirstOrDefault(n => n.Id.ToString() == currentNodeId);\n                if (currentNode == null) break;\n\n                // Step 4: Handle current node\n                switch (currentNode.NodeType)\n                {\n                    case \"message\":\n                        var config = JsonConvert.DeserializeObject<MessageConfig>(currentNode.ConfigJson);\n                        await _messageService.SendTextDirectAsync(new TextMessageSendDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = phone,\n                            TextContent = config.Text\n                        });\n                        break;\n\n                    case \"template\":\n                        var tpl = JsonConvert.DeserializeObject<TemplateConfig>(currentNode.ConfigJson);\n\n                        var dto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = phone,\n                            TemplateName = tpl.TemplateName,\n                            TemplateParameters = tpl.Placeholders ?? new List<string>()\n                        };\n\n                        await _messageService.SendTemplateMessageSimpleAsync(businessId, dto);\n                        break;\n\n\n                    case \"wait\":\n                        var waitConfig = JsonConvert.DeserializeObject<WaitConfig>(currentNode.ConfigJson);\n                        await Task.Delay(waitConfig.Seconds * 1000); // Can replace with async scheduling later\n                        break;\n\n                    case \"tag\":\n                        var tagConfig = JsonConvert.DeserializeObject<TagNodeConfig>(currentNode.ConfigJson);\n                        await _tagService.AssignTagsAsync(businessId,phone, tagConfig.Tags);\n                        break;\n\n                }\n\n                // Step 5: Find next node\n                var nextEdge = edges.FirstOrDefault(e => e.SourceNodeId == currentNodeId);\n                currentNodeId = nextEdge?.TargetNodeId;\n            }\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyRuntimeService.cs",
          "sha256": "f9e35069e50bbf3a57f0c5134ae99c32f604d94885000c29aacb8ddab0d00d94",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs.FlowNodeConfigs;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Services;\nusing xbytechat.api;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.CRM.Interfaces;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyRuntimeService : IAutoReplyRuntimeService\n    {\n        private readonly IAutoReplyRepository _autoReplyRepo;\n        private readonly IAutoReplyFlowRepository _flowRepo;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly AppDbContext _context;\n        private readonly ILogger<AutoReplyRuntimeService> _logger;\n        private readonly IContactService _contactService;\n        private readonly ITagService _tagService;\n        private readonly ITemplateMessageSender _templateSender;\n        public AutoReplyRuntimeService(\n            IAutoReplyRepository autoReplyRepo,\n            IAutoReplyFlowRepository flowRepo,\n            IMessageEngineService messageEngine,\n            AppDbContext context,\n            ILogger<AutoReplyRuntimeService> logger, IContactService contactService, ITagService tagService, ITemplateMessageSender templateSender)\n        {\n            _autoReplyRepo = autoReplyRepo;\n            _flowRepo = flowRepo;\n            _messageEngine = messageEngine;\n            _context = context;\n            _logger = logger;\n            _contactService = contactService;\n            _tagService = tagService;\n            _templateSender = templateSender;\n        }\n\n        public async Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string keyword, Guid contactId, string phone)\n        {\n            _logger.LogInformation(\"🔍 Auto-reply trigger: '{Keyword}' from {Phone}\", keyword, phone);\n\n            try\n            {\n                // 1️⃣ Try matching a flow by keyword\n                var flow = await _flowRepo.FindFlowByKeywordAsync(businessId, keyword);\n                if (flow != null)\n                {\n                    _logger.LogInformation(\"✅ Flow matched: {FlowName}\", flow.Name);\n                    await RunFlowAsync(flow.Id, businessId, contactId, phone, keyword, flow.Name);\n                    return true;\n                }\n\n                // 2️⃣ Fallback: Try matching auto-reply rule\n                var rule = await _autoReplyRepo.MatchByKeywordAsync(businessId, keyword);\n                if (rule != null)\n                {\n                    _logger.LogInformation(\"🔁 Fallback auto-reply triggered: {Rule}\", rule.TriggerKeyword);\n\n                    var messageDto = new TextMessageSendDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = phone,\n                        TextContent = rule.ReplyMessage\n                    };\n\n                    var result = await _messageEngine.SendTextDirectAsync(messageDto);\n\n                    await LogAutoReplyAsync(\n                        businessId,\n                        contactId,\n                        keyword,\n                        \"fallback\",\n                        rule.ReplyMessage,\n                        null,\n                        result?.LogId\n                    );\n\n                    return true;\n                }\n\n                _logger.LogWarning(\"❌ No flow or fallback rule matched for: {Keyword}\", keyword);\n                return false;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Error in TryRunAutoReplyFlowAsync\");\n                return false;\n            }\n        }\n\n        public async Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeDict = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeLookup = edges.GroupBy(e => e.SourceNodeId)\n                                  .ToDictionary(g => g.Key, g => g.ToList());\n\n            var currentNodeId = nodes.FirstOrDefault(n => n.NodeType == \"start\")?.Id.ToString();\n            if (string.IsNullOrEmpty(currentNodeId)) return;\n\n            // ✅ Ensure contact exists\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n\n            while (!string.IsNullOrEmpty(currentNodeId))\n            {\n                if (!nodeDict.TryGetValue(currentNodeId, out var node)) break;\n\n                _logger.LogInformation(\"⚙️ Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"start\":\n                            _logger.LogInformation(\"🚦 Start node reached: {NodeId}\", node.Id);\n\n                            // 🛑 If Start node contains buttons, STOP and wait for user interaction\n                            try\n                            {\n                                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(node.ConfigJson ?? \"{}\");\n                                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                                {\n                                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                                    if (buttons.Count > 0)\n                                    {\n                                        _logger.LogInformation(\"🛑 Start node has buttons – waiting for user interaction. Halting flow.\");\n                                        return;\n                                    }\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse start node config for button detection.\");\n                            }\n                            break;\n\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, keyword, flowName);\n\n                          \n                                try\n                                {\n                                    var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                    if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                    {\n                                        _logger.LogInformation(\"🛑 Template node has buttons – halting flow for user click.\");\n                                        return;\n                                    }\n                                }\n\n                            \n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            try\n                            {\n                                var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                                var delayMs = (waitCfg?.Seconds ?? 1) * 1000;\n                                _logger.LogInformation(\"⏳ Wait node delay: {Seconds}s\", waitCfg?.Seconds ?? 1);\n                                await Task.Delay(delayMs);\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse wait config for node {NodeId}\", node.Id);\n                            }\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Error while executing node {NodeId} of type {NodeType}\", node.Id, node.NodeType);\n                }\n\n                currentNodeId = edgeLookup.TryGetValue(currentNodeId, out var next)\n                    ? next.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n        private bool TryNodeHasButtons(string? configJson)\n        {\n            if (string.IsNullOrWhiteSpace(configJson)) return false;\n\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(configJson);\n                if (config != null && config.TryGetValue(\"multiButtons\", out var rawButtons))\n                {\n                    var buttons = JsonConvert.DeserializeObject<List<object>>(rawButtons.ToString() ?? \"[]\");\n                    return buttons.Count > 0;\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"⚠️ Failed to parse buttons from template config\");\n            }\n\n            return false;\n        }\n\n        private async Task LogAutoReplyAsync(Guid businessId, Guid contactId, string keyword, string type, string replyText, string? flowName, Guid? messageLogId)\n        {\n            var log = new AutoReplyLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contactId,\n                TriggerKeyword = keyword,\n                TriggerType = type,\n                ReplyContent = replyText,\n                FlowName = flowName,\n                MessageLogId = messageLogId,\n                TriggeredAt = DateTime.UtcNow\n            };\n\n            _context.AutoReplyLogs.Add(log);\n            await _context.SaveChangesAsync();\n        }\n\n\n        //    private async Task ExecuteTemplateNodeAsync(\n        //    AutoReplyFlowNode node,\n        //    Guid businessId,\n        //    Guid contactId,\n        //    string phone,\n        //    string keyword,\n        //    string? flowName)\n        //    {\n        //        _logger.LogInformation(\"🧠 Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n        //        TemplateConfig? tmpl;\n        //        try\n        //        {\n        //            tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n        //        }\n        //        catch (Exception ex)\n        //        {\n        //            _logger.LogError(ex, \"❌ Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n        //            return;\n        //        }\n\n        //        if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n        //        {\n        //            _logger.LogWarning(\"❌ Template node config is missing or invalid.\");\n        //            return;\n        //        }\n\n        //        var contact = await _context.Contacts\n        //            .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n        //        if (contact == null)\n        //        {\n        //            _logger.LogWarning(\"❌ Contact not found for AutoReply.\");\n        //            return;\n        //        }\n\n        //        //var buttons = tmpl.MultiButtons?.Select(b => new CampaignButton\n        //        //{\n        //        //    Title = b.ButtonText,\n        //        //    Type = b.ButtonType,\n        //        //    Value = b.TargetUrl\n        //        //}).ToList();\n        //        var buttons = tmpl.MultiButtons?\n        //.Where(b => !string.IsNullOrWhiteSpace(b.ButtonText)) // ✅ Avoid empty\n        //.Select((b, idx) => new\n        //{\n        //    type = \"button\",\n        //    sub_type = b.ButtonType.ToLowerInvariant(), // must be 'quick_reply' or 'url'\n        //    index = idx.ToString(),\n        //    parameters = new List<object>\n        //    {\n        //        new {\n        //            type = \"text\",\n        //            text = b.ButtonText\n        //        }\n        //    }\n        //}).ToList();\n\n        //        var response = await _templateSender.SendTemplateMessageToContactAsync(\n        //            businessId: businessId,\n        //            contact: contact,\n        //            templateName: tmpl.TemplateName,\n        //            templateParams: tmpl.Placeholders ?? new List<string>(),\n        //            imageUrl: tmpl.ImageUrl,\n        //            buttons: buttons,\n        //            source: \"auto_reply\",\n        //            refMessageId: null\n        //        );\n\n        //        await LogAutoReplyAsync(\n        //            businessId,\n        //            contactId,\n        //            keyword,\n        //            \"flow\",\n        //            $\"Template: {tmpl.TemplateName}\",\n        //            flowName,\n        //            response.LogId\n        //        );\n        //    }\n\n\n        private async Task ExecuteTemplateNodeAsync(\n    AutoReplyFlowNode node,\n    Guid businessId,\n    Guid contactId,\n    string phone,\n    string keyword,\n    string? flowName)\n        {\n            _logger.LogInformation(\"🧠 Raw config JSON for template node: {Json}\", node.ConfigJson);\n\n            TemplateConfig? tmpl;\n            try\n            {\n                tmpl = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to deserialize TemplateConfig for node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (tmpl == null || string.IsNullOrWhiteSpace(tmpl.TemplateName))\n            {\n                _logger.LogWarning(\"❌ Template node config is missing or invalid.\");\n                return;\n            }\n\n            var contact = await _context.Contacts\n                .FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n\n            if (contact == null)\n            {\n                _logger.LogWarning(\"❌ Contact not found for AutoReply.\");\n                return;\n            }\n\n            var buttons = tmpl.MultiButtons?\n                .Where(b => !string.IsNullOrWhiteSpace(b.ButtonText))\n                .Select(b => new CampaignButton\n                {\n                    Title = b.ButtonText,\n                    Type = b.ButtonType,\n                    Value = b.TargetUrl\n                })\n                .ToList();\n\n            var response = await _templateSender.SendTemplateMessageToContactAsync(\n                businessId: businessId,\n                contact: contact,\n                templateName: tmpl.TemplateName,\n                templateParams: tmpl.Placeholders ?? new List<string>(),\n                imageUrl: tmpl.ImageUrl,\n                buttons: buttons,\n                source: \"auto_reply\",\n                refMessageId: null\n            );\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                $\"Template: {tmpl.TemplateName}\",\n                flowName,\n                response.LogId\n            );\n        }\n\n        private async Task ExecuteMessageNodeAsync( AutoReplyFlowNode node, Guid businessId, Guid contactId,string phone, string keyword, string? flowName)\n        {\n            _logger.LogInformation(\"🧠 Raw config JSON for message node: {Json}\", node.ConfigJson);\n\n            MessageConfig? config = null;\n            try\n            {\n                config = JsonConvert.DeserializeObject<MessageConfig>(node.ConfigJson ?? \"{}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to parse config for message node {NodeId}\", node.Id);\n                return;\n            }\n\n            if (config == null || string.IsNullOrWhiteSpace(config.Text))\n            {\n                _logger.LogWarning(\"⚠️ Message node config missing or empty.\");\n                return;\n            }\n\n            var result = await _messageEngine.SendTextDirectAsync(new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                RecipientNumber = phone,\n                TextContent = config.Text\n            });\n\n            await LogAutoReplyAsync(\n                businessId,\n                contactId,\n                keyword,\n                \"flow\",\n                config.Text,\n                flowName,\n                result?.LogId\n            );\n        }\n        private async Task ExecuteTagNodeAsync(Guid businessId, Guid contactId, AutoReplyFlowNode node)\n        {\n            if (node == null || string.IsNullOrWhiteSpace(node.ConfigJson))\n                return;\n\n            try\n            {\n                var config = System.Text.Json.JsonSerializer.Deserialize<TagNodeConfig>(node.ConfigJson);\n\n                if (config?.Tags != null && config.Tags.Any())\n                {\n                    // ✅ Load contact from DB\n                    var contact = await _context.Contacts.FirstOrDefaultAsync(c => c.Id == contactId && c.BusinessId == businessId);\n                    if (contact == null)\n                    {\n                        _logger.LogWarning(\"⚠️ TagNode: Contact not found for {ContactId}\", contactId);\n                        return;\n                    }\n\n                    await _tagService.AssignTagsAsync(businessId, contact.PhoneNumber, config.Tags);\n                    _logger.LogInformation(\"✅ TagNode: Tags [{Tags}] assigned to contact {Phone}\", string.Join(\", \", config.Tags), contact.PhoneNumber);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ TagNode: Failed to execute for contact {ContactId}\", contactId);\n            }\n        }\n\n        public async Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null)\n        {\n            var contact = await _contactService.FindOrCreateAsync(businessId, phone);\n            if (contact == null)\n            {\n                _logger.LogWarning(\"❌ Contact not found or could not be created for phone: {Phone}\", phone);\n                return;\n            }\n\n            _logger.LogInformation(\"📩 Button clicked: '{ButtonText}' by {Phone}\", buttonText, phone);\n\n            var flows = await _flowRepo.GetAllByBusinessIdAsync(businessId);\n            if (flows == null || !flows.Any())\n            {\n                _logger.LogInformation(\"📭 No flows found for business {BusinessId}\", businessId);\n                return;\n            }\n\n            foreach (var flow in flows)\n            {\n                var nodes = await _flowRepo.GetNodesByFlowIdAsync(flow.Id);\n                var edges = await _flowRepo.GetEdgesByFlowIdAsync(flow.Id);\n\n                var matchedStartNode = nodes\n                    .Where(n => n.NodeType == \"start\")\n                    .FirstOrDefault(n =>\n                    {\n                        try\n                        {\n                            var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(n.ConfigJson ?? \"{}\");\n\n                            if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                            {\n                                var keywordArray = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n\n                                return keywordArray.Any(k =>\n                                    string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                            }\n\n                            return false;\n                        }\n                        catch\n                        {\n                            return false;\n                        }\n                    });\n\n                if (matchedStartNode != null)\n                {\n                    _logger.LogInformation(\"✅ Matched flow {FlowName} by button '{ButtonText}'\", flow.Name, buttonText);\n                   // await RunFlowAsync(flow.Id, businessId, contact.Id, phone, buttonText, flow.Name);\n                  await RunFlowFromButtonAsync(flow.Id, businessId, contact.Id, phone, buttonText);\n                    return;\n                }\n            }\n\n            _logger.LogInformation(\"❌ No flow matched for button: {ButtonText}\", buttonText);\n        }\n        public async Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText)\n        {\n            var nodes = await _flowRepo.GetNodesByFlowIdAsync(flowId);\n            var edges = await _flowRepo.GetEdgesByFlowIdAsync(flowId);\n\n            var nodeMap = nodes.ToDictionary(n => n.Id.ToString(), n => n);\n            var edgeMap = edges.GroupBy(e => e.SourceNodeId)\n                               .ToDictionary(g => g.Key, g => g.ToList());\n\n            // 🟢 1. Find start node\n            var startNode = nodes.FirstOrDefault(n => n.NodeType == \"start\");\n            if (startNode == null)\n            {\n                _logger.LogWarning(\"❌ No start node found in flow {FlowId}\", flowId);\n                return;\n            }\n\n            // 🔍 2. Find button index from triggerKeywords\n            int matchedIndex = -1;\n            try\n            {\n                var config = JsonConvert.DeserializeObject<Dictionary<string, object>>(startNode.ConfigJson ?? \"{}\");\n\n                if (config != null && config.TryGetValue(\"triggerKeywords\", out var raw))\n                {\n                    var keywordList = JsonConvert.DeserializeObject<List<string>>(raw.ToString() ?? \"[]\");\n                    matchedIndex = keywordList.FindIndex(k =>\n                        string.Equals(k?.Trim(), buttonText.Trim(), StringComparison.OrdinalIgnoreCase));\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to parse Start node config\");\n                return;\n            }\n\n            if (matchedIndex < 0)\n            {\n                _logger.LogWarning(\"❌ No trigger match for buttonText '{Button}'\", buttonText);\n                return;\n            }\n\n            // ✅ 3. Lookup edge from StartNode using SourceHandle = button-{index}\n            var nextNodeId = edgeMap.TryGetValue(startNode.Id.ToString(), out var list)\n                ? list.FirstOrDefault(e => e.SourceHandle == $\"button-{matchedIndex}\")?.TargetNodeId\n                : null;\n\n            if (string.IsNullOrEmpty(nextNodeId))\n            {\n                _logger.LogWarning(\"❌ No outgoing edge found for button index {Index}\", matchedIndex);\n                return;\n            }\n\n            var visited = new HashSet<string>();\n\n            while (!string.IsNullOrEmpty(nextNodeId) && !visited.Contains(nextNodeId))\n            {\n                visited.Add(nextNodeId);\n\n                if (!nodeMap.TryGetValue(nextNodeId, out var node))\n                    break;\n\n                _logger.LogInformation(\"⚙️ Executing node {NodeId} [{NodeType}]\", node.Id, node.NodeType);\n\n                try\n                {\n                    switch (node.NodeType)\n                    {\n                        case \"message\":\n                            await ExecuteMessageNodeAsync(node, businessId, contactId, phone, buttonText, null);\n                            break;\n\n                        case \"template\":\n                            await ExecuteTemplateNodeAsync(node, businessId, contactId, phone, buttonText, null);\n\n                            // ✅ Check buttons and halt if any button exists\n                            try\n                            {\n                                var cfg = JsonConvert.DeserializeObject<TemplateConfig>(node.ConfigJson ?? \"{}\");\n                                if (cfg?.MultiButtons?.Any(b => !string.IsNullOrWhiteSpace(b.ButtonText)) == true)\n                                {\n                                    _logger.LogInformation(\"🛑 Template node has buttons – halting flow for user click.\");\n                                    return;\n                                }\n                            }\n                            catch (Exception ex)\n                            {\n                                _logger.LogError(ex, \"❌ Failed to parse template config for button detection.\");\n                            }\n                            break;\n\n\n                        case \"tag\":\n                            await ExecuteTagNodeAsync(businessId, contactId, node);\n                            break;\n\n                        case \"wait\":\n                            var waitCfg = JsonConvert.DeserializeObject<WaitConfig>(node.ConfigJson ?? \"{}\");\n                            await Task.Delay((waitCfg?.Seconds ?? 1) * 1000);\n                            break;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Error executing node {NodeId}\", node.Id);\n                }\n\n                nextNodeId = edgeMap.TryGetValue(nextNodeId, out var nextList)\n                    ? nextList.FirstOrDefault()?.TargetNodeId\n                    : null;\n            }\n        }\n\n    }\n}\n\n\n\n\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/AutoReplyService.cs",
          "sha256": "df6edf428cebc4dc2d292bef7eb4e47f8cdcbe402b71d79ff9e6ae300502cf70",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class AutoReplyService : IAutoReplyService\n    {\n        private readonly IAutoReplyRepository _repository;\n\n        public AutoReplyService(IAutoReplyRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var model = new AutoReplyRule\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                TriggerKeyword = dto.TriggerKeyword,\n                ReplyMessage = dto.ReplyMessage,\n                MediaUrl = dto.MediaUrl,\n                Priority = dto.Priority,\n                IsActive = dto.IsActive,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            var saved = await _repository.AddAsync(model);\n\n            return ToDto(saved);\n        }\n\n        public async Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId)\n        {\n            var rules = await _repository.GetAllByBusinessIdAsync(businessId);\n            return rules.Select(ToDto);\n        }\n\n        public async Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId)\n        {\n            var rule = await _repository.GetByIdAsync(ruleId, businessId);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        public async Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto)\n        {\n            var existing = await _repository.GetByIdAsync(dto.Id!.Value, businessId);\n            if (existing == null) return false;\n\n            existing.TriggerKeyword = dto.TriggerKeyword;\n            existing.ReplyMessage = dto.ReplyMessage;\n            existing.MediaUrl = dto.MediaUrl;\n            existing.Priority = dto.Priority;\n            existing.IsActive = dto.IsActive;\n            existing.UpdatedAt = DateTime.UtcNow;\n\n            return await _repository.UpdateAsync(existing);\n        }\n\n        public async Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId)\n        {\n            return await _repository.DeleteAsync(ruleId, businessId);\n        }\n\n        public async Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage)\n        {\n            var rule = await _repository.MatchByKeywordAsync(businessId, incomingMessage);\n            return rule == null ? null : ToDto(rule);\n        }\n\n        private AutoReplyRuleDto ToDto(AutoReplyRule rule)\n        {\n            return new AutoReplyRuleDto\n            {\n                Id = rule.Id,\n                TriggerKeyword = rule.TriggerKeyword,\n                ReplyMessage = rule.ReplyMessage,\n                MediaUrl = rule.MediaUrl,\n                Priority = rule.Priority,\n                IsActive = rule.IsActive,\n                CreatedAt = rule.CreatedAt,\n                UpdatedAt = rule.UpdatedAt\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/FlowRunner.cs",
          "sha256": "d8c0004b19eb4964915bcf51a0ecdadf6dc89cfe50220970befa0fe58a5d4307",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class FlowRunner\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyFlowService.cs",
          "sha256": "dfa67a436f77fb405478dfff58668d94aaed35d2e14d087bffd2fa6eb5b0112b",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Flows.Services\n{\n    public interface IAutoReplyFlowService\n    {\n        Task<Guid> SaveFlowAsync(SaveFlowDto dto, Guid businessId);\n        Task<List<SaveFlowDto>> GetFlowsByBusinessIdAsync(Guid businessId);\n        Task<SaveFlowDto?> GetFlowByIdAsync(Guid flowId, Guid businessId);\n        Task<int> GetFlowCountForBusinessAsync(Guid businessId);\n        Task<bool> RenameFlowAsync(Guid id, string newName);\n        Task<bool> DeleteFlowAsync(Guid id, Guid businessId);\n        Task ExecuteFlowAsync(Guid businessId, string triggerKeyword, string customerPhoneNumber);\n\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyRuntimeService.cs",
          "sha256": "444b22549b3c870a3e8cef485bfbf318b5c82a42194255e035be52e27262d4e9",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyRuntimeService\n    {\n        Task<bool> TryRunAutoReplyFlowAsync(Guid businessId, string messageText, Guid contactId, string phoneNumber);\n        Task RunFlowAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string keyword, string flowName);\n        Task TryRunAutoReplyFlowByButtonAsync(Guid businessId, string phone, string buttonText, Guid? refMessageId = null);\n        Task RunFlowFromButtonAsync(Guid flowId, Guid businessId, Guid contactId, string phone, string buttonText);\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IAutoReplyService.cs",
          "sha256": "b2816300ae56acd5368c993c2bccc75ff481290ca8379e745ac361e2d27e620f",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.AutoReplyBuilder.DTOs;\n\nnamespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public interface IAutoReplyService\n    {\n        Task<AutoReplyRuleDto> CreateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<IEnumerable<AutoReplyRuleDto>> GetAllRulesAsync(Guid businessId);\n        Task<AutoReplyRuleDto?> GetRuleByIdAsync(Guid ruleId, Guid businessId);\n        Task<bool> UpdateRuleAsync(Guid businessId, AutoReplyRuleDto dto);\n        Task<bool> DeleteRuleAsync(Guid ruleId, Guid businessId);\n\n        // For runtime matching\n        Task<AutoReplyRuleDto?> MatchRuleByKeywordAsync(Guid businessId, string incomingMessage);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyBuilder/Services/IFlowRunner.cs",
          "sha256": "11438f4864857ba65f652f4ed62baf47119c77fcd6933106db70602675dce48b",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyBuilder.Services\n{\n    public class IFlowRunner\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/AutoReplyTemplates/Restaurant/Configs/MenuNodeConfig.cs",
          "sha256": "f20da12fb12eed3191a2998cb2e7a7dbc65b03bfcb571cf1b6a413f52d78d42a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.AutoReplyTemplates.Restaurant.Configs\n{\n    public class MenuNodeConfig\n    {\n        public string MenuTitle { get; set; } = string.Empty;         // e.g., \"Today's Specials\"\n        public string Description { get; set; } = string.Empty;       // e.g., \"Lunch combos starting at ₹199\"\n        public string MenuImageUrl { get; set; } = string.Empty;      // CDN or public link\n        public string MenuDownloadUrl { get; set; } = string.Empty;   // PDF link or product catalog URL\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/Controllers/BusinessesController.cs",
          "sha256": "c52f56f9044f3f1ebffdd162a172dfba6ba4632df54e60016adab111f526940b",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Helpers;\nusing Serilog;\nusing System.Security.Claims;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing Microsoft.AspNetCore.Authorization;\n\nnamespace xbytechat.api.Features.BusinessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class BusinessesController : ControllerBase\n    {\n        private readonly IBusinessService _businessService;\n\n        public BusinessesController(IBusinessService businessService)\n        {\n            _businessService = businessService;\n        }\n\n \n\n        [HttpGet(\"pending\")]\n        public async Task<IActionResult> GetPendingBusinesses()\n        {\n            try\n            {\n                var role = HttpContext.User.Claims\n                    .FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;\n                var userId = HttpContext.User.Claims.FirstOrDefault(c => c.Type == \"id\")?.Value ?? \"\";\n\n                if (!new[] { \"admin\", \"superadmin\", \"partner\" }.Contains(role))\n                {\n                    return StatusCode(403, ResponseResult.ErrorInfo(\"⛔ Access denied: You are not authorized to view pending businesses.\"));\n                }\n\n                var result = await _businessService.GetPendingBusinessesAsync(role, userId);\n\n                return Ok(ResponseResult.SuccessInfo(\"✅ Pending businesses fetched successfully.\", result));\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to fetch pending businesses. Please try again later.\"));\n            }\n        }\n\n\n        // ✅ Get business by ID (used for profile completion)\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetBusinessById(Guid id)\n        {\n            try\n            {\n                var business = await _businessService.GetByIdAsync(id);\n                if (business == null)\n                    return NotFound(ResponseResult.ErrorInfo(\"❌ Business not found.\"));\n\n                return Ok(business);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"🚨 Failed to fetch business. \" + ex.Message));\n            }\n        }\n\n        [HttpPut(\"assigned-to/{id}\")]\n        public async Task<IActionResult> UpdateBusiness(Guid id, [FromBody] Business business)\n        {\n            if (id != business.Id)\n            {\n                return BadRequest(new { message = \"❌ ID mismatch.\" });\n            }\n\n            var result = await _businessService.UpdateBusinessAsync(business);\n            if (!result.Success)\n            {\n                return BadRequest(result);\n            }\n\n            return Ok(result);\n        }\n\n\n        // 🟢 Approve a business\n        [HttpPost(\"approve/{id}\")]\n        public async Task<IActionResult> Approve(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.ApproveBusinessAsync(id);\n\n                if (result.Success)\n                {\n                    // ✅ Optional Success Logging\n                    Log.Information(\"✅ Business approved successfully. BusinessId: {BusinessId}\", id);\n                    return Ok(result);\n                }\n                else\n                {\n                    // ✅ Optional Warning Logging\n                    Log.Warning(\"⚠️ Business approval failed. BusinessId: {BusinessId} - Message: {Message}\", id, result.Message);\n                    return BadRequest(result);\n                }\n            }\n            catch (Exception ex)\n            {\n                // ✅ Proper Error Logging\n                Log.Error(ex, \"❌ Exception occurred while approving business. BusinessId: {BusinessId}\", id);\n\n                return StatusCode(500, ResponseResult.ErrorInfo(\n                    \"❌ Something went wrong while approving business. Please try again later.\"\n                ));\n            }\n        }\n\n\n        // 🔴 Reject a business\n        [HttpPost(\"reject/{id}\")]\n        public async Task<IActionResult> Reject(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.RejectBusinessAsync(id);\n                return result.Success ? Ok(result) : NotFound(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to reject business. \" + ex.Message));\n            }\n        }\n\n        // 🟡 Put a business on hold\n        [HttpPost(\"hold/{id}\")]\n        public async Task<IActionResult> Hold(Guid id)\n        {\n            try\n            {\n                var result = await _businessService.HoldBusinessAsync(id);\n                return result.Success ? Ok(result) : NotFound(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to hold business. \" + ex.Message));\n            }\n        }\n\n        // 🛠 Complete profile after signup\n        [HttpPost(\"profile-completion/{businessId}\")]\n        public async Task<IActionResult> CompleteProfile(Guid businessId, [FromBody] ProfileCompletionDto dto)\n        {\n            try\n            {\n                var result = await _businessService.CompleteProfileAsync(businessId, dto);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, ResponseResult.ErrorInfo(\"❌ Failed to update profile. \" + ex.Message));\n            }\n        }\n\n        [HttpGet(\"approved\")]\n        [Authorize(Roles = \"SuperAdmin\")]\n        public async Task<IActionResult> GetApprovedBusinesses()\n        {\n            var result = await _businessService.GetApprovedBusinessesAsync();\n            return Ok(result);\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/DTOs/PendingBusinessDto.cs",
          "sha256": "262c7390254b692bef62525ec48c34eb502354e446d2e98e77586b32f640f2be",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class PendingBusinessDto\n    {\n        public Guid BusinessId { get; set; }\n        public string CompanyName { get; set; }\n        public string BusinessEmail { get; set; }\n        public string? RepresentativeName { get; set; }\n        public string? Phone { get; set; }\n        public string Plan { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public bool? IsApproved { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/DTOs/ProfileCompletionDto.cs",
          "sha256": "cbd238cd045c0ee7bfc5061311058fa84005f29244727a11ef5b7a6eedbcf64f",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class ProfileCompletionDto\n    {\n        public string? BusinessName { get; set; }\n        public string? ReperesentativeName { get; set; }\n        public string? CompanyPhone { get; set; }\n        public string? Phone { get; set; }\n        public string? Website { get; set; }\n        public string? Address { get; set; }\n        public string? Industry { get; set; }\n        public string? LogoUrl { get; set; }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/DTOs/SignupBusinessDto.cs",
          "sha256": "daebace2d54e91a96825decc469c8acd57822d3e74bd5271ca80792e36cbb30e",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.BusinessModule.DTOs\n{\n    public class SignupBusinessDto\n    {\n        [Required]\n        public string CompanyName { get; set; }\n\n        [Required]\n        [EmailAddress]\n        public string Email { get; set; }\n\n        [Required]\n        public string Password { get; set; }\n\n        public string? RepresentativeName { get; set; }\n\n        public string? Phone { get; set; }\n        public string RoleName { get; set; } = \"business\"; // Default to business role\n\n        // 🆕 NEW FIELD (Internal use only)\n        public Guid? CreatedByPartnerId { get; set; } // to assign the business to a specific user/agent/partner}\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/Models/Business.cs",
          "sha256": "055d611b4b5423e751e8bf6d2827af589920c5d7dff393b04b3e1fd8c776a189",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat.api.Features.BusinessModule.Models\n{\n    public class Business\n    {\n        public Guid Id { get; set; }\n\n        // 🏢 Basic Info\n        public string? CompanyName { get; set; }\n        public string BusinessName { get; set; }\n        public string BusinessEmail { get; set; }  // Not used for login, just business contact\n        public string? RepresentativeName { get; set; }\n\n        public Guid? CreatedByPartnerId { get; set; }\n        public string? Phone { get; set; }\n        public string? CompanyPhone { get; set; }\n        public string? Website { get; set; }\n        public string? Address { get; set; }\n        public string? Industry { get; set; }\n        public string? LogoUrl { get; set; }\n\n        // 📦 SaaS Plan & Status using Enums\n        // public enum PlanType { Basic, Smart, Advanced } -- moved to bisinessinfo\n        // public PlanType Plan { get; set; } = PlanType.Basic;  // moved to bisinessinfo\n        public enum StatusType { Pending, Approved, Rejected }\n        public StatusType Status { get; set; } = StatusType.Pending;  // Default to Pending\n\n        // 📝 Metadata\n        public string? Tags { get; set; }\n        public string? Source { get; set; }\n        public string? Notes { get; set; }\n\n        // 📅 Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n        public bool IsApproved { get; set; } = false;\n        public string? ApprovedBy { get; set; }\n        public DateTime? ApprovedAt { get; set; }\n        public DateTime? LastLoginAt { get; set; }\n\n        // 🗑 Soft Deletion\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // 👥 Navigation Property - List of Users (nullable if no users)\n        public List<User> Users { get; set; } = new();\n\n\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n        public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n        // 🔗 Plan Info linked\n\n        /// This is a one-to-one relationship with BusinessPlanInfo\n        public BusinessPlanInfo? BusinessPlanInfo { get; set; }\n\n        public WhatsAppSettingEntity WhatsAppSettings { get; set; }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/Services/BusinessService.cs",
          "sha256": "a5ceba39eb2d4c79822b04180b564b268fc5ed58c58f9e85c968cbd5b5d7d5a0",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Cryptography;\nusing System.Text;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.AccessControl.Models;\nusing xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Features.BusinessModule.Services\n{\n    public class BusinessService : IBusinessService\n    {\n        private readonly IGenericRepository<Business> _businessRepo;\n        private readonly IGenericRepository<User> _userRepo;\n        private readonly IGenericRepository<Role> _roleRepo;\n        private readonly IAuditLogService _auditLogService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public BusinessService(\n            IGenericRepository<Business> businessRepo,\n            IGenericRepository<User> userRepo,\n            IGenericRepository<Role> roleRepo,\n            IAuditLogService auditLogService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _businessRepo = businessRepo;\n            _userRepo = userRepo;\n            _roleRepo = roleRepo;\n            _auditLogService = auditLogService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        public async Task<ResponseResult> SignupBusinessAsync(SignupBusinessDto dto)\n        {\n            var normalizedEmail = dto.Email.Trim().ToLower();\n            var existing = await _userRepo.FirstOrDefaultAsync(u => u.Email == normalizedEmail);\n            if (existing != null)\n                return ResponseResult.ErrorInfo(\"❌ Email already exists\");\n\n            var business = new Business\n            {\n                Id = Guid.NewGuid(),\n                CompanyName = dto.CompanyName,\n                BusinessName = dto.CompanyName,\n                BusinessEmail = normalizedEmail,\n                RepresentativeName = dto.RepresentativeName,\n                Phone = dto.Phone,\n                Status = Business.StatusType.Pending,\n                // Plan = PlanType.Basic,\n                IsApproved = false,\n                CreatedAt = DateTime.UtcNow\n            };\n            // STEP 2: Create Plan Info separately\n            var planInfo = new BusinessPlanInfo\n            {\n                BusinessId = business.Id,\n                Plan = PlanType.Basic,\n                TotalMonthlyQuota = 1000,\n                RemainingMessages = 1000,\n                QuotaResetDate = DateTime.UtcNow.AddMonths(1),\n                WalletBalance = 0\n            };\n            // STEP 3: Link them\n            business.BusinessPlanInfo = planInfo;\n            // STEP 4: Save both\n            await _businessRepo.AddAsync(business);\n            await _businessRepo.SaveAsync();\n\n            var role = await _roleRepo.FirstOrDefaultAsync(r => r.Name.ToLower() == dto.RoleName.Trim().ToLower());\n\n            if (role == null)\n                return ResponseResult.ErrorInfo(\"❌ Invalid role specified\");\n\n            var user = new User\n            {\n                Id = Guid.NewGuid(),\n                Name = dto.CompanyName,\n                Email = normalizedEmail,\n                PasswordHash = HashPassword(dto.Password),\n                Role = role,\n                Status = \"Pending\",\n                BusinessId = business.Id\n            };\n\n            await _userRepo.AddAsync(user);\n            await _userRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = user.Id,\n                PerformedByUserName = user.Name,\n                RoleAtTime = \"business\",\n                ActionType = \"business.signup\",\n                Description = $\"New business signup: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"✅ Signup successful. Pending approval.\", new { BusinessId = business.Id });\n        }\n\n        public async Task<ResponseResult> UpdateBusinessAsync(Business business)\n        {\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"❌ Invalid business object provided.\");\n\n            try\n            {\n                _businessRepo.Update(business);\n                await _businessRepo.SaveAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Business updated successfully.\");\n            }\n            catch (Exception ex)\n            {\n                // 🚨 Catch any unexpected error\n                return ResponseResult.ErrorInfo(\"❌ Failed to update business: \" + ex.Message);\n            }\n        }\n      \n        public async Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(userId) || string.IsNullOrEmpty(role))\n                {\n                    // 🔴 Invalid session or token\n                    return new List<PendingBusinessDto>();\n                }\n\n                if (!Guid.TryParse(userId, out var currentGuid))\n                {\n                    // 🔴 Bad ID format\n                    return new List<PendingBusinessDto>();\n                }\n\n                IQueryable<Business> query = _businessRepo.AsQueryable()\n                    .Where(b => b.Status == Business.StatusType.Pending && !b.IsDeleted);\n\n                if (role == \"partner\")\n                {\n                    query = query.Where(b => b.CreatedByPartnerId == currentGuid);\n                }\n\n                var pending = await query.ToListAsync();\n\n                return pending.Select(b => new PendingBusinessDto\n                {\n                    BusinessId = b.Id,\n                    CompanyName = b.CompanyName ?? \"\",\n                    BusinessEmail = b.BusinessEmail ?? \"\",\n                    RepresentativeName = b.RepresentativeName ?? \"\",\n                    Phone = b.Phone ?? \"\",\n                    //Plan = b.Plan.ToString(),\n                    Plan = b.BusinessPlanInfo?.Plan.ToString() ?? \"Unknown\",\n\n                    CreatedAt = b.CreatedAt,\n                    IsApproved = b.IsApproved\n                }).ToList();\n            }\n            catch (Exception ex)\n            {\n                return new List<PendingBusinessDto>();\n            }\n        }\n\n        public async Task<ResponseResult> ApproveBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo\n                .AsQueryable()\n                .Include(b => b.Users)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found.\");\n\n            // ✅ Current Logged-in User Details\n            var httpContext = _httpContextAccessor.HttpContext;\n            var currentUserId = httpContext?.User?.FindFirst(\"id\")?.Value;\n            var currentUserRole = httpContext?.User?.Claims\n    .FirstOrDefault(c => c.Type.Contains(\"role\"))?.Value;\n            //httpContext?.User?.FindFirst(\"role\")?.Value;\n\n            // var currentUserName = httpContext?.User?.FindFirst(\"name\")?.Value ?? \"Unknown\";\n            var currentUserName = httpContext?.User?.Claims\n    .FirstOrDefault(c => c.Type.Contains(\"name\"))?.Value ?? \"Unknown\";\n            if (string.IsNullOrEmpty(currentUserId) || string.IsNullOrEmpty(currentUserRole))\n                return ResponseResult.ErrorInfo(\"❌ Unauthorized access. Please login again.\");\n\n            var currentGuid = Guid.Parse(currentUserId);\n\n            // ✅ Authorization Logic\n            var isSuperAdmin = currentUserRole.Equals(\"admin\", StringComparison.OrdinalIgnoreCase) ||\n                               currentUserRole.Equals(\"superadmin\", StringComparison.OrdinalIgnoreCase);\n\n            var isAssignedPartner = business.CreatedByPartnerId.HasValue &&\n                                     business.CreatedByPartnerId.Value == currentGuid;\n\n            if (!isSuperAdmin && !isAssignedPartner)\n            {\n                return ResponseResult.ErrorInfo(\"⛔ You are not authorized to approve this business.\");\n            }\n\n            // ✅ Approve Business\n            business.IsApproved = true;\n            business.Status = Business.StatusType.Approved;\n            business.ApprovedAt = DateTime.UtcNow;\n            business.ApprovedBy = currentUserName;\n\n            _businessRepo.Update(business);\n\n            // ✅ Update all Users to \"ProfilePending\"\n            foreach (var user in business.Users)\n            {\n                user.Status = \"ProfilePending\";\n                _userRepo.Update(user);\n            }\n\n            await _businessRepo.SaveAsync();\n            await _userRepo.SaveAsync();\n\n            // ✅ Audit Log\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = currentGuid,\n                PerformedByUserName = currentUserName,\n                RoleAtTime = currentUserRole,\n                ActionType = \"business.approved\",\n                Description = $\"Business approved: {business.CompanyName}\",\n                IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"✅ Business approved successfully.\");\n        }\n\n        public async Task<ResponseResult> RejectBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found\");\n\n            business.Status = Business.StatusType.Rejected;\n            business.IsDeleted = true;\n            business.DeletedAt = DateTime.UtcNow;\n\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = Guid.TryParse(_httpContextAccessor.HttpContext?.User?.FindFirst(\"id\")?.Value, out var userId) ? userId : Guid.Empty,\n                PerformedByUserName = _httpContextAccessor.HttpContext?.User?.FindFirst(\"email\")?.Value,\n                RoleAtTime = _httpContextAccessor.HttpContext?.User?.FindFirst(\"role\")?.Value,\n                ActionType = \"business.rejected\",\n                Description = $\"Business rejected: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"✅ Business rejected and marked as deleted\");\n        }\n\n        public async Task<ResponseResult> HoldBusinessAsync(Guid businessId)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found\");\n\n            business.IsApproved = false;\n            business.Status = Business.StatusType.Pending;\n\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n\n            await _auditLogService.SaveLogAsync(new AuditLog\n            {\n                BusinessId = business.Id,\n                PerformedByUserId = Guid.TryParse(_httpContextAccessor.HttpContext?.User?.FindFirst(\"id\")?.Value, out var userId) ? userId : Guid.Empty,\n                PerformedByUserName = _httpContextAccessor.HttpContext?.User?.FindFirst(\"email\")?.Value,\n                RoleAtTime = _httpContextAccessor.HttpContext?.User?.FindFirst(\"role\")?.Value,\n                ActionType = \"business.hold\",\n                Description = $\"Business put on hold: {business.CompanyName}\",\n                IPAddress = _httpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString(),\n                UserAgent = _httpContextAccessor.HttpContext?.Request?.Headers[\"User-Agent\"].ToString()\n            });\n\n            return ResponseResult.SuccessInfo(\"⏸ Business put on hold\");\n        }\n\n        public async Task<ResponseResult> CompleteProfileAsync(Guid businessId, ProfileCompletionDto dto)\n        {\n            var business = await _businessRepo.FindByIdAsync(businessId);\n            if (business is null)\n                return ResponseResult.ErrorInfo(\"❌ Business not found\");\n\n            if (!string.IsNullOrEmpty(dto.BusinessName)) business.BusinessName = dto.BusinessName;\n            if (!string.IsNullOrEmpty(dto.CompanyPhone)) business.CompanyPhone = dto.CompanyPhone;\n            if (!string.IsNullOrEmpty(dto.Website)) business.Website = dto.Website;\n            if (!string.IsNullOrEmpty(dto.Address)) business.Address = dto.Address;\n            if (!string.IsNullOrEmpty(dto.Industry)) business.Industry = dto.Industry;\n            if (!string.IsNullOrEmpty(dto.LogoUrl)) business.LogoUrl = dto.LogoUrl;\n            if (!string.IsNullOrEmpty(dto.ReperesentativeName)) business.RepresentativeName = dto.ReperesentativeName;\n            if (!string.IsNullOrEmpty(dto.Phone)) business.Phone = dto.Phone;\n            _businessRepo.Update(business);\n            await _businessRepo.SaveAsync();\n            return ResponseResult.SuccessInfo(\"✅ Profile updated successfully\");\n        }\n\n        public async Task<Business?> GetBusinessByEmailAsync(string email)\n        {\n            return await _businessRepo.FirstOrDefaultAsync(b => b.BusinessEmail.ToLower() == email.Trim().ToLower());\n        }\n\n        private string HashPassword(string password)\n        {\n            using var sha = SHA256.Create();\n            var bytes = Encoding.UTF8.GetBytes(password);\n            var hash = sha.ComputeHash(bytes);\n            return Convert.ToBase64String(hash);\n        }\n\n        public async Task<Business?> GetByIdAsync(Guid businessId)\n        {\n            return await _businessRepo.FindByIdAsync(businessId);\n        }\n\n        public async Task<List<Business>> GetApprovedBusinessesAsync()\n        {\n            return await _businessRepo.AsQueryable()\n               .Where(b => b.IsApproved && !b.IsDeleted)\n               .OrderBy(b => b.CompanyName)\n               .ToListAsync();\n        }\n        public IQueryable<Business> Query()\n        {\n            return _businessRepo.AsQueryable();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/BusinessModule/Services/IBusinessService.cs",
          "sha256": "c89cefb9912082865f89106271d35ec1e815ec97981e3cd0ea7cd34149cbe55f",
          "language": "csharp",
          "content": "using System.Runtime.CompilerServices;\nusing xbytechat.api.Features.BusinessModule.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nnamespace xbytechat.api.Features.BusinessModule.Services\n{\n\n    public interface IBusinessService\n    {\n        IQueryable<Business> Query();\n        //  This is move to AuthController \n        Task<ResponseResult> SignupBusinessAsync(SignupBusinessDto dto); /// Signup + create admin user\n\n        //  Task<List<PendingBusinessDto>> GetPendingBusinessesAsync();      // Admin: list of unapproved businesses\n        Task<ResponseResult> ApproveBusinessAsync(Guid businessId);      // Admin action\n        Task<ResponseResult> RejectBusinessAsync(Guid businessId);       // Admin action\n        Task<ResponseResult> HoldBusinessAsync(Guid businessId);         // Admin action\n        Task<ResponseResult> CompleteProfileAsync(Guid businessId, ProfileCompletionDto dto); // Post-login completion\n        Task<Business?> GetBusinessByEmailAsync(string email);\n        Task<Business?> GetByIdAsync(Guid businessId);\n        Task<ResponseResult> UpdateBusinessAsync(Business business);\n        Task<List<PendingBusinessDto>> GetPendingBusinessesAsync(string role, string userId);\n        Task<List<Business>> GetApprovedBusinessesAsync();\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignController.cs",
          "sha256": "284cd1ba527750abfce187560ac888f526e05714d08705bf52794949f2aa65de",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing static xbytechat.api.Features.MessagesEngine.Controllers.MessageEngineController;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignController : ControllerBase\n    {\n        private readonly ICampaignService _campaignService;\n        private readonly IBusinessService _businessService;\n        private readonly IMessageEngineService _messageService;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CampaignController(\n            ICampaignService campaignService,\n            IBusinessService businessService,\n            IMessageEngineService messageEngineService,\n            IHttpContextAccessor httpContextAccessor)\n        {\n            _campaignService = campaignService;\n            _businessService = businessService;\n            _messageService = messageEngineService;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        [HttpGet(\"get-image-campaign\")]\n        public async Task<IActionResult> GetAll([FromQuery] string? type)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetAllCampaignsAsync(businessId, type);\n            return Ok(result);\n        }\n\n        [HttpGet(\"paginated\")]\n        public async Task<IActionResult> GetPaginatedCampaigns([FromQuery] PaginatedRequest request)\n        {\n            var user = HttpContext.User;\n            var businessIdClaim = user.FindFirst(\"businessId\");\n\n            if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n            var result = await _campaignService.GetPaginatedCampaignsAsync(businessId, request);\n            return Ok(result);\n        }\n\n        [HttpGet(\"debug-claims\")]\n        public IActionResult DebugClaims()\n        {\n            var user = HttpContext.User;\n            var businessId = user.FindFirst(\"businessId\")?.Value;\n\n            return Ok(new\n            {\n                name = user.Identity?.Name,\n                businessId\n            });\n        }\n\n        [HttpPost(\"create-text-campaign\")]\n        public async Task<IActionResult> CreateTextCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out var businessId))\n                    return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n                var createdBy = User.Identity?.Name ?? \"system\";\n\n                if (string.IsNullOrWhiteSpace(dto.Name))\n                    return BadRequest(new { message = \"🚫 Campaign name is required.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.TemplateId))\n                    return BadRequest(new { message = \"🚫 TemplateId is required for template campaigns.\" });\n\n                if (string.IsNullOrWhiteSpace(dto.MessageTemplate))\n                    return BadRequest(new { message = \"🚫 Message template content is required.\" });\n\n                var campaignId = await _campaignService.CreateTextCampaignAsync(dto, businessId, createdBy);\n\n                return campaignId != null\n                    ? Ok(new\n                    {\n                        success = true,\n                        message = \"✅ Campaign created successfully\",\n                        campaignId = campaignId.Value\n                    })\n                    : BadRequest(new { success = false, message = \"❌ Failed to create campaign\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception in CreateTextCampaign\");\n                return StatusCode(500, new { message = \"🚨 Internal server error\", error = ex.Message });\n            }\n        }\n\n        [HttpPost(\"create-image-campaign\")]\n        public async Task<IActionResult> CreateImageCampaign([FromBody] CampaignCreateDto dto)\n        {\n            try\n            {\n                var user = HttpContext.User;\n                var businessIdClaim = user.FindFirst(\"businessId\");\n\n                if (businessIdClaim == null || !Guid.TryParse(businessIdClaim.Value, out var businessId))\n                    return Unauthorized(new { message = \"🚫 Invalid or missing BusinessId claim.\" });\n\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var allowedTypes = new[] { \"url\", \"copy_code\", \"flow\", \"phone_number\", \"quick_reply\" };\n                    foreach (var button in dto.MultiButtons)\n                    {\n                        var type = button.ButtonType?.Trim().ToLower();\n\n                        if (!allowedTypes.Contains(type))\n                            return BadRequest(new { message = $\"❌ Invalid ButtonType: '{type}' is not supported.\" });\n\n                        var needsValue = new[] { \"url\", \"flow\", \"copy_code\", \"phone_number\" };\n                        if (needsValue.Contains(type) && string.IsNullOrWhiteSpace(button.TargetUrl))\n                            return BadRequest(new { message = $\"❌ Button '{button.ButtonText}' requires a valid TargetUrl or Value for type '{type}'.\" });\n\n                        if (button.TargetUrl?.ToLower() == \"unknown\")\n                            return BadRequest(new { message = $\"❌ Invalid value 'unknown' found in button '{button.ButtonText}'.\" });\n                    }\n                }\n\n                var createdBy = user.Identity?.Name ?? \"system\";\n                var campaignId = await _campaignService.CreateImageCampaignAsync(businessId, dto, createdBy);\n\n                return Ok(new\n                {\n                    success = true,\n                    message = \"✅ Campaign created successfully\",\n                    campaignId\n                });\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return BadRequest(new { message = ex.Message });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception in CreateImageCampaign\");\n                return StatusCode(500, new { message = \"🚨 Internal server error\", error = ex.Message });\n            }\n        }\n\n        // ✅ Moved above {id} routes\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContactsToCampaign(Guid id, [FromBody] AssignContactsDto request)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.AssignContactsToCampaignAsync(id, businessId, request.ContactIds);\n\n                return success\n                    ? Ok(new { message = \"✅ Contacts assigned\" })\n                    : BadRequest(new { message = \"❌ Failed to assign contacts\" });\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Error assigning contacts: \" + ex.Message);\n                return StatusCode(500, new { message = \"Internal error\", error = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"{campaignId}/recipients/{contactId}\")]\n        public async Task<IActionResult> RemoveCampaignRecipient(Guid campaignId, Guid contactId)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var success = await _campaignService.RemoveRecipientAsync(businessId, campaignId, contactId);\n\n                if (!success)\n                    return NotFound(new { message = \"Recipient not found or not assigned\" });\n\n                return NoContent();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Remove recipient failed: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error removing recipient\", detail = ex.Message });\n            }\n        }\n\n        [HttpPost(\"send-campaign/{campaignId}\")] // use to send free text and Template campaigns\n        public async Task<IActionResult> SendTemplateCampaign(Guid campaignId)\n        {\n            try\n            {\n                var result = await _campaignService.SendTemplateCampaignWithTypeDetectionAsync(campaignId);\n                return result.Success ? Ok(result) : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception while sending image template campaign\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"🚨 Server error while sending campaign\", ex.ToString()));\n            }\n        }\n\n        [HttpPost(\"send-template-campaign/{id}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid id)\n        {\n            var result = await _campaignService.SendTemplateCampaignAsync(id);\n            return result.Success ? Ok(result) : BadRequest(result);\n        }\n\n        [HttpPost(\"send/{campaignId}\")]\n        public async Task<IActionResult> SendCampaign(Guid campaignId)\n        {\n            try\n            {\n                var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n                var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n                var success = await _campaignService.SendCampaignAsync(campaignId, ipAddress, userAgent);\n\n                return success\n                    ? Ok(new { success = true, message = \"✅ Campaign sent successfully\" })\n                    : BadRequest(new { success = false, message = \"❌ Campaign sending failed\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception in SendCampaign\");\n                return StatusCode(500, new { success = false, message = \"🚨 Internal Server Error\", error = ex.Message });\n            }\n        }\n\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> UpdateCampaign(Guid id, [FromBody] CampaignCreateDto dto)\n        {\n            var result = await _campaignService.UpdateCampaignAsync(id, dto);\n            return result\n                ? Ok(new { message = \"✏️ Campaign updated successfully\" })\n                : BadRequest(new { message = \"❌ Update failed — only draft campaigns can be edited\" });\n        }\n\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteCampaign(Guid id)\n        {\n            var result = await _campaignService.DeleteCampaignAsync(id);\n            return result\n                ? Ok(new { message = \"🗑️ Campaign deleted successfully\" })\n                : BadRequest(new { message = \"❌ Delete failed — only draft campaigns can be deleted\" });\n        }\n\n        [HttpGet(\"recipients/{id}\")]\n        public async Task<IActionResult> GetCampaignRecipients(Guid id)\n        {\n            try\n            {\n                var businessId = GetBusinessId();\n                var recipients = await _campaignService.GetRecipientsByCampaignIdAsync(id, businessId);\n                return Ok(recipients);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Error fetching campaign recipients: \" + ex.Message);\n                return StatusCode(500, new { message = \"Error fetching recipients\", detail = ex.Message });\n            }\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignDto>> GetCampaignById(Guid id)\n        {\n            var businessId = GetBusinessId();\n            var campaign = await _campaignService.GetCampaignByIdAsync(id, businessId);\n\n            if (campaign == null)\n                return NotFound();\n\n            return Ok(campaign);\n        }\n\n        private Guid GetBusinessId()\n        {\n            var claim = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            if (string.IsNullOrEmpty(claim))\n                throw new UnauthorizedAccessException(\"BusinessId not found in token claims.\");\n\n            return Guid.Parse(claim);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Controllers/CampaignRecipientController.cs",
          "sha256": "247e52ea9259e04d5bc4fb6e22d3aa4791b77af05431022b0572a837bbf7e326",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Services;\n\nnamespace xbytechat.api.Features.CampaignModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class CampaignRecipientController : ControllerBase\n    {\n        private readonly ICampaignRecipientService _recipientService;\n\n        public CampaignRecipientController(ICampaignRecipientService recipientService)\n        {\n            _recipientService = recipientService;\n        }\n\n        // ✅ Get a single recipient by ID\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<CampaignRecipientDto>> GetRecipientById(Guid id)\n        {\n            var recipient = await _recipientService.GetByIdAsync(id);\n            if (recipient == null)\n                return NotFound(new { message = \"Recipient not found\" });\n\n            return Ok(recipient);\n        }\n\n        // ✅ Get all recipients for a specific campaign\n        [HttpGet(\"/api/campaigns/{campaignId}/recipients\")]\n        public async Task<ActionResult> GetRecipientsForCampaign(Guid campaignId)\n        {\n            var recipients = await _recipientService.GetByCampaignIdAsync(campaignId);\n            return Ok(recipients);\n        }\n\n        // ✅ Update recipient status (e.g., from Pending → Sent)\n        [HttpPut(\"{recipientId}/status\")]\n        public async Task<ActionResult> UpdateStatus(Guid recipientId, [FromQuery] string newStatus)\n        {\n            var success = await _recipientService.UpdateStatusAsync(recipientId, newStatus);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or update failed\" });\n\n            return Ok(new { message = \"Status updated\" });\n        }\n\n        // ✅ Track a reply from customer\n        [HttpPut(\"{recipientId}/reply\")]\n        public async Task<ActionResult> TrackReply(Guid recipientId, [FromQuery] string replyText)\n        {\n            var success = await _recipientService.TrackReplyAsync(recipientId, replyText);\n            if (!success)\n                return NotFound(new { message = \"Recipient not found or tracking failed\" });\n\n            return Ok(new { message = \"Reply tracked\" });\n        }\n\n        // 🔍 Search recipients by optional filters (status, keyword)\n        [HttpGet(\"search\")]\n        public async Task<ActionResult<List<CampaignRecipientDto>>> SearchRecipients([FromQuery] string? status, [FromQuery] string? keyword)\n        {\n            var results = await _recipientService.SearchRecipientsAsync(status, keyword);\n            return Ok(results);\n        }\n\n        [HttpPost(\"{id}/assign-contacts\")]\n        public async Task<IActionResult> AssignContacts(Guid id, [FromBody] AssignContactsDto dto)\n        {\n            try\n            {\n                await _recipientService.AssignContactsToCampaignAsync(id, dto.ContactIds);\n                return Ok(new { message = \"Contacts assigned successfully\" });\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"Error assigning contacts to campaign\");\n                return StatusCode(500, new { message = \"Failed to assign contacts\" });\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/AssignContactsDto.cs",
          "sha256": "8f8b9b0da213111f833dd07dd7e5189ccc02984cef1b34deb5b1d93a5d40678e",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class AssignContactsDto\n    {\n        public List<Guid> ContactIds { get; set; }\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonDto.cs",
          "sha256": "21e757f8859c9ea36b40c0d3418d5211cce8a22a26b07b81af62b723f93dc2e5",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonDto\n    {\n        public string ButtonText { get; set; } = string.Empty; // 📍 e.g., \"Buy Now\"\n        public string ButtonType { get; set; } = \"url\";         // 🔘 url | quick_reply | call\n        public string TargetUrl { get; set; } = string.Empty;  // 🌐 or phone/call param\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignButtonParamFromMetaDto.cs",
          "sha256": "8162311781c02a6a61e91fbe4b39251da400422e50341b7ca21f484a74d926f4",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignButtonParamFromMetaDto\n    {\n        public string Text { get; set; } = string.Empty;\n        public string Type { get; set; } = string.Empty;\n        public string SubType { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignCreateDto.cs",
          "sha256": "421004e6e792a8d5452c241aed6795a710992d4aac7169c63ae22dc1129352c2",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs; // Required to reference CTAButtonDto\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignCreateDto\n    {\n        public string Name { get; set; }\n\n        [Column(TypeName = \"text\")]\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; } // ✅ Optional Meta template ID\n\n        public string? FollowUpTemplateId { get; set; } // 🔁 Auto-reply template after interest\n\n        public string? CampaignType { get; set; } //= \"template\"; // \"text\", \"template\", \"cta\"\n\n        public Guid? CtaId { get; set; } // 🔘 For legacy CTA support (optional)\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new(); // ✅ New multi-button support\n        public DateTime? ScheduledAt { get; set; } // 📅 Optional future scheduling\n\n        //public List<Guid>? ContactIds { get; set; } // 👥 Target contact list\n\n        public string? ImageUrl { get; set; } // 🖼️ Optional image field\n\n        public string? ImageCaption { get; set; } // 📝 Optional caption\n\n        public List<Guid> ContactIds { get; set; } = new();\n\n        public List<string>? TemplateParameters { get; set; }\n        public List<CampaignButtonParamFromMetaDto>? ButtonParams { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignDto.cs",
          "sha256": "f2b7b259bf5244382d2ce138feef7ed1aeb97228ac2866143092b5a24bc07bbd",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignDto\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; }\n\n        public string MessageTemplate { get; set; }\n\n        public string? TemplateId { get; set; }\n        public string? MessageBody { get; set; }\n        public string? CampaignType { get; set; }\n\n        public string? Status { get; set; }\n\n        public string? ImageUrl { get; set; }\n\n        public string? ImageCaption { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n\n        public DateTime? ScheduledAt { get; set; }\n\n        public Guid? CtaId { get; set; }\n\n        public CtaPreviewDto? Cta { get; set; }\n\n        public List<CampaignButtonDto> MultiButtons { get; set; } = new();\n    }\n\n    // 📦 Embedded DTO for CTA preview (title + button text only)\n    public class CtaPreviewDto\n    {\n        public string Title { get; set; } = string.Empty;\n\n        public string ButtonText { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignRecipientDto.cs",
          "sha256": "7d59f3b2a92ff69f0425bf1c3541facd28da12efde822400d313e6beddc8ace5",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignRecipientDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        public string Status { get; set; }\n        public DateTime? SentAt { get; set; }\n\n        // 🔁 Advanced Fields (for analytics & future automation)\n        public string? BotId { get; set; }\n        public string? MessagePreview { get; set; }\n        public string? ClickedCTA { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public bool IsAutoTagged { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/DTOs/CampaignSummaryDto.cs",
          "sha256": "d2517a48edbd1df32b85f5a55469c9fbbe4e356db965cd6cc0067e5af60c0bf1",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignModule.DTOs\n{\n    public class CampaignSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string? Name { get; set; }\n        public string? Status { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n\n        public string? ImageUrl { get; set; } // ✅ Add this\n        public string? ImageCaption { get; set; } // ✅ Add this\n        public string? CtaTitle { get; set; } // Optional: For CTA info\n        public int RecipientCount { get; set; } // Optional: To show 0/10 etc\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Models/Campaign.cs",
          "sha256": "93a715f18655cfc7298072fd57b541aebd7393291f393194598bb0e0c3ade37d",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAManagement.Models;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class Campaign\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Business info\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }\n        public Guid? CampaignId { get; set; }\n        public Campaign? SourceCampaign { get; set; }\n\n        // 📋 Core campaign details\n        public string Name { get; set; }\n        public string MessageTemplate { get; set; }\n        public string? TemplateId { get; set; } // ✅ Meta-approved template ID\n\n        [Column(TypeName = \"text\")]\n        public string? MessageBody { get; set; } // ✅ Final resolved WhatsApp message body\n\n\n        public string? FollowUpTemplateId { get; set; } // 🔁 For auto-reply follow-up after interest\n        public string? CampaignType { get; set; } // = \"template\"; // text, template, cta\n\n        // 🔘 CTA tracking (optional)\n        public Guid? CtaId { get; set; }\n        public CTADefinition? Cta { get; set; }\n\n       \n        public DateTime? ScheduledAt { get; set; }\n        public string Status { get; set; } = \"Draft\"; // Draft, Scheduled, Sent\n\n        // 👤 Metadata\n        public string? CreatedBy { get; set; }\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // 🗑️ Soft delete support\n        public bool IsDeleted { get; set; } = false;\n        public DateTime? DeletedAt { get; set; }\n        public string? DeletedBy { get; set; }\n\n        // 👥 Recipient relationship\n        public ICollection<CampaignRecipient> Recipients { get; set; }\n\n        // 📊 Logs\n        public ICollection<CampaignSendLog> SendLogs { get; set; } = new List<CampaignSendLog>();\n        public ICollection<MessageStatusLog> MessageStatusLogs { get; set; }\n\n        //public ICollection<Campaign> Campaigns { get; set; } = new List<Campaign>();\n\n        public string? ImageUrl { get; set; } // ✅ store image URL\n        public string? ImageCaption { get; set; } // optional caption\n        public string? TemplateParameters { get; set; } // ✅ stores [\"value1\", \"value2\", ...] as JSON string\n\n        public ICollection<CampaignButton> MultiButtons { get; set; } = new List<CampaignButton>();\n\n        public ICollection<MessageLog> MessageLogs { get; set; } = new List<MessageLog>();\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Models/CampaignButton.cs",
          "sha256": "bfca22e0aed3117f3be8b3712de4a7b229991bc3c4b02bdb1f17e43709991977",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignButton\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; } // 🔗 Foreign key\n        public Campaign Campaign { get; set; }\n\n        public string Title { get; set; } = string.Empty; // Button Text (e.g. Buy Now)\n        public string Type { get; set; } = \"url\"; // Type: url, quick_reply, call, etc.\n        public string Value { get; set; } = string.Empty; // Target URL or payload\n\n        public int Position { get; set; } // Button order (1–3)\n        public bool IsFromTemplate { get; set; } = false;\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Models/CampaignFlowOverride .cs",
          "sha256": "c4ee719e7601cfb0eb6d67fbba7e11cbd4a57ad5be58dd84f72beead08d88370",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignFlowOverride\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CampaignId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string TemplateName { get; set; } = string.Empty;\n\n        [Required]\n        [MaxLength(50)]\n        public string ButtonText { get; set; } = string.Empty;\n\n        public string? OverrideNextTemplate { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public string? CreatedBy { get; set; }\n\n        [ForeignKey(\"CampaignId\")]\n        public Campaign? Campaign { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Models/CampaignRecipient.cs",
          "sha256": "56577228e95ed7f6c8f49036a0f4a95c7536726ea3c45a0a6f3b60ea7fe33362",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Models\n{\n    public class CampaignRecipient\n    {\n        public Guid Id { get; set; }\n\n        public Guid CampaignId { get; set; }\n        public Campaign Campaign { get; set; }\n\n        public Guid ContactId { get; set; }\n        public Contact Contact { get; set; }\n\n        public string Status { get; set; } = \"Pending\"; // Pending, Sent, Delivered, Failed, Replied\n        public DateTime? SentAt { get; set; }\n\n        public string? BotId { get; set; } // Multi-bot support\n        public string? MessagePreview { get; set; } // Final message sent\n        public string? ClickedCTA { get; set; } // Track CTA clicked like \"BuyNow\"\n        public string? CategoryBrowsed { get; set; } // e.g., Ads\n        public string? ProductBrowsed { get; set; } // e.g., Product name\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n\n        public bool IsAutoTagged { get; set; } = false; // Flag for automation-based tagging\n\n        // ✅ NEW: One-to-many link to detailed logs (message attempts, delivery tracking)\n        public ICollection<CampaignSendLog> SendLogs { get; set; }\n\n        public Guid BusinessId { get; set; }  // ✅ Add this line\n        public Business Business { get; set; } = null!; // if navigation is needed\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Services/CampaignRecipientService.cs",
          "sha256": "305276af3a69097d77fd771487b6a7edda41b141122cd38e0868e3915d9ae53d",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignRecipientService : ICampaignRecipientService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRecipientService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // 🔍 Get a single recipient by ID\n        public async Task<CampaignRecipientDto?> GetByIdAsync(Guid id)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.Id == id)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .FirstOrDefaultAsync();\n        }\n\n        // 📦 Get all recipients of a specific campaign\n        public async Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId)\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        // ✏️ Update status of a specific recipient\n        public async Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.Status = newStatus;\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 💬 Track customer reply or CTA\n        // 🗣️ Track customer reply on a recipient\n        public async Task<bool> TrackReplyAsync(Guid recipientId, string replyText)\n        {\n            var recipient = await _context.CampaignRecipients.FindAsync(recipientId);\n            if (recipient == null) return false;\n\n            recipient.ClickedCTA = replyText; // You may later rename this to something like `LastReply`\n            recipient.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n\n        // 🔎 Global recipient search across all campaigns\n        // 🔍 Search recipients by optional status or keyword\n        public async Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null)\n        {\n            var query = _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(status))\n                query = query.Where(r => r.Status == status);\n\n            if (!string.IsNullOrEmpty(keyword))\n                query = query.Where(r =>\n                    r.Contact.Name.Contains(keyword) ||\n                    r.Contact.PhoneNumber.Contains(keyword)\n                );\n\n            return await query\n                .Select(r => new CampaignRecipientDto\n                {\n                    Id = r.Id,\n                    ContactId = r.ContactId,\n                    ContactName = r.Contact.Name,\n                    ContactPhone = r.Contact.PhoneNumber,\n                    Status = r.Status,\n                    SentAt = r.SentAt\n                })\n                .ToListAsync();\n        }\n\n        //public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        //{\n        //    var existing = await _context.CampaignRecipients\n        //        .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n        //        .Select(r => r.ContactId)\n        //        .ToListAsync();\n\n        //    var newRecipients = contactIds\n        //        .Where(id => !existing.Contains(id))\n        //        .Select(contactId => new CampaignRecipient\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            CampaignId = campaignId,\n        //            ContactId = contactId,\n        //            Status = \"Pending\",\n        //            SentAt = DateTime.UtcNow,\n        //            UpdatedAt = DateTime.UtcNow,\n        //            IsAutoTagged = false\n        //        }).ToList();\n\n        //    if (newRecipients.Any())\n        //    {\n        //        await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n        //        await _context.SaveChangesAsync();\n        //    }\n        //}\n        public async Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .AsNoTracking()\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null)\n                throw new Exception(\"Campaign not found.\");\n\n            var businessId = campaign.BusinessId;\n\n            var existing = await _context.CampaignRecipients\n                .Where(r => r.CampaignId == campaignId && contactIds.Contains(r.ContactId))\n                .Select(r => r.ContactId)\n                .ToListAsync();\n\n            var newRecipients = contactIds\n                .Where(id => !existing.Contains(id))\n                .Select(contactId => new CampaignRecipient\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaignId,\n                    ContactId = contactId,\n                    BusinessId = businessId, // ✅ required\n                    Status = \"Pending\",\n                    SentAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    IsAutoTagged = false\n                }).ToList();\n\n            if (newRecipients.Any())\n            {\n                await _context.CampaignRecipients.AddRangeAsync(newRecipients);\n                await _context.SaveChangesAsync();\n            }\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Services/CampaignService.cs",
          "sha256": "f74197300f315bdfa4e8c0d87e323a7b7608a705baf836df2e38827e71b2f22e",
          "language": "csharp",
          "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.DTOs.Messages;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Dtos;\nusing Newtonsoft.Json;\nusing xbytechat.api.Helpers;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public class CampaignService : ICampaignService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly IServiceProvider _serviceProvider;\n        private readonly ILeadTimelineService _timelineService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n        public CampaignService(AppDbContext context, IMessageService messageService,\n                               IServiceProvider serviceProvider,\n                               ILeadTimelineService timelineService,\n                               IMessageEngineService messageEngineService,\n                               IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _serviceProvider = serviceProvider;\n            _timelineService = timelineService; // ✅ new\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n\n        }\n\n\n        #region Get All Types of Get and Update and Delete Methods\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId)\n        {\n            return await _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n\n                })\n                .ToListAsync();\n        }\n        public async Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Cta) // if CTA is stored in a separate table\n                .Include(c => c.MultiButtons) // assuming EF Core relation\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null) return null;\n\n            return new CampaignDto\n            {\n                Id = campaign.Id,\n                Name = campaign.Name,\n                MessageTemplate = campaign.MessageTemplate,\n                MessageBody = campaign.MessageBody,\n                TemplateId = campaign.TemplateId,\n                CampaignType = campaign.CampaignType,\n                Status = campaign.Status,\n                ImageUrl = campaign.ImageUrl,\n                ImageCaption = campaign.ImageCaption,\n                CreatedAt = campaign.CreatedAt,\n                ScheduledAt = campaign.ScheduledAt,\n                CtaId = campaign.CtaId,\n                Cta = campaign.Cta == null ? null : new CtaPreviewDto\n                {\n                    Title = campaign.Cta.Title,\n                    ButtonText = campaign.Cta.ButtonText\n                },\n                MultiButtons = campaign.MultiButtons?\n                    .Select(b => new CampaignButtonDto\n                    {\n                        ButtonText = b.Title,// ButtonText,\n                        ButtonType = b.Type,//ButtonType,\n                        TargetUrl = b.Value\n                    }).ToList() ?? new List<CampaignButtonDto>()\n            };\n        }\n\n        public async Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .AsQueryable();\n\n            if (!string.IsNullOrEmpty(type))\n                query = query.Where(c => c.CampaignType == type);\n\n            return await query\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt,\n                    ImageUrl = c.ImageUrl,            // ✅ Now mapped\n                    ImageCaption = c.ImageCaption,    // ✅ Now mapped\n                    CtaTitle = c.Cta != null ? c.Cta.Title : null,  // optional\n                    RecipientCount = c.Recipients.Count()\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId)\n        {\n            var recipients = await _context.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaignId && r.Contact.BusinessId == businessId)\n                .Select(r => new ContactDto\n                {\n                    Id = r.Contact.Id,\n                    Name = r.Contact.Name,\n                    PhoneNumber = r.Contact.PhoneNumber,\n                    Email = r.Contact.Email,\n                    LeadSource = r.Contact.LeadSource,\n                    CreatedAt = r.Contact.CreatedAt\n                })\n                .ToListAsync();\n\n            return recipients;\n        }\n\n        public async Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.Campaigns\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt);\n\n            var total = await query.CountAsync();\n\n            var items = await query\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(c => new CampaignSummaryDto\n                {\n                    Id = c.Id,\n                    Name = c.Name,\n                    Status = c.Status,\n                    ScheduledAt = c.ScheduledAt,\n                    CreatedAt = c.CreatedAt\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<CampaignSummaryDto>\n            {\n                Items = items,\n                TotalCount = total,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n        public async Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto)\n        {\n            var campaign = await _context.Campaigns.FindAsync(id);\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            // ✅ Extract BusinessId from current campaign\n            var businessId = campaign.BusinessId;\n\n            // ✅ Optional CTA ownership validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"❌ The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // ✏️ Update campaign fields\n            campaign.Name = dto.Name;\n            campaign.MessageTemplate = dto.MessageTemplate;\n            campaign.TemplateId = dto.TemplateId;\n            campaign.FollowUpTemplateId = dto.FollowUpTemplateId;\n            campaign.CampaignType = dto.CampaignType;\n            campaign.CtaId = dto.CtaId;\n            campaign.ImageUrl = dto.ImageUrl;\n            campaign.ImageCaption = dto.ImageCaption;\n            campaign.UpdatedAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> DeleteCampaignAsync(Guid id)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == id);\n\n            if (campaign == null || campaign.Status != \"Draft\")\n                return false;\n\n            _context.CampaignRecipients.RemoveRange(campaign.Recipients);\n            _context.Campaigns.Remove(campaign);\n\n            await _context.SaveChangesAsync();\n            Log.Information(\"🗑️ Campaign deleted: {Id}\", id);\n            return true;\n        }\n\n        #endregion\n\n        #region // 🆕 CreateCampaignAsync(Text/Image)\n        public async Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                var campaignId = Guid.NewGuid();\n\n                // 🔁 Parse template parameters into list\n                var parsedParams = TemplateParameterHelper.ParseTemplateParams(\n                    JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>())\n                );\n\n                // 🧠 Fetch template (for body + buttons)\n                var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, dto.TemplateId, true);\n\n                // 🧠 Fill message body\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    template?.Body ?? dto.MessageTemplate,\n                    parsedParams\n                );\n\n                // ✅ Step 1: Create campaign object\n                var campaign = new Campaign\n                {\n                    Id = campaignId,\n                    BusinessId = businessId,\n                    Name = dto.Name,\n                    MessageTemplate = dto.MessageTemplate,\n                    TemplateId = dto.TemplateId,\n                    FollowUpTemplateId = dto.FollowUpTemplateId,\n                    CampaignType = dto.CampaignType ?? \"text\",\n                    CtaId = dto.CtaId,\n                    ScheduledAt = dto.ScheduledAt,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    UpdatedAt = DateTime.UtcNow,\n                    Status = \"Draft\",\n                    ImageUrl = dto.ImageUrl,\n                    ImageCaption = dto.ImageCaption,\n                    TemplateParameters = JsonConvert.SerializeObject(dto.TemplateParameters ?? new List<string>()),\n                    MessageBody = resolvedBody // ✅ final resolved message\n                };\n\n                await _context.Campaigns.AddAsync(campaign);\n\n                // ✅ Step 2: Assign contacts if provided\n                if (dto.ContactIds != null && dto.ContactIds.Any())\n                {\n                    var recipients = dto.ContactIds.Select(contactId => new CampaignRecipient\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaignId,\n                        ContactId = contactId,\n                        BusinessId = businessId,\n                        Status = \"Pending\",\n                        SentAt = DateTime.UtcNow,\n                        UpdatedAt = DateTime.UtcNow\n                    });\n\n                    await _context.CampaignRecipients.AddRangeAsync(recipients);\n                }\n\n                // ✅ Step 3a: Save manual buttons from frontend\n                if (dto.MultiButtons != null && dto.MultiButtons.Any())\n                {\n                    var buttons = dto.MultiButtons\n                        .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.ButtonText,\n                            Type = btn.ButtonType ?? \"url\",\n                            Value = btn.TargetUrl,\n                            Position = index + 1,\n                            IsFromTemplate = false\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n                }\n\n                // ✅ Step 3b: Save buttons auto-fetched from WhatsApp Template\n                if (template != null && template.ButtonParams?.Count > 0)\n                {\n                    var autoButtons = template.ButtonParams\n                        .Take(3)\n                        .Select((btn, index) => new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaignId,\n                            Title = btn.Text,\n                            Type = btn.Type,\n                            // Value = btn.SubType == \"url\" ? \"https://your-redirect.com\" : btn.SubType,\n                            Value = btn.ParameterValue,\n                            Position = index + 1,\n                            IsFromTemplate = true\n                        });\n\n                    await _context.CampaignButtons.AddRangeAsync(autoButtons);\n                }\n\n                // ✅ Final Save\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Campaign '{Name}' created with {Contacts} recipients, {ManualButtons} user buttons, {TemplateButtons} template buttons and {Params} template parameters\",\n                    dto.Name,\n                    dto.ContactIds?.Count ?? 0,\n                    dto.MultiButtons?.Count ?? 0,\n                    template?.ButtonParams?.Count ?? 0,\n                    dto.TemplateParameters?.Count ?? 0\n                );\n\n                return campaignId;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to create campaign\");\n                return null;\n            }\n        }\n        public async Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy)\n        {\n            // 🔐 Optional CTA validation\n            if (dto.CtaId.HasValue)\n            {\n                var cta = await _context.CTADefinitions\n                    .FirstOrDefaultAsync(c => c.Id == dto.CtaId && c.BusinessId == businessId && c.IsActive);\n\n                if (cta == null)\n                    throw new UnauthorizedAccessException(\"❌ The selected CTA does not belong to your business or is inactive.\");\n            }\n\n            // 🎯 Create campaign\n            var campaign = new Campaign\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Name = dto.Name,\n                MessageTemplate = dto.MessageTemplate,\n                TemplateId = dto.TemplateId,\n                FollowUpTemplateId = dto.FollowUpTemplateId,\n                CampaignType = \"image\",\n                ImageUrl = dto.ImageUrl,\n                ImageCaption = dto.ImageCaption,\n                CtaId = dto.CtaId,\n                CreatedBy = createdBy,\n                CreatedAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow,\n                Status = \"Draft\"\n            };\n\n            await _context.Campaigns.AddAsync(campaign);\n\n            // 🔘 Save manual buttons from UI\n            if (dto.MultiButtons?.Any() == true)\n            {\n                var buttons = dto.MultiButtons\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.ButtonText) && !string.IsNullOrWhiteSpace(btn.TargetUrl))\n                    .Take(3)\n                    .Select((btn, index) => new CampaignButton\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        Title = btn.ButtonText,\n                        Type = string.IsNullOrWhiteSpace(btn.ButtonType) ? \"url\" : btn.ButtonType,\n                        Value = btn.TargetUrl,\n                        Position = index + 1,\n                        IsFromTemplate = false\n                    }).ToList();\n\n                if (buttons.Any())\n                    await _context.CampaignButtons.AddRangeAsync(buttons);\n            }\n\n            // 🔘 Save template buttons (from Meta) with proper dynamic/static handling\n            if (dto.ButtonParams?.Any() == true)\n            {\n                var templateButtons = dto.ButtonParams\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.Text) && !string.IsNullOrWhiteSpace(btn.Type))\n                    .Take(3)\n                    .Select((btn, index) =>\n                    {\n                        var subType = btn.SubType?.ToLower();\n                        var isDynamic = subType == \"url\" || subType == \"flow\" || subType == \"copy_code\";\n\n                        // ✅ Prefer user-provided value if dynamic, fallback to Meta value\n                        var userInput = dto.MultiButtons?.ElementAtOrDefault(index)?.TargetUrl?.Trim();\n                        var valueToSave = isDynamic && !string.IsNullOrWhiteSpace(userInput)\n                            ? userInput\n                            : btn.Value;\n\n                        return new CampaignButton\n                        {\n                            Id = Guid.NewGuid(),\n                            CampaignId = campaign.Id,\n                            Title = btn.Text,\n                            Type = btn.Type,\n                            Value = valueToSave,\n                            Position = index + 1,\n                            IsFromTemplate = true\n                        };\n                    })\n                    .Where(btn => !string.IsNullOrWhiteSpace(btn.Value)) // ✅ Prevent null insert error\n                    .ToList();\n\n                if (templateButtons.Any())\n                    await _context.CampaignButtons.AddRangeAsync(templateButtons);\n            }\n\n            await _context.SaveChangesAsync();\n            return campaign.Id;\n        }\n        #endregion\n\n        public async Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int throttleLimit = 5;\n\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions { MaxDegreeOfParallelism = throttleLimit }, async (recipient, ct) =>\n            {\n                try\n                {\n                    using var scope = _serviceProvider.CreateScope();\n                    var scopedDb = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    // 🟢 Use SimpleTemplateMessageDto instead of raw text\n                    var dto = new SimpleTemplateMessageDto\n                    {\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = campaign.MessageTemplate,\n                        TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                    };\n\n                    var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        TemplateId = campaign.TemplateId,\n                        MessageBody = campaign.MessageTemplate,\n                        MessageId = null,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        ErrorMessage = result.Message,\n                        SentAt = DateTime.UtcNow,\n                        CreatedAt = DateTime.UtcNow,\n                        SourceChannel = \"whatsapp\",\n                        IpAddress = ipAddress,\n                        DeviceInfo = userAgent\n                    };\n\n                    scopedDb.CampaignSendLogs.Add(sendLog);\n\n                    var recipientToUpdate = await scopedDb.CampaignRecipients.FirstOrDefaultAsync(r => r.Id == recipient.Id);\n                    if (recipientToUpdate != null)\n                    {\n                        recipientToUpdate.Status = result.Success ? \"Sent\" : \"Failed\";\n                        recipientToUpdate.MessagePreview = campaign.MessageTemplate;\n                        recipientToUpdate.SentAt = DateTime.UtcNow;\n                        recipientToUpdate.UpdatedAt = DateTime.UtcNow;\n                    }\n\n                    await scopedDb.SaveChangesAsync();\n                }\n                catch (Exception ex)\n                {\n                    Log.Error(ex, \"❌ Send failed for recipient: {RecipientId}\", recipient.Id);\n                }\n            });\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent via template to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        public async Task<bool> SendCampaignInParallelAsync(Guid campaignId, string ipAddress, string userAgent)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .ThenInclude(r => r.Contact)\n                .FirstOrDefaultAsync(c => c.Id == campaignId);\n\n            if (campaign == null || campaign.Recipients.Count == 0)\n            {\n                Log.Warning(\"🚫 Campaign not found or has no recipients\");\n                return false;\n            }\n\n            campaign.Status = \"Sending\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            int maxParallelism = 5;\n\n#if NET6_0_OR_GREATER\n            await Parallel.ForEachAsync(campaign.Recipients, new ParallelOptions\n            {\n                MaxDegreeOfParallelism = maxParallelism\n            },\n            async (recipient, cancellationToken) =>\n            {\n                await SendToRecipientAsync(campaign, recipient, ipAddress, userAgent);\n            });\n#else\n    var tasks = campaign.Recipients.Select(recipient =>\n        SendToRecipientAsync(campaign, recipient, ipAddress, userAgent)\n    );\n    await Task.WhenAll(tasks);\n#endif\n\n            campaign.Status = \"Sent\";\n            campaign.UpdatedAt = DateTime.UtcNow;\n            await _context.SaveChangesAsync();\n\n            Log.Information(\"📤 Campaign {CampaignId} sent in parallel to {Count} recipients\", campaign.Id, campaign.Recipients.Count);\n            return true;\n        }\n        private async Task SendToRecipientAsync(Campaign campaign, CampaignRecipient recipient, string ip, string ua)\n        {\n            try\n            {\n                var dto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipient.Contact.PhoneNumber,\n                    TemplateName = campaign.MessageTemplate,\n                    TemplateParameters = new List<string> { recipient.Contact.Name ?? \"Customer\" }\n                };\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(campaign.BusinessId, dto);\n\n\n                var log = new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = recipient.ContactId,\n                    RecipientId = recipient.Id,\n                    TemplateId = campaign.TemplateId,\n                    MessageBody = campaign.MessageTemplate,\n                    MessageId = null,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    ErrorMessage = result.Message,\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow,\n                    SourceChannel = \"whatsapp\",\n                    IpAddress = ip,\n                    DeviceInfo = ua\n                };\n\n                lock (_context)\n                {\n                    _context.CampaignSendLogs.Add(log);\n                    recipient.Status = result.Success ? \"Sent\" : \"Failed\";\n                    recipient.MessagePreview = campaign.MessageTemplate;\n                    recipient.SentAt = DateTime.UtcNow;\n                    recipient.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to send template to recipient: {RecipientId}\", recipient.Id);\n            }\n        }\n\n        public async Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId)\n        {\n            var entry = await _context.CampaignRecipients\n                .FirstOrDefaultAsync(r =>\n                    r.CampaignId == campaignId &&\n                    r.ContactId == contactId &&\n                    r.Campaign.BusinessId == businessId); // ✅ Filter by related Campaign.BusinessId\n\n            if (entry == null)\n                return false;\n\n            _context.CampaignRecipients.Remove(entry);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n            if (campaign == null)\n                return false;\n\n            var newRecipients = contactIds.Select(id => new CampaignRecipient\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = campaignId,\n                ContactId = id,\n                BusinessId = businessId,\n                Status = \"Pending\",\n                SentAt = DateTime.UtcNow,\n                UpdatedAt = DateTime.UtcNow\n            });\n\n            _context.CampaignRecipients.AddRange(newRecipients);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId)\n        {\n            try\n            {\n                var campaign = await _context.Campaigns\n                    .Include(c => c.Recipients)\n                        .ThenInclude(r => r.Contact) // 🧠 include contact details\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                    return ResponseResult.ErrorInfo(\"❌ No recipients assigned to this campaign.\");\n\n                var templateName = campaign.MessageTemplate;\n                var templateId = campaign.TemplateId;\n                var language = \"en_US\"; // Optional: make dynamic later\n                var isImageTemplate = !string.IsNullOrEmpty(campaign.ImageUrl);\n\n                var templateParams = JsonConvert.DeserializeObject<List<string>>(campaign.TemplateParameters ?? \"[]\");\n\n                int success = 0, failed = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    var messageDto = new ImageTemplateMessageDto\n                    {\n                       // BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        TemplateName = templateName,\n                        LanguageCode = language,\n                        HeaderImageUrl = isImageTemplate ? campaign.ImageUrl : null,\n                        TemplateParameters = templateParams,\n                        ButtonParameters = campaign.MultiButtons\n                            .OrderBy(b => b.Position)\n                            .Take(3)\n                            .Select(btn => new CampaignButtonDto\n                            {\n                                ButtonText = btn.Title,\n                                ButtonType = btn.Type,\n                                TargetUrl = btn.Value\n                            }).ToList()\n                    };\n\n                    // ✅ Call the image/template sender\n                    var sendResult = await _messageEngineService.SendImageTemplateMessageAsync(messageDto, campaign.BusinessId);\n                    var isSuccess = sendResult.ToString().ToLower().Contains(\"messages\");\n\n                    var log = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = campaign.BusinessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = templateName,\n                        MediaUrl = campaign.ImageUrl,\n                        Status = isSuccess ? \"Sent\" : \"Failed\",\n                        ErrorMessage = isSuccess ? null : \"API Failure\",\n                        RawResponse = JsonConvert.SerializeObject(sendResult),\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow\n                    };\n\n                    await _context.MessageLogs.AddAsync(log);\n\n                    if (isSuccess) success++;\n                    else failed++;\n                }\n\n                await _context.SaveChangesAsync();\n                return ResponseResult.SuccessInfo($\"✅ Sent: {success}, ❌ Failed: {failed}\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error during campaign send.\", ex.ToString());\n            }\n        }\n\n        #region  This region include all the code related to sending text and image based\n\n        // Detection - which type of campaign to send (text based or Image based)\n        public async Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId)\n        {\n            var campaign = await _context.Campaigns\n                .Include(c => c.Recipients)\n                    .ThenInclude(r => r.Contact)\n                .Include(c => c.MultiButtons)\n                .FirstOrDefaultAsync(c => c.Id == campaignId && !c.IsDeleted);\n\n            if (campaign == null)\n                return ResponseResult.ErrorInfo(\"❌ Campaign not found.\");\n\n            // Template Type Detection\n            return campaign.CampaignType?.ToLower() switch\n            {\n                \"text\" => await SendTextTemplateCampaignAsync(campaign),\n                \"image\" => await SendImageTemplateCampaignAsync(campaign),\n                _ => ResponseResult.ErrorInfo(\"❌ Unsupported campaign type.\")\n            };\n        }\n\n        // This is used for \"Text\" based campaigns sending\n        public async Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                {\n                    Log.Warning(\"❌ Campaign is null or marked as deleted.\");\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                }\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                {\n                    Log.Warning(\"⚠️ Campaign has no assigned recipients.\");\n                    return ResponseResult.ErrorInfo(\"⚠️ No recipients assigned to this campaign.\");\n                }\n\n                var businessId = campaign.BusinessId;\n                var templateName = campaign.TemplateId;\n                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n                var buttons = campaign.MultiButtons?.ToList();\n\n                // ✅ Fetch WhatsApp template metadata\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                {\n                    Log.Error(\"❌ Could not fetch template metadata for {Template}.\", templateName);\n                    return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n                }\n\n                if (templateParams.Count != templateMeta.PlaceholderCount)\n                {\n                    Log.Warning(\"⚠️ Template expects {Expected} body parameters but received {Actual}.\",\n                        templateMeta.PlaceholderCount, templateParams.Count);\n                }\n\n                int successCount = 0, failureCount = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    if (recipient?.Contact == null)\n                    {\n                        Log.Warning(\"⚠️ Skipping recipient: recipient or contact is null. Recipient ID: {RecipientId}\", recipient?.Id);\n                        continue;\n                    }\n\n                    Log.Information(\"📨 Preparing to send to {Phone}\", recipient.Contact.PhoneNumber);\n\n                    var components = BuildTextTemplateComponents(templateParams, buttons, templateMeta);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = recipient.Contact.PhoneNumber,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = templateMeta.Language ?? \"en_US\" },\n                            components = components\n                        }\n                    };\n\n                    Log.Debug(\"📦 WhatsApp Payload:\\n{Payload}\", JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                    ResponseResult sendResult = await _messageEngineService.SendToWhatsAppAsync(payload, businessId);\n                    Log.Information(\"📬 Send result: {Result}\", JsonConvert.SerializeObject(sendResult));\n\n                    var messageLog = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = campaign.MessageTemplate ?? templateName,\n                        Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageId = sendResult.MessageId,\n                        ErrorMessage = sendResult.ErrorMessage,\n                        RawResponse = sendResult.RawResponse,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = sendResult.Success ? DateTime.UtcNow : null\n                    };\n\n                    await _context.MessageLogs.AddAsync(messageLog);\n                    Log.Information(\"✅ Added MessageLog for {Recipient}\", recipient.Contact.PhoneNumber);\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = messageLog.Id,\n                        MessageId = sendResult.MessageId,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = campaign.CreatedBy\n                    });\n\n                    Log.Information(\"📘 Added CampaignSendLog for recipient {Recipient}\", recipient.Id);\n\n                    if (sendResult.Success) successCount++;\n                    else failureCount++;\n                }\n\n                Log.Information(\"💾 Saving all DB changes...\");\n                await _context.SaveChangesAsync();\n                Log.Information(\"✅ All saved successfully.\");\n\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} contacts. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error while sending text template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildTextTemplateComponents(List<string> templateParams, List<CampaignButton>? buttonList, TemplateMetadataDto templateMeta)\n        {\n            var components = new List<object>();\n\n            // ✅ 1. Optional Header\n            if (templateMeta.HasImageHeader)\n            {\n                Log.Information(\"ℹ️ Header detected, but skipping image as it's a text template.\");\n                // If you ever support header text, you can handle here\n            }\n\n            // ✅ 2. Body parameters\n            if (templateParams != null && templateParams.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n            else if (templateMeta.PlaceholderCount > 0)\n            {\n                Log.Warning(\"⚠️ Body params missing but template expects {Count} placeholders.\", templateMeta.PlaceholderCount);\n            }\n\n            // ✅ 3. Footer (optional, static — Meta doesn’t accept dynamic footer\n            // ly)\n            // If you want to support footer with text later, it can go like this:\n            // components.Add(new { type = \"footer\", parameters = new[] { new { type = \"text\", text = \"Your footer text\" } } });\n\n            // ✅ 4. Buttons\n            if (buttonList != null && buttonList.Any())\n            {\n                for (int i = 0; i < buttonList.Count && i < templateMeta.ButtonParams.Count; i++)\n                {\n                    var btn = buttonList[i];\n                    var meta = templateMeta.ButtonParams[i];\n\n                    string index = i.ToString();\n                    string subtype = meta.SubType?.ToLower() ?? \"url\";\n                    string? value = btn.Value?.Trim();\n                    string? metaParam = meta.ParameterValue?.Trim();\n\n                    // 🔍 Determine if this is a dynamic param (contains {{}})\n                    bool isDynamic = metaParam != null && metaParam.Contains(\"{{\");\n\n                    // ✅ Skip entire button if static and no dynamic value\n                    if (!isDynamic)\n                    {\n                        Log.Information(\"⏩ Skipping static button '{Title}' as it requires no parameters\", btn.Title);\n                        continue;\n                    }\n\n                    var paramType = subtype switch\n                    {\n                        \"url\" => \"text\",\n                        \"copy_code\" => \"coupon_code\",\n                        \"phone_number\" => \"phone_number\",\n                        \"flow\" => \"flow_id\",\n                        _ => \"text\"\n                    };\n\n                    var buttonPayload = new Dictionary<string, object>\n        {\n                        { \"type\", \"button\" },\n                        { \"sub_type\", subtype },\n                        { \"index\", index },\n                        { \"parameters\", new[] {\n                            new Dictionary<string, object>\n                            {\n                                { \"type\", paramType },\n                                { paramType, value }\n                            }\n                        }}\n                    };\n\n                    components.Add(buttonPayload);\n                }\n\n            }\n\n            return components;\n        }\n\n\n        // This is used for \"Image\" based campaigns sending\n        public async Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign)\n        {\n            try\n            {\n                if (campaign == null || campaign.IsDeleted)\n                {\n                    Log.Warning(\"❌ Campaign is null or marked as deleted.\");\n                    return ResponseResult.ErrorInfo(\"❌ Invalid campaign.\");\n                }\n\n                if (campaign.Recipients == null || !campaign.Recipients.Any())\n                {\n                    Log.Warning(\"⚠️ Campaign has no assigned recipients.\");\n                    return ResponseResult.ErrorInfo(\"⚠️ No recipients assigned to this campaign.\");\n                }\n\n                var businessId = campaign.BusinessId;\n                var templateName = campaign.TemplateId;\n                var imageUrl = campaign.ImageUrl;\n                var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n                var buttons = campaign.MultiButtons?.ToList();\n\n                var templateMeta = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n                if (templateMeta == null)\n                {\n                    Log.Error(\"❌ Could not fetch template metadata for {Template}.\", templateName);\n                    return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n                }\n\n                if (templateParams.Count != templateMeta.PlaceholderCount)\n                {\n                    Log.Warning(\"⚠️ Template expects {Expected} body parameters but received {Actual}.\",\n                        templateMeta.PlaceholderCount, templateParams.Count);\n                }\n\n                int successCount = 0, failureCount = 0;\n\n                foreach (var recipient in campaign.Recipients)\n                {\n                    if (recipient?.Contact == null)\n                    {\n                        Log.Warning(\"⚠️ Skipping recipient: recipient or contact is null. Recipient ID: {RecipientId}\", recipient?.Id);\n                        continue;\n                    }\n\n                    Log.Information(\"📨 Preparing to send to {Phone}\", recipient.Contact.PhoneNumber);\n\n                    var components = BuildImageTemplateComponents(templateParams, imageUrl, buttons, templateMeta);\n\n                    var payload = new\n                    {\n                        messaging_product = \"whatsapp\",\n                        to = recipient.Contact.PhoneNumber,\n                        type = \"template\",\n                        template = new\n                        {\n                            name = templateName,\n                            language = new { code = \"en_US\" },\n                            components = components\n                        }\n                    };\n\n                    Log.Debug(\"📦 Final WhatsApp Payload:\\n{Payload}\", JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                    var sendResult = await _messageEngineService.SendToWhatsAppAsync(payload, businessId);\n                    Log.Information(\"📬 Send result: {Result}\", JsonConvert.SerializeObject(sendResult));\n\n                    var messageLog = new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.ContactId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageContent = campaign.MessageTemplate ?? templateName,\n                        MediaUrl = imageUrl,\n                        Status = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageId = sendResult.MessageId,\n                        ErrorMessage = sendResult.ErrorMessage,\n                        RawResponse = sendResult.RawResponse,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = sendResult.Success ? DateTime.UtcNow : null\n                    };\n\n                    await _context.MessageLogs.AddAsync(messageLog);\n                    Log.Information(\"📥 MessageLog saved for {Recipient}\", recipient.Contact.PhoneNumber);\n\n                    await _context.CampaignSendLogs.AddAsync(new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        BusinessId = businessId,\n                        ContactId = recipient.ContactId,\n                        RecipientId = recipient.Id,\n                        MessageBody = campaign.MessageBody ?? templateName,\n                        TemplateId = templateName,\n                        SendStatus = sendResult.Success ? \"Sent\" : \"Failed\",\n                        MessageLogId = messageLog.Id,\n                        MessageId = sendResult.MessageId,\n                        CreatedAt = DateTime.UtcNow,\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = campaign.CreatedBy\n                    });\n\n                    Log.Information(\"🗃️ CampaignSendLog saved for recipient {Recipient}\", recipient.Id);\n\n                    if (sendResult.Success) successCount++;\n                    else failureCount++;\n                }\n\n                Log.Information(\"💾 Saving all DB changes...\");\n                await _context.SaveChangesAsync();\n                Log.Information(\"✅ All saved successfully.\");\n\n                return ResponseResult.SuccessInfo($\"📤 Sent to {successCount} contacts. ❌ Failed for {failureCount}.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error while sending image template campaign\");\n                return ResponseResult.ErrorInfo(\"🚨 Unexpected error while sending campaign.\", ex.ToString());\n            }\n        }\n\n        private List<object> BuildImageTemplateComponents(List<string> templateParams, string? imageUrl, List<CampaignButton>? buttonList, TemplateMetadataDto templateMeta)\n        {\n            var components = new List<object>();\n\n            // ✅ 1. Header image\n            if (!string.IsNullOrWhiteSpace(imageUrl) && templateMeta.HasImageHeader)\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                new\n                {\n                    type = \"image\",\n                    image = new { link = imageUrl }\n                }\n            }\n                });\n            }\n\n            // ✅ 2. Body parameters\n            if (templateParams != null && templateParams.Count > 0)\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n            else if (templateMeta.PlaceholderCount > 0)\n            {\n                Log.Warning(\"⚠️ Body params missing but template expects {Count} placeholders.\", templateMeta.PlaceholderCount);\n            }\n\n            // ✅ 3. Buttons with logic to exclude parameters for static values\n            if (buttonList != null && buttonList.Any())\n            {\n                for (int i = 0; i < buttonList.Count && i < templateMeta.ButtonParams.Count; i++)\n                {\n                    var btn = buttonList[i];\n                    var meta = templateMeta.ButtonParams[i];\n\n                    string index = i.ToString();\n                    string subtype = meta.SubType?.ToLower() ?? \"url\";\n                    string? value = btn.Value?.Trim();\n                    string? metaParam = meta.ParameterValue?.Trim();\n\n                    var buttonPayload = new Dictionary<string, object>\n            {\n                { \"type\", \"button\" },\n                { \"sub_type\", subtype },\n                { \"index\", index }\n            };\n\n                    // 🔍 Determine if this is a dynamic param (contains {{}})\n                    bool isDynamic = metaParam != null && metaParam.Contains(\"{{\");\n\n                    // ✅ Only add parameters for dynamic types\n                    if (isDynamic && !string.IsNullOrWhiteSpace(value))\n                    {\n                        var paramType = subtype switch\n                        {\n                            \"url\" => \"text\",\n                            \"copy_code\" => \"coupon_code\",\n                            \"phone_number\" => \"phone_number\",\n                            \"flow\" => \"flow_id\",\n                            _ => \"text\"\n                        };\n\n                        buttonPayload[\"parameters\"] = new[]\n                        {\n                    new Dictionary<string, object>\n                    {\n                        { \"type\", paramType },\n                        { paramType, value }\n                    }\n                };\n                    }\n                    else\n                    {\n                        Log.Information(\"ℹ️ Skipping parameters for static button '{Title}' ({SubType})\", btn.Title, subtype);\n                    }\n\n                    components.Add(buttonPayload);\n                }\n            }\n\n            return components;\n        }\n\n        #endregion\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignRecipientService.cs",
          "sha256": "a2bb5bdb9f8a87dc2436bac017a79dc02ec48bdc1fd425cb6c701807234d4dd3",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignModule.DTOs;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignRecipientService\n    {\n        Task<CampaignRecipientDto> GetByIdAsync(Guid id);\n        Task<List<CampaignRecipientDto>> GetByCampaignIdAsync(Guid campaignId);\n\n        Task<bool> UpdateStatusAsync(Guid recipientId, string newStatus);\n        Task<bool> TrackReplyAsync(Guid recipientId, string replyText);\n        Task<List<CampaignRecipientDto>> SearchRecipientsAsync(string status = null, string keyword = null);\n\n        Task AssignContactsToCampaignAsync(Guid campaignId, List<Guid> contactIds);\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignModule/Services/ICampaignService.cs",
          "sha256": "3f7e9d437d20cfd11c29d59b006d22a3c7c2b82f1f9af986a537fbf8941c6a4e",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignModule.Services\n{\n    public interface ICampaignService\n    {\n        /// 🆕 Create a new campaign with recipients\n        Task<Guid?> CreateTextCampaignAsync(CampaignCreateDto dto, Guid businessId, string createdBy);\n\n        /// ✏️ Update an existing draft campaign\n        Task<bool> UpdateCampaignAsync(Guid id, CampaignCreateDto dto);\n\n        /// 🗑️ Soft-delete a draft campaign\n        Task<bool> DeleteCampaignAsync(Guid id);\n\n        /// 📋 Get all campaigns for the business\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId);\n\n        /// 📄 Get paginated campaigns\n        Task<PaginatedResponse<CampaignSummaryDto>> GetPaginatedCampaignsAsync(Guid businessId, PaginatedRequest request);\n        /// 🚀 Trigger campaign send flow (template message to all recipients)\n        Task<bool> SendCampaignAsync(Guid campaignId, string ipAddress, string userAgent);\n        Task<Guid> CreateImageCampaignAsync(Guid businessId, CampaignCreateDto dto, string createdBy);\n        Task<List<CampaignSummaryDto>> GetAllCampaignsAsync(Guid businessId, string? type = null);\n        Task<List<ContactDto>> GetRecipientsByCampaignIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> RemoveRecipientAsync(Guid businessId, Guid campaignId, Guid contactId);\n        Task<CampaignDto?> GetCampaignByIdAsync(Guid campaignId, Guid businessId);\n        Task<bool> AssignContactsToCampaignAsync(Guid campaignId, Guid businessId, List<Guid> contactIds);\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTemplateCampaignWithTypeDetectionAsync(Guid campaignId);\n\n        Task<ResponseResult> SendTextTemplateCampaignAsync(Campaign campaign);\n        Task<ResponseResult> SendImageTemplateCampaignAsync(Campaign campaign);\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignAnalyticsController.cs",
          "sha256": "6c7bbdd6a0b01a9ec8cbb26be5139c16e41469243bda8101faa7cf042887338f",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class CampaignAnalyticsController : ControllerBase\n    {\n        private readonly ICampaignAnalyticsService _campaignAnalyticsService;\n\n        public CampaignAnalyticsController(ICampaignAnalyticsService campaignAnalyticsService)\n        {\n            _campaignAnalyticsService = campaignAnalyticsService;\n        }\n\n        [HttpGet(\"status-dashboard\")]\n        //public async Task<IActionResult> GetStatusDashboard()\n        //{\n        //    var businessIdString = User.FindFirstValue(\"BusinessId\");\n        //    if (!Guid.TryParse(businessIdString, out var businessId))\n        //    {\n        //        return Unauthorized(\"Invalid business identifier.\");\n        //    }\n        //    var result = await _campaignAnalyticsService.GetStatusDashboardAsync(businessId);\n        //    return Ok(result);\n        //}\n\n        [HttpGet(\"top-campaigns\")]\n        public async Task<IActionResult> GetTopCampaigns([FromQuery] int count = 5)\n        {\n            var businessIdString = User.FindFirstValue(\"BusinessId\");\n            if (!Guid.TryParse(businessIdString, out var businessId))\n            {\n                return Unauthorized(\"Invalid business identifier.\");\n            }\n            var result = await _campaignAnalyticsService.GetTopCampaignsAsync(businessId, count);\n            return Ok(result);\n        }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignRetryController.cs",
          "sha256": "b45bb8993a8de233fd24dbbfa69ed1d48a2e48d062fe36e81feb3a4384bed5d2",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-retry\")]\n    public class CampaignRetryController : ControllerBase\n    {\n        private readonly ICampaignRetryService _retryService;\n\n        public CampaignRetryController(ICampaignRetryService retryService)\n        {\n            _retryService = retryService;\n        }\n\n        // 🔁 Retry a single failed log\n        // Endpoint: POST /api/campaign-retry/{logId}/retry\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var success = await _retryService.RetrySingleAsync(logId);\n            if (!success)\n                return BadRequest(new { message = \"Retry failed or not allowed for this log.\" });\n\n            return Ok(new { success = true, message = \"Retry completed.\" });\n        }\n\n        // 🔁 Retry all failed logs in a campaign\n        // Endpoint: POST /api/campaign-retry/campaign/{campaignId}/retry-all\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAllInCampaign(Guid campaignId)\n        {\n            var retriedCount = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retriedCount });\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Controllers/CampaignSendLogController.cs",
          "sha256": "bc0f07e7012784757cf4cd0d58115aa69c521a5c518e227a771bc254f68db896",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/campaign-logs\")]\n    public class CampaignSendLogController : ControllerBase\n    {\n        private readonly ICampaignSendLogService _logService;\n        private readonly ICampaignRetryService _retryService;\n\n        public CampaignSendLogController(\n            ICampaignSendLogService logService,\n            ICampaignRetryService retryService\n        )\n        {\n            _logService = logService;\n            _retryService = retryService;\n        }\n\n        [HttpGet(\"campaign/{campaignId}\")]\n        public async Task<IActionResult> GetLogsByCampaign(Guid campaignId)\n        {\n            var logs = await _logService.GetLogsByCampaignIdAsync(campaignId);\n            return Ok(logs);\n        }\n\n        [HttpGet(\"campaign/{campaignId}/contact/{contactId}\")]\n        public async Task<IActionResult> GetLogsForContact(Guid campaignId, Guid contactId)\n        {\n            var logs = await _logService.GetLogsForContactAsync(campaignId, contactId);\n            return Ok(logs);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddSendLog([FromBody] CampaignSendLogDto dto)\n        {\n            var ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n            var userAgent = Request.Headers[\"User-Agent\"].ToString() ?? \"unknown\";\n\n            var result = await _logService.AddSendLogAsync(dto, ipAddress, userAgent);\n            if (!result)\n                return BadRequest(new { message = \"Failed to add send log\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/status\")]\n        public async Task<IActionResult> UpdateDeliveryStatus(Guid logId, [FromBody] DeliveryStatusUpdateDto dto)\n        {\n            var result = await _logService.UpdateDeliveryStatusAsync(logId, dto.Status, dto.DeliveredAt, dto.ReadAt);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        [HttpPut(\"{logId}/track-click\")]\n        public async Task<IActionResult> TrackClick(Guid logId, [FromBody] ClickTrackDto dto)\n        {\n            var result = await _logService.TrackClickAsync(logId, dto.ClickType);\n            if (!result)\n                return NotFound(new { message = \"Log not found\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry a single log using correct interface method\n        [HttpPost(\"{logId}/retry\")]\n        public async Task<IActionResult> RetrySingle(Guid logId)\n        {\n            var result = await _retryService.RetrySingleAsync(logId);\n            if (!result)\n                return BadRequest(new { message = \"Retry failed\" });\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ FIXED: Retry all failed logs using correct interface method\n        [HttpPost(\"campaign/{campaignId}/retry-all\")]\n        public async Task<IActionResult> RetryAll(Guid campaignId)\n        {\n            var result = await _retryService.RetryFailedInCampaignAsync(campaignId);\n            return Ok(new { success = true, retried = result });\n        }\n        // ✅ FIXED: Get summary of campaign logs as per Campaign ID\n        [HttpGet(\"campaign/{campaignId}/summary\")]\n        public async Task<IActionResult> GetCampaignSummary(Guid campaignId)\n        {\n            var summary = await _logService.GetCampaignSummaryAsync(campaignId);\n            return Ok(summary);\n        }\n\n    }\n\n    public class DeliveryStatusUpdateDto\n    {\n        public string Status { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n    }\n\n    public class ClickTrackDto\n    {\n        public string ClickType { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignLogSummaryDto.cs",
          "sha256": "41bd053931f58ad0a1eb056cadbe46d553f949ab070ac3454d6bb05d1662e6c1",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignLogSummaryDto\n    {\n        public int TotalSent { get; set; }\n        public int FailedCount { get; set; }\n        public int ClickedCount { get; set; }\n        public DateTime? LastSentAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignSendLogDto.cs",
          "sha256": "42c34ffaad27eea7cfade390bdbd9220b2abbf7095b92a61d1d3d52e57226306",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignSendLogDto\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Relationships\n        public Guid CampaignId { get; set; }\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; }\n        public string ContactPhone { get; set; }\n\n        // 📤 Message Info\n        public Guid RecipientId { get; set; }\n        public string MessageBody { get; set; }\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        // 🕒 Timestamps\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? SourceChannel { get; set; }\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n\n        // ✅ Enriched metadata\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📈 Click Tracking\n        public bool IsClicked { get; set; }\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Info\n        public string? RetryStatus { get; set; }     // Pending, Retried, Skipped\n        public int RetryCount { get; set; }\n        public DateTime? LastRetryAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/DTOs/CampaignStatusDashboardDto.cs",
          "sha256": "21979b3b1de98ab2567e6485c9c0e4684b848735d36743226caaca66504e9b7b",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class CampaignStatusDashboardDto\n    {\n        public Guid CampaignId { get; set; }\n\n        // 📊 Overall Stats\n        public int TotalRecipients { get; set; }\n        public int SentCount { get; set; }\n        public int DeliveredCount { get; set; }\n        public int ReadCount { get; set; }\n        public int FailedCount { get; set; }\n\n        // 🕒 Delivery Timing (optional but insightful)\n        public DateTime? FirstSentAt { get; set; }\n        public DateTime? LastSentAt { get; set; }\n        public DateTime? FirstReadAt { get; set; }\n        public DateTime? LastReadAt { get; set; }\n\n        // 📉 Delivery Rates\n        public double DeliveryRate => TotalRecipients == 0 ? 0 : (double)DeliveredCount / TotalRecipients * 100;\n        public double ReadRate => TotalRecipients == 0 ? 0 : (double)ReadCount / TotalRecipients * 100;\n        public double FailureRate => TotalRecipients == 0 ? 0 : (double)FailedCount / TotalRecipients * 100;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/DTOs/TopCampaignDto.cs",
          "sha256": "deebf224725de4a79f8363405623b0761fed9b776ec86cc8d6a9b05c5f79940e",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CampaignTracking.DTOs\n{\n    public class TopCampaignDto\n    {\n        public Guid CampaignId { get; set; }\n        public string CampaignName { get; set; }\n        public double ReadRate { get; set; }\n        public double ClickThroughRate { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Models/CampaignSendLog.cs",
          "sha256": "a19d5f0ad994f72337ad52ffeba0a1d94314d6f673b090bdc329093bdbcdfba6",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Models\n{\n    public class CampaignSendLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        public string? MessageId { get; set; } // Unique WAMID from WhatsApp\n        // 🔗 Foreign Keys\n        [Required]\n        public Guid CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public Guid RecipientId { get; set; }\n\n        // 📩 Message Info\n        [Required]\n        public string MessageBody { get; set; } = \"\";\n\n        public string? TemplateId { get; set; }\n        public string? SendStatus { get; set; }\n        public string? ErrorMessage { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // 🌐 Metadata\n        public string? IpAddress { get; set; }\n        public string? DeviceInfo { get; set; }\n        public string? MacAddress { get; set; }\n        public string? SourceChannel { get; set; }\n\n        // ✅ UX-Derived\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 📊 Click Tracking\n        public bool IsClicked { get; set; } = false;\n        public DateTime? ClickedAt { get; set; }\n        public string? ClickType { get; set; }\n\n        // 🔁 Retry Tracking (💡 New)\n        public int RetryCount { get; set; } = 0;                 // Number of retry attempts\n        public DateTime? LastRetryAt { get; set; }               // When retry last happened\n        public string? LastRetryStatus { get; set; }             // Success / Failed\n        public bool AllowRetry { get; set; } = true;             // Flag to enable/disable retry\n\n        // 👁 Navigation\n      \n        public Contact? Contact { get; set; }\n        public CampaignRecipient? Recipient { get; set; }\n\n\n        // 🔗 MessageLog reference (optional)\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; }\n\n        public Guid BusinessId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignAnalyticsService.cs",
          "sha256": "508462378daa1f45360929c4affbf43b7644d4ad8f799674980452efdc934474",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    \n\n    public class CampaignAnalyticsService : ICampaignAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n            //_context = context;\n        }\n\n        public async Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId)\n        {\n            var logs = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .ToListAsync();\n\n            if (!logs.Any()) return null;\n\n            return new CampaignStatusDashboardDto\n            {\n                CampaignId = campaignId,\n                TotalRecipients = logs.Count,\n                SentCount = logs.Count(l => l.SendStatus == \"Sent\"),\n                DeliveredCount = logs.Count(l => l.SendStatus == \"Delivered\"),\n                ReadCount = logs.Count(l => l.SendStatus == \"Read\"),\n                FailedCount = logs.Count(l => l.SendStatus == \"Failed\"),\n                FirstSentAt = logs.Min(l => l.SentAt),\n                LastSentAt = logs.Max(l => l.SentAt),\n                FirstReadAt = logs.Min(l => l.ReadAt),\n                LastReadAt = logs.Max(l => l.ReadAt)\n            };\n        }\n\n        //public async Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId)\n        //{\n        //    var stats = await _context.CampaignSendLogs\n        //        .Where(log => log.BusinessId == businessId)\n        //        .GroupBy(log => 1) // Group by a constant to aggregate all rows\n        //        .Select(g => new\n        //        {\n        //            TotalSent = g.Count(),\n        //            TotalDelivered = g.Count(l => l.DeliveredAt != null),\n        //            TotalRead = g.Count(l => l.ReadAt != null),\n        //            TotalClicked = g.Count(l => l.ClickedAt != null),\n        //            TotalFailed = g.Count(l => l.Status == \"failed\")\n        //        })\n        //        .FirstOrDefaultAsync();\n\n        //    if (stats == null)\n        //    {\n        //        return new CampaignStatusDashboardDto(); // Return empty DTO if no logs found\n        //    }\n\n        //    //return new CampaignStatusDashboardDto\n        //    //{\n        //    //    TotalSent = stats.TotalSent,\n        //    //    TotalDelivered = stats.TotalDelivered,\n        //    //    TotalRead = stats.TotalRead,\n        //    //    TotalClicked = stats.TotalClicked,\n        //    //    TotalFailed = stats.TotalFailed,\n        //    //    DeliveryRate = stats.TotalSent > 0 ? Math.Round((double)stats.TotalDelivered / stats.TotalSent * 100, 2) : 0,\n        //    //    ReadRate = stats.TotalDelivered > 0 ? Math.Round((double)stats.TotalRead / stats.TotalDelivered * 100, 2) : 0,\n        //    //    ClickRate = stats.TotalDelivered > 0 ? Math.Round((double)stats.TotalClicked / stats.TotalDelivered * 100, 2) : 0\n        //    //};\n        //}\n\n        public async Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5)\n        {\n            var campaignStats = await _context.CampaignSendLogs\n                .Where(log => log.BusinessId == businessId)\n                .GroupBy(log => log.CampaignId)\n                .Select(group => new\n                {\n                    CampaignId = group.Key,\n                    TotalSent = group.Count(),\n                    TotalRead = group.Count(l => l.ReadAt != null),\n                    TotalClicked = group.Count(l => l.ClickedAt != null)\n                })\n                .Where(s => s.TotalSent > 0)\n                .OrderByDescending(s => (double)s.TotalClicked / s.TotalSent)\n                .Take(count)\n                .ToListAsync();\n\n            if (!campaignStats.Any())\n            {\n                return new List<TopCampaignDto>();\n            }\n\n            var campaignIds = campaignStats.Select(s => s.CampaignId).ToList();\n            var campaigns = await _context.Campaigns\n                .Where(c => campaignIds.Contains(c.Id))\n                .ToDictionaryAsync(c => c.Id, c => c.Name);\n\n            return campaignStats.Select(s => new TopCampaignDto\n            {\n                CampaignId = s.CampaignId,\n                CampaignName = campaigns.GetValueOrDefault(s.CampaignId, \"Unnamed Campaign\"),\n                ReadRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalRead / s.TotalSent) * 100, 2) : 0,\n                ClickThroughRate = s.TotalSent > 0 ? Math.Round(((double)s.TotalClicked / s.TotalSent) * 100, 2) : 0\n            });\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignRetryService.cs",
          "sha256": "c006d284f3bc500e9eb4d5b0191ac34ccdd5643bc4742c18b5af20ec13334116",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignRetryService : ICampaignRetryService\n    {\n        private readonly AppDbContext _context;\n\n        public CampaignRetryService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ✅ Public method: Retry a single failed log\n        public async Task<bool> RetrySingleAsync(Guid logId)\n        {\n            return await RetrySendLogAsync(logId);\n        }\n\n        // ✅ Public method: Retry all failed logs in a campaign\n        public async Task<int> RetryFailedInCampaignAsync(Guid campaignId)\n        {\n            return await RetryAllFailedInCampaignAsync(campaignId);\n        }\n\n        // 🔁 Private: Retry a specific log\n        private async Task<bool> RetrySendLogAsync(Guid logId)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (log == null || log.SendStatus != \"Failed\" || !log.AllowRetry)\n                return false;\n\n            // 🔄 Simulate re-send (replace with actual IMessageService.SendAsync later)\n            bool sent = SimulateSendMessage(log);\n\n            log.RetryCount += 1;\n            log.LastRetryAt = DateTime.UtcNow;\n            log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n            log.SendStatus = sent ? \"Sent\" : \"Failed\";\n            log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n            await _context.SaveChangesAsync();\n            return sent;\n        }\n\n        // 🔁 Private: Retry all failed logs in a given campaign\n        private async Task<int> RetryAllFailedInCampaignAsync(Guid campaignId)\n        {\n            var failedLogs = await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.SendStatus == \"Failed\" && log.AllowRetry)\n                .ToListAsync();\n\n            int successCount = 0;\n\n            foreach (var log in failedLogs)\n            {\n                bool sent = SimulateSendMessage(log);\n\n                log.RetryCount += 1;\n                log.LastRetryAt = DateTime.UtcNow;\n                log.LastRetryStatus = sent ? \"Sent\" : \"Failed\";\n                log.SendStatus = sent ? \"Sent\" : \"Failed\";\n                log.ErrorMessage = sent ? null : \"Mock failure on retry\";\n\n                if (sent) successCount++;\n            }\n\n            await _context.SaveChangesAsync();\n            return successCount;\n        }\n\n        // 🔧 Simulated send (replace with actual WhatsApp message logic)\n        private bool SimulateSendMessage(CampaignSendLog log)\n        {\n            return new Random().NextDouble() < 0.9; // 90% success rate\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogEnricher.cs",
          "sha256": "6d1155127869663e221b9c1a80e5dce49dd32c3d57d218d8157691ed3bc8edeb",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogEnricher : ICampaignSendLogEnricher\n    {\n        public async Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress)\n        {\n            // 🧠 Device Detection (simplified for now)\n            log.DeviceInfo = userAgent;\n\n            // 🌍 IP Lookup - Mocked for now\n            if (!string.IsNullOrWhiteSpace(ipAddress))\n            {\n                log.IpAddress = ipAddress;\n                log.SourceChannel = \"API\"; // Example: mark origin\n                // Future: Use IPinfo or GeoLite2 for full location enrichment\n            }\n\n            // ⌛ Simulate async task for compatibility\n            await Task.CompletedTask;\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/CampaignSendLogService.cs",
          "sha256": "17a9852f8e2cd9ddf34b0ebdf64d080aa53e811211b11d89d94b2376fabc0ae3",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CampaignTracking.Services;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public class CampaignSendLogService : ICampaignSendLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ICampaignSendLogEnricher _enricher;\n\n        public CampaignSendLogService(AppDbContext context, ICampaignSendLogEnricher enricher)\n        {\n            _context = context;\n            _enricher = enricher;\n        }\n\n        // 📊 Get all send logs for a given campaign\n        public async Task<List<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId)\n        {\n            return await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId)\n                .Include(log => log.Contact)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    ContactName = log.Contact != null ? log.Contact.Name : \"N/A\",\n                    ContactPhone = log.Contact != null ? log.Contact.PhoneNumber : \"-\",\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    IpAddress = log.IpAddress,\n                    DeviceInfo = log.DeviceInfo,\n                    MacAddress = log.MacAddress,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n        }\n\n        // 📍 Get logs for a specific contact in a campaign\n        public async Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId)\n        {\n            return await _context.CampaignSendLogs\n                .Where(log => log.CampaignId == campaignId && log.ContactId == contactId)\n                .Select(log => new CampaignSendLogDto\n                {\n                    Id = log.Id,\n                    CampaignId = log.CampaignId,\n                    ContactId = log.ContactId,\n                    MessageBody = log.MessageBody,\n                    TemplateId = log.TemplateId,\n                    SendStatus = log.SendStatus,\n                    ErrorMessage = log.ErrorMessage,\n                    CreatedAt = log.CreatedAt,\n                    SentAt = log.SentAt,\n                    DeliveredAt = log.DeliveredAt,\n                    ReadAt = log.ReadAt,\n                    IpAddress = log.IpAddress,\n                    DeviceInfo = log.DeviceInfo,\n                    MacAddress = log.MacAddress,\n                    SourceChannel = log.SourceChannel,\n                    IsClicked = log.IsClicked,\n                    ClickedAt = log.ClickedAt,\n                    ClickType = log.ClickType\n                })\n                .ToListAsync();\n        }\n\n        // 🆕 Create a new send log (with enrichment)\n        public async Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent)\n        {\n            var log = new CampaignSendLog\n            {\n                Id = Guid.NewGuid(),\n                CampaignId = dto.CampaignId,\n                ContactId = dto.ContactId,\n                MessageBody = dto.MessageBody,\n                TemplateId = dto.TemplateId,\n                SendStatus = dto.SendStatus,\n                ErrorMessage = dto.ErrorMessage,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = dto.SentAt,\n                DeliveredAt = dto.DeliveredAt,\n                ReadAt = dto.ReadAt,\n                SourceChannel = dto.SourceChannel,\n                IsClicked = dto.IsClicked,\n                ClickedAt = dto.ClickedAt,\n                ClickType = dto.ClickType,\n                RecipientId = dto.RecipientId\n            };\n\n            // ✅ Use enrichment service\n            await _enricher.EnrichAsync(log, userAgent, ipAddress);\n\n            _context.CampaignSendLogs.Add(log);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📨 Update delivery or read status\n        public async Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.SendStatus = status;\n            log.DeliveredAt = deliveredAt ?? log.DeliveredAt;\n            log.ReadAt = readAt ?? log.ReadAt;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📈 Track click (CTA)\n        public async Task<bool> TrackClickAsync(Guid logId, string clickType)\n        {\n            var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId);\n            if (log == null) return false;\n\n            log.IsClicked = true;\n            log.ClickedAt = DateTime.UtcNow;\n            log.ClickType = clickType;\n\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        // 📊 Get summary of campaign logs\n        public async Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId)\n        {\n            var logs = await _context.CampaignSendLogs\n                .Where(l => l.CampaignId == campaignId)\n                .ToListAsync();\n\n            return new CampaignLogSummaryDto\n            {\n                TotalSent = logs.Count,\n                FailedCount = logs.Count(l => l.SendStatus == \"Failed\"),\n                ClickedCount = logs.Count(l => l.IsClicked),\n                LastSentAt = logs.Max(l => l.SentAt)\n            };\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignAnalyticsService.cs",
          "sha256": "c4c188f0eba3b537c076a7fc42ef62094de1ced491abcaecb619097e40debb8b",
          "language": "csharp",
          "content": "using xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignAnalyticsService\n    {\n       // Task<CampaignStatusDashboardDto> GetStatusDashboardAsync(Guid businessId);\n        Task<IEnumerable<TopCampaignDto>> GetTopCampaignsAsync(Guid businessId, int count = 5);\n        Task<CampaignStatusDashboardDto?> GetCampaignStatsAsync(Guid campaignId);\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignRetryService.cs",
          "sha256": "1211609bf9f58a20712fb625fd9e5691ba959d0f12ddde94e3d869cdf1cd9088",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignRetryService\n    {\n\n        // Retry a single failed message log by its ID.\n        // will be used when user clicks \"Retry Now\" on a log row.\n        Task<bool> RetrySingleAsync(Guid logId);\n\n\n        // Retry all failed messages in a campaign where retry is allowed.\n        // will support \"Retry All Failed\" button from Campaign logs.\n        Task<int> RetryFailedInCampaignAsync(Guid campaignId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogEnricher.cs",
          "sha256": "9204a2182522e06e53fe6beb21100820231943995d044f01feb200bdcaa521de",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogEnricher\n    {\n        Task EnrichAsync(CampaignSendLog log, string userAgent, string ipAddress);\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/CampaignTracking/Services/ICampaignSendLogService.cs",
          "sha256": "0e28d9721d3fa93d26567c1671562fba640dadfd8b09b2b2c10500d613373eb4",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.DTOs;\n\nnamespace xbytechat.api.Features.CampaignTracking.Services\n{\n    public interface ICampaignSendLogService\n    {\n        // 📊 Get all logs for a specific campaign\n        Task<List<CampaignSendLogDto>> GetLogsByCampaignIdAsync(Guid campaignId);\n\n        // 📍 Get logs for a specific contact in a campaign\n        Task<List<CampaignSendLogDto>> GetLogsForContactAsync(Guid campaignId, Guid contactId);\n\n        // 🆕 Add a new send log entry with enrichment (IP, User-Agent)\n        Task<bool> AddSendLogAsync(CampaignSendLogDto dto, string ipAddress, string userAgent);\n\n        // 📨 Update delivery or read status\n        Task<bool> UpdateDeliveryStatusAsync(Guid logId, string status, DateTime? deliveredAt, DateTime? readAt);\n\n        // 📈 Track CTA click (e.g., BuyNow, ViewDetails)\n        Task<bool> TrackClickAsync(Guid logId, string clickType);\n        // 📊 Get summary of campaign logs\n        Task<CampaignLogSummaryDto> GetCampaignSummaryAsync(Guid campaignId);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Controllers/CatalogDashboardController.cs",
          "sha256": "f9186d5de3a12145a3d7a2411736c6510ca02a7b70409ebdcaaa0de5172c0370",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/catalog-dashboard\")]\n    public class CatalogDashboardController : ControllerBase\n    {\n        private readonly ICatalogDashboardService _dashboardService;\n\n        public CatalogDashboardController(ICatalogDashboardService dashboardService)\n        {\n            _dashboardService = dashboardService;\n        }\n\n        [HttpGet(\"summary\")]\n        public async Task<ActionResult<CatalogDashboardSummaryDto>> GetSummary([FromQuery] Guid businessId)\n        {\n            var summary = await _dashboardService.GetDashboardSummaryAsync(businessId);\n            return Ok(summary);\n        }\n\n        [HttpGet(\"top-products\")]\n        public async Task<IActionResult> GetTopClickedProducts([FromQuery] Guid businessId, [FromQuery] int topN = 5)\n        {\n            var topProducts = await _dashboardService.GetTopClickedProductsAsync(businessId, topN);\n            return Ok(topProducts);\n        }\n        [HttpGet(\"cta-summary\")]\n        public async Task<IActionResult> GetCtaJourneySummary([FromQuery] Guid businessId)\n        {\n            var stats = await _dashboardService.GetCtaJourneyStatsAsync(businessId);\n            return Ok(stats);\n        }\n        [HttpGet(\"product-cta-breakdown\")]\n        public async Task<IActionResult> GetProductCtaBreakdown([FromQuery] Guid businessId)\n        {\n            var breakdown = await _dashboardService.GetProductCtaBreakdownAsync(businessId);\n            return Ok(breakdown);\n        }\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Controllers/CatalogTrackingController.cs",
          "sha256": "85581ce69ed9dbbad069ca060c3e8a2c356ec348d74d860ed2ed1905c46f9514",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/catalog-tracking\")]\n    public class CatalogTrackingController : ControllerBase\n    {\n        private readonly ICatalogTrackingService _trackingService;\n        private readonly ILogger<CatalogTrackingController> _logger;\n\n        public CatalogTrackingController(\n            ICatalogTrackingService trackingService,\n            ILogger<CatalogTrackingController> logger)\n        {\n            _trackingService = trackingService;\n            _logger = logger;\n        }\n\n        [HttpPost(\"log-click\")]\n        public async Task<IActionResult> LogClick([FromBody] CatalogClickLogDto dto)\n        {\n            var result = await _trackingService.LogClickAsync(dto);\n\n            if (!result.Success)\n            {\n                _logger.LogWarning(\"❌ Catalog click log failed: {Msg}\", result.Message);\n                return BadRequest(result);\n            }\n\n            return StatusCode(201, result);\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 5)\n        {\n            var result = await _trackingService.GetRecentLogsAsync(limit);\n\n            if (!result.Success)\n            {\n                _logger.LogError(\"❌ Failed to fetch recent logs: {Error}\", result.ErrorMessage);\n                return StatusCode(500, result);\n            }\n\n            return Ok(result);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Controllers/ProductController.cs",
          "sha256": "96a44de270bbb3d5a3b88cc161908c14045b78ca5adab88fb776640f55de1a1b",
          "language": "csharp",
          "content": "// 📄 File: Features/Catalog/Controllers/ProductController.cs\n\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Helpers;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Middleware.Attributes;\n\nnamespace xbytechat.api.Features.Catalog.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class ProductController : ControllerBase\n    {\n        private readonly IProductService _productService;\n\n        public ProductController(IProductService productService)\n        {\n            _productService = productService;\n        }\n\n        // ✅ GET /api/product?businessId=...\n        [HttpGet]\n        [RequirePermission(\"ViewCatalog\")]\n        public async Task<IActionResult> GetAll([FromQuery] Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(ResponseResult.ErrorInfo(\"BusinessId is required.\"));\n\n            var result = await _productService.GetProductsByBusinessIdAsync(businessId);\n            return Ok(result);\n        }\n\n        // ✅ POST /api/product\n        [HttpPost]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Create([FromBody] CreateProductDto dto)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values\n                    .SelectMany(v => v.Errors)\n                    .Select(e => e.ErrorMessage)\n                    .ToList();\n\n                var errorString = string.Join(\"; \", errors);\n                return BadRequest(ResponseResult.ErrorInfo(\"Invalid product data.\", errorString));\n            }\n\n            var result = await _productService.AddProductAsync(dto);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return StatusCode(201, result);\n        }\n\n        // ✅ DELETE /api/product/{id}?businessId=...\n        [HttpDelete(\"{id}\")]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Delete(Guid id, [FromQuery] Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(ResponseResult.ErrorInfo(\"BusinessId is required.\"));\n\n            var result = await _productService.RemoveProductAsync(id, businessId);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return Ok(result);\n        }\n\n        // ✅ PUT /api/product/{id}\n        [HttpPut(\"{id}\")]\n        [RequirePermission(\"ManageCatalog\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] UpdateProductDto dto)\n        {\n            if (id != dto.Id)\n                return BadRequest(ResponseResult.ErrorInfo(\"ID mismatch between route and body.\"));\n\n            var result = await _productService.UpdateProductAsync(dto);\n            if (!result.Success)\n                return BadRequest(result);\n\n            return Ok(result);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/CatalogClickLogDto.cs",
          "sha256": "901cea612e459695f97b806841df45393d04066624affedbfd85cc9d7d3899ce",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CatalogClickLogDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid? ContactId { get; set; }  // ✅ Add this\n        public Guid? ProductId { get; set; }\n\n        public string? UserId { get; set; }\n        public string? UserName { get; set; }\n        public string? UserPhone { get; set; }\n\n        public string? BotId { get; set; }\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n        public string? CTAJourney { get; set; }\n        public Guid? MessageLogId { get; set; }      // ✅ ADD THIS FIELD\n        public string? RefMessageId { get; set; }\n\n        public string TemplateId { get; set; }\n        public string ButtonText { get; set; }\n\n        // 🧠 Optional: Used for A/B tracking and analytics\n        public string? PlanSnapshot { get; set; }\n\n        public string? Source { get; set; } // ✅ Add this\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/CatalogDashboardSummaryDto.cs",
          "sha256": "31e171cf2d8c5bc006b770f4be2a968db3300aaad51072555faecd119e0e0e07",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CatalogDashboardSummaryDto\n    {\n        // Engagement Metrics\n        public int TotalMessagesSent { get; set; }\n        public int? UniqueCustomersMessaged { get; set; }\n        public int? ProductClicks { get; set; }\n\n        // Catalog Overview\n        public int? ActiveProducts { get; set; }\n        public int? ProductsSharedViaWhatsApp { get; set; }\n\n        // Lead Intelligence\n        public int? RepeatClickers { get; set; }\n        public int? NewClickersToday { get; set; }\n\n        // Timestamps\n        public DateTime? LastCatalogClickAt { get; set; }\n        public DateTime? LastMessageSentAt { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/CreateProductDto.cs",
          "sha256": "8605a9900a0537d7cec14264a91a4a4432debcdaafb06cff99b177460bd47233",
          "language": "csharp",
          "content": "// File: Features/Catalog/DTOs/CreateProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CreateProductDto\n    {\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/CtaJourneyStatsDto.cs",
          "sha256": "ca4efb6e222da04add4d8f9892be95a16ae180b34e53eec32d300c471ea503bd",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class CtaJourneyStatsDto\n    {\n        public string CTAJourney { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/ProductCtaBreakdownDto.cs",
          "sha256": "a94adfe171430503ede80ebb733fc9983f3fe1eae04b4a5a4ed6eb14d354bc10",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class ProductCtaBreakdownDto\n    {\n        public Guid ProductId { get; set; }\n        public string ProductName { get; set; }\n        public string CTAJourney { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/ProductDto.cs",
          "sha256": "9351e6b36ce1f707bd46bb92652331f1751b150a9d062ecfd31572a0998d59b7",
          "language": "csharp",
          "content": "// File: Features/Catalog/DTOs/ProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class ProductDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/TopProductDto.cs",
          "sha256": "464918c2b2d66c5710042f7d26d7b64fc8f4fb0380f12e7c756a0d248e613684",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class TopProductDto\n    {\n        public Guid ProductId { get; set; }\n        public string ProductName { get; set; }\n        public int ClickCount { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/DTOs/UpdateProductDto.cs",
          "sha256": "3d2fa63b4ce50da54504b1efa60375305ee53bd12498eb5c359bec2f13aeb11c",
          "language": "csharp",
          "content": "// File: Features/Catalog/DTOs/UpdateProductDto.cs\n\nnamespace xbytechat.api.Features.Catalog.DTOs\n{\n    public class UpdateProductDto\n    {\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Models/CatalogClickLog.cs",
          "sha256": "04b5faf86ec274241aa075f5ba6309899ae07f9c0074d1a34285b4f7c96b437d",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Catalog.Models\n{\n    public class CatalogClickLog\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Business & Product Info\n        public Guid BusinessId { get; set; }\n        public Guid? ProductId { get; set; }\n\n        // 👤 Customer Info\n        public string? UserId { get; set; }\n        public string? UserName { get; set; }\n        public string? UserPhone { get; set; }\n\n        // 🤖 Bot / Messaging Context\n        public string? BotId { get; set; }\n\n        // 🛍️ Browsing Context\n        public string? CategoryBrowsed { get; set; }\n        public string? ProductBrowsed { get; set; }\n\n        // 🔘 CTA Clicked\n        public string? CTAJourney { get; set; }\n        public string TemplateId { get; set; }\n        public string RefMessageId { get; set; }\n        public string ButtonText { get; set; }\n\n        // 🕒 Meta\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n\n        // ✅ CRM / Campaign / Analytics\n        public Guid? CampaignSendLogId { get; set; }\n        public Guid? ContactId { get; set; }\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public string? PlanSnapshot { get; set; }\n\n        // 🆕 [New Additions for CTA Campaign Tracking]\n        public Guid? CtaId { get; set; }             // Link to CTA definition\n        public Guid? CampaignId { get; set; }        // Link to campaign (if any)\n        public string Source { get; set; } = \"catalog\"; // \"catalog\", \"campaign\", \"auto-reply\"\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Models/Product.cs",
          "sha256": "428554206c02d4602a873704a1e49c995a274f4633e0f32d8c0991c4eea72a31",
          "language": "csharp",
          "content": "// File: Features/Catalog/Models/Product.cs\n\nusing System;\n\nnamespace xbytechat.api.Features.Catalog.Models\n{\n    public class Product\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 Foreign Key - Business/Owner\n        public Guid BusinessId { get; set; }\n\n        // 📦 Core Product Info\n        public string Name { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n        public decimal Price { get; set; }\n        public string Currency { get; set; } = \"INR\";\n        public string ImageUrl { get; set; } = string.Empty;\n\n        // ✅ Visibility & State\n        public bool IsActive { get; set; } = true;\n\n        // 📅 Metadata\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public int TotalClicks { get; set; } = 0; // Total CTA clicks tracked\n        public DateTime? LastClickedAt { get; set; } // Last time a user clicked CTA for this product\n        public string? MostClickedCTA { get; set; } // Button text with highest click count (e.g., \"Buy Now\")\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Services/CatalogDashboardService.cs",
          "sha256": "3303616ebf70e99e2e646759834c707405060cc1b22ceb5f743dfa1d8af50198",
          "language": "csharp",
          "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Hosting.Server;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing static System.Runtime.InteropServices.JavaScript.JSType;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class CatalogDashboardService : ICatalogDashboardService\n    {\n        private readonly AppDbContext _context;\n\n        public CatalogDashboardService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n       \n        public async Task<CatalogDashboardSummaryDto> GetDashboardSummaryAsync(Guid businessId)\n        {\n            var today = DateTime.UtcNow.Date;\n\n            var totalMessagesSent = await _context.MessageLogs\n                .CountAsync(m => m.BusinessId == businessId);\n\n            var uniqueCustomersMessaged = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .Select(m => m.RecipientNumber)\n                .Distinct()\n                .CountAsync();\n\n            var productClicks = await _context.CatalogClickLogs\n                .CountAsync(c => c.BusinessId == businessId && c.ProductId != null);\n\n            var activeProducts = await _context.Products\n                .CountAsync(p => p.BusinessId == businessId);\n\n            var productsSharedViaWhatsapp = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null)\n                .Select(c => c.ProductId)\n                .Distinct()\n                .CountAsync();\n\n            var repeatClickers = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId)\n                .GroupBy(c => c.UserPhone)\n                .CountAsync(g => g.Count() > 1);\n\n            var newClickersToday = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ClickedAt.Value.Date == today)\n                .Select(c => c.UserPhone)\n                .Distinct()\n                .CountAsync();\n            //        var newClickersToday = _context.CatalogClickLogs\n            //.Where(c => c.BusinessId == businessId)\n            //.ToList() // now it's LINQ to Objects\n            //        .Where(c => c.ClickedAt?.Date == today)\n            //        .Select(c => c.UserPhone)\n            //        .Distinct()\n            //.Count();\n            //        But if your data is large, the first(server-side filtering) is the better choice.\n\n            var lastCatalogClickAt = await _context.CatalogClickLogs\n    .Where(c => c.BusinessId == businessId)\n    .MaxAsync(c => (DateTime?)c.ClickedAt);\n\n            var lastMessageSentAt = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .MaxAsync(m => (DateTime?)m.SentAt);\n\n            return new CatalogDashboardSummaryDto\n            {\n                TotalMessagesSent = totalMessagesSent,\n                UniqueCustomersMessaged = uniqueCustomersMessaged,\n                ProductClicks = productClicks,\n                ActiveProducts = activeProducts,\n                ProductsSharedViaWhatsApp = productsSharedViaWhatsapp,\n                RepeatClickers = repeatClickers,\n                NewClickersToday = newClickersToday,\n                LastCatalogClickAt = lastCatalogClickAt,\n                LastMessageSentAt = lastMessageSentAt\n            };\n        }\n\n        public async Task<List<TopProductDto>> GetTopClickedProductsAsync(Guid businessId, int topN = 5)\n        {\n            var topProducts = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null)\n                .GroupBy(c => c.ProductId)\n                .Select(g => new\n                {\n                    ProductId = g.Key,\n                    ClickCount = g.Count()\n                })\n                .OrderByDescending(x => x.ClickCount)\n                .Take(topN)\n                .ToListAsync();\n\n            // Now fetch product names to join with clicks\n            var productIds = topProducts.Select(x => x.ProductId).ToList();\n\n            var products = await _context.Products\n                .Where(p => productIds.Contains(p.Id))\n                .ToDictionaryAsync(p => p.Id, p => p.Name);\n\n            return topProducts.Select(x => new TopProductDto\n            {\n                ProductId = x.ProductId.Value,\n                ProductName = products.ContainsKey(x.ProductId.Value) ? products[x.ProductId.Value] : \"Unknown\",\n                ClickCount = x.ClickCount\n            }).ToList();\n        }\n        public async Task<List<CtaJourneyStatsDto>> GetCtaJourneyStatsAsync(Guid businessId)\n        {\n            var stats = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && !string.IsNullOrEmpty(c.CTAJourney))\n                .GroupBy(c => c.CTAJourney)\n                .Select(g => new CtaJourneyStatsDto\n                {\n                    CTAJourney = g.Key,\n                    ClickCount = g.Count()\n                })\n                .OrderByDescending(x => x.ClickCount)\n                .ToListAsync();\n\n            return stats;\n        }\n        public async Task<List<ProductCtaBreakdownDto>> GetProductCtaBreakdownAsync(Guid businessId)\n        {\n            var groupedClicks = await _context.CatalogClickLogs\n                .Where(c => c.BusinessId == businessId && c.ProductId != null && !string.IsNullOrEmpty(c.CTAJourney))\n                .GroupBy(c => new { c.ProductId, c.CTAJourney })\n                .Select(g => new\n                {\n                    ProductId = g.Key.ProductId.Value,\n                    CTAJourney = g.Key.CTAJourney,\n                    ClickCount = g.Count()\n                })\n                .ToListAsync();\n\n            // Fetch product names for all involved productIds\n            var productIds = groupedClicks.Select(g => g.ProductId).Distinct().ToList();\n\n            var productNames = await _context.Products\n                .Where(p => productIds.Contains(p.Id))\n                .ToDictionaryAsync(p => p.Id, p => p.Name);\n\n            var result = groupedClicks.Select(g => new ProductCtaBreakdownDto\n            {\n                ProductId = g.ProductId,\n                ProductName = productNames.ContainsKey(g.ProductId) ? productNames[g.ProductId] : \"Unknown\",\n                CTAJourney = g.CTAJourney,\n                ClickCount = g.ClickCount\n            }).ToList();\n\n            return result;\n        }\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Services/CatalogTrackingService.cs",
          "sha256": "79e5e44c45d327c3c4f281e9f60fe09baac547c05995c848a954edd66d3f349d",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class CatalogTrackingService : ICatalogTrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageService _messageService;\n        private readonly ILeadTimelineService _leadTimelineService;\n\n        public CatalogTrackingService(\n            AppDbContext context,\n            IMessageService messageService,\n            ILeadTimelineService leadTimelineService)\n        {\n            _context = context;\n            _messageService = messageService;\n            _leadTimelineService = leadTimelineService;\n        }\n\n        public async Task<ResponseResult> LogClickAsync(CatalogClickLogDto dto)\n        {\n            if (dto == null || dto.BusinessId == Guid.Empty || string.IsNullOrWhiteSpace(dto.UserPhone))\n            {\n                Log.Warning(\"❌ Invalid catalog click log attempt: missing businessId or userPhone.\");\n                return ResponseResult.ErrorInfo(\"Required fields are missing (businessId, userPhone).\");\n            }\n\n            try\n            {\n                Guid? campaignSendLogId = null;\n                Guid? contactId = null;\n                bool followUpSent = false;\n\n                // STEP 1: Link campaign log via RefMessageId if available\n                if (!string.IsNullOrWhiteSpace(dto.RefMessageId))\n                {\n                    var sendLog = await _context.CampaignSendLogs\n                        .FirstOrDefaultAsync(x => x.MessageId == dto.RefMessageId);\n\n                    if (sendLog != null)\n                    {\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = DateTime.UtcNow;\n                        sendLog.ClickType = dto.CTAJourney ?? dto.ButtonText;\n                        campaignSendLogId = sendLog.Id;\n                    }\n                }\n\n                // STEP 2: Link or Create CRM Contact\n                if (!string.IsNullOrWhiteSpace(dto.UserPhone))\n                {\n                    var contact = await _context.Contacts\n                        .FirstOrDefaultAsync(c => c.PhoneNumber == dto.UserPhone && c.BusinessId == dto.BusinessId);\n\n                    if (contact == null)\n                    {\n                        contact = new Contact\n                        {\n                            Id = Guid.NewGuid(),\n                            Name = dto.UserName ?? \"Lead\",\n                            PhoneNumber = dto.UserPhone,\n                            BusinessId = dto.BusinessId,\n                            CreatedAt = DateTime.UtcNow\n                        };\n                        _context.Contacts.Add(contact);\n                        await _context.SaveChangesAsync();\n                    }\n\n                    contactId = contact.Id;\n\n                    // STEP 3: Auto follow-up if plan allows\n                    var business = await _context.Businesses\n                        .AsNoTracking()\n                        .FirstOrDefaultAsync(b => b.Id == dto.BusinessId);\n\n                    if (business?.BusinessPlanInfo?.Plan == PlanType.Advanced)\n                    {\n                        var message = $\"Hi {contact.Name ?? \"there\"}, how can I help you?\";\n                        await _messageService.SendFollowUpAsync(contact.PhoneNumber, message);\n                        followUpSent = true;\n                    }\n                }\n\n                // STEP 4: Save the click with all linked data\n                var log = new CatalogClickLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ProductId = dto.ProductId,\n                    UserId = dto.UserId,\n                    UserName = dto.UserName,\n                    UserPhone = dto.UserPhone,\n                    BotId = dto.BotId,\n                    CategoryBrowsed = dto.CategoryBrowsed,\n                    ProductBrowsed = dto.ProductBrowsed,\n                    CTAJourney = dto.CTAJourney,\n                    TemplateId = dto.TemplateId,\n                    ButtonText = dto.ButtonText,\n                    RefMessageId = dto.RefMessageId,\n                    ClickedAt = DateTime.UtcNow,\n                    CampaignSendLogId = campaignSendLogId,\n                    ContactId = contactId,\n                    FollowUpSent = followUpSent,\n                    LastInteractionType = \"Clicked\",\n                    PlanSnapshot = dto.PlanSnapshot\n                };\n\n                _context.CatalogClickLogs.Add(log);\n                await _context.SaveChangesAsync();\n\n                // STEP 5: Save into LeadTimeline (no await error)\n                await _leadTimelineService.AddFromCatalogClickAsync(log);\n\n                Log.Information(\"📊 Catalog click tracked: {BusinessId}, {UserPhone}, {CTA}\", dto.BusinessId, dto.UserPhone, dto.CTAJourney);\n                return ResponseResult.SuccessInfo(\"✅ Click tracked successfully.\", log.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log catalog click\");\n                return ResponseResult.ErrorInfo(\"❌ Error while tracking catalog click.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> GetRecentLogsAsync(int limit)\n        {\n            try\n            {\n                var logs = await _context.CatalogClickLogs\n                    .OrderByDescending(x => x.ClickedAt)\n                    .Take(limit)\n                    .ToListAsync();\n\n                return ResponseResult.SuccessInfo(\"Recent logs fetched.\", logs);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch recent catalog click logs\");\n                return ResponseResult.ErrorInfo(\"Failed to fetch logs.\", ex.Message);\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Services/ICatalogDashboardService.cs",
          "sha256": "9cac16574ec18c7343c13d49a28395b9ab04bf296e8d7b910b05d1cc88378a7d",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface ICatalogDashboardService\n    {\n        Task<CatalogDashboardSummaryDto> GetDashboardSummaryAsync(Guid businessId);\n        Task<List<TopProductDto>> GetTopClickedProductsAsync(Guid businessId, int topN = 5);\n        Task<List<CtaJourneyStatsDto>> GetCtaJourneyStatsAsync(Guid businessId);\n        Task<List<ProductCtaBreakdownDto>> GetProductCtaBreakdownAsync(Guid businessId);\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Services/ICatalogTrackingService.cs",
          "sha256": "b9ea119f807697f7e52cbea8b7c3aa4320c2ffe23326d076d1d1f0f9a2f12310",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface ICatalogTrackingService\n    {\n        Task<ResponseResult> LogClickAsync(CatalogClickLogDto dto);\n        Task<ResponseResult> GetRecentLogsAsync(int limit);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Services/IProductService.cs",
          "sha256": "23245f8c5da029c4146e515732f03b3e815636c1fddfec0f38a3a26355bdc1b1",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public interface IProductService\n    {\n        Task<ResponseResult> AddProductAsync(CreateProductDto dto);\n        Task<ResponseResult> RemoveProductAsync(Guid id, Guid businessId);\n        Task<ResponseResult> UpdateProductAsync(UpdateProductDto dto);\n        Task<ResponseResult> GetProductsByBusinessIdAsync(Guid businessId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Catalog/Services/ProductService.cs",
          "sha256": "b42253a9398257b4f84555e31c4423127d843bd60b73560f7730b71433d17fd0",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Catalog.Services\n{\n    public class ProductService : IProductService\n    {\n        private readonly AppDbContext _context;\n\n        public ProductService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<ResponseResult> AddProductAsync(CreateProductDto dto)\n        {\n            try\n            {\n                var exists = await _context.Products\n                    .AnyAsync(p => p.BusinessId == dto.BusinessId && p.Name == dto.Name);\n\n                if (exists)\n                {\n                    Log.Warning(\"❌ Duplicate product add attempt: {ProductName} for BusinessId: {BusinessId}\", dto.Name, dto.BusinessId);\n                    return ResponseResult.ErrorInfo(\"Product with this name already exists.\");\n                }\n\n                var newProduct = new Product\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    Name = dto.Name,\n                    Description = dto.Description,\n                    Price = dto.Price,\n                    Currency = dto.Currency,\n                    ImageUrl = dto.ImageUrl,\n                    IsActive = true,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _context.Products.AddAsync(newProduct);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Product created: {ProductName} ({ProductId})\", dto.Name, newProduct.Id);\n                return ResponseResult.SuccessInfo(\"✅ Product added successfully.\", newProduct.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to add product: {ProductName}\", dto.Name);\n                return ResponseResult.ErrorInfo(\"Failed to add product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> RemoveProductAsync(Guid id, Guid businessId)\n        {\n            try\n            {\n                var product = await _context.Products\n                    .FirstOrDefaultAsync(p => p.Id == id && p.BusinessId == businessId);\n\n                if (product == null)\n                {\n                    Log.Warning(\"❌ Attempted to delete non-existent product: {ProductId}\", id);\n                    return ResponseResult.ErrorInfo(\"Product not found.\");\n                }\n\n                _context.Products.Remove(product);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"🗑️ Product deleted: {ProductId}\", id);\n                return ResponseResult.SuccessInfo(\"🗑️ Product deleted.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to delete product: {ProductId}\", id);\n                return ResponseResult.ErrorInfo(\"Failed to delete product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> UpdateProductAsync(UpdateProductDto dto)\n        {\n            try\n            {\n                var product = await _context.Products\n                    .FirstOrDefaultAsync(p => p.Id == dto.Id && p.BusinessId == dto.BusinessId);\n\n                if (product == null)\n                {\n                    Log.Warning(\"❌ Attempted to update non-existent product: {ProductId}\", dto.Id);\n                    return ResponseResult.ErrorInfo(\"Product not found.\");\n                }\n\n                product.Name = dto.Name;\n                product.Description = dto.Description;\n                product.Price = dto.Price;\n                product.Currency = dto.Currency;\n                product.ImageUrl = dto.ImageUrl;\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Product updated: {ProductId}\", dto.Id);\n                return ResponseResult.SuccessInfo(\"✅ Product updated.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to update product: {ProductId}\", dto.Id);\n                return ResponseResult.ErrorInfo(\"Failed to update product.\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> GetProductsByBusinessIdAsync(Guid businessId)\n        {\n            try\n            {\n                var products = await _context.Products\n                    .Where(p => p.BusinessId == businessId && p.IsActive)\n                    .Select(p => new ProductDto\n                    {\n                        Id = p.Id,\n                        BusinessId = p.BusinessId,\n                        Name = p.Name,\n                        Description = p.Description,\n                        Price = p.Price,\n                        Currency = p.Currency,\n                        ImageUrl = p.ImageUrl,\n                        IsActive = p.IsActive\n                    })\n                    .ToListAsync();\n\n                return ResponseResult.SuccessInfo(\"Products fetched.\", products);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch products for BusinessId: {BusinessId}\", businessId);\n                return ResponseResult.ErrorInfo(\"Failed to fetch products.\", ex.Message);\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CrmAnalytics/Controllers/CrmAnalyticsController.cs",
          "sha256": "9148ea0201bfa24665b2fc92339cec7f58019baa66443aba80189bc1a4c9c833",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CrmAnalytics.Services;\nusing xbytechat.api.Shared;\nusing System.Security.Claims;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Controllers\n{\n    /// <summary>\n    /// Handles CRM analytics summary and trends.\n    /// </summary>\n    [ApiController]\n    [Route(\"api/crm\")]\n    public class CrmAnalyticsController : ControllerBase\n    {\n        private readonly ICrmAnalyticsService _crmAnalyticsService;\n\n        public CrmAnalyticsController(ICrmAnalyticsService crmAnalyticsService)\n        {\n            _crmAnalyticsService = crmAnalyticsService;\n        }\n\n        /// <summary>\n        /// Returns dashboard summary stats for the CRM.\n        /// </summary>\n        [HttpGet(\"summary\")]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessId = GetBusinessIdFromContext();\n            var result = await _crmAnalyticsService.GetSummaryAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"📊 CRM analytics loaded successfully.\", result));\n        }\n\n        /// <summary>\n        /// Returns contacts-added-over-time trend for graph.\n        /// </summary>\n        [HttpGet(\"trends/contacts\")]\n        public async Task<IActionResult> GetContactTrends()\n        {\n            var businessId = GetBusinessIdFromContext();\n            var result = await _crmAnalyticsService.GetContactTrendsAsync(businessId);\n            return Ok(ResponseResult.SuccessInfo(\"📈 Contact trends loaded successfully.\", result));\n        }\n\n        /// <summary>\n        /// Extracts the businessId (Guid) from current user claims.\n        /// </summary>\n        private Guid GetBusinessIdFromContext()\n        {\n            return Guid.TryParse(HttpContext.User.FindFirst(\"BusinessId\")?.Value, out var id)\n                ? id\n                : Guid.Empty;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CrmAnalytics/DTOs/ContactTrendsDto.cs",
          "sha256": "132d9271e14f9c3f2a65c9241917f67bc8129c91c7050c86a67df545c68419bc",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CrmAnalytics.DTOs\n{\n    /// <summary>\n    /// Represents the number of contacts added on a specific date.\n    /// Used for trend charting on the CRM dashboard.\n    /// </summary>\n    public class ContactTrendsDto\n    {\n        public string Date { get; set; } // Format: yyyy-MM-dd\n        public int Count { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CrmAnalytics/DTOs/CrmAnalyticsSummaryDto.cs",
          "sha256": "73027ff6ddc0b680b03714267bbf642053cdc28f2d97c16b593a3321186ab9d9",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CrmAnalytics.DTOs\n{\n    public class CrmAnalyticsSummaryDto\n    {\n        public int TotalContacts { get; set; }\n        public int TaggedContacts { get; set; }\n        public int ActiveReminders { get; set; }\n        public int CompletedReminders { get; set; }\n        public int TotalNotes { get; set; }\n        public int LeadsWithTimeline { get; set; }\n        public int NewContactsToday { get; set; }\n        public int NotesAddedToday { get; set; }\n        public DateTime? LastContactAddedAt { get; set; }\n        public DateTime? LastReminderCompletedAt { get; set; }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/CrmAnalytics/Services/CrmAnalyticsService.cs",
          "sha256": "8fae1f725576dc5f6402559df557282ba8991f65bb324b614a65b4e9225167c5",
          "language": "csharp",
          "content": "using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CrmAnalytics.DTOs;\nusing xbytechat.api.Features.CrmAnalytics.Services;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Services\n{\n    /// <summary>\n    /// Provides implementation for CRM analytics calculations.\n    /// Gathers contact, tag, note, and reminder metrics for the dashboard.\n    /// </summary>\n    public class CrmAnalyticsService : ICrmAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public CrmAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        /// <summary>\n        /// Generates a summarized snapshot of CRM data for the given business.\n        /// </summary>\n        /// <param name=\"businessId\">The unique ID of the business</param>\n        /// <returns>CrmAnalyticsSummaryDto containing insights</returns>\n        public async Task<CrmAnalyticsSummaryDto> GetSummaryAsync(Guid businessId)\n        {\n            var today = DateTime.UtcNow.Date;\n\n            var totalContacts = await _context.Contacts\n                .CountAsync(c => c.BusinessId == businessId);\n\n            var taggedContacts = await _context.Contacts\n                .Where(c => c.BusinessId == businessId && c.Tags.Any())\n                .CountAsync();\n\n            var activeReminders = await _context.Reminders\n                .CountAsync(r => r.BusinessId == businessId && r.Status == \"Pending\");\n\n            var completedReminders = await _context.Reminders\n                .CountAsync(r => r.BusinessId == businessId && r.Status == \"Completed\");\n\n            var totalNotes = await _context.Notes\n                .CountAsync(n => n.BusinessId == businessId);\n\n            var leadsWithTimeline = await _context.LeadTimelines\n                .Where(t => t.BusinessId == businessId)\n                .Select(t => t.ContactId)\n                .Distinct()\n                .CountAsync();\n\n            var newContactsToday = await _context.Contacts\n                .CountAsync(c => c.BusinessId == businessId && c.CreatedAt.Date == today);\n\n            var notesAddedToday = await _context.Notes\n                .CountAsync(n => n.BusinessId == businessId && n.CreatedAt.Date == today);\n\n            var lastContactAddedAt = await _context.Contacts\n                .Where(c => c.BusinessId == businessId)\n                .OrderByDescending(c => c.CreatedAt)\n                .Select(c => (DateTime?)c.CreatedAt)\n                .FirstOrDefaultAsync();\n\n            var lastReminderCompletedAt = await _context.Reminders\n                .Where(r => r.BusinessId == businessId && r.Status == \"Completed\")\n                .OrderByDescending(r => r.CompletedAt)\n                .Select(r => (DateTime?)r.CompletedAt)\n                .FirstOrDefaultAsync();\n\n            return new CrmAnalyticsSummaryDto\n            {\n                TotalContacts = totalContacts,\n                TaggedContacts = taggedContacts,\n                ActiveReminders = activeReminders,\n                CompletedReminders = completedReminders,\n                TotalNotes = totalNotes,\n                LeadsWithTimeline = leadsWithTimeline,\n                NewContactsToday = newContactsToday,\n                NotesAddedToday = notesAddedToday,\n                LastContactAddedAt = lastContactAddedAt,\n                LastReminderCompletedAt = lastReminderCompletedAt\n            };\n        }\n        public async Task<List<ContactTrendsDto>> GetContactTrendsAsync(Guid businessId)\n        {\n            var trends = await _context.Contacts\n                .Where(c => c.BusinessId == businessId)\n                .GroupBy(c => c.CreatedAt.Date)\n                .OrderBy(g => g.Key)\n                .Select(g => new ContactTrendsDto\n                {\n                    Date = g.Key.ToString(\"yyyy-MM-dd\"),\n                    Count = g.Count()\n                })\n                .ToListAsync();\n\n            return trends;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CrmAnalytics/Services/ICrmAnalyticsService.cs",
          "sha256": "24d70810ed26415792ab48592900090d8d1b7682d926e46f4bdc4595b24c5659",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.CrmAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.CrmAnalytics.Services\n{\n    /// <summary>\n    /// Defines the contract for CRM Analytics services.\n    /// Handles lead-level analytics, summary metrics, and dashboard insights.\n    /// </summary>\n    public interface ICrmAnalyticsService\n    {\n        /// <summary>\n        /// Returns a summarized view of CRM statistics for a specific business.\n        /// This is used to power the CRM analytics dashboard.\n        /// </summary>\n        /// <param name=\"businessId\">The unique identifier of the business (tenant).</param>\n        /// <returns>A summary DTO containing contact, tag, note, and reminder insights.</returns>\n        Task<CrmAnalyticsSummaryDto> GetSummaryAsync(Guid businessId);\n        Task<List<ContactTrendsDto>> GetContactTrendsAsync(Guid businessId);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Controllers/CTAFlowController.cs",
          "sha256": "34b48884230fe58496bf32d324af8a7e69d506ecb82c14917bf48ea328079922",
          "language": "csharp",
          "content": "// 📄 File: Features/CTAFlowBuilder/Controllers/CTAFlowController.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Helpers;\n\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Controllers\n{\n    [ApiController]\n    [Route(\"api/cta-flow\")]\n    public class CTAFlowController : ControllerBase\n    {\n        private readonly ICTAFlowService _flowService;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly ITrackingService _trackingService;\n        public CTAFlowController(ICTAFlowService flowService, IMessageEngineService messageEngineService, ITrackingService trackingService)\n        {\n            _flowService = flowService;\n            _messageEngineService = messageEngineService;\n            _trackingService = trackingService;\n        }\n\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> CreateFlow([FromBody] CreateFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n            var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n            return Ok(new { flowId = id });\n        }\n\n        [HttpPost(\"publish\")]\n        public async Task<IActionResult> PublishFlow([FromBody] List<FlowStepDto> steps)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n            var result = await _flowService.PublishFlowAsync(businessId, steps, createdBy);\n            if (!result.Success)\n                return BadRequest(result.Message);\n\n            return Ok(\"✅ Flow published successfully.\");\n        }\n\n        [HttpGet(\"current\")]\n        public async Task<IActionResult> GetFlow()\n        {\n            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdHeader, out var businessId))\n                return BadRequest(\"❌ Invalid or missing BusinessId header.\");\n\n            var flow = await _flowService.GetFlowByBusinessAsync(businessId);\n\n            // ✅ Always return 200 even if flow is null\n            return Ok(flow);\n        }\n\n        [HttpGet(\"draft\")]\n        public async Task<IActionResult> GetDraftFlow()\n        {\n            var businessIdHeader = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdHeader, out var businessId))\n                return BadRequest(\"❌ Invalid or missing BusinessId header.\");\n\n            var draft = await _flowService.GetDraftFlowByBusinessAsync(businessId);\n            if (draft == null)\n                return NotFound(\"❌ No draft flow found.\");\n\n            return Ok(draft);\n        }\n\n        [HttpGet(\"by-id/{id}\")]\n        public async Task<IActionResult> GetFlowById(Guid id)\n        {\n            var flow = await _flowService.GetVisualFlowByIdAsync(id);\n            if (flow == null) return NotFound(\"❌ Flow not found\");\n            return Ok(flow);\n        }\n\n        //[HttpGet(\"match\")]\n        //public async Task<IActionResult> MatchButton([FromQuery] string text, [FromQuery] string type)\n        //{\n        //    var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n\n        //    var step = await _flowService.MatchStepByButtonAsync(businessId, text, type, currentTemplateName,);\n        //    if (step == null)\n        //        return NotFound(\"❌ No matching step found.\");\n\n        //    return Ok(new\n        //    {\n        //        step.TemplateToSend,\n        //        step.TriggerButtonText,\n        //        step.TriggerButtonType\n        //    });\n        //}\n\n        [HttpGet(\"match\")]\n        public async Task<IActionResult> MatchButton(\n    [FromQuery] string text,\n    [FromQuery] string type,\n    [FromQuery] string currentTemplateName,\n    [FromQuery] Guid? campaignId) // Optional\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value!);\n\n            var step = await _flowService.MatchStepByButtonAsync(\n                businessId,\n                text,\n                type,\n                currentTemplateName,\n                campaignId\n            );\n\n            if (step == null)\n                return NotFound(\"❌ No matching step found.\");\n\n            return Ok(new\n            {\n                step.TemplateToSend,\n                step.TriggerButtonText,\n                step.TriggerButtonType\n            });\n        }\n\n        [HttpPost(\"save-visual\")]\n        public async Task<IActionResult> SaveVisualFlow([FromBody] SaveVisualFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            Log.Information(\"📦 Saving CTA Flow: {FlowName} by {User}\", dto.FlowName, createdBy);\n\n            var result = await _flowService.SaveVisualFlowAsync(dto, businessId, createdBy);\n            if (!result.Success)\n            {\n                Log.Error(\"❌ Failed to save flow. Error: {Error}. DTO: {@Dto}\", result.ErrorMessage, dto);\n                return StatusCode(500, new\n                {\n                    message = \"❌ Failed to save flow\",\n                    error = result.ErrorMessage,\n                    // skipped = result.SkippedNodes ?? 0\n                });\n            }\n\n            return Ok(new\n            {\n                message = \"✅ Flow saved successfully\"\n            });\n        }\n\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> DeleteFlow(Guid id)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var result = await _flowService.DeleteFlowAsync(id, businessId);\n\n            return result.Success\n                ? Ok(new { message = result.Message })\n                : BadRequest(new { message = result.Message });\n        }\n        [HttpGet(\"all-published\")]\n        public async Task<IActionResult> GetPublishedFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var flows = await _flowService.GetAllPublishedFlowsAsync(businessId);\n            return Ok(flows);\n        }\n        [HttpGet(\"all-draft\")]\n        public async Task<IActionResult> GetAllDraftFlows()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var flows = await _flowService.GetAllDraftFlowsAsync(businessId);\n            return Ok(flows);\n        }\n\n        [HttpPost(\"execute-visual\")]\n        public async Task<IActionResult> ExecuteVisualFlowAsync(\n            [FromQuery] Guid nextStepId,\n            [FromQuery] Guid trackingLogId)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var result = await _flowService.ExecuteVisualFlowAsync(businessId, nextStepId, trackingLogId);\n            if (result.Success)\n                return Ok(result);\n            else\n                return BadRequest(result);\n        }\n\n        [HttpPost(\"create-config\")]\n        public async Task<IActionResult> CreateConfigFlow([FromBody] CreateFlowDto dto)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var createdBy = User.FindFirst(\"name\")?.Value ?? \"system\";\n\n            if (string.IsNullOrWhiteSpace(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing businessId claim.\");\n\n            try\n            {\n                var id = await _flowService.CreateFlowWithStepsAsync(dto, businessId, createdBy);\n\n                return Ok(new\n                {\n                    flowId = id,\n                    message = \"✅ Flow config created successfully.\"\n                });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    error = \"❌ Failed to create flow config.\",\n                    details = ex.Message\n                });\n            }\n        }\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs",
          "sha256": "c23400a06816a2adc8886fa8d20dd77f12b8b93f993b5a772d81cb12d6612a1f",
          "language": "csharp",
          "content": "// 📄 File: xbytechat.api/Features/CTAFlowBuilder/DTOs/CreateFlowDto.cs\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CreateFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowStepDto> Steps { get; set; } = new();\n        public bool IsPublished { get; set; } = false; // ✅ NEW: Draft vs Published\n    }\n\n    public class FlowStepDto\n    {\n        public string TriggerButtonText { get; set; } = string.Empty;\n        public string TriggerButtonType { get; set; } = string.Empty;\n        public string TemplateToSend { get; set; } = string.Empty;\n        public int StepOrder { get; set; }\n        public List<ButtonLinkDto> ButtonLinks { get; set; } = new();\n    }\n\n    public class ButtonLinkDto\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid NextStepId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAButtonClickDto.cs",
          "sha256": "da355d853887193eb1d2b3e3fafcf076e6df764f0220cbf10f5c050d42b91df6",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAButtonClickDto\n    {\n        [Required]\n        public string ButtonText { get; set; } = string.Empty;\n\n        [Required]\n        public string ButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\", \"url\", etc.\n\n        [Required]\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/CTAFlowExecutionRequest.cs",
          "sha256": "43fc0e1c1674d188b1a5385539f1314176ff81449d4547ea6665df9909a223bb",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class CTAFlowExecutionRequest\n    {\n        public string ButtonText { get; set; } = string.Empty;\n        public string ButtonType { get; set; } = \"cta\";\n        public string RecipientNumber { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowEdgeDto.cs",
          "sha256": "27e76e22a8aba502d5727d9959bec58ea011d2a1f0d4388a141bfa8108043eea",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowEdgeDto\n    {\n        public string FromNodeId { get; set; } = string.Empty;\n        public string ToNodeId { get; set; } = string.Empty;\n        public string? SourceHandle { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/FlowNodeDto.cs",
          "sha256": "5b1f9625b329b229575e5859cfacacaa1520238bff1573e6a34b34c4c85120b3",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class FlowNodeDto\n    {\n        public string Id { get; set; } = string.Empty;\n\n        public string TemplateName { get; set; } = string.Empty;\n        public string? TemplateType { get; set; } // ✅ e.g., \"image_template\", \"text_template\"\n        public string MessageBody { get; set; } = string.Empty;\n        public string? TriggerButtonText { get; set; }\n        public string? TriggerButtonType { get; set; }\n        public float PositionX { get; set; }\n        public float PositionY { get; set; }\n\n        public string? RequiredTag { get; set; }         \n        public string? RequiredSource { get; set; }      \n        public List<LinkButtonDto> Buttons { get; set; } = new();\n        //(for flow trigger mapping)\n        // ✅ NEW: ReactFlow expects this structure\n        public PositionDto Position => new PositionDto\n        {\n            x = PositionX,\n            y = PositionY\n        };\n        public class PositionDto\n        {\n            public float x { get; set; }\n            public float y { get; set; }\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/LinkButtonDto.cs",
          "sha256": "8949ae08a8a3c33a84886e9c0696379b17a6d894bf887f390ac7f0125a785bf5",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class LinkButtonDto\n    {\n        public string Text { get; set; } = string.Empty;\n\n        public string? Type { get; set; } // 🔥 e.g., \"URL\", \"QUICK_REPLY\"\n        public string? SubType { get; set; } // 🔥 e.g., \"STATIC\", \"DYNAMIC\"\n        public string? Value { get; set; } // 🔥 the parameter or url or payload\n\n        public string? TargetNodeId { get; set; } // 🔄 used for flow linking\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/SaveVisualFlowDto.cs",
          "sha256": "7de59d222a97efeaf9dc23dea2ef351d852087539cec12e7c946b02e11f1bd21",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class SaveVisualFlowDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n        public Guid? CampaignId { get; set; } // ✅ Add this line\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowLoadDto.cs",
          "sha256": "10bfe378ffd4c8fb74a0746f2abafec88897072e7a974d680396bde281aaf4af",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowLoadDto\n    {\n        public string FlowName { get; set; } = string.Empty;\n        public List<FlowNodeDto> Nodes { get; set; } = new();\n        public List<FlowEdgeDto> Edges { get; set; } = new();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/DTOs/VisualFlowSummaryDto.cs",
          "sha256": "70dcedd3219a474a4b38927e0f0fd4ff3e21ba16632d409f146a9d0d60d685a5",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.DTOs\n{\n    public class VisualFlowSummaryDto\n    {\n        public Guid Id { get; set; }\n        public string FlowName { get; set; } = string.Empty;\n        public bool IsPublished { get; set; }\n        public DateTime CreatedAt { get; set; }\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowClickLog.cs",
          "sha256": "ecbd408e613e8ef88e2bb39fdf60bc188163e209d8242317203dfb2bff8cebb8",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class CTAFlowClickLog\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs",
          "sha256": "3f05a1457051adfc7e66c759040348f1288066c7abcf4c570c0b2fd5c98da19e",
          "language": "csharp",
          "content": "// 📄 File: xbytechat.api/Features/CTAFlowBuilder/Models/CTAFlowConfig.cs\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a complete flow configuration for a business, such as \"Interested Journey\".\n    /// </summary>\n    public class CTAFlowConfig\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FlowName { get; set; } = string.Empty;\n\n        public bool IsActive { get; set; } = true;\n\n        public bool IsPublished { get; set; } = false; // ✅ NEW: Support draft/published\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public string? CreatedBy { get; set; }\n        public DateTime? UpdatedAt { get; set; }  // ✅ Add this line\n\n        // 🔁 Navigation to steps\n        public ICollection<CTAFlowStep> Steps { get; set; } = new List<CTAFlowStep>();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Models/CTAFlowStep.cs",
          "sha256": "1469836c27765675fb8f7ea910ffabd76fdc9ec583c0e3e3c0f9a986f6fb83db",
          "language": "csharp",
          "content": "// 📄 File: Features/CTAFlowBuilder/Models/CTAFlowStep.cs\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Represents a single step in a CTA flow, triggered by a button.\n    /// </summary>\n    public class CTAFlowStep\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid CTAFlowConfigId { get; set; }\n\n        [ForeignKey(nameof(CTAFlowConfigId))]\n        public CTAFlowConfig Flow { get; set; } = null!;\n\n        public string TriggerButtonText { get; set; } = string.Empty;\n\n        public string TriggerButtonType { get; set; } = \"cta\"; // e.g., \"quick_reply\"\n\n        public string TemplateToSend { get; set; } = string.Empty;\n\n        public int StepOrder { get; set; }\n\n        public string? RequiredTag { get; set; }        // e.g., \"interested\"\n        public string? RequiredSource { get; set; }     // e.g., \"ads\", \"qr\", \"manual\"\n\n        // 🔀 Multiple buttons linking to different steps\n        public List<FlowButtonLink> ButtonLinks { get; set; } = new();\n\n        public float? PositionX { get; set; }\n        public float? PositionY { get; set; }\n        public string? TemplateType { get; set; }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowButtonLink.cs",
          "sha256": "2765de4d4c1bc355e6487c9d13628a9bdaa79ed4134a4e15f70874b1e91d673b",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    public class FlowButtonLink\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public string ButtonText { get; set; } = string.Empty;\n        public Guid? NextStepId { get; set; }\n        // ✅ NEW FIELDS FOR FUTURE AUTOMATION\n        public string ButtonType { get; set; } = \"QUICK_REPLY\";    // e.g., URL, QUICK_REPLY, FLOW\n        public string ButtonSubType { get; set; } = \"\";            // Optional: e.g., \"Catalog\", \"PricingCTA\"\n        public string ButtonValue { get; set; } = \"\";              // e.g., URL or deep link\n\n        // Optional FK back to Step if needed\n        public Guid CTAFlowStepId { get; set; }\n        public CTAFlowStep? Step { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Models/FlowExecutionLog.cs",
          "sha256": "4795bd092f585ec5ca9f33e869dcc93c8e681b341e9b1ad92b1e8ad93b6133d2",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Models\n{\n    /// <summary>\n    /// Logs when a visual flow step is executed (useful for analytics, debugging, audit).\n    /// </summary>\n    public class FlowExecutionLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n\n        public Guid? FlowId { get; set; }\n\n        public Guid? TrackingLogId { get; set; }\n\n        public string? ContactPhone { get; set; }\n\n        public string? TriggeredByButton { get; set; }\n\n        public string? TemplateName { get; set; }\n\n        public string? TemplateType { get; set; }\n\n        public bool Success { get; set; }\n\n        public string? ErrorMessage { get; set; }\n\n        public string? RawResponse { get; set; }\n\n        public DateTime ExecutedAt { get; set; } = DateTime.UtcNow;\n\n       \n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Services/CTAFlowService.cs",
          "sha256": "038c3b5ef822e2ea370a1631e012995f06f1eba95d49429efa435ab669a5022b",
          "language": "csharp",
          "content": "// 📄 File: Features/CTAFlowBuilder/Services/CTAFlowService.cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public class CTAFlowService : ICTAFlowService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public CTAFlowService(AppDbContext context, IMessageEngineService messageEngineService,\n            IWhatsAppTemplateFetcherService templateFetcherService\n            )\n        {\n            _context = context;\n            _messageEngineService = messageEngineService;\n            _templateFetcherService = templateFetcherService;\n        }\n\n        public async Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy)\n        {\n            var flow = new CTAFlowConfig\n            {\n                Id = Guid.NewGuid(),\n                FlowName = dto.FlowName,\n                BusinessId = businessId,\n                CreatedAt = DateTime.UtcNow,\n                CreatedBy = createdBy,\n                IsPublished = dto.IsPublished\n            };\n\n            foreach (var stepDto in dto.Steps)\n            {\n                var step = new CTAFlowStep\n                {\n                    Id = Guid.NewGuid(),\n                    CTAFlowConfigId = flow.Id,\n                    TriggerButtonText = stepDto.TriggerButtonText,\n                    TriggerButtonType = stepDto.TriggerButtonType,\n                    TemplateToSend = stepDto.TemplateToSend,\n                    StepOrder = stepDto.StepOrder,\n                    ButtonLinks = stepDto.ButtonLinks?.Select(link => new FlowButtonLink\n                    {\n                        ButtonText = link.ButtonText,\n                        NextStepId = link.NextStepId\n                    }).ToList() ?? new List<FlowButtonLink>()\n                };\n\n                flow.Steps.Add(step);\n            }\n\n            _context.CTAFlowConfigs.Add(flow);\n            await _context.SaveChangesAsync();\n\n            return flow.Id;\n        }\n\n        public async Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Include(f => f.Steps.OrderBy(s => s.StepOrder))\n                .Where(f => f.BusinessId == businessId && f.IsActive && f.IsPublished)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Include(f => f.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .Where(f => f.BusinessId == businessId && f.IsPublished == false)\n                .OrderByDescending(f => f.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n\n\n        public async Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId)\n        {\n            return await _context.CTAFlowSteps\n                .Where(s => s.CTAFlowConfigId == flowId)\n                .OrderBy(s => s.StepOrder)\n                .ToListAsync();\n        }\n\n        public async Task<CTAFlowStep?> MatchStepByButtonAsync(\n            Guid businessId,\n            string buttonText,\n            string buttonType,\n            string TemplateName,\n            Guid? campaignId = null)\n        {\n            var normalizedButtonText = buttonText?.Trim().ToLower() ?? \"\";\n            var normalizedButtonType = buttonType?.Trim().ToLower() ?? \"\";\n            var normalizedTemplateName = TemplateName?.Trim().ToLower() ?? \"\";\n\n            // 1️⃣ Try campaign-specific override\n            if (campaignId.HasValue)\n            {\n                var overrideStep = await _context.CampaignFlowOverrides\n                    .Where(o =>\n                        o.CampaignId == campaignId &&\n                        o.ButtonText.ToLower() == normalizedButtonText &&\n                        o.TemplateName.ToLower() == normalizedTemplateName)\n                    .FirstOrDefaultAsync();\n\n                if (overrideStep != null)\n                {\n                    var overrideTemplate = overrideStep.OverrideNextTemplate?.ToLower();\n\n                    var matched = await _context.CTAFlowSteps\n                        .Include(s => s.Flow)\n                        .FirstOrDefaultAsync(s => s.TemplateToSend.ToLower() == overrideTemplate);\n\n                    if (matched != null)\n                    {\n                        Log.Information(\"🔁 Override matched: Template '{Template}' → Step '{StepId}'\", overrideStep.OverrideNextTemplate, matched.Id);\n                        return matched;\n                    }\n\n                    Log.Warning(\"⚠️ Override found for button '{Button}' but no matching step for template '{Template}'\", normalizedButtonText, overrideStep.OverrideNextTemplate);\n                }\n\n                else\n                {\n                    Log.Information(\"🟡 No campaign override found for button '{Button}' on template '{Template}'\", normalizedButtonText, normalizedTemplateName);\n                }\n            }\n\n            // 2️⃣ Fallback to standard flow logic\n            var fallbackStep = await _context.CTAFlowSteps\n                .Include(s => s.Flow)\n                .Where(s =>\n                    s.Flow.BusinessId == businessId &&\n                    s.Flow.IsActive &&\n                    s.Flow.IsPublished &&\n                    s.TriggerButtonText.ToLower() == normalizedButtonText &&\n                    s.TriggerButtonType.ToLower() == normalizedButtonType)\n                .FirstOrDefaultAsync();\n\n            if (fallbackStep != null)\n            {\n                Log.Information(\"✅ Fallback flow step matched: StepId = {StepId}, Flow = {FlowName}\", fallbackStep.Id, fallbackStep.Flow?.FlowName);\n            }\n            else\n            {\n                Log.Warning(\"❌ No fallback step matched for button '{ButtonText}' of type '{ButtonType}' in BusinessId: {BusinessId}\", normalizedButtonText, normalizedButtonType, businessId);\n            }\n\n            return fallbackStep;\n        }\n\n\n\n        public async Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy)\n        {\n            try\n            {\n                // 🔥 1. Remove existing published flow for this business\n                var existingFlows = await _context.CTAFlowConfigs\n                    .Where(f => f.BusinessId == businessId && f.IsPublished)\n                    .ToListAsync();\n\n                if (existingFlows.Any())\n                {\n                    _context.CTAFlowConfigs.RemoveRange(existingFlows);\n                }\n\n                // 🌱 2. Create new flow config\n                var flowConfig = new CTAFlowConfig\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    FlowName = \"Published Flow - \" + DateTime.UtcNow.ToString(\"yyyyMMdd-HHmm\"),\n                    IsPublished = true,\n                    IsActive = true,\n                    CreatedBy = createdBy,\n                    CreatedAt = DateTime.UtcNow,\n                    Steps = new List<CTAFlowStep>()\n                };\n\n                // 🔁 3. Convert each step DTO to model\n                foreach (var stepDto in steps)\n                {\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = flowConfig.Id,\n                        TriggerButtonText = stepDto.TriggerButtonText,\n                        TriggerButtonType = stepDto.TriggerButtonType,\n                        TemplateToSend = stepDto.TemplateToSend,\n                        StepOrder = stepDto.StepOrder,\n                        ButtonLinks = stepDto.ButtonLinks.Select(bl => new FlowButtonLink\n                        {\n                            Id = Guid.NewGuid(),\n                            ButtonText = bl.ButtonText,\n                            NextStepId = bl.NextStepId,\n                        }).ToList()\n                    };\n\n                    flowConfig.Steps.Add(step);\n                }\n\n                // 💾 4. Save to DB\n                await _context.CTAFlowConfigs.AddAsync(flowConfig);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Flow published successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error while publishing CTA flow.\");\n                return ResponseResult.ErrorInfo(\"❌ Could not publish flow.\");\n            }\n        }\n        public async Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy)\n        {\n            try\n            {\n                Log.Information(\"🧠 SaveVisualFlow started | FlowName: {FlowName} | BusinessId: {BusinessId}\", dto.FlowName, businessId);\n\n                if (dto.Nodes == null || !dto.Nodes.Any())\n                {\n                    Log.Warning(\"❌ No nodes found in flow. Aborting save.\");\n                    return ResponseResult.ErrorInfo(\"❌ Cannot save an empty flow. Please add at least one step.\");\n                }\n\n                var existing = await _context.CTAFlowConfigs\n                    .FirstOrDefaultAsync(f => f.FlowName == dto.FlowName && f.BusinessId == businessId);\n\n                if (existing == null)\n                {\n                    existing = new CTAFlowConfig\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FlowName = dto.FlowName,\n                        CreatedBy = createdBy,\n                        CreatedAt = DateTime.UtcNow,\n                        UpdatedAt = DateTime.UtcNow,\n                        IsActive = true,\n                        IsPublished = dto.IsPublished\n                    };\n                    _context.CTAFlowConfigs.Add(existing);\n                    Log.Information(\"✅ New FlowConfig created with ID: {Id}\", existing.Id);\n                }\n                else\n                {\n                    var oldSteps = await _context.CTAFlowSteps\n                        .Where(s => s.CTAFlowConfigId == existing.Id)\n                        .Include(s => s.ButtonLinks)\n                        .ToListAsync();\n\n                    foreach (var step in oldSteps)\n                        _context.FlowButtonLinks.RemoveRange(step.ButtonLinks);\n\n                    _context.CTAFlowSteps.RemoveRange(oldSteps);\n                    existing.IsPublished = dto.IsPublished;\n                    existing.UpdatedAt = DateTime.UtcNow;\n                }\n\n                var stepMap = new Dictionary<string, CTAFlowStep>();\n\n                foreach (var (node, index) in dto.Nodes.Select((n, i) => (n, i)))\n                {\n                    if (string.IsNullOrWhiteSpace(node.Id))\n                        continue;\n\n                    var step = new CTAFlowStep\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowConfigId = existing.Id,\n                        StepOrder = index,\n                        TemplateToSend = node.TemplateName,\n                        TemplateType = node.TemplateType ?? \"UNKNOWN\",\n                        TriggerButtonText = node.TriggerButtonText ?? \"\",\n                        TriggerButtonType = node.TriggerButtonType ?? \"cta\",\n                        PositionX = node.PositionX == 0 ? Random.Shared.Next(100, 600) : node.PositionX,\n                        PositionY = node.PositionY == 0 ? Random.Shared.Next(100, 400) : node.PositionY,\n                        ButtonLinks = new List<FlowButtonLink>()\n                    };\n\n                    stepMap[node.Id] = step;\n                    _context.CTAFlowSteps.Add(step);\n                }\n\n                foreach (var edge in dto.Edges)\n                {\n                    if (!stepMap.TryGetValue(edge.FromNodeId, out var fromStep) ||\n                        !stepMap.TryGetValue(edge.ToNodeId, out var toStep))\n                        continue;\n\n                    var sourceNode = dto.Nodes.FirstOrDefault(n => n.Id == edge.FromNodeId);\n                    var button = sourceNode?.Buttons?.FirstOrDefault(b => b.Text == edge.SourceHandle);\n                    var fallbackText = edge.SourceHandle ?? \"[unnamed]\";\n\n                    var link = new FlowButtonLink\n                    {\n                        Id = Guid.NewGuid(),\n                        CTAFlowStepId = fromStep.Id,\n                        ButtonText = fallbackText,\n                        ButtonType = button?.Type ?? \"QUICK_REPLY\",\n                        ButtonSubType = button?.SubType ?? \"\",\n                        ButtonValue = button?.Value ?? \"\",\n                        NextStepId = toStep.Id\n                    };\n\n                    _context.FlowButtonLinks.Add(link); // ✅ Force EF to track this link properly\n                    fromStep.ButtonLinks.Add(link);     // ✅ Optional if navigation is used\n\n                    toStep.TriggerButtonText = fallbackText;\n                    toStep.TriggerButtonType = button?.Type ?? \"quick_reply\";\n                }\n\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Flow '{Flow}' saved | Steps: {StepCount} | Links: {LinkCount}\",\n                    dto.FlowName, stepMap.Count, stepMap.Values.Sum(s => s.ButtonLinks.Count));\n\n                return ResponseResult.SuccessInfo(\"✅ Flow saved successfully.\");\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception while saving flow\");\n                return ResponseResult.ErrorInfo(\"❌ Internal error while saving flow.\");\n            }\n        }\n\n        public async Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid flowId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Include(c => c.Steps)\n                    .ThenInclude(s => s.ButtonLinks)\n                .FirstOrDefaultAsync(c => c.Id == flowId && c.IsActive);\n\n            if (flow == null) return null;\n\n            var businessId = flow.BusinessId;\n\n            // ✅ Pre-fetch templates from Meta\n            var templateMap = new Dictionary<string, TemplateMetadataDto>();\n\n            foreach (var step in flow.Steps)\n            {\n                if (!string.IsNullOrWhiteSpace(step.TemplateToSend) && !templateMap.ContainsKey(step.TemplateToSend))\n                {\n                    try\n                    {\n                        var template = await _templateFetcherService.GetTemplateByNameAsync(\n                            businessId,\n                            step.TemplateToSend,\n                            includeButtons: true\n                        );\n\n                        if (template != null)\n                            templateMap[step.TemplateToSend] = template;\n                    }\n                    catch (Exception ex)\n                    {\n                        Log.Warning(ex, \"⚠️ Failed to fetch template from Meta for {Template}\", step.TemplateToSend);\n                    }\n                }\n            }\n\n            // ✅ Map into ReactFlow-compatible structure\n            var nodes = flow.Steps.Select(step =>\n            {\n                var template = templateMap.GetValueOrDefault(step.TemplateToSend);\n\n                return new FlowNodeDto\n                {\n                    Id = step.Id.ToString(),\n                    TemplateName = step.TemplateToSend,\n                    MessageBody = template?.Body ?? \"Message body preview...\",\n                    TriggerButtonText = step.TriggerButtonText,\n                    TriggerButtonType = step.TriggerButtonType,\n                    PositionX = step.PositionX ?? 100,\n                    PositionY = step.PositionY ?? 100,\n\n                    // ✅ NEW: Include conditional logic\n                    RequiredTag = step.RequiredTag,\n                    RequiredSource = step.RequiredSource,\n\n                    Buttons = step.ButtonLinks.Select(link => new LinkButtonDto\n                    {\n                        Text = link.ButtonText,\n                        TargetNodeId = link.NextStepId.ToString()\n                    }).ToList()\n                             .Concat((template?.ButtonParams ?? new List<ButtonMetadataDto>())\n                                 .Where(btn => !step.ButtonLinks.Any(bl => bl.ButtonText == btn.Text))\n                                 .Select(btn => new LinkButtonDto\n                                 {\n                                     Text = btn.Text,\n                                     TargetNodeId = null\n                                 })).ToList()\n                };\n\n            }).ToList();\n\n            return new SaveVisualFlowDto\n            {\n                FlowName = flow.FlowName,\n                IsPublished = flow.IsPublished,\n                Nodes = nodes,\n                Edges = flow.Steps\n                        .SelectMany(step =>\n                            step.ButtonLinks.Select(link => new FlowEdgeDto\n                            {\n                                FromNodeId = step.Id.ToString(),\n                                ToNodeId = link.NextStepId.ToString(),\n                                SourceHandle = link.ButtonText // ✅ important\n                            })\n                        ).ToList()\n\n            };\n        }\n\n\n        public async Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId)\n        {\n            var flow = await _context.CTAFlowConfigs\n                .Where(f => f.Id == id && f.BusinessId == businessId)\n                .FirstOrDefaultAsync();\n\n            if (flow == null)\n                return ResponseResult.ErrorInfo(\"❌ Flow not found or does not belong to you.\");\n\n            _context.CTAFlowConfigs.Remove(flow);\n            await _context.SaveChangesAsync();\n\n            return ResponseResult.SuccessInfo(\"✅ Flow deleted successfully.\");\n        }\n        public async Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && f.IsPublished)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    IsPublished = f.IsPublished,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId)\n        {\n            return await _context.CTAFlowConfigs\n                .Where(f => f.BusinessId == businessId && !f.IsPublished && f.IsActive)\n                .OrderByDescending(f => f.CreatedAt)\n                .Select(f => new VisualFlowSummaryDto\n                {\n                    Id = f.Id,\n                    FlowName = f.FlowName,\n                    CreatedAt = f.CreatedAt,\n                    IsPublished = f.IsPublished\n                })\n                .ToListAsync();\n        }\n\n        public async Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber)\n        {\n            // Log.Information(\"🚀 Executing follow-up for BusinessId: {BusinessId}, CurrentStepId: {StepId}\", businessId);\n            if (currentStep == null)\n            {\n                Log.Warning(\"⚠️ Cannot execute follow-up. Current step is null.\");\n                return ResponseResult.ErrorInfo(\"Current step not found.\");\n            }\n\n            // 🧠 Step: Look through all button links for a valid NextStepId\n            var nextLink = currentStep.ButtonLinks.FirstOrDefault(link => link.NextStepId != null);\n\n            if (nextLink == null)\n            {\n                Log.Information(\"ℹ️ No NextStepId defined in any ButtonLinks for StepId: {StepId}\", currentStep.Id);\n                return ResponseResult.SuccessInfo(\"No follow-up step to execute.\");\n            }\n\n            // 🔍 Fetch the next step using new logic (via CTAFlowConfig + Steps)\n            // 1️⃣ Try to resolve with smart condition check\n            var followUpStep = await GetChainedStepAsync(businessId, nextLink.NextStepId, null, null);\n\n            if (followUpStep == null)\n            {\n                Log.Warning(\"❌ Follow-up step skipped due to condition mismatch → StepId: {StepId}\", nextLink.NextStepId);\n\n                // 2️⃣ Optional fallback: Try same flow → Any step without conditions\n                var flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps)\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.IsPublished);\n\n                followUpStep = flow?.Steps\n                    .Where(s => string.IsNullOrEmpty(s.RequiredTag) && string.IsNullOrEmpty(s.RequiredSource))\n                    .OrderBy(s => s.StepOrder)\n                    .FirstOrDefault();\n\n                if (followUpStep != null)\n                {\n                    Log.Information(\"🔁 Fallback step selected → StepId: {StepId}, Template: {Template}\",\n                        followUpStep.Id, followUpStep.TemplateToSend);\n                }\n                else\n                {\n                    Log.Warning(\"🚫 No suitable fallback found in flow. Skipping follow-up.\");\n                    return ResponseResult.SuccessInfo(\"No matching follow-up step based on user context.\");\n                }\n            }\n\n\n            // 📨 Send the follow-up message using the TemplateToSend field\n            try\n            {\n                var template = followUpStep.TemplateToSend;\n\n                Log.Information(\"📤 Sending follow-up message → Template: {Template}, To: {Recipient}\", template, recipientNumber);\n\n                // 🧪 Replace this with actual message engine call\n                var sendDto = new SimpleTemplateMessageDto\n                {\n                    RecipientNumber = recipientNumber,\n                    TemplateName = template,\n                    TemplateParameters = new List<string>() // Add dynamic params later if needed\n                };\n\n                var sendResult = await _messageEngineService\n     .SendTemplateMessageSimpleAsync(businessId, sendDto);\n\n                if (!sendResult.Success)\n                {\n                    Log.Warning(\"❌ Follow-up message send failed → {Template}\", template);\n                    return ResponseResult.ErrorInfo(\"Follow-up send failed.\", sendResult.ErrorMessage);\n                }\n\n\n                return ResponseResult.SuccessInfo($\"Follow-up message sent using template: {template}\", null, sendResult.RawResponse);\n\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error sending follow-up message for StepId: {StepId}\", followUpStep.Id);\n                return ResponseResult.ErrorInfo(\"Failed to send follow-up.\");\n            }\n        }\n        //public async Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n        //{\n        //    // 🧠 If there's no next step to look up, just return null\n        //    if (nextStepId == null)\n        //    {\n        //        Log.Information(\"ℹ️ No NextStepId provided — skipping follow-up.\");\n        //        return null;\n        //    }\n\n        //    try\n        //    {\n        //        // 🧲 Step 1: Find the flow that contains the step and belongs to the business\n        //        var flow = await _context.CTAFlowConfigs\n        //            .Include(f => f.Steps)\n        //            .FirstOrDefaultAsync(f =>\n        //                f.BusinessId == businessId &&\n        //                f.Steps.Any(s => s.Id == nextStepId));\n\n        //        if (flow == null)\n        //        {\n        //            Log.Warning(\"⚠️ No flow found containing NextStepId: {NextStepId} for business: {BusinessId}\", nextStepId, businessId);\n        //            return null;\n        //        }\n\n        //        // 🔁 Step 2: Extract the matching step from the flow's step list\n        //        var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);\n\n        //        if (followUpStep == null)\n        //        {\n        //            Log.Warning(\"❌ NextStepId matched in flow but not found in step list: {NextStepId}\", nextStepId);\n        //            return null;\n        //        }\n\n        //        Log.Information(\"✅ Follow-up step found → StepId: {StepId}, Template: {Template}\", followUpStep.Id, followUpStep.TemplateToSend);\n        //        return followUpStep;\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        Log.Error(ex, \"❌ Exception while fetching chained step for NextStepId: {NextStepId}\", nextStepId);\n        //        throw;\n        //    }\n        //}\n        // ✅ Interface-compatible method (required by ICTAFlowService)\n        public Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId)\n        {\n            return GetChainedStepAsync(businessId, nextStepId, null, null); // Forward to full logic\n        }\n\n        // ✅ Extended logic with condition check (Tag + Source)\n        public async Task<CTAFlowStep?> GetChainedStepAsync(\n            Guid businessId,\n            Guid? nextStepId,\n            TrackingLog? trackingLog = null,\n            Contact? contact = null)\n        {\n            if (nextStepId == null)\n            {\n                Log.Information(\"ℹ️ No NextStepId provided — skipping follow-up.\");\n                return null;\n            }\n\n            try\n            {\n                var flow = await _context.CTAFlowConfigs\n                    .Include(f => f.Steps)\n                    .FirstOrDefaultAsync(f =>\n                        f.BusinessId == businessId &&\n                        f.Steps.Any(s => s.Id == nextStepId));\n\n                if (flow == null)\n                {\n                    Log.Warning(\"⚠️ No flow found containing NextStepId: {NextStepId} for business: {BusinessId}\", nextStepId, businessId);\n                    return null;\n                }\n\n                var followUpStep = flow.Steps.FirstOrDefault(s => s.Id == nextStepId);\n\n                if (followUpStep == null)\n                {\n                    Log.Warning(\"❌ Step matched in flow but not found in step list: {NextStepId}\", nextStepId);\n                    return null;\n                }\n\n                // ✅ Check RequiredTag / Source match\n                if (trackingLog != null)\n                {\n                    var isMatch = StepMatchingHelper.IsStepMatched(followUpStep, trackingLog, contact);\n\n                    if (!isMatch)\n                    {\n                        Log.Information(\"🚫 Step {StepId} skipped due to condition mismatch [Tag: {Tag}, Source: {Source}]\",\n                            followUpStep.Id, followUpStep.RequiredTag, followUpStep.RequiredSource);\n                        return null;\n                    }\n                }\n\n                Log.Information(\"✅ Follow-up step found and matched → StepId: {StepId}, Template: {Template}\",\n                    followUpStep.Id, followUpStep.TemplateToSend);\n\n                return followUpStep;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception while fetching chained step for NextStepId: {NextStepId}\", nextStepId);\n                throw;\n            }\n        }\n\n        // ✅ Optional helper for resolving from TrackingLogId\n        public async Task<CTAFlowStep?> GetChainedStepWithContextAsync(\n            Guid businessId,\n            Guid? nextStepId,\n            Guid? trackingLogId)\n        {\n            var log = await _context.TrackingLogs\n                .Include(l => l.Contact)\n                    .ThenInclude(c => c.ContactTags)\n                        .ThenInclude(ct => ct.Tag)\n                .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n            return await GetChainedStepAsync(businessId, nextStepId, log, log?.Contact);\n        }\n\n        public async Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId)\n        {\n            try\n            {\n                Log.Information(\"🚦 Executing Visual Flow → StepId: {StepId} | TrackingLogId: {TrackingLogId}\", startStepId, trackingLogId);\n\n                var log = await _context.TrackingLogs\n                    .Include(l => l.Contact)\n                        .ThenInclude(c => c.ContactTags)\n                            .ThenInclude(ct => ct.Tag)\n                    .FirstOrDefaultAsync(l => l.Id == trackingLogId);\n\n                if (log == null)\n                {\n                    Log.Warning(\"❌ TrackingLog not found for ID: {TrackingLogId}\", trackingLogId);\n                    return ResponseResult.ErrorInfo(\"Tracking log not found.\");\n                }\n\n                var step = await GetChainedStepAsync(businessId, startStepId, log, log?.Contact);\n\n                if (step == null)\n                {\n                    Log.Warning(\"❌ No flow step matched or conditions failed → StepId: {StepId}\", startStepId);\n                    return ResponseResult.ErrorInfo(\"Step conditions not satisfied.\");\n                }\n\n                ResponseResult sendResult;\n\n                switch (step.TemplateType?.ToLower())\n                {\n                    case \"image_template\":\n                        var imageDto = new ImageTemplateMessageDto\n                        {\n                            BusinessId = businessId,\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            LanguageCode = \"en_US\"\n                        };\n                        sendResult = await _messageEngineService.SendImageTemplateMessageAsync(imageDto, businessId);\n                        break;\n\n                    case \"text_template\":\n                    default:\n                        var textDto = new SimpleTemplateMessageDto\n                        {\n                            RecipientNumber = log.ContactPhone ?? \"\",\n                            TemplateName = step.TemplateToSend,\n                            TemplateParameters = new()\n                        };\n                        sendResult = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, textDto);\n                        break;\n\n                }\n\n                // ✅ Save FlowExecutionLog\n                var executionLog = new FlowExecutionLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    StepId = step.Id,\n                    FlowId = step.CTAFlowConfigId,\n                    TrackingLogId = trackingLogId,\n                    ContactPhone = log.ContactPhone,\n                    TriggeredByButton = step.TriggerButtonText,\n                    TemplateName = step.TemplateToSend,\n                    TemplateType = step.TemplateType,\n                    Success = sendResult.Success,\n                    ErrorMessage = sendResult.ErrorMessage,\n                    RawResponse = sendResult.RawResponse,\n                    ExecutedAt = DateTime.UtcNow\n                };\n\n                _context.FlowExecutionLogs.Add(executionLog);\n                await _context.SaveChangesAsync();\n\n                if (sendResult.Success)\n                {\n                    Log.Information(\"✅ Flow step executed → Template: {Template} sent to {To}\", step.TemplateToSend, log.ContactPhone);\n                }\n                else\n                {\n                    Log.Warning(\"❌ Failed to send template from flow → {Reason}\", sendResult.ErrorMessage);\n                }\n\n                return ResponseResult.SuccessInfo($\"Flow step executed. Sent: {sendResult.Success}\", null, sendResult.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception during ExecuteVisualFlowAsync()\");\n                return ResponseResult.ErrorInfo(\"Internal error during flow execution.\");\n            }\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Services/ICTAFlowService.cs",
          "sha256": "3b6373da378998c305a07f641d68d3e2a9c18666f9a8e2389758c5925162038b",
          "language": "csharp",
          "content": "using xbytechat.api.Features.CTAFlowBuilder.DTOs;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public interface ICTAFlowService\n    {\n        // ✅ Used for flow creation and saving\n        Task<Guid> CreateFlowWithStepsAsync(CreateFlowDto dto, Guid businessId, string createdBy);\n        Task<ResponseResult> SaveVisualFlowAsync(SaveVisualFlowDto dto, Guid businessId, string createdBy);\n\n        // ✅ Load flows\n        Task<CTAFlowConfig?> GetFlowByBusinessAsync(Guid businessId);\n        Task<CTAFlowConfig?> GetDraftFlowByBusinessAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllPublishedFlowsAsync(Guid businessId);\n        Task<List<VisualFlowSummaryDto>> GetAllDraftFlowsAsync(Guid businessId);\n\n        // ✅ Load and manage flow steps\n        Task<List<CTAFlowStep>> GetStepsForFlowAsync(Guid flowId);\n\n        //Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText, string buttonType);\n        Task<CTAFlowStep?> MatchStepByButtonAsync(Guid businessId, string buttonText,string buttonType,string currentTemplateName,Guid? campaignId = null);\n\n\n        Task<CTAFlowStep?> GetChainedStepAsync(Guid businessId, Guid? nextStepId);\n        Task<CTAFlowStep?> GetChainedStepWithContextAsync(Guid businessId, Guid? nextStepId, Guid? trackingLogId);\n        // ✅ Runtime logic\n        Task<ResponseResult> ExecuteFollowUpStepAsync(Guid businessId, CTAFlowStep? currentStep, string recipientNumber);\n\n        // ✅ Flow management\n        Task<ResponseResult> PublishFlowAsync(Guid businessId, List<FlowStepDto> steps, string createdBy);\n        Task<ResponseResult> DeleteFlowAsync(Guid id, Guid businessId);\n\n        // ✅ Editor loading (visual builder)\n        Task<SaveVisualFlowDto?> GetVisualFlowByIdAsync(Guid id);\n\n        Task<ResponseResult> ExecuteVisualFlowAsync(Guid businessId, Guid startStepId, Guid trackingLogId);\n\n    }\n}\n\n\n"
        },
        {
          "path": "xbytechat-api/Features/CTAFlowBuilder/Services/StepMatchingHelper.cs",
          "sha256": "3353c5195c81af5b7a26a5a7f648e6dc4504f54633d408220670d2dba65a5888",
          "language": "csharp",
          "content": "using Serilog;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.Tracking.Models;\n\nnamespace xbytechat.api.Features.CTAFlowBuilder.Services\n{\n    public static class StepMatchingHelper\n    {\n        public static bool IsStepMatched(CTAFlowStep step, TrackingLog log, Contact? contact)\n        {\n            if (!string.IsNullOrWhiteSpace(step.RequiredSource) &&\n                !string.Equals(step.RequiredSource, log.SourceType, StringComparison.OrdinalIgnoreCase))\n            {\n                Log.Information(\"🚫 Step [{StepId}] skipped: RequiredSource '{Required}' ≠ ClickedSource '{Actual}'\",\n                    step.Id, step.RequiredSource, log.SourceType);\n                return false;\n            }\n\n            if (!string.IsNullOrWhiteSpace(step.RequiredTag))\n            {\n                if (contact == null || contact.ContactTags == null || !contact.ContactTags.Any())\n                {\n                    Log.Information(\"🚫 Step [{StepId}] skipped: Contact or Tags missing (RequiredTag: {RequiredTag})\",\n                        step.Id, step.RequiredTag);\n                    return false;\n                }\n\n                var hasTag = contact.ContactTags.Any(ct =>\n                    string.Equals(ct.Tag.Name, step.RequiredTag, StringComparison.OrdinalIgnoreCase));\n\n                if (!hasTag)\n                {\n                    var contactTags = string.Join(\", \", contact.ContactTags.Select(ct => ct.Tag.Name));\n                    Log.Information(\"🚫 Step [{StepId}] skipped: Contact tags [{Tags}] do not include RequiredTag '{Required}'\",\n                        step.Id, contactTags, step.RequiredTag);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAManagement/Controllers/CTAManagementController.cs",
          "sha256": "3d06022ca06d6b4e214bf6e571b79d311da0902eeadebddc1f7d48c18a1ecb99",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Services;\n\nnamespace xbytechat.api.Features.CTAManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/ctamanagement\")]\n    [Authorize] // ✅ Ensures only authenticated users can access\n    public class CTAManagementController : ControllerBase\n    {\n        private readonly ICTAManagementService _ctaService;\n\n        public CTAManagementController(ICTAManagementService ctaService)\n        {\n            _ctaService = ctaService;\n        }\n\n        // ✅ GET: api/ctamanagement/get-all\n        [HttpGet(\"get-all\")]\n        public async Task<IActionResult> GetAll()\n        {\n            var data = await _ctaService.GetAllAsync();\n            return Ok(data);\n        }\n\n        // 📌 GET: api/ctamanagement/get/{id}\n        [HttpGet(\"get/{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _ctaService.GetByIdAsync(id);\n            return result == null ? NotFound(\"CTA not found\") : Ok(result);\n        }\n\n        // ✅ POST: api/ctamanagement/create\n        [HttpPost(\"create\")]\n        public async Task<IActionResult> Create([FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"❌ Invalid CTA payload.\");\n\n            var success = await _ctaService.AddAsync(dto);\n            return success\n                ? Ok(new { message = \"✅ CTA created.\" })\n                : StatusCode(500, \"❌ Failed to create CTA.\");\n        }\n\n        // ✏️ PUT: api/ctamanagement/update/{id}\n        [HttpPut(\"update/{id}\")]\n        public async Task<IActionResult> Update(Guid id, [FromBody] CTADefinitionDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(\"❌ Invalid CTA payload.\");\n\n            var success = await _ctaService.UpdateAsync(id, dto);\n            return success\n                ? Ok(new { message = \"✅ CTA updated.\" })\n                : NotFound(\"CTA not found or update failed.\");\n        }\n\n        // 🗑️ DELETE: api/ctamanagement/delete/{id}\n        [HttpDelete(\"delete/{id}\")]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var success = await _ctaService.DeleteAsync(id);\n            return success\n                ? Ok(new { message = \"✅ CTA deleted (soft).\" })\n                : NotFound(\"CTA not found or delete failed.\");\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAManagement/DTOs/CTADefinitionDto.cs",
          "sha256": "1472d3694a4cebf363c3a632675fe61b8646f610f7a96a2687286bfb47d8eacf",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.CTAManagement.DTOs\n{\n    public class CTADefinitionDto\n    {\n        public Guid Id { get; set; }\n\n        public string Title { get; set; } = string.Empty; // 🏷️ CTA label (e.g., \"Buy Now\")\n\n        public string ButtonText { get; set; } = string.Empty; // 💬 Visible button label (e.g., \"Buy Now\")\n\n        public string ButtonType { get; set; } = \"url\"; // 🔘 Expected values: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // 🌐 Redirect or action target\n\n        public string? Description { get; set; } // 📝 Optional description (for context/tooltip)\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAManagement/Models/CTADefinition.cs",
          "sha256": "96216798bd31e2098b9a2ba43dac62e067f7062f5e5c36bb318a8dab2f74da38",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.CTAManagement.Models\n{\n    public class CTADefinition\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; } // 🔗 Business that owns this CTA\n\n        public string Title { get; set; } = string.Empty; // 🏷️ CTA label/title, e.g., \"Buy Now\"\n\n        public string ButtonText { get; set; } = string.Empty; // 💬 Visible button label\n\n        public string ButtonType { get; set; } = \"url\"; // 🔘 Options: \"url\", \"quick_reply\", etc.\n\n        public string TargetUrl { get; set; } = string.Empty; // 🌐 Action URL or value (depending on type)\n\n        public string Description { get; set; } = string.Empty; // 📝 Optional additional context\n\n        public bool IsActive { get; set; } = true;\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime? UpdatedAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAManagement/Services/CTAManagementService.cs",
          "sha256": "a9388986726208c45f05afa2bd4ed3c74b33d7d79eb0e5863b7256e061ba4081",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.CTAManagement.DTOs;\nusing xbytechat.api.Features.CTAManagement.Models;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public class CTAManagementService : ICTAManagementService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n\n        public CTAManagementService(AppDbContext dbContext, IHttpContextAccessor httpContextAccessor)\n        {\n            _dbContext = dbContext;\n            _httpContextAccessor = httpContextAccessor;\n        }\n\n        // 🔄 Get all active CTAs for the current business\n        public async Task<List<CTADefinitionDto>> GetAllAsync()\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            return await _dbContext.CTADefinitions\n                .Where(c => c.IsActive && c.BusinessId == businessId)\n                .Select(c => new CTADefinitionDto\n                {\n                    Id = c.Id,\n                    Title = c.Title,\n                    ButtonText = c.ButtonText,\n                    ButtonType = c.ButtonType,\n                    TargetUrl = c.TargetUrl,\n                    Description = c.Description,\n                    IsActive = c.IsActive\n                }).ToListAsync();\n        }\n\n        // ✅ Add new CTA\n        public async Task<bool> AddAsync(CTADefinitionDto dto)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = new CTADefinition\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                Title = dto.Title,\n                ButtonText = dto.ButtonText,\n                ButtonType = dto.ButtonType,\n                TargetUrl = dto.TargetUrl,\n                Description = dto.Description ?? \"\",\n                IsActive = true,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            await _dbContext.CTADefinitions.AddAsync(cta);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // 📌 Get CTA by ID\n        public async Task<CTADefinitionDto?> GetByIdAsync(Guid id)\n        {\n            var businessId = GetBusinessIdFromClaims();\n\n            var cta = await _dbContext.CTADefinitions\n                .FirstOrDefaultAsync(c => c.Id == id && c.IsActive && c.BusinessId == businessId);\n\n            if (cta == null) return null;\n\n            return new CTADefinitionDto\n            {\n                Id = cta.Id,\n                Title = cta.Title,\n                ButtonText = cta.ButtonText,\n                ButtonType = cta.ButtonType,\n                TargetUrl = cta.TargetUrl,\n                Description = cta.Description,\n                IsActive = cta.IsActive\n            };\n        }\n\n\n        // ✏️ Update CTA\n        public async Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to modify this CTA.\");\n\n            cta.Title = dto.Title;\n            cta.ButtonText = dto.ButtonText;\n            cta.ButtonType = dto.ButtonType;\n            cta.TargetUrl = dto.TargetUrl;\n            cta.Description = dto.Description ?? \"\";\n            cta.IsActive = dto.IsActive;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // 🗑️ Soft Delete CTA\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var cta = await _dbContext.CTADefinitions.FindAsync(id);\n            if (cta == null) return false;\n\n            var businessId = GetBusinessIdFromClaims();\n            if (cta.BusinessId != businessId) throw new UnauthorizedAccessException(\"Unauthorized to delete this CTA.\");\n\n            cta.IsActive = false;\n            cta.UpdatedAt = DateTime.UtcNow;\n\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        // 🔐 Reusable method to extract BusinessId\n        private Guid GetBusinessIdFromClaims()\n        {\n            var claim = _httpContextAccessor.HttpContext?.User?.FindFirst(\"businessId\");\n            if (claim == null || string.IsNullOrWhiteSpace(claim.Value) || !Guid.TryParse(claim.Value, out var businessId))\n                throw new UnauthorizedAccessException(\"❌ Invalid or missing BusinessId claim.\");\n\n            return businessId;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/CTAManagement/Services/ICTAManagementService.cs",
          "sha256": "f05abf40bdd4a593e8c8f8980c288884dc5701a5c9ba29261588816002758bcd",
          "language": "csharp",
          "content": "using xbytechat.api.Features.CTAManagement.DTOs;\n\nnamespace xbytechat.api.Features.CTAManagement.Services\n{\n    public interface ICTAManagementService\n    {\n        /// <summary>Returns all active CTAs for the current business.</summary>\n        Task<List<CTADefinitionDto>> GetAllAsync();\n\n        /// <summary>Returns a single CTA by ID (if exists).</summary>\n        Task<CTADefinitionDto?> GetByIdAsync(Guid id);\n\n        /// <summary>Adds a new CTA for the logged-in business.</summary>\n        Task<bool> AddAsync(CTADefinitionDto dto);\n\n        /// <summary>Updates an existing CTA if it belongs to the business.</summary>\n        Task<bool> UpdateAsync(Guid id, CTADefinitionDto dto);\n\n        /// <summary>Soft deletes (deactivates) a CTA entry.</summary>\n        Task<bool> DeleteAsync(Guid id);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Controllers/FeatureAccessController.cs",
          "sha256": "9647f14c41db42003160442c67b7f3a6c51b43423ae7bc44ac9c7fcb9be67772",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing System.Security.Claims;\nusing xbytechat.api;\nusing FeatureAccessEntity = xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess;\n\n// If your entity namespace is different, adjust this using:\nusing xbytechat.api.Features.FeatureAccessModule.Models;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/feature-access\")]\n    [Authorize]\n    public class FeatureAccessController : ControllerBase\n    {\n        private readonly AppDbContext _db;\n\n        public FeatureAccessController(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // DTOs to match your frontend shape\n        public class FeatureMeDto\n        {\n            public string featureCode { get; set; } = \"\";\n            public bool isAvailableInPlan { get; set; }\n            public bool? isOverridden { get; set; } // null = not overridden\n        }\n\n        public class BusinessFeatureDto\n        {\n            public string featureName { get; set; } = \"\";\n            public bool isEnabled { get; set; }\n        }\n\n        /// <summary>\n        /// Returns features for the current user, merged from plan + per-business overrides\n        /// Shape: [{ featureCode, isAvailableInPlan, isOverridden }]\n        /// </summary>\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMyFeatureAccess()\n        {\n            var user = HttpContext.User;\n            if (user?.Identity is not { IsAuthenticated: true })\n                return Unauthorized();\n\n            var role = (user.FindFirst(\"role\")?.Value ?? user.FindFirst(ClaimTypes.Role)?.Value ?? \"business\").ToLower();\n            var plan = (user.FindFirst(\"plan\")?.Value ?? \"basic\").ToLower();\n\n            Guid businessId = Guid.Empty;\n            _ = Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out businessId);\n\n            // Superadmin: grant all known features\n            if (role == \"superadmin\")\n            {\n                var allNames = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Select(f => f.FeatureName)\n                    .Distinct()\n                    .ToListAsync();\n\n                var super = allNames.Select(name => new FeatureMeDto\n                {\n                    featureCode = name,\n                    isAvailableInPlan = true,\n                    isOverridden = true\n                });\n\n                return Ok(super);\n            }\n\n            // Load plan-level features (same entity type as DbSet)\n            var planRows = await _db.FeatureAccess\n                .AsNoTracking()\n                .Where(f => f.Plan.ToLower() == plan)\n                .ToListAsync();\n\n            // Load business overrides using SAME type; avoid ternary type-mismatch\n            List<FeatureAccessEntity> overrideRows;\n            if (businessId == Guid.Empty)\n            {\n                overrideRows = new();\n            }\n            else\n            {\n                overrideRows = await _db.FeatureAccess\n                    .AsNoTracking()\n                    .Where(f => f.BusinessId == businessId)\n                    .ToListAsync();\n            }\n\n            // Build base from plan, then apply overrides\n            var map = new Dictionary<string, FeatureMeDto>(StringComparer.OrdinalIgnoreCase);\n\n            foreach (var p in planRows)\n            {\n                if (!map.ContainsKey(p.FeatureName))\n                {\n                    map[p.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = p.FeatureName,\n                        isAvailableInPlan = p.IsEnabled,\n                        isOverridden = null\n                    };\n                }\n                else\n                {\n                    map[p.FeatureName].isAvailableInPlan = p.IsEnabled;\n                }\n            }\n\n            foreach (var o in overrideRows)\n            {\n                if (!map.ContainsKey(o.FeatureName))\n                {\n                    map[o.FeatureName] = new FeatureMeDto\n                    {\n                        featureCode = o.FeatureName,\n                        isAvailableInPlan = false,\n                        isOverridden = o.IsEnabled\n                    };\n                }\n                else\n                {\n                    map[o.FeatureName].isOverridden = o.IsEnabled;\n                }\n            }\n\n            return Ok(map.Values.ToArray());\n        }\n\n        /// <summary>\n        /// Returns all features for a business (used by useAllFeatureAccess/useFeatureAccess hooks)\n        /// Shape: [{ featureName, isEnabled }]\n        /// </summary>\n        [HttpGet(\"business/{businessId:guid}\")]\n        public async Task<IActionResult> GetBusinessFeatureAccess([FromRoute] Guid businessId)\n        {\n            // (Optional) enforce tenant isolation:\n            // var currentBiz = HttpContext.User.FindFirst(\"businessId\")?.Value;\n            // if (!Guid.TryParse(currentBiz, out var bizFromToken) || bizFromToken != businessId)\n            //     return Forbid();\n\n            var rows = await _db.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new BusinessFeatureDto\n                {\n                    featureName = f.FeatureName,\n                    isEnabled = f.IsEnabled\n                })\n                .ToListAsync();\n\n            return Ok(rows);\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Authorization;\n//using Microsoft.AspNetCore.Mvc;\n//using Serilog;\n//using xbytechat.api.Features.FeatureAccess.DTOs;\n//using xbytechat.api.Features.FeatureAccessModule.DTOs;\n//using xbytechat.api.Features.FeatureAccessModule.Services;\n//using xbytechat.api.Shared;\n//using System;\n\n//namespace xbytechat.api.Features.FeatureAccessModule.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/feature-access\")]\n//    public class FeatureAccessController : ControllerBase\n//    {\n//        private readonly IFeatureAccessService _featureAccessService;\n//        private readonly IFeatureAccessEvaluator _accessEvaluator;\n//        private readonly ILogger<FeatureAccessController> _logger;\n\n//        public FeatureAccessController(\n//            IFeatureAccessService featureAccessService,\n//            IFeatureAccessEvaluator accessEvaluator,\n//            ILogger<FeatureAccessController> logger)\n//        {\n//            _featureAccessService = featureAccessService;\n//            _accessEvaluator = accessEvaluator;\n//            _logger = logger;\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpGet]\n//        public async Task<ActionResult<IEnumerable<FeatureAccessDto>>> GetAll()\n//        {\n//            var result = await _featureAccessService.GetAllAsync();\n//            return Ok(result);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpGet(\"business/{businessId}\")]\n//        public async Task<ActionResult<IEnumerable<FeatureAccessDto>>> GetByBusinessId(Guid businessId)\n//        {\n//            var result = await _featureAccessService.GetByBusinessIdAsync(businessId);\n//            return Ok(result);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpGet(\"{id}\")]\n//        public async Task<ActionResult<FeatureAccessDto>> Get(Guid id)\n//        {\n//            var item = await _featureAccessService.GetAsync(id);\n//            return item == null ? NotFound() : Ok(item);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpPost]\n//        public async Task<ActionResult<FeatureAccessDto>> Create(FeatureAccessDto dto)\n//        {\n//            var created = await _featureAccessService.CreateAsync(dto);\n//            return CreatedAtAction(nameof(Get), new { id = created.Id }, created);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpPut(\"{id}\")]\n//        public async Task<ActionResult<FeatureAccessDto>> Update(Guid id, FeatureAccessDto dto)\n//        {\n//            var updated = await _featureAccessService.UpdateAsync(id, dto);\n//            return Ok(updated);\n//        }\n\n//        [Authorize(Roles = \"superadmin\")]\n//        [HttpDelete(\"{id}\")]\n//        public async Task<IActionResult> Delete(Guid id)\n//        {\n//            var success = await _featureAccessService.DeleteAsync(id);\n//            return success ? NoContent() : NotFound();\n//        }\n\n//        // ✅ Unified endpoint for both SuperAdmin and Business users\n//        // Accepts businessId as optional (route or query)\n//        [Authorize]\n//        [HttpGet(\"available/{businessId?}\")]\n//        public async Task<ActionResult<Dictionary<string, bool>>> GetAvailableFeatures(string businessId = null)\n//        {\n//            try\n//            {\n//                var role = User.FindFirst(\"role\")?.Value?.ToLowerInvariant() ?? \"\";\n//                var result = new Dictionary<string, bool>();\n//                var allFeatures = new[] { \"CRM\", \"Campaigns\", \"Catalog\", \"CatalogInsights\", \"AdminPanel\", \"FlowBuilder\", \"Messaging\", \"FlowInsights\", \"CTAFlow\", \"CRMInsights\" };\n\n//                _logger.LogInformation(\"🔍 Feature access check - Role: {Role}, BusinessId: {BusinessId}\", role, businessId);\n\n//                // ✅ Superadmin: Full access to all features\n//                if (role == \"superadmin\")\n//                {\n//                    foreach (var feature in allFeatures)\n//                        result[feature] = true;\n\n//                    _logger.LogInformation(\"Superadmin detected. All features enabled.\");\n//                    return Ok(result);\n//                }\n\n//                // ✅ Business: Must have valid businessId, else 400\n//                if (role == \"business\")\n//                {\n//                    if (string.IsNullOrWhiteSpace(businessId) || !Guid.TryParse(businessId, out var parsedBusinessId))\n//                    {\n//                        _logger.LogWarning(\"Feature access attempted with missing or invalid businessId by business user.\");\n//                        return BadRequest(\"Valid businessId is required for business users.\");\n//                    }\n\n//                    foreach (var feature in allFeatures)\n//                    {\n//                        bool isAllowed = await _accessEvaluator.CanUseAsync(parsedBusinessId, feature);\n//                        result[feature] = isAllowed;\n//                    }\n\n//                    _logger.LogInformation(\"Feature set calculated for businessId={BusinessId}\", businessId);\n//                    return Ok(result);\n//                }\n\n//                // ❌ Unknown/unsupported role\n//                _logger.LogWarning(\"Access attempt with unsupported role: {Role}\", role);\n//                return Forbid(\"Role not permitted.\");\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"🔥 Error in GetAvailableFeatures for businessId={BusinessId}\", businessId);\n//                return StatusCode(500, \"Feature access calculation failed.\");\n//            }\n//        }\n\n//        [Authorize]\n//        [HttpGet(\"feature-toggle-view\")]\n//        public async Task<IActionResult> GetToggleView()\n//        {\n//            try\n//            {\n//                Guid businessId;\n//                try\n//                {\n//                    businessId = User.GetBusinessId();\n//                }\n//                catch (UnauthorizedAccessException ex)\n//                {\n//                    return Unauthorized(ex.Message);\n//                }\n\n//                var plan = User.FindFirst(\"plan\")?.Value ?? \"\";\n//                var features = await _featureAccessService.GetToggleViewAsync(businessId, plan);\n\n//                return Ok(new\n//                {\n//                    success = true,\n//                    data = features\n//                });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"🔥 Error in GetToggleView\");\n//                return StatusCode(500, \"Failed to fetch feature toggle view.\");\n//            }\n//        }\n\n//        [Authorize]\n//        [HttpPatch(\"{featureCode}\")]\n//        public async Task<IActionResult> ToggleFeatureAccess(string featureCode, [FromBody] FeatureTogglePatchDto dto)\n//        {\n//            try\n//            {\n//                var businessId = User.GetBusinessId();\n//                await _featureAccessService.ToggleFeatureAsync(businessId, featureCode, dto.IsEnabled);\n//                return Ok(new { success = true });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"🔥 Error toggling feature access for code={FeatureCode}\", featureCode);\n//                return StatusCode(500, \"Failed to toggle feature.\");\n//            }\n//        }\n\n//        [Authorize]\n//        [HttpGet(\"user-permissions\")]\n//        public async Task<IActionResult> GetAllUserPermissions()\n//        {\n//            try\n//            {\n//                var businessId = User.GetBusinessId();\n//                var users = await _featureAccessService.GetAllUserPermissionsAsync(businessId);\n//                return Ok(new { success = true, data = users });\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"🔥 Error fetching user permissions\");\n//                return StatusCode(500, \"Failed to fetch user permissions.\");\n//            }\n//        }\n\n//        // ✅ Used by frontend guards like <FeatureGuard>\n//        [Authorize]\n//        [HttpGet(\"me\")]\n//        public async Task<ActionResult<List<FeatureStatusDto>>> GetMyFeatures()\n//        {\n//            try\n//            {\n//                //var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n//                //if (!Guid.TryParse(businessIdStr, out var businessId))\n//                //    return Unauthorized(\"BusinessId not found\");\n//                var businessIdStr = User.Claims.FirstOrDefault(c => c.Type.Equals(\"businessId\", StringComparison.OrdinalIgnoreCase))?.Value;\n//                if (!Guid.TryParse(businessIdStr, out var businessId))\n//                {\n//                    return Unauthorized();\n//                }\n\n//                var features = await _featureAccessService.GetFeaturesForCurrentUserAsync(businessId);\n//                foreach (var claim in User.Claims)\n//                {\n//                    Console.WriteLine($\"[{claim.Type}] = {claim.Value}\");\n//                }\n\n//                return Ok(features);\n\n//            }\n//            catch (Exception ex)\n//            {\n//                _logger.LogError(ex, \"🔥 Error fetching current user's features\");\n//                return StatusCode(500, \"Failed to fetch features.\");\n//            }\n//        }\n//    }\n//}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureAccessDto.cs",
          "sha256": "c418561ae9075f32902a032190e2252c7eab385bbdf1028ddd5748f0190df6de",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureAccessDto\n    {\n        public Guid Id { get; set; }\n\n        public Guid BusinessId { get; set; }\n\n        public string FeatureName { get; set; } = string.Empty;\n\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public DateTime CreatedAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs",
          "sha256": "958bb8308ae62a666fd659a66327d6b5cb0a7a66659e4048df206994ea3e9aec",
          "language": "csharp",
          "content": "// 📄 Features/FeatureAccessModule/DTOs/FeatureMetadataDto.cs\nnamespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureMetadataDto\n    {\n        public string FeatureCode { get; set; } = string.Empty;\n        public string Group { get; set; } = string.Empty;\n        public string Description { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureStatusDto.cs",
          "sha256": "36dfe2add0ad58f4e5f9e0d572e43bf68a42cc95b17f5654cacb1e7596e9715a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FeatureAccess.DTOs;\n\npublic class FeatureStatusDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public bool IsAvailableInPlan { get; set; }\n    public bool? IsOverridden { get; set; }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureTogglePatchDto.cs",
          "sha256": "4663d2df320001525fb2b9ff9847b149f77677557a22efbaa7c455ed8ac3c483",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class FeatureTogglePatchDto\n    {\n        public bool IsEnabled { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/FeatureToggleViewDto.cs",
          "sha256": "cc966666d4e050d9d16f7bab7d10f8c059305fc24a84ea7bd2642eb9a4375e8b",
          "language": "csharp",
          "content": "public class FeatureToggleViewDto\n{\n    public string FeatureCode { get; set; } = string.Empty;\n    public string Group { get; set; } = string.Empty;\n    public string Description { get; set; } = string.Empty;\n\n    public bool IsAvailableInPlan { get; set; }     // From PlanManager\n    public bool? IsOverridden { get; set; }         // null if no override\n    public bool IsActive => IsOverridden ?? IsAvailableInPlan;\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/DTOs/UserFeatureAccessDto.cs",
          "sha256": "24a59738ee2f1924903a6e14ecf5ed5a1ce6cbb0269b34013438b37502c2efa9",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FeatureAccessModule.DTOs\n{\n    public class UserFeatureAccessDto\n    {\n        public Guid Id { get; set; }\n        public string FullName { get; set; } = \"\";\n        public string Email { get; set; } = \"\";\n        public string Role { get; set; } = \"\";\n        public List<FeaturePermissionDto> Permissions { get; set; } = new();\n    }\n\n    public class FeaturePermissionDto\n    {\n        public string FeatureName { get; set; } = \"\";\n        public bool IsEnabled { get; set; }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureAccess.cs",
          "sha256": "53331121064e4c1559420eb6de1770eb6788b85b404505420f11d5c0bb6b8fe6",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureAccess\")]\n    public class FeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } // e.g. \"CRM\", \"Campaigns\", \"Catalog\"\n        [MaxLength(200)]\n        public string Description { get; set; } = string.Empty;\n        [Required]\n        public bool IsEnabled { get; set; } // ✅ true = allow, false = restrict\n\n        public string? Notes { get; set; } // Optional: reason or context\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty;\n        public string? Plan { get; set; } // e.g. \"basic\", \"smart\", \"advanced\"\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Models/FeatureMaster.cs",
          "sha256": "dcf5048b433abe18e2d52542d30fd81664a62f97176fe4ae583ce8218dfb002c",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"FeatureMaster\")]\n    public class FeatureMaster\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string FeatureCode { get; set; } = string.Empty; // e.g. \"crm\", \"catalog\"\n\n        [Required]\n        [MaxLength(100)]\n        public string DisplayName { get; set; } = string.Empty; // e.g. \"CRM\", \"Catalog\"\n\n        [MaxLength(250)]\n        public string Description { get; set; } = string.Empty;\n\n        [MaxLength(50)]\n        public string Group { get; set; } = string.Empty; // Optional grouping like \"CRM\", \"Messaging\"\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Models/UserFeatureAccess.cs",
          "sha256": "894b0a6020dffcbe46247fd5412ef98ab890a641144d089aa7c9c7aa351d0f9b",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Models\n{\n    [Table(\"UserFeatureAccess\")]\n    public class UserFeatureAccess\n    {\n        [Key]\n        public Guid Id { get; set; }\n        public Guid BusinessId { get; set; }\n        [Required]\n        public Guid UserId { get; set; }\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty;\n\n        [Required]\n        public bool IsEnabled { get; set; }\n\n        public string? Notes { get; set; }\n\n        public Guid? ModifiedByUserId { get; set; }  // Who applied this override\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessEvaluator.cs",
          "sha256": "b7ad7ecdc58db9f75f5793f8fb207db8b7127f878b4d51a7144c6a71e1c2dd48",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessEvaluator : IFeatureAccessEvaluator\n    {\n        private readonly AppDbContext _db;\n        private readonly ILogger<FeatureAccessEvaluator> _logger;\n\n        public FeatureAccessEvaluator(AppDbContext db, ILogger<FeatureAccessEvaluator> logger)\n        {\n            _db = db;\n            _logger = logger;\n        }\n\n        public async Task<bool> CanUseAsync(Guid businessId, string featureCode, Guid? userId)\n        {\n            var business = await _db.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.BusinessPlanInfo == null)\n                return false;\n\n            var planEnum = business.BusinessPlanInfo.Plan;\n            var planName = Enum.GetName(typeof(PlanType), planEnum)?.ToLower();\n\n            var planFeatures = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase)\n            {\n                [\"crm\"] = planName == \"smart\" || planName == \"advanced\",\n                [\"campaigns\"] = planName == \"advanced\",\n                [\"catalog\"] = true,\n                [\"automation\"] = planName == \"smart\" || planName == \"advanced\"\n            };\n\n            return planFeatures.TryGetValue(featureCode.ToLower(), out var allowed) && allowed;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Services/FeatureAccessService.cs",
          "sha256": "7968f3a0ef26fa05305fef477338950b8cb824aea9785d56b5d500ef3c376921",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Services;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public class FeatureAccessService : IFeatureAccessService\n    {\n        private readonly AppDbContext _context;\n        private readonly IPlanManager _planManager;\n        private readonly ILogger<FeatureAccessService> _logger;\n\n        public FeatureAccessService(AppDbContext context, IPlanManager planManager, ILogger<FeatureAccessService> logger)\n        {\n            _context = context;\n            _planManager = planManager;\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetAllAsync()\n        {\n            return await _context.FeatureAccess\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .Select(f => new FeatureAccessDto\n                {\n                    Id = f.Id,\n                    BusinessId = f.BusinessId,\n                    FeatureName = f.FeatureName,\n                    IsEnabled = f.IsEnabled,\n                    Notes = f.Notes,\n                    CreatedAt = f.CreatedAt\n                })\n                .ToListAsync();\n        }\n\n        public async Task<FeatureAccessDto?> GetAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return null;\n\n            return new FeatureAccessDto\n            {\n                Id = entity.Id,\n                BusinessId = entity.BusinessId,\n                FeatureName = entity.FeatureName,\n                IsEnabled = entity.IsEnabled,\n                Notes = entity.Notes,\n                CreatedAt = entity.CreatedAt\n            };\n        }\n\n        public async Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto)\n        {\n            var entity = new  xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                FeatureName = dto.FeatureName,\n                IsEnabled = dto.IsEnabled,\n                Notes = dto.Notes,\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FeatureAccess.Add(entity);\n            await _context.SaveChangesAsync();\n\n            dto.Id = entity.Id;\n            dto.CreatedAt = entity.CreatedAt;\n            return dto;\n        }\n\n        public async Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null)\n                throw new Exception(\"FeatureAccess not found\");\n\n            entity.FeatureName = dto.FeatureName;\n            entity.IsEnabled = dto.IsEnabled;\n            entity.Notes = dto.Notes;\n\n            await _context.SaveChangesAsync();\n\n            return dto;\n        }\n\n        public async Task<bool> DeleteAsync(Guid id)\n        {\n            var entity = await _context.FeatureAccess.FindAsync(id);\n            if (entity == null) return false;\n\n            _context.FeatureAccess.Remove(entity);\n            await _context.SaveChangesAsync();\n            return true;\n        }\n\n        public async Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan)\n        {\n            var allFeatures = await _context.FeatureAccess.ToListAsync();\n\n            var planAccessMap = _planManager.GetPlanFeatureMap(plan); // e.g., Dictionary<string, bool>\n\n            var userOverrides = await _context.UserFeatureAccess\n                .Where(x => x.BusinessId == businessId)\n                .ToDictionaryAsync(x => x.FeatureName, x => x.IsEnabled);\n\n            var result = allFeatures.Select(f => new FeatureToggleViewDto\n            {\n                FeatureCode = f.FeatureName,\n                Group = f.Group,\n                Description = f.Description,\n                IsAvailableInPlan = planAccessMap.ContainsKey(f.FeatureName),\n                IsOverridden = userOverrides.TryGetValue(f.FeatureName, out var val) ? val : null\n            }).ToList();\n\n            return result;\n        }\n\n        public async Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled)\n        {\n            try\n            {\n                var existing = await _context.UserFeatureAccess\n                    .FirstOrDefaultAsync(f => f.BusinessId == businessId && f.FeatureName == featureCode);\n\n                if (existing != null)\n                {\n                    existing.IsEnabled = isEnabled;\n                    _context.UserFeatureAccess.Update(existing);\n                }\n                else\n                {\n                    var newAccess = new UserFeatureAccess\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        FeatureName = featureCode,\n                        IsEnabled = isEnabled,\n                        CreatedAt = DateTime.UtcNow\n                    };\n                    await _context.UserFeatureAccess.AddAsync(newAccess);\n                }\n\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to toggle feature {FeatureCode} for business {BusinessId}\", featureCode, businessId);\n                throw;\n            }\n        }\n\n        public async Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId)\n        {\n            var business = await _context.Businesses\n                .Include(b => b.BusinessPlanInfo)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n            {\n                _logger.LogError(\"❌ Business not found for feature access: {BusinessId}\", businessId);\n                return new List<FeatureStatusDto>();\n            }\n\n            var planName = business.BusinessPlanInfo?.Plan.ToString() ?? \"basic\"; // Fallback to basic\n            _logger.LogInformation(\"📦 Resolved plan for Business {BusinessId}: {Plan}\", businessId, planName);\n\n            var planFeatureMap = _planManager.GetPlanFeatureMap(planName);\n\n            var overrides = await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName, f => (bool?)f.IsEnabled);\n            foreach (var kv in overrides)\n                _logger.LogInformation($\"🔧 Feature override: {kv.Key} = {kv.Value}\");\n            var allFeatures = planFeatureMap.Keys\n                .Union(overrides.Keys)\n                .Distinct();\n\n            return allFeatures.Select(f => new FeatureStatusDto\n            {\n                FeatureCode = f,\n                IsAvailableInPlan = planFeatureMap.ContainsKey(f),\n                IsOverridden = overrides.ContainsKey(f) ? overrides[f] : null\n            }).ToList();\n        }\n\n        public async Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId)\n        {\n            var users = await _context.Users\n             .Where(u => u.BusinessId == businessId)\n             .Select(u => new UserFeatureAccessDto\n             {\n                 Id = u.Id,\n                 FullName = u.Name, // ✅ Fixed\n                 Email = u.Email,\n                 Role = u.Role.Name, // ✅ Assuming you want role name string\n                 Permissions = _context.UserFeatureAccess\n                     .Where(p => p.BusinessId == businessId && p.UserId == u.Id)\n                     .Select(p => new FeaturePermissionDto\n                     {\n                         FeatureName = p.FeatureName,\n                         IsEnabled = p.IsEnabled\n                     })\n                     .ToList()\n             }).ToListAsync();\n\n\n            return users;\n        }\n        public async Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId)\n        {\n            return await _context.FeatureAccess\n                .Where(f => f.BusinessId == businessId)\n                .ToDictionaryAsync(f => f.FeatureName.ToLower(), f => f.IsEnabled);\n        }\n        public async Task<Dictionary<string, bool>> GetAllFeatureCodesAsync()\n        {\n            return await _context.FeatureMasters\n                .Select(f => f.FeatureCode.ToLower())\n                .Distinct()\n                .ToDictionaryAsync(k => k, v => true);\n        }\n\n\n    }\n}\n\n\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessEvaluator.cs",
          "sha256": "88c0088b68d4137df4f0a836e48d8eb52d62af12950c913661d78b31e6c5afec",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessEvaluator\n    {\n        //Task<bool> CanUseAsync(Guid businessId, string featureName);\n        Task<bool> CanUseAsync(Guid businessId, string featureName, Guid? userId = null);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FeatureAccessModule/Services/IFeatureAccessService.cs",
          "sha256": "6b328b62d7d5356015dc30688fa072e890cac87e55a5c8a12b1e605b05a744f3",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FeatureAccess.DTOs;\nusing xbytechat.api.Features.FeatureAccessModule.DTOs;\n\nnamespace xbytechat.api.Features.FeatureAccessModule.Services\n{\n    public interface IFeatureAccessService\n    {\n        Task<IEnumerable<FeatureAccessDto>> GetAllAsync();\n        Task<IEnumerable<FeatureAccessDto>> GetByBusinessIdAsync(Guid businessId);\n        Task<FeatureAccessDto?> GetAsync(Guid id);\n        Task<FeatureAccessDto> CreateAsync(FeatureAccessDto dto);\n        Task<FeatureAccessDto> UpdateAsync(Guid id, FeatureAccessDto dto);\n        Task<bool> DeleteAsync(Guid id);\n\n        Task<List<FeatureToggleViewDto>> GetToggleViewAsync(Guid businessId, string plan);\n        Task ToggleFeatureAsync(Guid businessId, string featureCode, bool isEnabled);\n        Task<List<FeatureStatusDto>> GetFeaturesForCurrentUserAsync(Guid businessId);\n        Task<List<UserFeatureAccessDto>> GetAllUserPermissionsAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetFeatureMapByBusinessIdAsync(Guid businessId);\n        Task<Dictionary<string, bool>> GetAllFeatureCodesAsync();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/Controllers/FlowAnalyticsController.cs",
          "sha256": "18a260235767524c70c33a6a49f8929060e94415ee98ff743590d207242020e3",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.FlowAnalytics.Services;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Controllers\n{\n    [ApiController]\n    [Route(\"api/flow-analytics\")]\n    public class FlowAnalyticsController : ControllerBase\n    {\n        private readonly IFlowAnalyticsService _analyticsService;\n\n        public FlowAnalyticsController(IFlowAnalyticsService analyticsService)\n        {\n            _analyticsService = analyticsService;\n        }\n\n        // ✅ GET /api/flow-analytics/summary\n        [HttpGet(\"summary\")]\n        [Authorize]\n        public async Task<IActionResult> GetSummary()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var result = await _analyticsService.GetAnalyticsSummaryAsync(businessId);\n            return Ok(result);\n        }\n\n        // ✅ GET /api/flow-analytics/most-triggered-steps\n        [HttpGet(\"most-triggered-steps\")]\n        [Authorize]\n        public async Task<IActionResult> GetMostTriggeredSteps()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var data = await _analyticsService.GetMostTriggeredStepsAsync(businessId);\n            return Ok(data);\n        }\n\n        // ✅ GET /api/flow-analytics/step-journey-breakdown?startDate=...&endDate=...\n        [HttpGet(\"step-journey-breakdown\")]\n        [Authorize]\n        public async Task<IActionResult> GetStepJourneyBreakdown([FromQuery] DateTime? startDate, [FromQuery] DateTime? endDate)\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid business ID\");\n\n            var data = await _analyticsService.GetStepJourneyBreakdownAsync(businessId, startDate, endDate);\n            return Ok(data);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsStepJourneyDto.cs",
          "sha256": "25c17b6d295eb4faf667e982e2878b32a18af8a759791962286f17eec9163f6f",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsStepJourneyDto\n    {\n        public Guid StepId { get; set; }\n\n        public string TemplateName { get; set; } = string.Empty;\n\n        public int TotalReached { get; set; }\n\n        public int ClickedNext { get; set; }\n\n        public Guid? NextStepId { get; set; }\n\n        // ✅ Auto-calculated: number of users who dropped off at this step\n        public int DropOff => TotalReached - ClickedNext;\n\n        // ✅ Auto-calculated: percentage of users who clicked \"next\"\n        public double ConversionRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)ClickedNext / TotalReached * 100, 2);\n\n        // ✅ Optional: percentage of users who dropped off\n        public double DropOffRate =>\n            TotalReached == 0 ? 0 : Math.Round((double)DropOff / TotalReached * 100, 2);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowAnalyticsSummaryDto.cs",
          "sha256": "5298f0c920ce53f68b8113de057d804750e1a3afd39d3a24e965ae120275118a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowAnalyticsSummaryDto\n    {\n        public int TotalExecutions { get; set; }\n        public int UniqueContacts { get; set; }\n        public string TopStepTriggered { get; set; } = \"N/A\";\n        public int TopStepCount { get; set; }\n        public DateTime? LastExecutedAt { get; set; }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/DTOs/FlowStepAnalyticsDto.cs",
          "sha256": "538b4b71cb5a0a82ee36ec0147c0014d4f6570b635eb2ce711cb7e8de3119a09",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class FlowStepAnalyticsDto\n    {\n        public Guid StepId { get; set; }\n        public string TemplateName { get; set; } = string.Empty;\n        public int TotalReached { get; set; }\n        public int ClickedNext { get; set; }\n        public int DropOff => TotalReached - ClickedNext;\n        public Guid? NextStepId { get; set; }\n        public DateTime ExecutedAtUtc { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/DTOs/MostTriggeredStepDto.cs",
          "sha256": "18dc2f8497fae7508358e8556503db073d057061d1892fed2882208fa6653588",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.FlowAnalytics.DTOs\n{\n    public class MostTriggeredStepDto\n    {\n        public Guid StepId { get; set; }\n        public string StepName { get; set; } = string.Empty;\n        public int TriggerCount { get; set; }\n        public DateTime? LastTriggeredAt { get; set; }\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/Services/FlowAnalyticsService.cs",
          "sha256": "b832767451b9f0161f931082a45a698407bf4cfaa6c5077edef8a2f6d30385cb",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CTAFlowBuilder.Models;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public class FlowAnalyticsService : IFlowAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public FlowAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // ✅ Summary cards (executions, unique contacts, top step)\n        public async Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId)\n        {\n            try\n            {\n                Log.Information(\"📊 Generating Flow Analytics Summary for BusinessId: {BusinessId}\", businessId);\n\n                var recentExecutions = await _context.FlowExecutionLogs\n                    .Where(e => e.BusinessId == businessId)\n                    .ToListAsync();\n\n                var totalExecutions = recentExecutions.Count;\n                var uniqueContacts = recentExecutions.Select(e => e.ContactPhone).Distinct().Count();\n                var mostTriggeredStep = recentExecutions\n                    .GroupBy(e => e.StepName)\n                    .OrderByDescending(g => g.Count())\n                    .Select(g => new { Step = g.Key, Count = g.Count() })\n                    .FirstOrDefault();\n\n                return new FlowAnalyticsSummaryDto\n                {\n                    TotalExecutions = totalExecutions,\n                    UniqueContacts = uniqueContacts,\n                    TopStepTriggered = mostTriggeredStep?.Step ?? \"N/A\",\n                    TopStepCount = mostTriggeredStep?.Count ?? 0,\n                    LastExecutedAt = recentExecutions\n                        .OrderByDescending(e => e.ExecutedAt)\n                        .FirstOrDefault()?.ExecutedAt\n                };\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to generate flow analytics summary\");\n                return new FlowAnalyticsSummaryDto();\n            }\n        }\n\n        // ✅ Top triggered steps leaderboard\n        public async Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId)\n        {\n            return await _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId)\n                .GroupBy(e => new { e.StepId, e.StepName })\n                .Select(g => new MostTriggeredStepDto\n                {\n                    StepId = g.Key.StepId,\n                    StepName = g.Key.StepName,\n                    TriggerCount = g.Count(),\n                    LastTriggeredAt = g.Max(e => e.ExecutedAt)\n                })\n                .OrderByDescending(x => x.TriggerCount)\n                .Take(5)\n                .ToListAsync();\n        }\n\n        // ✅ Step-by-step journey breakdown (with date filter)\n        public async Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate)\n        {\n            var query = _context.FlowExecutionLogs\n                .Where(e => e.BusinessId == businessId);\n\n            if (startDate.HasValue)\n                query = query.Where(e => e.ExecutedAt >= startDate.Value.Date);\n\n            if (endDate.HasValue)\n                query = query.Where(e => e.ExecutedAt <= endDate.Value.Date.AddDays(1).AddTicks(-1));\n\n            var logs = await query.ToListAsync();\n\n            // Group by StepId\n            var grouped = logs\n                .GroupBy(e => new { e.StepId, e.TemplateName, e.TriggeredByButton, e.FlowId })\n                .Select(g => new\n                {\n                    StepId = g.Key.StepId,\n                    TemplateName = g.Key.TemplateName,\n                    TotalReached = g.Count(),\n                    ClickedNext = logs.Count(x =>\n                        x.TriggeredByButton != null &&\n                        x.FlowId == g.Key.FlowId &&\n                        x.StepId != g.Key.StepId &&\n                        x.TriggeredByButton == g.Key.TriggeredByButton\n                    ),\n                    FlowId = g.Key.FlowId,\n                    TriggeredByButton = g.Key.TriggeredByButton\n                })\n                .ToList();\n\n            // Build final breakdown\n            var breakdown = grouped.Select(g => new FlowAnalyticsStepJourneyDto\n            {\n                StepId = g.StepId,\n                TemplateName = g.TemplateName,\n                TotalReached = g.TotalReached,\n                ClickedNext = g.ClickedNext,\n              //  DropOff = g.TotalReached - g.ClickedNext,\n                NextStepId = _context.FlowButtonLinks\n                    .Where(bl =>\n                        bl.CTAFlowStepId == g.StepId &&\n                        bl.ButtonText == g.TriggeredByButton)\n                    .Select(bl => bl.NextStepId)\n                    .FirstOrDefault()\n            }).ToList();\n\n            return breakdown;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/FlowAnalytics/Services/IFlowAnalyticsService.cs",
          "sha256": "65a623c78188e9581eee608e1e5e53404f8431fb317139d50a4caadd86b074ae",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.FlowAnalytics.DTOs;\n\nnamespace xbytechat.api.Features.FlowAnalytics.Services\n{\n    public interface IFlowAnalyticsService\n    {\n        Task<FlowAnalyticsSummaryDto> GetAnalyticsSummaryAsync(Guid businessId);\n        Task<List<MostTriggeredStepDto>> GetMostTriggeredStepsAsync(Guid businessId);\n        Task<List<FlowAnalyticsStepJourneyDto>> GetStepJourneyBreakdownAsync(Guid businessId, DateTime? startDate, DateTime? endDate);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Controllers/InboxController.cs",
          "sha256": "309176361f2834ed7c983d99dc96ebb6b7298e35e99a528c40c981257176063a",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Helpers;\nusing Microsoft.AspNetCore.Authorization;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.Inbox.Controllers\n{\n    [ApiController]\n    [Route(\"api/inbox\")]\n    public class InboxController : ControllerBase\n    {\n        private readonly IInboxService _inboxService;\n\n        public InboxController(IInboxService inboxService)\n        {\n            _inboxService = inboxService;\n        }\n\n        /// <summary>\n        /// Send a new message from UI or system.\n        /// </summary>\n        [HttpPost(\"send\")]\n        public async Task<IActionResult> SendMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Message content is required.\");\n\n            var result = await _inboxService.SaveOutgoingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Receive a message from external source (e.g., WhatsApp webhook).\n        /// </summary>\n        [HttpPost(\"receive\")]\n        public async Task<IActionResult> ReceiveMessage([FromBody] InboxMessageDto dto)\n        {\n            if (dto == null || string.IsNullOrWhiteSpace(dto.MessageBody))\n                return BadRequest(\"Incoming message content is required.\");\n\n            var result = await _inboxService.SaveIncomingMessageAsync(dto);\n            return Ok(result);\n        }\n\n        /// <summary>\n        /// Fetch message history between agent and customer using business token + contactId.\n        /// </summary>\n        [HttpGet(\"messages\")]\n        public async Task<IActionResult> GetMessagesByContact([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            var messages = await _inboxService.GetMessagesByContactAsync(businessId, contactId);\n            return Ok(messages);\n        }\n\n        /// <summary>\n        /// Fetch full conversation between agent (userPhone) and customer (contactPhone).\n        /// </summary>\n        [HttpGet(\"conversation\")]\n        public async Task<IActionResult> GetConversation(\n            [FromQuery] Guid businessId,\n            [FromQuery] string userPhone,\n            [FromQuery] string contactPhone)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(userPhone) || string.IsNullOrWhiteSpace(contactPhone))\n                return BadRequest(\"Invalid input.\");\n\n            var messages = await _inboxService.GetConversationAsync(businessId, userPhone, contactPhone);\n            return Ok(messages);\n        }\n\n        //[HttpGet(\"unread-counts\")]\n        //public async Task<IActionResult> GetUnreadCounts()\n        //{\n        //    var businessId = User.GetBusinessId();\n        //    var counts = await _inboxService.GetUnreadMessageCountsAsync(businessId);\n        //    return Ok(counts);\n        //}\n\n        [HttpPost(\"mark-read\")]\n        public async Task<IActionResult> MarkMessagesAsRead([FromQuery] Guid contactId)\n        {\n            if (contactId == Guid.Empty)\n                return BadRequest(\"ContactId is required.\");\n\n            var businessId = User.GetBusinessId();\n            await _inboxService.MarkMessagesAsReadAsync(businessId, contactId);\n            return Ok();\n        }\n        [HttpGet(\"unread-counts\")]\n        public async Task<IActionResult> GetUnreadCounts()\n        {\n            var userId = User.GetUserId();\n            var businessId = User.GetBusinessId();\n\n            var counts = await _inboxService.GetUnreadCountsForUserAsync(businessId, userId);\n            return Ok(counts);\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/DTOs/InboxMessageDto.cs",
          "sha256": "aef9beda43a0dc4f1c619514c3289f6c68a6daf10fe5cdd46ad13c474be29c0b",
          "language": "csharp",
          "content": "// 📄 File: Features/Inbox/DTOs/InboxMessageDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class InboxMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientPhone { get; set; }\n        public string MessageBody { get; set; }\n        public Guid? ContactId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }       // 🆕 To show in chat bubble\n        public string? RenderedBody { get; set; }\n\n        public bool IsIncoming { get; set; }            // 🆕 Needed for bubble side\n        public string Status { get; set; }              // 🆕 For message ticks\n        public DateTime SentAt { get; set; }            // 🆕 For timestamp\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/DTOs/SendInboxMessageDto.cs",
          "sha256": "1ad0e0e61748e9f9e1fab32e1fe533c57a6c8d586694e55aa5b531359804de90",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat.api.Features.Inbox.DTOs\n{\n    /// <summary>\n    /// DTO sent from frontend when a user sends a new message.\n    /// </summary>\n    public class SendInboxMessageDto\n    {\n        [Required]\n        public Guid ContactId { get; set; }\n\n        [Required]\n        public string MessageBody { get; set; }\n\n        public string? MediaUrl { get; set; } // Optional image or file\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/DTOs/SendMessageInputDto.cs",
          "sha256": "3c76bd2b5ce839064134b72aa2114c14c73a98109c680671f5e7c463867f221a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class SendMessageInputDto\n    {\n        public Guid ContactId { get; set; } // 🔁 REMOVE the \"?\" (nullable) unless needed\n        public string Message { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/DTOs/TextOnlyMessageSendDto.cs",
          "sha256": "2d322145a5e6410decb150b108c7d74a656201d9be027b99b02d1c261b4ed4fc",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Inbox.DTOs\n{\n    public class TextOnlyMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Hubs/InboxHub.cs",
          "sha256": "2457d506ef6f58ed908e2183358c0506f59e9404b1d8fdb8ae97553d266a5206",
          "language": "csharp",
          "content": "// 📄 xbytechat.api/Features/Inbox/InboxHub.cs\n\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Hubs\n{\n    [Authorize]\n    public class InboxHub : Hub\n    {\n        private readonly AppDbContext _db;\n        private readonly IMessageEngineService _messageService;\n\n        public InboxHub(AppDbContext db, IMessageEngineService messageService)\n        {\n            _db = db;\n            _messageService = messageService;\n        }\n\n        public override async Task OnConnectedAsync()\n        {\n            var businessId = Context.User.GetBusinessId();\n            var groupName = $\"business_{businessId}\";\n\n            await Groups.AddToGroupAsync(Context.ConnectionId, groupName);\n            Console.WriteLine($\"✅ Connected to group: {groupName}\");\n\n            await base.OnConnectedAsync();\n        }\n\n        public async Task SendMessageToContact(SendMessageInputDto dto)\n        {\n            Console.WriteLine(\"📩 Raw DTO payload:\");\n            Console.WriteLine($\"ContactId: {dto.ContactId}, Message: {dto.Message}\");\n\n            if (dto.ContactId == null || string.IsNullOrWhiteSpace(dto.Message))\n            {\n                Console.WriteLine(\"❌ Invalid contact or empty message.\");\n                return;\n            }\n\n            var businessId = Context.User.GetBusinessId();\n            var userId = Context.User.GetUserId();\n\n            // ✅ Lookup recipient phone number from Contact table\n            var contact = await _db.Contacts\n                .Where(c => c.BusinessId == businessId && c.Id == dto.ContactId)\n                .FirstOrDefaultAsync();\n\n            if (contact == null || string.IsNullOrWhiteSpace(contact.PhoneNumber))\n            {\n                Console.WriteLine($\"❌ Contact not found or missing phone number. ContactId: {dto.ContactId}\");\n                await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", new\n                {\n                    contactId = dto.ContactId,\n                    message = dto.Message,\n                    from = userId,\n                    status = \"Failed\",\n                    error = \"Invalid contact\"\n                   \n                });\n                return;\n            }\n\n            // ✅ Prepare DTO for WhatsApp sending\n            var sendDto = new TextMessageSendDto\n            {\n                BusinessId = businessId,\n                ContactId = dto.ContactId,\n                RecipientNumber = contact.PhoneNumber,\n                TextContent = dto.Message\n            };\n\n            // 🚀 Send via WhatsApp API and save to MessageLogs\n            var result = await _messageService.SendTextDirectAsync(sendDto);\n\n            // ✅ Construct unified message payload\n            var inboxMessage = new\n            {\n                contactId = dto.ContactId,\n                message = dto.Message,\n                from = userId,\n                status = result.Success ? \"Sent\" : \"Failed\",\n                sentAt = DateTime.UtcNow,\n                logId = result.LogId,\n                senderId = userId,\n                isIncoming = false\n            };\n\n            // ✅ Notify sender only\n            await Clients.Caller.SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n\n            // ✅ Notify others in group (for unread update)\n            var groupName = $\"business_{businessId}\";\n            await Clients.GroupExcept(groupName, Context.ConnectionId)\n                .SendAsync(\"ReceiveInboxMessage\", inboxMessage);\n        }\n\n   \n        public async Task MarkAsRead(Guid contactId)\n        {\n            Console.WriteLine($\"🟢 MarkAsRead triggered for ContactId: {contactId}\");\n            var userId = Context.User?.GetUserId();\n            var businessId = Context.User?.GetBusinessId();\n\n            if (userId == null || businessId == null || businessId == Guid.Empty)\n                return;\n\n            var userGuid = userId.Value;\n            var businessGuid = businessId.Value;\n            var now = DateTime.UtcNow;\n\n            // ✅ Insert or Update ContactRead\n            var readEntry = await _db.ContactReads\n                .FirstOrDefaultAsync(r => r.ContactId == contactId && r.UserId == userGuid);\n\n            if (readEntry == null)\n            {\n                Console.WriteLine(\"📥 New ContactRead will be added.\");\n                _db.ContactReads.Add(new ContactRead\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessGuid,\n                    ContactId = contactId,\n                    UserId = userGuid,\n                    LastReadAt = now\n                });\n            }\n            else\n            {\n                Console.WriteLine($\"🔄 Updating LastReadAt for contact {contactId}\");\n                readEntry.LastReadAt = now;\n            }\n\n            await _db.SaveChangesAsync();\n            Console.WriteLine(\"💾 ContactReads saved successfully.\");\n            // ✅ Step 1: Get message logs (DB)\n            var allMessages = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessGuid && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // ✅ Step 2: Get contactReads (DB)\n            var contactReads = await _db.ContactReads\n                .Where(r => r.UserId == userGuid)\n                .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // ✅ Step 3: Now calculate unread counts in-memory (C# LINQ)\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n            // ✅ Push real-time update to user\n            await Clients.User(userGuid.ToString())\n                .SendAsync(\"UnreadCountChanged\", unreadCounts);\n        }\n\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Models/ChatSessionState.cs",
          "sha256": "fa6184f30e1715455ee5b84ae75264c5cc2d46ed4f1721014141ed9036dfda64",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Inbox.Models\n{\n    public class ChatSessionState\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n\n        public string Mode { get; set; } = \"automation\"; // values: \"automation\" | \"agent\"\n        public DateTime LastUpdatedAt { get; set; } = DateTime.UtcNow;\n\n        // Optional: track who switched the mode\n        public string? UpdatedBy { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Models/ContactRead.cs",
          "sha256": "aa4dd9980bc6485cf1c4981bf7dfff84f32dcfbacc6c9dbc3be4ba0429c065c6",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Inbox.Models\n{\n    public class ContactRead\n    {\n        public Guid Id { get; set; }\n\n        // 🔗 FK to Contact\n        public Guid ContactId { get; set; }\n\n        // 🔗 FK to User (Agent)\n        public Guid UserId { get; set; }\n\n        // 📅 Last time this agent opened this contact's chat\n        public DateTime LastReadAt { get; set; } = DateTime.UtcNow;\n\n        public Guid BusinessId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Repositories/IInboxRepository.cs",
          "sha256": "d057575abdee0fe95972b5dcfafa6e7637884f526bb108c43b06bbb1b2d2a5bd",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public interface IInboxRepository\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone);\n        Task AddMessageAsync(MessageLog message);\n        Task SaveChangesAsync();\n        Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Repositories/InboxRepository.cs",
          "sha256": "06153117fc580e3c5239560868ec16dd5f41d963a159eec8ad96f569afa9bb29",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Repositories\n{\n    public class InboxRepository : IInboxRepository\n    {\n        private readonly AppDbContext _context;\n\n        public InboxRepository(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(limit)\n                .ToListAsync();\n        }\n\n        public async Task<MessageLog?> GetLastMessageAsync(Guid businessId, string userPhone, string contactPhone)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            ((m.RecipientNumber == contactPhone && m.IsIncoming == false) ||\n                             (m.RecipientNumber == userPhone && m.IsIncoming == true)))\n                .OrderByDescending(m => m.CreatedAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task AddMessageAsync(MessageLog message)\n        {\n            await _context.MessageLogs.AddAsync(message);\n        }\n\n        public async Task SaveChangesAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n        public async Task<List<MessageLog>> GetMessagesByContactIdAsync(Guid businessId, Guid contactId)\n        {\n            return await _context.MessageLogs\n                 .Include(m => m.SourceCampaign)\n                .Where(m => m.BusinessId == businessId && m.ContactId == contactId)\n                .OrderBy(m => m.CreatedAt)\n                .ToListAsync();\n        }\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\" &&\n                            m.ContactId != null) // ✅ ensure not null\n                .GroupBy(m => m.ContactId!.Value) // ✅ safe cast to Guid\n                .Select(g => new { ContactId = g.Key, Count = g.Count() })\n                .ToDictionaryAsync(x => x.ContactId, x => x.Count);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            var unreadMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId &&\n                            m.ContactId == contactId &&\n                            m.IsIncoming &&\n                            m.Status != \"Read\")\n                .ToListAsync(); \n            foreach (var msg in unreadMessages)\n                msg.Status = \"Read\";\n\n            await _context.SaveChangesAsync();\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n                    var contactReads = await _context.ContactReads\n             .Where(r => r.UserId == userId)\n             .ToDictionaryAsync(r => r.ContactId, r => r.LastReadAt);\n\n            // 🟢 Fetch from DB first (no logic yet)\n            var allMessages = await _context.MessageLogs\n                .Where(m => m.BusinessId == businessId && m.IsIncoming && m.ContactId != null)\n                .ToListAsync();\n\n            // 🧠 Now calculate in memory\n            var unreadCounts = allMessages\n                .GroupBy(m => m.ContactId!.Value)\n                .ToDictionary(\n                    g => g.Key,\n                    g => g.Count(m =>\n                        !contactReads.ContainsKey(g.Key) ||\n                        (m.SentAt ?? m.CreatedAt) > contactReads[g.Key])\n                );\n\n\n            return unreadCounts;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Services/AgentAssignmentService.cs",
          "sha256": "de9062b213ba63cb8695f407ede5c9e8d52a589e0dc1c7a4c5c79fd243389e4e",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class AgentAssignmentService : IAgentAssignmentService\n    {\n        private readonly ILogger<AgentAssignmentService> _logger;\n\n        public AgentAssignmentService(ILogger<AgentAssignmentService> logger)\n        {\n            _logger = logger;\n        }\n\n        public Task<bool> IsAgentAvailableAsync(Guid businessId)\n        {\n            // 🔧 TODO: Replace with real logic based on your agent pool\n            _logger.LogInformation(\"Checking if agent is available for business {BusinessId}\", businessId);\n            return Task.FromResult(true); // Assume always available for MVP\n        }\n\n        public Task AssignAgentToContactAsync(Guid businessId, Guid contactId)\n        {\n            // 🔧 TODO: Save agent-contact assignment to DB or notify a human agent\n            _logger.LogInformation(\"Assigning agent to contact {ContactId} for business {BusinessId}\", contactId, businessId);\n            return Task.CompletedTask;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Services/ChatSessionStateService.cs",
          "sha256": "5c6672bd07d87501ca9d46e38085cbec03455bae6cc943c8b8df505a7c73808e",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.AutoReplyBuilder.Models;\nusing xbytechat.api.Features.Inbox.Models;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class ChatSessionStateService : IChatSessionStateService\n    {\n        private readonly AppDbContext _db;\n\n        public ChatSessionStateService(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        // ✅ Returns current chat mode: \"agent\" or \"auto\"\n        public async Task<string> GetChatModeAsync(Guid businessId, Guid contactId)\n        {\n            var session = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            return session?.Mode ?? \"auto\"; // Default to auto\n        }\n\n        // ✅ Switches to agent mode\n        public async Task SwitchToAgentModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"agent\");\n        }\n\n        // ✅ Switches to automation mode\n        public async Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId)\n        {\n            await UpsertChatModeAsync(businessId, contactId, \"auto\");\n        }\n\n        // ✅ Shared logic to insert or update session state\n        private async Task UpsertChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var existing = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(s => s.BusinessId == businessId && s.ContactId == contactId);\n\n            if (existing != null)\n            {\n                existing.Mode = mode;\n                existing.LastUpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                _db.ChatSessionStates.Add(new ChatSessionState\n                {\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                });\n            }\n\n            await _db.SaveChangesAsync();\n        }\n\n        public async Task SetChatModeAsync(Guid businessId, Guid contactId, string mode)\n        {\n            var state = await _db.ChatSessionStates\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.ContactId == contactId);\n\n            if (state == null)\n            {\n                // Insert new if not exists\n                state = new ChatSessionState\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contactId,\n                    Mode = mode,\n                    LastUpdatedAt = DateTime.UtcNow\n                };\n                _db.ChatSessionStates.Add(state);\n            }\n            else\n            {\n                state.Mode = mode;\n                state.LastUpdatedAt = DateTime.UtcNow;\n            }\n\n            await _db.SaveChangesAsync();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Services/IAgentAssignmentService.cs",
          "sha256": "1eae6f670d61efc4cd6f430a93cf7188c26a6d521ae49cd50ab926aa5bc027ee",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IAgentAssignmentService\n    {\n        Task<bool> IsAgentAvailableAsync(Guid businessId);\n        Task AssignAgentToContactAsync(Guid businessId, Guid contactId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Services/IChatSessionStateService.cs",
          "sha256": "3ade6df9341ebca2e5a478331e57315273317bc803a529a4e068cccc323f1693",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IChatSessionStateService\n    {\n        Task<string> GetChatModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAgentModeAsync(Guid businessId, Guid contactId);\n        Task SwitchToAutomationModeAsync(Guid businessId, Guid contactId);\n        Task SetChatModeAsync(Guid businessId, Guid contactId, string mode);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Services/IInboxService.cs",
          "sha256": "58b2b14fb055263d0f08348900a55c5cbd62c16609e1b4ba082beb34a84efc49",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public interface IInboxService\n    {\n        Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50);\n        Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto);\n        Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto);\n        Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId);\n        Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId);\n        Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId);\n\n        Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/Services/InboxService.cs",
          "sha256": "8bbfdb66619466ec1c134351db9fc8b8fd32a8d30a45da7c3d142e41f17ae8f7",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Inbox.Services\n{\n    public class InboxService : IInboxService\n    {\n        private readonly IInboxRepository _repository;\n\n        public InboxService(IInboxRepository repository)\n        {\n            _repository = repository;\n        }\n\n        public async Task<List<MessageLog>> GetConversationAsync(Guid businessId, string userPhone, string contactPhone, int limit = 50)\n        {\n            return await _repository.GetConversationAsync(businessId, userPhone, contactPhone, limit);\n        }\n\n        public async Task<MessageLog> SaveIncomingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = true,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n\n        public async Task<MessageLog> SaveOutgoingMessageAsync(InboxMessageDto dto)\n        {\n            var message = new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = dto.BusinessId,\n                RecipientNumber = dto.RecipientPhone,\n                MessageContent = dto.MessageBody,\n                IsIncoming = false,\n                CreatedAt = DateTime.UtcNow,\n                ContactId = dto.ContactId,\n                CTAFlowStepId = dto.CTAFlowStepId,\n                CTAFlowConfigId = dto.CTAFlowConfigId,\n                CampaignId = dto.CampaignId,\n                RenderedBody = dto.RenderedBody\n            };\n\n            await _repository.AddMessageAsync(message);\n            await _repository.SaveChangesAsync();\n\n            return message;\n        }\n   \n        public async Task<List<MessageLogDto>> GetMessagesByContactAsync(Guid businessId, Guid contactId)\n        {\n            var messages = await _repository.GetMessagesByContactIdAsync(businessId, contactId);\n\n            return messages.Select(m => new MessageLogDto\n            {\n                Id = m.Id,\n                ContactId = m.ContactId,\n                RecipientNumber = m.RecipientNumber, // ✅ optional but helpful\n                MessageContent = m.MessageContent,\n                CreatedAt = m.CreatedAt,\n                IsIncoming = m.IsIncoming,\n                RenderedBody = m.RenderedBody,\n                CampaignId = m.CampaignId,\n                CampaignName = m.SourceCampaign?.Name, // ✅ ✅ This is crucial\n                CTAFlowConfigId = m.CTAFlowConfigId,\n                CTAFlowStepId = m.CTAFlowStepId\n            }).ToList();\n        }\n\n\n        public async Task<Dictionary<Guid, int>> GetUnreadMessageCountsAsync(Guid businessId)\n        {\n            return await _repository.GetUnreadMessageCountsAsync(businessId);\n        }\n        public async Task MarkMessagesAsReadAsync(Guid businessId, Guid contactId)\n        {\n            await _repository.MarkMessagesAsReadAsync(businessId, contactId);\n        }\n        public async Task<Dictionary<Guid, int>> GetUnreadCountsForUserAsync(Guid businessId, Guid userId)\n        {\n            return await _repository.GetUnreadCountsForUserAsync(businessId, userId);\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Inbox/SignalR/NameUserIdProvider.cs",
          "sha256": "177581fc6482f75de65f8a7db7a93d17a7d887e148d35eb77ca640d9df0e311f",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.SignalR;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.SignalR\n{\n    public class NameUserIdProvider : IUserIdProvider\n    {\n        public string? GetUserId(HubConnectionContext connection)\n        {\n            return connection.User?.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessageManagement/Controllers/MessageStatusController.cs",
          "sha256": "b0d7d3e99be2a95698a0e358da794c0d0f53a81c7f38846322df111c19fd0fbb",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\n\nnamespace xbytechat.api.Features.MessageManagement.Controllers\n{\n    [ApiController]\n    [Route(\"api/message-status\")]\n    public class MessageStatusController : ControllerBase\n    {\n        private readonly IMessageStatusService _service;\n        private readonly ILogger<MessageStatusController> _logger;\n        private readonly AppDbContext _context;\n        private readonly IConfiguration _config;\n        public MessageStatusController(\n    IMessageStatusService service,\n    ILogger<MessageStatusController> logger,\n    AppDbContext context,\n    IConfiguration config)\n        {\n            _service = service;\n            _logger = logger;\n            _context = context;\n            _config = config;\n        }\n\n        // ✅ STEP 1: Webhook Verification (GET)\n        [HttpGet(\"webhook\")]\n        public IActionResult VerifyWebhook([FromQuery(Name = \"hub.mode\")] string mode,\n                                    [FromQuery(Name = \"hub.verify_token\")] string token,\n                                    [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            //var VERIFY_TOKEN = _config[\"WhatsApp:MetaToken\"]; // ✅ pulled from config\n\n            if (mode == \"subscribe\" && token == \"xbytechat-secret-token\")\n            {\n                _logger.LogInformation(\"✅ Webhook verified.\");\n                return Ok(challenge);\n            }\n\n            _logger.LogWarning(\"❌ Webhook verification failed.\");\n            return Forbid();\n        }\n\n\n        // ✅ STEP 2: Webhook Payload (POST)\n        [HttpPost(\"webhook\")]\n        public async Task<IActionResult> ReceiveStatus([FromBody] WebhookStatusDto dto)\n        {\n            if (dto == null || dto.statuses == null || dto.statuses.Count == 0)\n            {\n                _logger.LogWarning(\"⚠️ Invalid webhook payload received.\");\n                return BadRequest(\"Invalid payload\");\n            }\n\n            await _service.LogWebhookStatusAsync(dto);\n            _logger.LogInformation(\"✅ Webhook status processed successfully.\");\n\n            return Ok(new { success = true });\n        }\n\n        // ✅ STEP 3: Frontend UI (GET Logs)\n        [HttpGet]\n        public async Task<IActionResult> GetStatusLogs([FromQuery] Guid businessId)\n        {\n            var logs = await _context.MessageStatusLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100)\n                .Select(x => new\n                {\n                    x.MessageId,\n                    x.RecipientNumber,\n                    x.Status,\n                    x.SentAt,\n                    x.DeliveredAt,\n                    x.ReadAt,\n                    x.ErrorMessage,\n                    x.TemplateCategory,\n                    x.MessageType\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = logs });\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessageManagement/DTOs/MessageLogDto.cs",
          "sha256": "c0f207826b70160db8814aaf2e5fcf92174c9b5b7d0904bf27f60163fb2ca516",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageLogDto\n    {\n        public Guid Id { get; set; }\n        public Guid? ContactId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public bool IsIncoming { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public string? RenderedBody { get; set; }\n        public Guid? CampaignId { get; set; }\n        public string? CampaignName { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/MessageManagement/DTOs/WebhookStatusDto.cs",
          "sha256": "aeb1bd281f5cc025fcc6c5a2a924daf3078c9e774d3fad3860626f871caad053",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class WebhookStatusDto\n    {\n        public List<StatusObject> statuses { get; set; }\n    }\n\n    public class StatusObject\n    {\n        public string id { get; set; }                     // Message ID (WAMID)\n        public string status { get; set; }                 // sent, delivered, read, failed\n        public long timestamp { get; set; }                // UNIX timestamp\n        public string recipient_id { get; set; }           // Phone number\n        public ConversationInfo conversation { get; set; }\n        public PricingInfo pricing { get; set; }\n        public List<ErrorInfo>? errors { get; set; }\n    }\n\n    public class ConversationInfo\n    {\n        public string id { get; set; }\n        public Origin origin { get; set; }\n    }\n\n    public class Origin\n    {\n        public string type { get; set; }                   // marketing, utility, etc.\n    }\n\n    public class PricingInfo\n    {\n        public bool billable { get; set; }\n        public string pricing_model { get; set; }\n        public string category { get; set; }               // Template category\n    }\n\n    public class ErrorInfo\n    {\n        public int code { get; set; }\n        public string title { get; set; }\n        public string details { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessageManagement/Models/MessageStatusLog.cs",
          "sha256": "3e0a8a53cdfb329873018f1c8d6d53c03ef5c6be3e10247853ed67761cafbb4f",
          "language": "csharp",
          "content": "using System.ComponentModel.DataAnnotations.Schema;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.AuthModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\n\nnamespace xbytechat.api.Features.MessageManagement.DTOs\n{\n    public class MessageStatusLog\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        // 🔗 Who is it for\n        public string RecipientNumber { get; set; }\n        public string? CustomerProfileName { get; set; }\n\n        // 📩 WhatsApp Message Info\n       // [ForeignKey(nameof(Message))]\n        public string? MessageId { get; set; } // WAMID\n\n       // public MessageLog? Message { get; set; }\n        public string Status { get; set; }\n        public string MessageType { get; set; }\n\n        // 🧾 Template Info\n        public string? TemplateName { get; set; }\n        public string? TemplateCategory { get; set; }\n\n        // 🧠 Analytics/Reporting\n        public string Channel { get; set; } = \"whatsapp\";\n        public bool IsSessionOpen { get; set; }\n        public long? MetaTimestamp { get; set; }\n\n        // 🕒 Timestamps\n        public DateTime? SentAt { get; set; }\n        public DateTime? DeliveredAt { get; set; }\n        public DateTime? ReadAt { get; set; }\n\n        // ❌ Error Tracking\n        public string? ErrorMessage { get; set; }\n        public int? ErrorCode { get; set; }\n\n        // 🔍 Raw Log (for audit/debug)\n        public string? RawPayload { get; set; }\n\n        // 🔗 Foreign Keys\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; }\n\n        public Guid? BusinessId { get; set; }\n        public Business? Business { get; set; }\n\n        public Guid? UserId { get; set; }\n        public User? User { get; set; }\n\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        // ✅ Navigation using alternate key (WAMID)\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessageManagement/Services/IMessageStatusService.cs",
          "sha256": "cca96e16b96ab978d9e4c344d9a12a8377da0c701b18ea3e5e1bb981d1d6578a",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public interface IMessageStatusService\n    {\n        Task LogWebhookStatusAsync(WebhookStatusDto dto);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessageManagement/Services/MessageStatusService.cs",
          "sha256": "f68c41d4a80e28d1b1de9da188c8b43c756b495494588de6fd11c8275d59a544",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.AuthModule.Models;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.MessageManagement.Services\n{\n    public class MessageStatusService : IMessageStatusService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageStatusService> _logger;\n\n        public MessageStatusService(AppDbContext context, ILogger<MessageStatusService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogWebhookStatusAsync(WebhookStatusDto dto)\n        {\n            foreach (var status in dto.statuses)\n            {\n                var log = new MessageStatusLog\n                {\n                    Id = Guid.NewGuid(),\n                    MessageId = status.id,\n                    Status = status.status.ToLower(),\n                    RecipientNumber = status.recipient_id,\n                    MetaTimestamp = status.timestamp,\n                    TemplateCategory = status?.pricing?.category,\n                    MessageType = status?.conversation?.origin?.type ?? \"session\",\n                    Channel = \"whatsapp\",\n                    CreatedAt = DateTime.UtcNow,\n                    RawPayload = System.Text.Json.JsonSerializer.Serialize(status)\n                };\n\n                var statusTime = DateTimeOffset.FromUnixTimeSeconds(status.timestamp).UtcDateTime;\n\n                switch (status.status.ToLower())\n                {\n                    case \"sent\": log.SentAt = statusTime; break;\n                    case \"delivered\": log.DeliveredAt = statusTime; break;\n                    case \"read\": log.ReadAt = statusTime; break;\n                }\n\n                if (status.errors != null && status.errors.Count > 0)\n                {\n                    log.ErrorMessage = status.errors[0].details;\n                    log.ErrorCode = status.errors[0].code;\n                }\n\n                await _context.MessageStatusLogs.AddAsync(log);\n            }\n\n            // ⛑️ Wrap in try-catch and log full inner exception\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"❌ SaveChangesAsync failed: \" + ex.Message);\n                _logger.LogError(\"❌ Inner exception: \" + ex.InnerException?.Message);\n                throw;\n            }\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/Controllers/MessageEngineController.cs",
          "sha256": "5bb38763d87308f4e4eca04c070150bb16bf85c0669dea83188183286c2906ae",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.MessagesEngine.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class MessageEngineController : ControllerBase\n    {\n        private readonly IMessageEngineService _messageEngineService;\n        private readonly IMessageAnalyticsService _messageAnalyticsServiceervice;\n\n\n        public MessageEngineController(IMessageEngineService messageService,IMessageAnalyticsService messageAnalyticsService)\n        {\n            _messageEngineService = messageService;\n            _messageAnalyticsServiceervice = messageAnalyticsService;\n        }\n        [HttpPost(\"send-text\")]\n        public async Task<IActionResult> SendTextMessage([FromBody] TextMessageSendDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"❌ Invalid text message payload.\"));\n\n            try\n            {\n                var result = await _messageEngineService.SendTextDirectAsync(dto); // 👈 New direct method\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message, result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Exception while sending text message: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"🚨 Server error while sending text message.\", ex.ToString()));\n            }\n        }\n\n\n        [HttpPost(\"send-template-simple\")]\n        public async Task<IActionResult> SendTemplateMessageSimple([FromBody] SimpleTemplateMessageDto dto)\n        {\n            if (!ModelState.IsValid)\n                return BadRequest(ResponseResult.ErrorInfo(\"❌ Invalid template message request.\"));\n\n            try\n            {\n                var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n                if (!Guid.TryParse(businessIdClaim, out Guid businessId))\n                    return Unauthorized(ResponseResult.ErrorInfo(\"❌ Business ID not found in token.\"));\n\n                var result = await _messageEngineService.SendTemplateMessageSimpleAsync(businessId, dto);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(ResponseResult.ErrorInfo(result.Message ?? \"❌ Failed to send template.\", result.RawResponse));\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Exception while sending template: {ex.Message}\");\n                return StatusCode(500, ResponseResult.ErrorInfo(\"🚨 Server error while sending template.\", ex.ToString()));\n            }\n        }\n\n       \n        [HttpPost(\"send-image-campaign/{campaignId}\")]\n        public async Task<IActionResult> SendImageCampaign(Guid campaignId)\n        {\n            try\n            {\n                var businessId = UserClaimHelper.GetBusinessId(User); // ✅ from\n                                                                      // claims\n                var userName = UserClaimHelper.GetUserName(User);     // for logging (if needed)\n\n                var result = await _messageEngineService.SendImageCampaignAsync(campaignId, businessId, userName);\n\n                return result.Success\n                    ? Ok(result)\n                    : BadRequest(result);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Error while sending image campaign: \" + ex.Message);\n                return StatusCode(500, ResponseResult.ErrorInfo(\"Server error while sending campaign.\", ex.ToString()));\n            }\n        }\n        public static class UserClaimHelper\n        {\n            public static Guid GetBusinessId(ClaimsPrincipal user)\n            {\n                var claim = user.Claims.FirstOrDefault(c => c.Type == \"businessId\");\n                return claim != null ? Guid.Parse(claim.Value) : Guid.Empty;\n            }\n\n            public static string GetUserName(ClaimsPrincipal user)\n            {\n                return user?.Identity?.Name ?? \"Unknown\";\n            }\n        }\n\n        //[HttpPost(\"send-image-template\")]\n        //public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        //{\n        //    if (string.IsNullOrWhiteSpace(dto.RecipientNumber) || string.IsNullOrWhiteSpace(dto.TemplateName))\n        //        return BadRequest(new { message = \"RecipientNumber and TemplateName are required.\" });\n\n        //    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto);\n\n        //    if (result.Success)\n        //        return Ok(new { message = result.Message, raw = result.RawResponse });\n\n        //    return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n        //[HttpPost(\"send-image-template\")]\n        //public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        //{\n        //    // Extract BusinessId from claims (assuming it's saved as \"BusinessId\" claim)\n        //    var businessIdClaim = User.Claims.FirstOrDefault(c => c.Type == \"BusinessId\")?.Value;\n        //    if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n        //        return Unauthorized(new { message = \"BusinessId not found in user claims.\" });\n\n        //    // Pass businessId explicitly to the service\n        //    var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n        //    if (result.Success)\n        //        return Ok(new { message = result.Message, raw = result.RawResponse });\n\n        //    return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        //}\n        [HttpPost(\"send-image-template\")]\n        public async Task<IActionResult> SendImageTemplateMessage([FromBody] ImageTemplateMessageDto dto)\n        {\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // Uses your extension method!\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                return Unauthorized(new { message = ex.Message });\n            }\n\n            var result = await _messageEngineService.SendImageTemplateMessageAsync(dto, businessId);\n\n            if (result.Success)\n                return Ok(new { message = result.Message, raw = result.RawResponse });\n\n            return BadRequest(new { message = result.Message, raw = result.RawResponse });\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId();\n            var logs = await _messageAnalyticsServiceervice.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n\n\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/AutoSendTemplateMessageDto.cs",
          "sha256": "99519bdaed8df38337d3485148cfc53b4972c2616ebb386417321455ad582576",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class AutoSendTemplateMessageDto\n    {\n        public Guid BusinessId { get; set; }\n        public Guid ContactId { get; set; }\n        public string PhoneNumber { get; set; }\n        public Guid TemplateId { get; set; }\n        public string TemplateName { get; set; }\n        public Dictionary<string, string> Placeholders { get; set; } = new();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/CtaButtonDto.cs",
          "sha256": "60ecf5aa33d787f635ef05f11c48b8f9f6a11d48b2d7322f7f2ef575b91f9657",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class CtaButtonDto\n    {\n        public string Title { get; set; } = string.Empty; // e.g., \"Buy Now\", \"View Details\"\n        public string Type { get; set; } = string.Empty;\n        public string Value { get; set; } = string.Empty;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/ImageTemplateMessageDto.cs",
          "sha256": "97564675c3c457ff71f51a241ad4cbca69ec60eaab2b81b81c14fb2360ae34f0",
          "language": "csharp",
          "content": "using xbytechat.api.Features.CampaignModule.DTOs;\n\npublic class ImageTemplateMessageDto\n{\n    public Guid BusinessId { get; set; }\n    public string RecipientNumber { get; set; }\n    public string TemplateName { get; set; }\n    public string LanguageCode { get; set; } = \"en_US\";\n    public string HeaderImageUrl { get; set; }\n    public List<string> TemplateParameters { get; set; } = new();\n    public List<CampaignButtonDto> ButtonParameters { get; set; } = new();\n\n    // ✅ Add these two for flow tracking\n    public Guid? CTAFlowConfigId { get; set; }\n    public Guid? CTAFlowStepId { get; set; }\n    public string? TemplateBody { get; set; }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/MessageTypeEnum.cs",
          "sha256": "d3120f117dc16b8ab9901ba3726defab664b2a9b4a5414eff586e7e27f55062a",
          "language": "csharp",
          "content": "using System.Text.Json.Serialization;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [JsonConverter(typeof(JsonStringEnumConverter))] // Enables string parsing in JSON\n    public enum MessageTypeEnum\n    {\n        Text,\n        Image,\n        Template,\n        Cta\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendMessageDto.cs",
          "sha256": "1c45c09fda3fbb66ba843912c7617fe09447ec841b82f4b0f5c2a08cf8341fc1",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs.Validation;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    [ValidateMessageDto] // ✅ Custom validator will enforce conditional field rules\n    public class SendMessageDto\n    {\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [Phone]\n        public string RecipientNumber { get; set; } = string.Empty;\n\n        [Required]\n        public MessageTypeEnum MessageType { get; set; }\n\n        // 📝 Text Message\n        public string? TextContent { get; set; }\n\n        // 🖼️ Image Message\n        public string? MediaUrl { get; set; }\n\n        // 📋 Template Message\n        public string? TemplateName { get; set; }\n        public Dictionary<string, string>? TemplateParameters { get; set; }\n\n        // 🛒 CTA Message\n        public List<CtaButtonDto>? CtaButtons { get; set; }\n\n        // ✅ Required: this was missing [Optional but needed for CTA/Template message sending]\n        public List<string>? ButtonParams { get; set; }\n\n        // 📊 Optional Metadata\n        public Guid? CampaignId { get; set; }\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n\n        public string? SourceModule { get; set; }\n        public string? CustomerId { get; set; }\n        public string? CustomerName { get; set; }\n        public string? CustomerPhone { get; set; }\n        public string? BotId { get; set; }\n        public string? RefMessageId { get; set; }\n        public string? CTATriggeredFrom { get; set; }\n        public DateTime? ScheduledAt { get; set; }\n\n        // ✅ Add these two for flow tracking\n        public string? TemplateBody { get; set; }  // 🔥 Used to render actual message body from placeholders\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/SendTemplateMessageSimpleDto.cs",
          "sha256": "00dc74bb6a1b396bab6fcd63f93454cfd59671260c4da8b0afd8754e83e10ce8",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SendTemplateMessageSimpleDto\n    {\n        public Guid BusinessId { get; set; }\n        public string RecipientNumber { get; set; }\n        public string TemplateName { get; set; }\n        public List<string> TemplateParameters { get; set; } = new();\n        // ✅ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/SimpleTemplateMessageDto.cs",
          "sha256": "13b09ae3db26e3770de01db13a5f5dabff0f7e5b09c9ed73dc44272e47699ac2",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class SimpleTemplateMessageDto\n    {\n        //public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TemplateName { get; set; }\n\n        public List<string> TemplateParameters { get; set; } = new();\n        public bool HasStaticButtons { get; set; } = false;\n\n        // ✅ Add these two for flow tracking\n        public Guid? CTAFlowConfigId { get; set; }\n        public Guid? CTAFlowStepId { get; set; }\n        public string? TemplateBody { get; set; }  // 🔥 Used to render actual message body from placeholders\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/TemplateForUIResponseDto.cs",
          "sha256": "9b7be7ee8b48ca30422fe6b4ee2eb6af563f79ae7abad04aaaab9fdb4658612b",
          "language": "csharp",
          "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\npublic class TemplateForUIResponseDto\n{\n    public string Name { get; set; }\n    public string Language { get; set; }\n    public string Body { get; set; }\n\n    // ✅ Correct naming for frontend\n    public int ParametersCount { get; set; }\n\n    public List<ButtonMetadataDto> ButtonParams { get; set; }\n    public bool HasImageHeader { get; set; } // 🆕 Used to detect image templates\n\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/DTOs/TextMessageSendDto.cs",
          "sha256": "7b96b59a33cc5ad7c6b1d5d926ecb2a851478863db2de77661a8b2ae5409e90a",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.MessagesEngine.DTOs\n{\n    public class TextMessageSendDto\n    {\n        public Guid BusinessId { get; set; }\n\n        public string RecipientNumber { get; set; }\n\n        public string TextContent { get; set; }\n\n        public Guid ContactId { get; set; }\n\n        // ✅ NEW: Optional source indicator (e.g., \"campaign\", \"auto-reply\", etc.)\n        public string? Source { get; set; }\n\n        // ✅ NEW: Optional message ID for campaign tracing\n        public string? MessageId { get; set; }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/CtaMessagePayloadBuilder.cs",
          "sha256": "f23794fdb8775eff63c5d249f23e74b7ff5e4497daa7b255ce94693b3ba9a6f7",
          "language": "csharp",
          "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class CtaMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = dto.TextContent },\n                    action = new\n                    {\n                        buttons = dto.CtaButtons?.Select(b => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = b.Value,\n                                title = b.Title\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/ImageMessagePayloadBuilder.cs",
          "sha256": "1400148a9ed0b32af7ece6c87b111a1407feda0f5b651819257c5b740bb01106",
          "language": "csharp",
          "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = dto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
          "sha256": "89d6b688ba597eb931cd71401717698a692f3e3b645a02d60c1d73dae24731d3",
          "language": "csharp",
          "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(SendMessageDto dto);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/MessagePayloadBuilder.cs",
          "sha256": "5f3fdb0eec9de51853f33783973029ee43bf803491c0679c460374e2816f0d01",
          "language": "csharp",
          "content": "using xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Shared.utility;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public static class MessagePayloadBuilder\n    {\n        /// <summary>\n        /// Builds a WhatsApp template message payload for image header + buttons.\n        /// </summary>\n        public static object BuildImageTemplatePayload(\n            string templateName,\n            string languageCode,\n            string recipientNumber,\n            List<string> templateParams,\n            string? imageUrl,\n            List<CampaignButton>? buttons\n        )\n        {\n            var components = new List<object>();\n\n            // ✅ Body with template params\n            if (templateParams != null && templateParams.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateParams.Select(p => new { type = \"text\", text = p }).ToArray()\n                });\n            }\n\n            // ✅ Header image if present\n            if (!string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[]\n                    {\n                    new { type = \"image\", image = new { link = imageUrl } }\n                }\n                });\n            }\n\n            // ✅ CTA buttons\n            if (buttons != null && buttons.Any())\n            {\n                var buttonComponents = buttons\n                    .OrderBy(b => b.Position)\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type, // \"url\" or \"phone_number\"\n                        index = index.ToString(),\n                        parameters = new[]\n                        {\n                        new { type = \"text\", text = btn.Value }\n                        }\n                    });\n\n                components.AddRange(buttonComponents);\n            }\n\n            // ✅ Final WhatsApp Template Payload\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateName,\n                    language = new { code = languageCode },\n                    components = components\n                }\n            };\n        }\n    }\n\n}"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
          "sha256": "9f758fa90c76d160a238d286c153202e8e74f4de2261287d81cd8838f5ca8b40",
          "language": "csharp",
          "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            var components = new List<object>();\n\n            // ✅ BODY PARAMETERS: Insert dynamic values into the template body\n            // WhatsApp expects these to be in order ({{1}}, {{2}}, etc.)\n            if (dto.TemplateParameters == null || dto.TemplateParameters.Count == 0)\n                return ResponseResult.ErrorInfo(\"❌ Missing template parameters.\");\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n                {\n                var bodyParams = dto.TemplateParameters\n                    .OrderBy(kvp => int.Parse(kvp.Key.Trim('{', '}'))) // 🔢 Extract and sort by index\n                    .Select(kvp => new\n                    {\n                        type = \"text\",\n                        text = kvp.Value\n                    }).ToArray();\n\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = bodyParams\n                });\n            }\n\n            // ✅ BUTTON PARAMETERS: For templates with dynamic URL buttons (index-based)\n            if (dto.ButtonParams != null && dto.ButtonParams.Any())\n            {\n                for (int i = 0; i < dto.ButtonParams.Count; i++)\n                {\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = \"url\",\n                        index = i.ToString(), // WhatsApp requires index as a string\n                        parameters = new[]\n                        {\n                            new\n                            {\n                                type = \"text\",\n                                text = dto.ButtonParams[i]\n                            }\n                        }\n                    });\n                }\n            }\n\n            // ✅ FINAL WHATSAPP TEMPLATE PAYLOAD\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n\n            // 🪵 Debug log for developer console (optional)\n            Console.WriteLine(\"📦 Built WhatsApp Template Payload:\");\n            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(payload, new System.Text.Json.JsonSerializerOptions\n            {\n                WriteIndented = true\n            }));\n\n            return payload;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TemplateStaticButtonPayloadBuilder.cs",
          "sha256": "68979e5fa2d53ce3fa319c20377ca2022bf9e46b7244c817fb53f84594392f72",
          "language": "csharp",
          "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TemplateStaticButtonPayloadBuilder\n    {\n        public static object Build(SendTemplateMessageSimpleDto dto)\n        {\n            var components = new List<object>();\n\n            // ✅ Add Body Params\n            if (dto.TemplateParameters != null && dto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n            }\n\n            // ⚠️ DO NOT add button components for static buttons\n            // Meta will render them automatically if template has static buttons defined\n            // You can later add logic here for dynamic buttons if needed\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = dto.TemplateName,\n                    language = new { code = \"en_US\" },\n                    components = components\n                }\n            };\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/PayloadBuilders/TextMessagePayloadBuilder.cs",
          "sha256": "abc17e5a60e2f58ba07c610db126262040f598a15aca27d2f85d52afc2fb4766",
          "language": "csharp",
          "content": "using xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(SendMessageDto dto)\n        {\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = dto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = dto.TextContent\n                }\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/Services/IMessageEngineService.cs",
          "sha256": "9e3238790374a70a6f1e9205036a372269dbce950e53bb2efd44aa2156b579c2",
          "language": "csharp",
          "content": "// ✅ Step 1: Final interface\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Helpers;\nusing System.Threading.Tasks;\nusing System.IO.Pipelines;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface IMessageEngineService\n    {\n\n        Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto); //\n        Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto);\n        Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto);\n        Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId,SimpleTemplateMessageDto dto);\n        Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string triggeredBy);\n        //Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto);\n        Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId);\n        Task<ResponseResult> SendToWhatsAppAsync(object payload, Guid businessId);\n        //Task<IEnumerable<MessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/Services/ITemplateMessageSender.cs",
          "sha256": "8da7dff35e83f585fcca22a680aaed11b677d5d033a41d582124f899ed1660ff",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Shared;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public interface ITemplateMessageSender\n    {\n        /// <summary>\n        /// Sends a template message to a single contact (used in AutoReply/Flows).\n        /// </summary>\n        Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null\n        );\n\n        Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign);\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/Services/MessageEngineService.cs",
          "sha256": "144892e8c37ae636bd916ca7dd76eb8303f7a028d6c7d16373d9bc9d35246ae6",
          "language": "csharp",
          "content": "using Newtonsoft.Json;\nusing Microsoft.EntityFrameworkCore;\nusing System.Net.Http.Headers;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.Models;\nusing System.Text;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing System.IO.Pipelines;\nusing System.Net.Http;\nusing xbytechat.api.Shared.utility;\n//using System.Text.Json;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.Features.Inbox;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\n\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class MessageEngineService : IMessageEngineService\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _http;\n        private readonly TextMessagePayloadBuilder _textBuilder;\n        private readonly ImageMessagePayloadBuilder _imageBuilder;\n        private readonly TemplateMessagePayloadBuilder _templateBuilder;\n        private readonly CtaMessagePayloadBuilder _ctaBuilder;\n        private readonly IPlanManager _planManager;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly IContactService _contactService;\n        // 🔄 Basic cache for WhatsApp settings to reduce DB load\n        private static readonly Dictionary<Guid, (WhatsAppSettingEntity setting, DateTime expiresAt)> _settingsCache = new();\n\n        public MessageEngineService(\n            AppDbContext db,\n            HttpClient http,\n            TextMessagePayloadBuilder textBuilder,\n            ImageMessagePayloadBuilder imageBuilder,\n            TemplateMessagePayloadBuilder templateBuilder,\n            CtaMessagePayloadBuilder ctaBuilder,\n            IPlanManager planManager, IHubContext<InboxHub> hubContext, IMessageIdResolver messageIdResolver, IHttpContextAccessor httpContextAccessor,\n            IContactService contactService\n            )\n        {\n            _db = db;\n            _http = http;\n            _textBuilder = textBuilder;\n            _imageBuilder = imageBuilder;\n            _templateBuilder = templateBuilder;\n            _ctaBuilder = ctaBuilder;\n            _planManager = planManager;\n            _hubContext = hubContext;\n            _messageIdResolver = messageIdResolver;\n            _httpContextAccessor = httpContextAccessor;\n            _contactService = contactService;\n               \n        }\n\n        public async Task<ResponseResult> SendToWhatsAppAsync(object payload, Guid businessId)\n        {\n            var settings = await GetBusinessWhatsAppSettingsAsync(businessId);\n            var token = settings.ApiToken;\n            var phoneId = settings.PhoneNumberId;\n            var baseUrl = settings.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n            var url = $\"{baseUrl}/{phoneId}/messages\";\n\n            var request = new HttpRequestMessage(HttpMethod.Post, url)\n            {\n                Content = new StringContent(JsonConvert.SerializeObject(payload), Encoding.UTF8, \"application/json\")\n            };\n\n            request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            Console.WriteLine(\"🚀 Final Payload:\");\n            Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n            var response = await _http.SendAsync(request);\n            // 🌐 Status\n            Console.WriteLine($\"Status: {(int)response.StatusCode} {response.ReasonPhrase}\");\n\n            // 📋 Headers\n            Console.WriteLine(\"Headers:\");\n            foreach (var header in response.Headers)\n            {\n                Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n            }\n            foreach (var header in response.Content.Headers)\n            {\n                Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n            }\n            // 📦 Body (content)\n            var body = await response.Content.ReadAsStringAsync();\n\n            // ❌ Handle token errors or failure\n            if (!response.IsSuccessStatusCode)\n            {\n                if (body.Contains(\"invalid_token\") || body.Contains(\"Error validating access token\"))\n                {\n                    return ResponseResult.ErrorInfo(\n                        \"❌ WhatsApp token has expired. Please update your token.\",\n                        \"Access token expired\",\n                        body\n                    );\n                }\n\n                return ResponseResult.ErrorInfo(\n                    \"❌ WhatsApp API returned an error.\",\n                    \"API returned error\",\n                    body\n                );\n            }\n\n            // ✅ Parse WAMID safely\n            string? wamid = null;\n            try\n            {\n                dynamic parsed = JsonConvert.DeserializeObject<dynamic>(body);\n                wamid = parsed?.messages?[0]?.id;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"⚠️ Failed to parse WAMID: \" + ex.Message);\n            }\n\n            // ✅ Use object initializer style\n            var result = ResponseResult.SuccessInfo(\"✅ Message sent successfully\", data: null, raw: body);\n            result.MessageId = wamid;\n            return result;\n        }\n        public async Task<ResponseResult> SendTemplateMessageAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"📨 Sending template message to {dto.RecipientNumber} via BusinessId {dto.BusinessId}\");\n\n                // ✅ Validate message type\n                if (dto.MessageType != MessageTypeEnum.Template)\n                    return ResponseResult.ErrorInfo(\"Only template messages are supported in this method.\");\n\n                // ✅ Quota check\n                var quotaCheck = await _planManager.CheckQuotaBeforeSendingAsync(dto.BusinessId);\n                if (!quotaCheck.Success)\n                {\n                    Console.WriteLine($\"❌ Quota check failed: {quotaCheck.Message}\");\n                    return quotaCheck;\n                }\n\n                // ✅ Build payload\n                var payload = _templateBuilder.BuildPayload(dto);\n                Console.WriteLine(\"🔧 Built WhatsApp payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // 🚀 Send to WhatsApp API\n                var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n                Console.WriteLine(\"✅ WhatsApp API response:\");\n                Console.WriteLine(JsonConvert.SerializeObject(sendResult, Formatting.Indented));\n\n                // ✅ Build the rendered body before saving\n                var resolvedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                );\n\n                // 📝 Log success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = resolvedBody,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n\n                // 📉 Decrement remaining quota\n                var planInfo = await _db.BusinessPlanInfos\n                    .FirstOrDefaultAsync(p => p.BusinessId == dto.BusinessId);\n\n                if (planInfo != null && planInfo.RemainingMessages > 0)\n                {\n                    planInfo.RemainingMessages -= 1;\n                    planInfo.UpdatedAt = DateTime.UtcNow;\n                }\n\n                await _db.SaveChangesAsync();\n\n                // 📡 Send real-time message to SignalR group\n                await _hubContext.Clients\n                    .Group($\"business_{dto.BusinessId}\")\n                    .SendAsync(\"ReceiveMessage\", new\n                    {\n                        Id = log.Id,\n                        RecipientNumber = log.RecipientNumber,\n                        MessageContent = log.RenderedBody,\n                        MediaUrl = log.MediaUrl,\n                        Status = log.Status,\n                        CreatedAt = log.CreatedAt,\n                        SentAt = log.SentAt\n                    });\n\n                return ResponseResult.SuccessInfo(\"✅ Template message sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                var errorId = Guid.NewGuid();\n                var fullError = $\"🧨 Error ID: {errorId}\\n{ex}\";\n\n                Console.WriteLine(fullError);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName ?? \"N/A\",\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(\n                        dto.TemplateBody ?? \"\",\n                        dto.TemplateParameters?.Values.ToList() ?? new List<string>()\n                    ),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\n                    $\"❌ Exception occurred while sending template message. [Ref: {errorId}]\",\n                    ex.ToString()\n                );\n            }\n        }\n\n        private async Task<WhatsAppSettingEntity> GetBusinessWhatsAppSettingsAsync(Guid businessId)\n        {\n            if (_settingsCache.TryGetValue(businessId, out var cached) && cached.expiresAt > DateTime.UtcNow)\n                return cached.setting;\n\n            var business = await _db.Businesses\n                .Include(b => b.WhatsAppSettings)\n                .FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null || business.WhatsAppSettings == null)\n                throw new Exception(\"WhatsApp settings not found.\");\n\n            _settingsCache[businessId] = (business.WhatsAppSettings, DateTime.UtcNow.AddMinutes(5));\n            return business.WhatsAppSettings;\n        }\n\n           public async Task<ResponseResult> SendTextDirectAsync(TextMessageSendDto dto)\n        {\n            try\n            {\n                 //✅ Resolve business ID from context\n                var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                     ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId from context.\");\n\n\n                // 🔍 Optionally associate with Contact\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"⚠️ Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // ✅ Step 1: Build WhatsApp payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"text\",\n                    text = new\n                    {\n                        preview_url = false,\n                        body = dto.TextContent\n                    }\n                };\n\n                Console.WriteLine(\"✅ WhatsApp Text Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ✅ Step 2: Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                // ✅ Step 3: Extract MessageId from response\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                            {\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // ✅ Step 4: Save MessageLog\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // ✅ Step 5: Optional campaign log mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"📦 CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                // ✅ Step 6: Return structured result\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"✅ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Exception in SendTextDirectAsync: {ex.Message}\");\n\n                // ❌ Log failed attempt with partial context\n                try\n                {\n                    var businessId = _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                               ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"❌ Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"❌ Failed to send text message.\", ex.ToString());\n            }\n        }\n        public async Task<ResponseResult> SendAutomationReply(TextMessageSendDto dto)\n        {\n            try\n            {\n                // ✅ Resolve business ID from DTO or claims\n                var businessId = (dto.BusinessId != Guid.Empty)\n                    ? dto.BusinessId\n                    : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                      ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId from context or DTO.\");\n\n                // 🔍 Optionally associate with Contact\n                Guid? contactId = null;\n                try\n                {\n                    var contact = await _contactService.FindOrCreateAsync(businessId, dto.RecipientNumber);\n                    contactId = contact.Id;\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"⚠️ Failed to resolve or create contact: {ex.Message}\");\n                }\n\n                // ✅ Step 1: Build WhatsApp payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"text\",\n                    text = new\n                    {\n                        preview_url = false,\n                        body = dto.TextContent\n                    }\n                };\n\n                Console.WriteLine(\"✅ WhatsApp Text Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ✅ Step 2: Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                // ✅ Step 3: Extract MessageId from response\n                string? messageId = null;\n                var raw = sendResult?.RawResponse;\n\n                if (!string.IsNullOrWhiteSpace(raw))\n                {\n                    try\n                    {\n                        if (raw.TrimStart().StartsWith(\"{\"))\n                        {\n                            var parsed = JsonDocument.Parse(raw);\n                            if (parsed.RootElement.TryGetProperty(\"messages\", out var messages) && messages.GetArrayLength() > 0)\n                            {\n                                messageId = messages[0].GetProperty(\"id\").GetString();\n                            }\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ JSON parsing failed: {ex.Message} | Raw: {raw}\");\n                    }\n                }\n\n                // ✅ Step 4: Save MessageLog\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent,\n                    RenderedBody = dto.TextContent,\n                    ContactId = contactId,\n                    MediaUrl = null,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                // ✅ Step 5: Optional campaign log mapping\n                Guid? campaignSendLogId = null;\n                if (dto.Source == \"campaign\" && !string.IsNullOrEmpty(messageId))\n                {\n                    try\n                    {\n                        campaignSendLogId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n                        Console.WriteLine($\"📦 CampaignSendLog resolved: {campaignSendLogId}\");\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine($\"⚠️ Failed to resolve campaign log for {messageId}: {ex.Message}\");\n                    }\n                }\n\n                // ✅ Step 6: Return structured result\n                return new ResponseResult\n                {\n                    Success = true,\n                    Message = \"✅ Text message sent successfully.\",\n                    Data = new\n                    {\n                        Success = true,\n                        MessageId = messageId,\n                        LogId = log.Id,\n                        CampaignSendLogId = campaignSendLogId\n                    },\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    MessageId = messageId,\n                    LogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Exception in SendAutomationReply: {ex.Message}\");\n\n                // ❌ Log failed attempt with partial context\n                try\n                {\n                    var businessId = (dto.BusinessId != Guid.Empty)\n                        ? dto.BusinessId\n                        : _httpContextAccessor.HttpContext?.User?.GetBusinessId()\n                          ?? throw new UnauthorizedAccessException(\"❌ Cannot resolve BusinessId in failure path.\");\n\n                    await _db.MessageLogs.AddAsync(new MessageLog\n                    {\n                        Id = Guid.NewGuid(),\n                        BusinessId = businessId,\n                        RecipientNumber = dto.RecipientNumber,\n                        MessageContent = dto.TextContent,\n                        Status = \"Failed\",\n                        ErrorMessage = ex.Message,\n                        CreatedAt = DateTime.UtcNow\n                    });\n\n                    await _db.SaveChangesAsync();\n                }\n                catch (Exception logEx)\n                {\n                    Console.WriteLine($\"❌ Failed to log failure to DB: {logEx.Message}\");\n                }\n\n                return ResponseResult.ErrorInfo(\"❌ Failed to send text message.\", ex.ToString());\n            }\n        }\n\n\n        //public async Task<ResponseResult> SendTemplateMessageSimpleAsync(SimpleTemplateMessageDto dto)\n        //{\n        //    try\n        //    {\n        //        // ✅ Build WhatsApp template payload with body only\n        //        var payload = new\n        //        {\n        //            messaging_product = \"whatsapp\",\n        //            to = dto.RecipientNumber,\n        //            type = \"template\",\n        //            template = new\n        //            {\n        //                name = dto.TemplateName,\n        //                language = new { code = \"en_US\" },\n        //                components = new[]\n        //                {\n        //            new\n        //            {\n        //                type = \"body\",\n        //                parameters = dto.TemplateParameters.Select(p => new\n        //                {\n        //                    type = \"text\",\n        //                    text = p\n        //                }).ToArray()\n        //            }\n        //        }\n        //            }\n        //        };\n\n        //        Console.WriteLine(\"📦 Template Payload (no buttons):\");\n        //        Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n        //        var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n\n        //        // ✅ Log success\n        //        var log = new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n\n        //            MediaUrl = null,\n        //            Status = \"Sent\", \n        //            ErrorMessage = null,\n        //            RawResponse = JsonConvert.SerializeObject(sendResult),\n        //            CreatedAt = DateTime.UtcNow,\n        //            SentAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId,\n\n        //        };\n\n        //        await _db.MessageLogs.AddAsync(log);\n        //        await _db.SaveChangesAsync();\n\n        //        return ResponseResult.SuccessInfo(\"✅ Template sent successfully.\", sendResult, log.RawResponse);\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        // ❌ Log failure\n        //        // ❌ Log failure\n        //        await _db.MessageLogs.AddAsync(new MessageLog\n        //        {\n        //            Id = Guid.NewGuid(),\n        //            BusinessId = dto.BusinessId,\n        //            RecipientNumber = dto.RecipientNumber,\n        //            MessageContent = dto.TemplateName,\n\n        //            RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters), // ✅ Add this\n        //            Status = \"Failed\",\n        //            ErrorMessage = ex.Message,\n        //            CreatedAt = DateTime.UtcNow,\n        //            CTAFlowConfigId = dto.CTAFlowConfigId,\n        //            CTAFlowStepId = dto.CTAFlowStepId,\n        //        });\n\n\n        //        await _db.SaveChangesAsync();\n\n        //        return ResponseResult.ErrorInfo(\"❌ Error sending template.\", ex.ToString());\n        //    }\n        //}\n\n        public async Task<ResponseResult> SendTemplateMessageSimpleAsync(Guid businessId, SimpleTemplateMessageDto dto)\n        {\n            try\n            {\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName,\n                        language = new { code = \"en_US\" },\n                        components = new[]\n                        {\n                    new\n                    {\n                        type = \"body\",\n                        parameters = dto.TemplateParameters.Select(p => new\n                        {\n                            type = \"text\",\n                            text = p\n                        }).ToArray()\n                    }\n                }\n                    }\n                };\n\n                var sendResult = await SendToWhatsAppAsync(payload, businessId);\n\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n                    Status = \"Sent\",\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    SentAt = DateTime.UtcNow,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Template sent successfully.\", sendResult);\n            }\n            catch (Exception ex)\n            {\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"❌ Template send failed\", ex.Message);\n            }\n        }\n\n        public async Task<ResponseResult> SendImageCampaignAsync(Guid campaignId, Guid businessId, string sentBy)\n        {\n            try\n            {\n                var campaign = await _db.Campaigns\n                    .Include(c => c.MultiButtons)\n                    .FirstOrDefaultAsync(c => c.Id == campaignId && c.BusinessId == businessId);\n\n                if (campaign == null)\n                    return ResponseResult.ErrorInfo(\"❌ Campaign not found or unauthorized.\");\n\n                var recipients = await _db.CampaignRecipients\n                    .Include(r => r.Contact)\n                    .Where(r => r.CampaignId == campaignId && r.BusinessId == businessId)\n                    .ToListAsync();\n\n                if (recipients.Count == 0)\n                    return ResponseResult.ErrorInfo(\"⚠️ No recipients assigned to this campaign.\");\n\n                // ✅ Early Validation (Avoid WhatsApp 400 errors)\n                if (string.IsNullOrWhiteSpace(campaign.ImageCaption))\n                    return ResponseResult.ErrorInfo(\"❌ Campaign caption (ImageCaption) is required.\");\n\n                var validButtons = campaign.MultiButtons\n                    ?.Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Select(b => new CtaButtonDto\n                    {\n                        Title = b.Title,\n                        Value = b.Value\n                    })\n                    .ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ At least one CTA button with a valid title is required.\");\n\n                int successCount = 0, failCount = 0;\n\n                foreach (var recipient in recipients)\n                {\n                    if (recipient.Contact == null || string.IsNullOrWhiteSpace(recipient.Contact.PhoneNumber))\n                    {\n                        Console.WriteLine($\"⚠️ Skipping invalid contact: {recipient.Id}\");\n                        failCount++;\n                        continue;\n                    }\n\n                    var dto = new SendMessageDto\n                    {\n                        BusinessId = businessId,\n                        RecipientNumber = recipient.Contact.PhoneNumber,\n                        MessageType = MessageTypeEnum.Image,\n                        MediaUrl = campaign.ImageUrl,\n                        TextContent = campaign.MessageTemplate,\n                        CtaButtons = validButtons,\n\n                        // Tracking metadata\n                        CampaignId = campaign.Id,\n                        SourceModule = \"image-campaign\",\n                        CustomerId = recipient.Contact.Id.ToString(),\n                        CustomerName = recipient.Contact.Name,\n                        CustomerPhone = recipient.Contact.PhoneNumber,\n                        CTATriggeredFrom = \"campaign\"\n\n\n                    };\n\n                    var result = await SendImageWithCtaAsync(dto); // Central engine\n\n                    var sendLog = new CampaignSendLog\n                    {\n                        Id = Guid.NewGuid(),\n                        CampaignId = campaign.Id,\n                        ContactId = recipient.Contact.Id,\n                        RecipientId = recipient.Id,\n                        MessageLogId = result?.LogId,\n                        SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                        SentAt = DateTime.UtcNow,\n                        CreatedBy = sentBy,\n                        BusinessId = businessId,\n                    };\n\n                    await _db.CampaignSendLogs.AddAsync(sendLog);\n\n                    if (result.Success) successCount++;\n                    else failCount++;\n                }\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\n                    $\"✅ Campaign sent.\\n📤 Success: {successCount}, ❌ Failed: {failCount}\"\n                );\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"❌ Error sending image campaign: {ex.Message}\");\n                return ResponseResult.ErrorInfo(\"❌ Unexpected error while sending image campaign.\", ex.ToString());\n            }\n        }\n                   \n        public async Task<ResponseResult> SendImageWithCtaAsync(SendMessageDto dto)\n        {\n            try\n            {\n                Console.WriteLine($\"📤 Sending image+CTA to {dto.RecipientNumber}\");\n\n                // ✅ Early validation: TextContent and at least one button\n                if (string.IsNullOrWhiteSpace(dto.TextContent))\n                    return ResponseResult.ErrorInfo(\"❌ Image message caption (TextContent) cannot be empty.\");\n\n                var validButtons = dto.CtaButtons?\n                    .Where(b => !string.IsNullOrWhiteSpace(b.Title))\n                    .Take(3)\n                    .Select((btn, index) => new\n                    {\n                        type = \"reply\",\n                        reply = new\n                        {\n                            id = $\"btn_{index + 1}_{Guid.NewGuid().ToString(\"N\").Substring(0, 8)}\",\n                            title = btn.Title\n                        }\n                    }).ToList();\n\n                if (validButtons == null || validButtons.Count == 0)\n                    return ResponseResult.ErrorInfo(\"❌ At least one CTA button with a valid title is required.\");\n\n                // 🧱 Build the payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"interactive\",\n                    interactive = new\n                    {\n                        type = \"button\",\n                        body = new { text = dto.TextContent },\n                        action = new\n                        {\n                            buttons = validButtons\n                        }\n                    },\n                    image = string.IsNullOrWhiteSpace(dto.MediaUrl) ? null : new\n                    {\n                        link = dto.MediaUrl\n                    }\n                };\n\n                Console.WriteLine(\"📦 Final payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // 🔁 Send to WhatsApp\n                var sendResult = await SendToWhatsAppAsync(payload, dto.BusinessId);\n                var rawJson = JsonConvert.SerializeObject(sendResult);\n\n                // 📝 Log to DB\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image with CTA]\",\n                    RenderedBody = dto.TextContent ?? \"\",\n                    MediaUrl = dto.MediaUrl,\n                    Status = \"Sent\",\n                    RawResponse = rawJson,\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                var response = ResponseResult.SuccessInfo(\"✅ Image+CTA message sent.\", null, rawJson);\n                response.MessageId = log.Id.ToString();\n                response.LogId = log.Id;\n                return response;\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Exception in SendImageWithCtaAsync: \" + ex.Message);\n\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TextContent ?? \"[Image CTA Failed]\",\n                    RenderedBody = dto.TextContent ?? \"[Failed image CTA]\",\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    RawResponse = ex.ToString(),\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.ErrorInfo(\"❌ Failed to send image+CTA.\", ex.ToString());\n            }\n        }\n\n        //public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto)\n        public async Task<ResponseResult> SendImageTemplateMessageAsync(ImageTemplateMessageDto dto, Guid businessId)\n        {\n            try\n            {\n                List<object> components = new List<object>();\n\n                // ✅ Header (Image) component — optional\n                if (!string.IsNullOrWhiteSpace(dto.HeaderImageUrl))\n                {\n                    components.Add(new\n                    {\n                        type = \"header\",\n                        parameters = new[]\n                        {\n                    new\n                    {\n                        type = \"image\",\n                        image = new\n                        {\n                            link = dto.HeaderImageUrl\n                        }\n                    }\n                }\n                    });\n                }\n\n                // ✅ Body (Template Parameters)\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = dto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToArray()\n                });\n\n                // ✅ Buttons — dynamic (up to 3), skip invalid entries\n                for (int i = 0; i < dto.ButtonParameters.Count && i < 3; i++)\n                {\n                    var btn = dto.ButtonParameters[i];\n                    string subType = btn.ButtonType?.ToLower();\n\n                    // 🛑 Skip if ButtonType or TargetUrl is missing\n                    if (string.IsNullOrWhiteSpace(subType) || string.IsNullOrWhiteSpace(btn.TargetUrl))\n                        continue;\n\n                    var button = new Dictionary<string, object>\n                    {\n                        [\"type\"] = \"button\",\n                        [\"sub_type\"] = subType,\n                        [\"index\"] = i.ToString()\n                    };\n\n                    // 🧠 Add required parameters based on button subtype\n                    if (subType == \"quick_reply\")\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                    new\n                    {\n                        type = \"payload\",\n                        payload = btn.TargetUrl\n                    }\n                };\n                    }\n                    else if (subType == \"url\")\n                    {\n                        button[\"parameters\"] = new[]\n                        {\n                    new\n                    {\n                        type = \"text\",\n                        text = btn.TargetUrl\n                    }\n                };\n                    }\n                    // ✅ Do not add parameters for phone/call type\n\n                    components.Add(button);\n                }\n\n                // ✅ Final Payload\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = dto.RecipientNumber,\n                    type = \"template\",\n                    template = new\n                    {\n                        name = dto.TemplateName,\n                        language = new\n                        {\n                            code = dto.LanguageCode ?? \"en_US\"\n                        },\n                        components = components\n                    }\n                };\n\n                Console.WriteLine(\"📦 Sending Image Template Payload:\");\n                Console.WriteLine(JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                // ✅ Send to WhatsApp API\n                object sendResult = await SendToWhatsAppAsync(payload, businessId);\n                // ✅ Prepare rendered body (new)\n                var renderedBody = TemplateParameterHelper.FillPlaceholders(\n                    dto.TemplateBody ?? \"\",\n                    dto.TemplateParameters ?? new List<string>()\n                );\n\n                // ✅ Save log on success\n                var log = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Sent\",\n                    ErrorMessage = null,\n                    RawResponse = JsonConvert.SerializeObject(sendResult),\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n\n\n                };\n\n                await _db.MessageLogs.AddAsync(log);\n                await _db.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Image template sent successfully.\", sendResult, log.RawResponse);\n            }\n            catch (Exception ex)\n            {\n                // 🛑 Log failure\n                await _db.MessageLogs.AddAsync(new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto.TemplateName,\n                    RenderedBody = TemplateParameterHelper.FillPlaceholders(dto.TemplateBody ?? \"\", dto.TemplateParameters),\n\n                    MediaUrl = dto.HeaderImageUrl,\n                    Status = \"Failed\",\n                    ErrorMessage = ex.Message,\n                    CreatedAt = DateTime.UtcNow,\n                    CTAFlowConfigId = dto.CTAFlowConfigId,\n                    CTAFlowStepId = dto.CTAFlowStepId,\n                });\n\n                await _db.SaveChangesAsync();\n                return ResponseResult.ErrorInfo(\"❌ Error sending image template.\", ex.ToString());\n            }\n        }\n        public async Task<IEnumerable<RecentMessageLogDto>> GetLogsByBusinessIdAsync(Guid businessId)\n        {\n            var logs = await _db.MessageLogs\n                .Where(m => m.BusinessId == businessId)\n                .OrderByDescending(m => m.CreatedAt)\n                .Take(1000)\n                .Select(m => new RecentMessageLogDto\n                {\n                    Id = m.Id,\n                    RecipientNumber = m.RecipientNumber,\n                    MessageContent = m.MessageContent,\n                    Status = m.Status,\n                    CreatedAt = m.CreatedAt,\n                    SentAt = m.SentAt,\n                    ErrorMessage = m.ErrorMessage\n                })\n                .ToListAsync();\n\n            return logs;\n        }\n    }\n\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/Services/TemplateMessageSender.cs",
          "sha256": "9316938182f43c5081969d0f706bb900ddb510f07296c4b88099304f15ea4caf",
          "language": "csharp",
          "content": "// 📄 File: Features/MessagesEngine/Services/TemplateMessageSender.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\nusing xbytechat.api.Shared.utility;\nusing xbytechat.api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat.api.Features.MessagesEngine.Services\n{\n    public class TemplateMessageSender : ITemplateMessageSender\n    {\n        private readonly AppDbContext _db;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<TemplateMessageSender> _logger;\n        private readonly IWhatsAppTemplateFetcherService _templateService;\n\n        public TemplateMessageSender(\n            AppDbContext db,\n            HttpClient httpClient,\n            ILogger<TemplateMessageSender> logger,\n            IWhatsAppTemplateFetcherService templateService)\n        {\n            _db = db;\n            _httpClient = httpClient;\n            _logger = logger;\n            _templateService = templateService;\n        }\n\n        public async Task<ResponseResult> SendTemplateMessageToContactAsync(\n            Guid businessId,\n            Contact contact,\n            string templateName,\n            List<string> templateParams,\n            string? imageUrl = null,\n            List<CampaignButton>? buttons = null,\n            string? source = null,\n            Guid? refMessageId = null)\n        {\n            var setting = await _db.WhatsAppSettings.FirstOrDefaultAsync(s => s.BusinessId == businessId && s.IsActive);\n            if (setting == null)\n                return ResponseResult.ErrorInfo(\"WhatsApp settings not found for this business.\");\n\n            var template = await _templateService.GetTemplateByNameAsync(businessId, templateName, includeButtons: true);\n            if (template == null)\n                return ResponseResult.ErrorInfo(\"Template not found or invalid.\");\n\n            var payload = new Dictionary<string, object>\n            {\n                [\"messaging_product\"] = \"whatsapp\",\n                [\"to\"] = contact.PhoneNumber,\n                [\"type\"] = \"template\",\n                [\"template\"] = new\n                {\n                    name = template.Name,\n                    language = new { code = template.Language },\n                    components = BuildTemplateComponents(template, templateParams, imageUrl, buttons)\n                }\n            };\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n            var json = JsonSerializer.Serialize(payload);\n            var response = await _httpClient.PostAsync(\n                $\"{setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\"}/{setting.PhoneNumberId}/messages\",\n                new StringContent(json, Encoding.UTF8, \"application/json\"));\n\n            var responseBody = await response.Content.ReadAsStringAsync();\n            var status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\";\n\n            await _db.MessageLogs.AddAsync(new MessageLog\n            {\n                Id = Guid.NewGuid(),\n                BusinessId = businessId,\n                ContactId = contact.Id,\n                MessageContent = template.Name,\n                MediaUrl = imageUrl,\n                Status = status,\n                RawResponse = responseBody,\n                ErrorMessage = response.IsSuccessStatusCode ? null : responseBody,\n                Source = source,\n                RefMessageId = refMessageId,\n                CreatedAt = DateTime.UtcNow,\n                SentAt = DateTime.UtcNow\n            });\n\n            await _db.SaveChangesAsync();\n            return response.IsSuccessStatusCode\n                ? ResponseResult.SuccessInfo(\"✅ Message sent successfully\", null, responseBody)\n                : ResponseResult.ErrorInfo(\"❌ Message failed\", null, responseBody);\n\n        }\n\n        public async Task<ResponseResult> SendTemplateCampaignAsync(Campaign campaign)\n        {\n            if (campaign == null || campaign.IsDeleted)\n                return ResponseResult.ErrorInfo(\"Invalid or deleted campaign.\");\n\n            var contacts = await _db.CampaignRecipients\n                .Include(r => r.Contact)\n                .Where(r => r.CampaignId == campaign.Id && r.Contact != null)\n                .ToListAsync();\n\n            if (!contacts.Any())\n                return ResponseResult.ErrorInfo(\"No contacts found for this campaign.\");\n\n            var templateName = campaign.TemplateId;\n            var templateParams = TemplateParameterHelper.ParseTemplateParams(campaign.TemplateParameters);\n            var templateMeta = await _templateService.GetTemplateByNameAsync(campaign.BusinessId, templateName, includeButtons: true);\n\n            if (templateMeta == null)\n                return ResponseResult.ErrorInfo(\"Template metadata not found.\");\n\n            int success = 0, failed = 0;\n\n            foreach (var r in contacts)\n            {\n                var result = await SendTemplateMessageToContactAsync(\n                    campaign.BusinessId,\n                    r.Contact,\n                    templateName,\n                    templateParams,\n                    campaign.ImageUrl,\n                    campaign.MultiButtons?.ToList(),\n                    source: \"campaign\",\n                    refMessageId: campaign.Id);\n\n                await _db.CampaignSendLogs.AddAsync(new CampaignSendLog\n                {\n                    Id = Guid.NewGuid(),\n                    CampaignId = campaign.Id,\n                    ContactId = r.ContactId,\n                    RecipientId = r.Id,\n                    MessageBody = campaign.MessageBody ?? templateName,\n                    TemplateId = templateName,\n                    SendStatus = result.Success ? \"Sent\" : \"Failed\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    CreatedBy = campaign.CreatedBy\n                });\n\n                if (result.Success) success++;\n                else failed++;\n            }\n\n            await _db.SaveChangesAsync();\n            return ResponseResult.SuccessInfo($\"📤 Sent to {success}, ❌ Failed for {failed}.\");\n        }\n\n        private List<object> BuildTemplateComponents(\n            TemplateMetadataDto template,\n            List<string> paramsList,\n            string? imageUrl,\n            List<CampaignButton>? buttons)\n        {\n            var components = new List<object>();\n\n            if (template.HasImageHeader && !string.IsNullOrWhiteSpace(imageUrl))\n            {\n                components.Add(new\n                {\n                    type = \"header\",\n                    parameters = new[] { new { type = \"image\", image = new { link = imageUrl } } }\n                });\n            }\n\n            if (paramsList.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = paramsList.Select(p => new { type = \"text\", text = p }).ToList()\n                });\n            }\n\n            if (buttons != null && buttons.Any())\n            {\n                for (int i = 0; i < buttons.Count; i++)\n                {\n                    var btn = buttons[i];\n                    components.Add(new\n                    {\n                        type = \"button\",\n                        sub_type = btn.Type?.ToLower() == \"url\" ? \"url\" : \"quick_reply\",\n                        index = i.ToString(),\n                        parameters = new[] {\n                            new {\n                                type = \"text\",\n                                text = btn.Value ?? btn.Title\n                            }\n                        }\n                    });\n                }\n            }\n\n            return components;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/MessagesEngine/Validators/ValidateMessageDtoAttribute.cs",
          "sha256": "9b7355295c8cecdf6c4416a324d05f0910b3ff67e99fd35e04e397f715096a9b",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\n\nnamespace xbytechat.api.Features.MessagesEngine.DTOs.Validation\n{\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ValidateMessageDtoAttribute : ValidationAttribute\n    {\n        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)\n        {\n            if (value is not SendMessageDto dto)\n                return ValidationResult.Success;\n\n            switch (dto.MessageType)\n            {\n                case MessageTypeEnum.Text:\n                    if (string.IsNullOrWhiteSpace(dto.TextContent))\n                        return new ValidationResult(\"TextContent is required for text messages.\", new[] { nameof(dto.TextContent) });\n                    break;\n\n                case MessageTypeEnum.Image:\n                    if (string.IsNullOrWhiteSpace(dto.MediaUrl))\n                        return new ValidationResult(\"MediaUrl is required for image messages.\", new[] { nameof(dto.MediaUrl) });\n                    break;\n\n                case MessageTypeEnum.Template:\n                    if (string.IsNullOrWhiteSpace(dto.TemplateName))\n                        return new ValidationResult(\"TemplateName is required for template messages.\", new[] { nameof(dto.TemplateName) });\n                    break;\n\n                case MessageTypeEnum.Cta:\n                    if (dto.CtaButtons == null || dto.CtaButtons.Count == 0)\n                        return new ValidationResult(\"CtaButtons is required for CTA messages.\", new[] { nameof(dto.CtaButtons) });\n                    break;\n            }\n\n            return ValidationResult.Success;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/PlanManagement/Models/BusinessPlanInfo.cs",
          "sha256": "4a8d4603750b0630eec386cbb831948aaa2cc2f5872d4e1b178da2b9a6952bc7",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.PlanManagement.Models;\n\nnamespace xbytechat.api.Models.BusinessModel\n{\n    public class BusinessPlanInfo\n    {\n        [Key]\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🔗 Foreign key to Business\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [ForeignKey(nameof(BusinessId))]\n        public Business Business { get; set; }\n\n        // 📦 Plan Management\n        [Required]\n        public PlanType Plan { get; set; } = PlanType.Trial; // Default Trial\n\n        [Required]\n        public int TotalMonthlyQuota { get; set; } = 100; // Default Trial Messages\n\n        [Required]\n        public int RemainingMessages { get; set; } = 100;\n\n        public DateTime QuotaResetDate { get; set; } = DateTime.UtcNow.AddMonths(1);\n\n        // 💰 Wallet Management (optional)\n        public decimal WalletBalance { get; set; } = 0.00m;\n\n        // 📅 Timestamps\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/PlanManagement/Models/PlanFeature.cs",
          "sha256": "af8483d1a28e7555f8111b552d2730fd4ef167d9ba562bebb508328248b01a12",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace xbytechat.api.Features.PlanManagement.Models\n{\n    [Table(\"PlanFeatureMatrix\")]\n    public class PlanFeatureMatrix\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string PlanName { get; set; } = string.Empty;  // \"Basic\", \"Smart\", \"Advance\"\n\n        [Required]\n        [MaxLength(50)]\n        public string FeatureName { get; set; } = string.Empty; // \"Contacts\", \"Catalog\", etc.\n\n        [Required]\n        public bool IsEnabled { get; set; }  // Default state for this plan-feature pair\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/PlanManagement/Models/PlanType.cs",
          "sha256": "52170542c11ff0a0e52b9f16289446106038cd266cd602169980aa1d684672ea",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.PlanManagement.Models\n{\n    public enum PlanType\n    {\n       \n        Basic = 0,\n        Smart = 1,\n        Advanced = 2,\n            Trial = 3,\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/PlanManagement/Services/IPlanManager.cs",
          "sha256": "69cb77d9f587d971ee0cc96bf3fa399d9982294045981db84e714050dc242d85",
          "language": "csharp",
          "content": "using xbytechat.api.Helpers;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public interface IPlanManager\n    {\n        /// <summary>\n        /// Checks if business has enough quota to send a message.\n        /// </summary>\n        Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId);\n        Dictionary<string, bool> GetPlanFeatureMap(string plan);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/PlanManagement/Services/PlanManager.cs",
          "sha256": "0d93116ee8bd77194569c6739adad49911359cad9bd6f1919bae85f130027871",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.PlanManagement.Models;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models.BusinessModel;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.PlanManagement.Services\n{\n    public class PlanManager : IPlanManager\n    {\n        private readonly AppDbContext _db;\n\n        public PlanManager(AppDbContext db)\n        {\n            _db = db;\n        }\n\n        public async Task<ResponseResult> CheckQuotaBeforeSendingAsync(Guid businessId)\n        {\n            var business = await _db.Businesses.FirstOrDefaultAsync(b => b.Id == businessId);\n\n            if (business == null)\n                return ResponseResult.ErrorInfo(\"Business not found.\", \"Invalid business ID\");\n            if (business?.BusinessPlanInfo?.RemainingMessages <= 0)\n            {\n                var msg = business?.BusinessPlanInfo?.Plan == PlanType.Trial\n                    ? \"Trial limit reached. Please upgrade your plan.\"\n                    : \"Monthly quota exhausted. Please upgrade or wait for reset.\";\n\n                return ResponseResult.ErrorInfo(msg, \"Quota limit exceeded\");\n            }\n\n            return ResponseResult.SuccessInfo(\"Quota check passed.\");\n        }\n\n        public Dictionary<string, bool> GetPlanFeatureMap(string plan)\n        {\n            // Example map — replace with real logic if needed\n            if (plan == \"Basic\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", false },\n                { \"CRM_NOTES\", false }\n            };\n\n            if (plan == \"Advanced\")\n                return new Dictionary<string, bool>\n            {\n                { \"CATALOG\", true },\n                { \"MESSAGE_SEND\", true },\n                { \"CRM_NOTES\", true },\n                { \"CRM_TAGS\", true }\n            };\n\n            // Fallback plan\n            return new Dictionary<string, bool>();\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/ReportingModule/Controllers/MessageAnalyticsController.cs",
          "sha256": "37e850b94dae6b33e4c44fb129fe331ae8a36706c9e377dee456c03d4a6e57f7",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Shared;\n\n\nnamespace xbytechat.api.Features.ReportingModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/reporting/messages\")]\n    public class MessageAnalyticsController : ControllerBase\n    {\n        private readonly IMessageAnalyticsService _service;\n\n        public MessageAnalyticsController(IMessageAnalyticsService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet(\"recent\")]\n        public async Task<IActionResult> GetRecentLogs([FromQuery] int limit = 20)\n        {\n            var businessId = User.GetBusinessId(); // 🔒 assumes claims extension\n            var logs = await _service.GetRecentLogsAsync(businessId, limit);\n            return Ok(new { success = true, data = logs });\n        }\n        [HttpGet(\"history\")]\n        public async Task<IActionResult> GetPaginatedLogs([FromQuery] PaginatedRequest request)\n        {\n            var businessId = User.GetBusinessId(); // 🔐 via claims\n            var result = await _service.GetPaginatedLogsAsync(businessId, request);\n            return Ok(new { success = true, data = result });\n        }\n\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/ReportingModule/DTOs/DirectMessageLogFilterDto.cs",
          "sha256": "e8f948d0367820dd6dce43d8c057e8bfe7a65889ab2eb6361f062de66d36922b",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class DirectMessageLogFilterDto\n\n    {\n        public int Page { get; set; } = 1;\n        public int PageSize { get; set; } = 10;\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/ReportingModule/DTOs/RecentMessageLogDto.cs",
          "sha256": "f86a239c42fefe2d63c5087c403a7c2cc1e2eea942cc1443bd03495783bbb2f4",
          "language": "csharp",
          "content": "// 📄 File: Features/ReportingModule/DTOs/RecentMessageLogDto.cs\nusing System;\n\nnamespace xbytechat.api.Features.ReportingModule.DTOs\n{\n    public class RecentMessageLogDto\n    {\n        public Guid Id { get; set; }\n        public string RecipientNumber { get; set; }\n        public string MessageContent { get; set; }\n        public DateTime CreatedAt { get; set; }\n        public DateTime? SentAt { get; set; }             \n        public Guid? CampaignId { get; set; }\n        public string? Status { get; set; }\n        public string? ErrorMessage { get; set; }         \n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/ReportingModule/Services/IMessageAnalyticsService.cs",
          "sha256": "08c8fb19a092bb252492d04c2114547e4ca4a5725875accb403182551c8229f4",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public interface IMessageAnalyticsService\n    {\n        Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit);\n        Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request);\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/ReportingModule/Services/MessageAnalyticsService.cs",
          "sha256": "3a87316fa63b4890a5bc35b2d867a96a2a7d73e8aea0e52ff6854e89c4245b7a",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.ReportingModule.DTOs;\nusing xbytechat.api.Shared;\n\nnamespace xbytechat.api.Features.ReportingModule.Services\n{\n    public class MessageAnalyticsService : IMessageAnalyticsService\n    {\n        private readonly AppDbContext _context;\n\n        public MessageAnalyticsService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<List<RecentMessageLogDto>> GetRecentLogsAsync(Guid businessId, int limit)\n        {\n            return await _context.MessageLogs\n                .Where(x => x.BusinessId == businessId)\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(limit)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n        }\n\n        public async Task<PaginatedResponse<RecentMessageLogDto>> GetPaginatedLogsAsync(Guid businessId, PaginatedRequest request)\n        {\n            var query = _context.MessageLogs\n                .Where(x => x.BusinessId == businessId);\n\n            if (!string.IsNullOrEmpty(request.Status))\n                query = query.Where(x => x.Status == request.Status);\n\n            if (!string.IsNullOrEmpty(request.Search))\n                query = query.Where(x =>\n                    x.RecipientNumber.Contains(request.Search) ||\n                    x.MessageContent.Contains(request.Search));\n\n            var totalCount = await query.CountAsync();\n\n            var items = await query\n                .OrderByDescending(x => x.CreatedAt)\n                .Skip((request.Page - 1) * request.PageSize)\n                .Take(request.PageSize)\n                .Select(x => new RecentMessageLogDto\n                {\n                    Id = x.Id,\n                    RecipientNumber = x.RecipientNumber,\n                    MessageContent = x.MessageContent,\n                    CreatedAt = x.CreatedAt,\n                    CampaignId = x.CampaignId,\n                    Status = x.Status,\n                    SentAt = x.SentAt,\n                })\n                .ToListAsync();\n\n            return new PaginatedResponse<RecentMessageLogDto>\n            {\n                Items = items,\n                TotalCount = totalCount,\n                Page = request.Page,\n                PageSize = request.PageSize\n            };\n        }\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/TemplatesModule/Controllers/TemplatesController.cs",
          "sha256": "b7014e9c08b5d3cf85e8dbd5edf632bc51e34a2acac661dbb3109dcd259edf4c",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.TemplateModule.Services;\n\nnamespace xbytechat.api.Features.TemplateModule.Controllers\n{\n    [ApiController]\n    [Route(\"api/templates\")]\n    public class TemplatesController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateService _templateService;\n        private readonly ILogger<TemplatesController> _logger;\n\n        public TemplatesController(IWhatsAppTemplateService templateService, ILogger<TemplatesController> logger)\n        {\n            _templateService = templateService;\n            _logger = logger;\n        }\n\n        /// <summary>\n        /// Fetches WhatsApp template metadata (name, language, body, placeholders)\n        /// </summary>\n        [HttpGet(\"metadata\")]\n        public async Task<IActionResult> GetTemplates()\n        {\n            try\n            {\n                var templates = await _templateService.FetchTemplatesAsync();\n                return Ok(new\n                {\n                    success = true,\n                    templates\n                });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error fetching template metadata: \" + ex.Message);\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"❌ Failed to retrieve template metadata\",\n                    error = ex.Message\n                });\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/TemplatesModule/Services/IWhatsAppTemplateService.cs",
          "sha256": "2ed5f5891246b4fec02e29892760c3d033e76572488701c525fd801763f742a9",
          "language": "csharp",
          "content": "using xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public interface IWhatsAppTemplateService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/TemplatesModule/Services/WhatsAppTemplateService.cs",
          "sha256": "ee70376834e701f63425a69d50a4ea5d02170321edf828fe7fd2bd5d100bf3a1",
          "language": "csharp",
          "content": "using Microsoft.Extensions.Configuration;\nusing Newtonsoft.Json;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat.api.Features.TemplateModule.Services\n{\n    public class WhatsAppTemplateService : IWhatsAppTemplateService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly ILogger<WhatsAppTemplateService> _logger;\n\n        public WhatsAppTemplateService(HttpClient httpClient, IConfiguration config, ILogger<WhatsAppTemplateService> logger)\n        {\n            _httpClient = httpClient;\n            _config = config;\n            _logger = logger;\n        }\n\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var token = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v18.0/{wabaId}/message_templates\";\n\n            var templates = new List<TemplateMetadataDto>();\n\n            try\n            {\n                _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", token);\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch WhatsApp templates: \" + json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n\n                    foreach (var component in tpl.components)\n                    {\n                        if (component.type == \"BODY\")\n                        {\n                            body = component.text;\n                            break;\n                        }\n                    }\n\n                    // Count {{placeholders}}\n                    var placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount\n                    });\n                }\n\n                return templates;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(\"Error while fetching templates from Meta: \" + ex.Message);\n                return templates;\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Tracking/Controllers/TrackingController.cs",
          "sha256": "eff454d0f22519fc547f7489d9205cb738600a0d241003c5f0ac3f38694b517a",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Shared.TrackingUtils;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking\")]\n    public class TrackingController : ControllerBase\n    {\n        private readonly ITrackingService _tracker;\n\n        public TrackingController(ITrackingService tracker)\n        {\n            _tracker = tracker;\n        }\n        #region \"Tracking Logs\"\n        //       [HttpGet(\"redirect\")]\n        //       public async Task<IActionResult> TrackAndRedirect(\n        //                                        [FromQuery] string src,\n        //                                        [FromQuery] Guid id,\n        //                                        [FromQuery] string btn,\n        //                                        [FromQuery] string? to = null,\n        //                                        [FromQuery] string? type = null,\n        //                                        [FromQuery] Guid? msg = null,\n        //                                        [FromQuery] Guid? contact = null,\n        //                                        [FromQuery] string? phone = null,\n        //                                        [FromQuery] string? session = null,\n        //                                        [FromQuery] string? thread = null\n        //)\n        //       {\n        //           var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n        //           var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n        //                        ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n        //           var country = await GeoHelper.GetCountryFromIP(ipAddress);\n        //           var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n        //           var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n        //           if (!Guid.TryParse(businessIdClaim, out var businessId))\n        //               return Unauthorized(\"Invalid business context\");\n\n        //           var dto = new TrackingLogDto\n        //           {\n        //               BusinessId = businessId,// Guid.Empty, // TODO: Replace with actual business lookup if available\n        //               ContactId = contact,\n        //               ContactPhone = phone,\n        //               SourceType = src,\n        //               SourceId = id,\n        //               ButtonText = btn,\n        //               CTAType = type ?? btn,\n        //               MessageId = msg?.ToString(),\n        //               SessionId = session,\n        //               ThreadId = thread,\n        //               ClickedAt = DateTime.UtcNow,\n        //               IPAddress = ipAddress,\n        //               Browser = userAgent,\n        //               DeviceType = deviceType,\n        //               Country = country,\n        //               ClickedVia = \"web\"\n        //           };\n\n        //           await _tracker.LogCTAClickAsync(dto);\n\n        //           if (string.IsNullOrWhiteSpace(to))\n        //               return BadRequest(\"Missing redirect target.\");\n\n        //           var decodedUrl = Uri.UnescapeDataString(to);\n        //           return Redirect(decodedUrl);\n        //       }\n\n        #endregion\n\n        //        [HttpGet(\"redirect\")]\n        //        public async Task<IActionResult> TrackAndRedirect(\n        //            [FromQuery] string src,\n        //            [FromQuery] Guid id,\n        //            [FromQuery] string btn,\n        //            [FromQuery] string? to = null,\n        //            [FromQuery] string? type = null,\n        //            [FromQuery] Guid? msg = null,\n        //            [FromQuery] Guid? contact = null,\n        //            [FromQuery] string? phone = null,\n        //            [FromQuery] string? session = null,\n        //            [FromQuery] string? thread = null\n        //)\n        //        {\n        //            var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n        //            var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n        //                         ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n        //            var country = await GeoHelper.GetCountryFromIP(ipAddress);\n        //            var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n        //            // 🔍 1. Attempt to extract businessId from claims\n        //            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n        //            var hasBusinessId = Guid.TryParse(businessIdClaim, out var businessId);\n\n        //            // 🧠 2. Create base DTO\n        //            var dto = new TrackingLogDto\n        //            {\n        //                BusinessId = hasBusinessId ? businessId : Guid.Empty, // fallback — will enrich later\n        //                ContactId = contact,\n        //                ContactPhone = phone,\n        //                SourceType = src,\n        //                SourceId = id,\n        //                ButtonText = btn,\n        //                CTAType = type ?? btn,\n        //                MessageId = msg?.ToString(),\n        //                SessionId = session,\n        //                ThreadId = thread,\n        //                ClickedAt = DateTime.UtcNow,\n        //                IPAddress = ipAddress,\n        //                Browser = userAgent,\n        //                DeviceType = deviceType,\n        //                Country = country,\n        //                ClickedVia = \"web\"\n        //            };\n\n        //            // 🔁 3. Fallback enrichment from MessageLog\n        //            if (msg.HasValue)\n        //            {\n        //                var messageLog = await _context.MessageLogs\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(m => m.Id == msg.Value || m.MessageId == msg.ToString());\n\n        //                if (messageLog != null)\n        //                {\n        //                    // 🧩 Backfill missing fields if needed\n        //                    dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n        //                    dto.ContactId ??= messageLog.ContactId;\n        //                    dto.CampaignId ??= messageLog.CampaignId;\n        //                    dto.MessageLogId ??= messageLog.Id;\n        //                }\n        //            }\n\n        //            // 🔁 4. Fallback from CampaignSendLog (if SourceType is \"campaign\")\n        //            if (src == \"campaign\" && msg.HasValue && dto.CampaignId == null)\n        //            {\n        //                var sendLog = await _context.CampaignSendLogs\n        //                    .AsNoTracking()\n        //                    .FirstOrDefaultAsync(c => c.MessageId == msg.ToString());\n\n        //                if (sendLog != null)\n        //                {\n        //                    dto.BusinessId = dto.BusinessId == Guid.Empty ? sendLog.BusinessId : dto.BusinessId;\n        //                    dto.ContactId ??= sendLog.ContactId;\n        //                    dto.CampaignId ??= sendLog.CampaignId;\n        //                    dto.CampaignSendLogId ??= sendLog.Id;\n        //                }\n        //            }\n\n        //            // ✅ 5. Final safety check\n        //            if (dto.BusinessId == Guid.Empty)\n        //            {\n        //                Log.Warning(\"⚠️ TrackingLog DTO missing valid BusinessId. msg={@msg}\", msg);\n        //                return Unauthorized(\"Business context missing or invalid.\");\n        //            }\n\n        //            // 💾 6. Save to database\n        //            await _tracker.LogCTAClickAsync(dto);\n\n        //            // 🌐 7. Redirect to final URL\n        //            if (string.IsNullOrWhiteSpace(to))\n        //                return BadRequest(\"Missing redirect target.\");\n\n        //            var decodedUrl = Uri.UnescapeDataString(to);\n        //            return Redirect(decodedUrl);\n        //        }\n        [HttpGet(\"redirect\")]\n        public async Task<IActionResult> TrackAndRedirect([FromQuery] string src, [FromQuery] Guid id,\n            [FromQuery] string btn, [FromQuery] string? to = null, [FromQuery] string? type = null,\n            [FromQuery] Guid? msg = null, [FromQuery] Guid? contact = null, [FromQuery] string? phone = null,\n            [FromQuery] string? session = null, [FromQuery] string? thread = null)\n        {\n            var userAgent = Request.Headers[\"User-Agent\"].FirstOrDefault() ?? \"unknown\";\n            var ipAddress = Request.Headers[\"X-Forwarded-For\"].FirstOrDefault()\n                         ?? HttpContext.Connection.RemoteIpAddress?.ToString() ?? \"unknown\";\n\n            var country = await GeoHelper.GetCountryFromIP(ipAddress);\n            var deviceType = DeviceHelper.GetDeviceType(userAgent);\n\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            var hasBusinessId = Guid.TryParse(businessIdClaim, out var businessId);\n\n            var dto = new TrackingLogDto\n            {\n                BusinessId = hasBusinessId ? businessId : Guid.Empty,\n                ContactId = contact,\n                ContactPhone = phone,\n                SourceType = src,\n                SourceId = id,\n                ButtonText = btn,\n                CTAType = type ?? btn,\n                MessageId = msg?.ToString(),\n                SessionId = session,\n                ThreadId = thread,\n                ClickedAt = DateTime.UtcNow,\n                IPAddress = ipAddress,\n                Browser = userAgent,\n                DeviceType = deviceType,\n                Country = country,\n                ClickedVia = \"web\"\n            };\n\n            var result = await _tracker.LogCTAClickWithEnrichmentAsync(dto);\n            if (!result.Success)\n                return Unauthorized(result.Message);\n\n            if (string.IsNullOrWhiteSpace(to))\n                return BadRequest(\"Missing redirect target.\");\n\n            return Redirect(Uri.UnescapeDataString(to));\n        }\n\n        [HttpGet(\"logs/{id}/details\")]\n        public async Task<IActionResult> GetLogDetails(Guid id)\n        {\n            var result = await _tracker.GetLogDetailsAsync(id);\n            if (result == null)\n                return NotFound(\"Tracking log not found\");\n\n            return Ok(result);\n        }\n        [HttpGet(\"flow-clicks\")]\n       \n        public async Task<IActionResult> GetFlowClickLogs()\n        {\n            var businessIdClaim = User.FindFirst(\"businessId\")?.Value;\n            if (!Guid.TryParse(businessIdClaim, out var businessId))\n                return BadRequest(\"❌ Invalid or missing business ID\");\n\n            var logs = await _tracker.GetFlowClickLogsAsync(businessId);\n\n            var dtoList = logs.Select(x => new\n            {\n                x.Id,\n                x.StepId,\n                x.ContactPhone,\n                x.ButtonText,\n                x.TemplateId,\n                x.FollowUpSent,\n                x.ClickedAt\n            });\n\n            return Ok(dtoList);\n        }\n    }\n}"
        },
        {
          "path": "xbytechat-api/Features/Tracking/Controllers/TrackingViewerController.cs",
          "sha256": "6dfeff85fe69af455c90c7ae2ad1fd0614866359c0eaee39cf101ca67b819507",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/tracking/logs\")]\n    public class TrackingViewerController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n\n        public TrackingViewerController(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll([FromQuery] Guid? campaignId = null)\n        {\n            var query = _context.TrackingLogs\n                .Include(t => t.Campaign) // Optional\n                .Include(t => t.Contact)  // Optional\n                .OrderByDescending(t => t.ClickedAt)\n                .AsQueryable();\n\n            if (campaignId.HasValue)\n                query = query.Where(t => t.CampaignId == campaignId);\n\n            var results = await query\n                .Select(t => new\n                {\n                    t.Id,\n                    t.ContactPhone,\n                    ContactName = t.Contact != null ? t.Contact.Name : \"(N/A)\",\n                    t.ButtonText,\n                    t.CTAType,\n                    t.SourceType,\n                    t.ClickedAt,\n                    t.DeviceType,\n                    t.Country,\n                    CampaignName = t.Campaign != null ? t.Campaign.Name : \"(Unknown)\"\n                })\n                .ToListAsync();\n\n            return Ok(new { success = true, data = results });\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDetailsDto.cs",
          "sha256": "e27d7a86aea38ec1fef0aaf6d4d6c208e2481cfaf7033c57fa8da1c81d2c693c",
          "language": "csharp",
          "content": "using xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDetailsDto\n    {\n        public TrackingLogDto Tracking { get; set; } = new();\n        public ContactDto? Contact { get; set; }\n        public CampaignDto? Campaign { get; set; }\n        public MessageLogDto? MessageLog { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Tracking/DTOs/TrackingLogDto.cs",
          "sha256": "bae94801851bba1bbeb94d60e81f2d20efd13b86be1391265098462d82a3c762",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Tracking.DTOs\n{\n    public class TrackingLogDto\n    {\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty; // e.g. \"campaign\", \"reminder\", \"bot\"\n        public Guid? SourceId { get; set; }\n\n        // 🔘 CTA Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n        public DateTime? ClickedAt { get; set; } = DateTime.UtcNow;\n        // 📡 Tracking\n        public string? IPAddress { get; set; }\n        public string? Browser { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Session context\n        public string? SessionId { get; set; }\n        public string? ThreadId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Guid? CampaignSendLogId { get; set; }\n\n        public string RawJson { get; set; } = string.Empty; // used in queue method\n        public DateTime EnqueuedAt { get; set; } // used in queue method\n        public string? NextStepMatched { get; set; } // ✅ Add this if not already there\n\n        public string? TemplateName { get; set; } // ✅ Needed for follow-up matcher\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Tracking/Models/TrackingLog.cs",
          "sha256": "ce8da394901366ef9d5d9b32a338d7a49d6b8d06eb1f911e89e02296506b4281",
          "language": "csharp",
          "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Tracking.Models;\nnamespace xbytechat.api.Features.Tracking.Models\n{\n    public class TrackingLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🧩 Multi-Tenant Isolation\n        public Guid BusinessId { get; set; }\n\n        // 👤 CRM Linkage\n        public Guid? ContactId { get; set; }\n        public string? ContactPhone { get; set; }\n        public Contact? Contact { get; set; } // ✅ NEW\n\n        // 🔗 Source Info\n        public string SourceType { get; set; } = string.Empty;\n        public Guid? SourceId { get; set; }\n\n        public Guid? CampaignId { get; set; }\n        public Campaign? Campaign { get; set; } // ✅ NEW\n\n        public Guid? CampaignSendLogId { get; set; }\n        public CampaignSendLog? CampaignSendLog { get; set; } // ✅ Optional\n\n        // 🔘 Button Info\n        public string? ButtonText { get; set; }\n        public string? CTAType { get; set; }\n\n        // 📨 Message Context\n        public string? MessageId { get; set; }\n        public string? TemplateId { get; set; }\n        public Guid? MessageLogId { get; set; }\n        public MessageLog? MessageLog { get; set; } // ✅ Optional\n\n        // 🧠 Meta / Behaviour\n        public string? ClickedVia { get; set; }\n        public string? Referrer { get; set; }\n\n        // 🕒 Audit Trail\n        public DateTime ClickedAt { get; set; } = DateTime.UtcNow;\n        public string? IPAddress { get; set; }\n        public string? DeviceType { get; set; }\n        public string? Browser { get; set; }\n        public string? Country { get; set; }\n        public string? City { get; set; }\n\n        // 🔖 Follow-up & Analytics\n        public bool FollowUpSent { get; set; } = false;\n        public string? LastInteractionType { get; set; }\n\n        // 🧵 Journey Tracking\n        public Guid? SessionId { get; set; }\n        public Guid? ThreadId { get; set; }\n        public Guid? StepId { get; set; } // ✅ Link to CTAFlowStep for CTA Flow tracking\n\n       //  public string? NextStepMatched { get; set; } // Logs which template system resolved\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Tracking/Services/ITrackingService.cs",
          "sha256": "7331e4a2b1fb44932573c4ed055613cc4ae21dcd9ec54bc25210c57cd340737c",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public interface ITrackingService\n    {\n        Task LogCTAClickAsync(TrackingLogDto dto);\n        Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId);\n        Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto);\n        Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Tracking/Services/TrackingService.cs",
          "sha256": "90d3f4b3c6a0d5d10d83300d0c3ed58fc81149c2dec145768cfafe2886dccb0b",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Shared.TrackingUtils;\nusing Serilog;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing AutoMapper;\nusing xbytechat.api.Features.MessageManagement.DTOs;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.CampaignTracking.Models;\n\nnamespace xbytechat.api.Features.Tracking.Services\n{\n    public class TrackingService : ITrackingService\n    {\n        private readonly AppDbContext _context;\n        private readonly IMapper _mapper;\n        public TrackingService(AppDbContext context, IMapper mapper)\n        {\n            _context = context;\n            _mapper = mapper;\n        }\n\n\n        public async Task<ResponseResult> LogCTAClickWithEnrichmentAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                // 🧠 1. Try enrich from MessageLog (if msg ID provided)\n                if (!string.IsNullOrEmpty(dto.MessageId))\n                {\n                    var messageLog = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m => m.MessageId == dto.MessageId || m.Id.ToString() == dto.MessageId);\n\n                    if (messageLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty ? messageLog.BusinessId : dto.BusinessId;\n                        dto.ContactId ??= messageLog.ContactId;\n                        dto.CampaignId ??= messageLog.CampaignId;\n                        dto.MessageLogId ??= messageLog.Id;\n                    }\n                }\n\n                // 🧩 2. Enrich from CampaignSendLog if sourceType = campaign\n                CampaignSendLog? sendLog = null;\n\n                if (dto.SourceType == \"campaign\")\n                {\n                    if (!string.IsNullOrEmpty(dto.MessageId))\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .FirstOrDefaultAsync(c => c.MessageId == dto.MessageId);\n                    }\n\n                    if (sendLog == null && dto.CampaignId != null)\n                    {\n                        sendLog = await _context.CampaignSendLogs\n                            .Include(c => c.Recipient)\n                            .Where(c => c.CampaignId == dto.CampaignId)\n                            .OrderByDescending(c => c.CreatedAt)\n                            .FirstOrDefaultAsync();\n                    }\n\n                    if (sendLog != null)\n                    {\n                        dto.BusinessId = dto.BusinessId == Guid.Empty\n                            ? sendLog.Recipient?.BusinessId ?? Guid.Empty\n                            : dto.BusinessId;\n\n                        dto.ContactId ??= sendLog.ContactId;\n                        dto.CampaignId ??= sendLog.CampaignId;\n                        dto.CampaignSendLogId ??= sendLog.Id;\n\n                        // ✅ Update campaign send log click details\n                        sendLog.IsClicked = true;\n                        sendLog.ClickedAt = dto.ClickedAt ?? DateTime.UtcNow;\n                        sendLog.ClickType = dto.ButtonText;\n\n                        await _context.SaveChangesAsync();\n                    }\n                }\n\n                // ✅ 3. Validate business context\n                if (dto.BusinessId == Guid.Empty)\n                {\n                    Log.Warning(\"❌ TrackingLog failed: No BusinessId available for click.\");\n                    return ResponseResult.ErrorInfo(\"Business context is missing.\");\n                }\n\n                // 💾 4. Save tracking log (inline instead of separate method)\n                var trackingLog = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(trackingLog);\n                await _context.SaveChangesAsync();\n\n                // ✅ Return the TrackingLog.Id in the response\n                return ResponseResult.SuccessInfo(\"CTA click tracked successfully.\", trackingLog.Id);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Exception during CTA tracking enrichment\");\n                return ResponseResult.ErrorInfo(\"Exception during tracking: \" + ex.Message);\n            }\n        }\n\n        public async Task LogCTAClickAsync(TrackingLogDto dto)\n        {\n            try\n            {\n                var log = new TrackingLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ContactId = dto.ContactId,\n                    ContactPhone = dto.ContactPhone,\n                    SourceType = dto.SourceType,\n                    SourceId = dto.SourceId,\n                    ButtonText = dto.ButtonText,\n                    CTAType = dto.CTAType,\n                    MessageId = dto.MessageId,\n                    TemplateId = dto.TemplateId,\n                    MessageLogId = dto.MessageLogId,\n                    ClickedVia = dto.ClickedVia ?? \"web\",\n                    Referrer = dto.Referrer,\n                    ClickedAt = dto.ClickedAt ?? DateTime.UtcNow,\n                    IPAddress = dto.IPAddress,\n                    DeviceType = dto.DeviceType,\n                    Browser = dto.Browser,\n                    Country = dto.Country,\n                    City = dto.City,\n                    FollowUpSent = false,\n                    LastInteractionType = \"Clicked\",\n                    SessionId = Guid.TryParse(dto.SessionId, out var sid) ? sid : (Guid?)null,\n                    ThreadId = Guid.TryParse(dto.ThreadId, out var tid) ? tid : (Guid?)null,\n                    CampaignId = dto.CampaignId,\n                    CampaignSendLogId = dto.CampaignSendLogId\n                };\n\n                await _context.TrackingLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to log CTA click\");\n            }\n        }\n        public async Task<TrackingLogDetailsDto?> GetLogDetailsAsync(Guid logId)\n        {\n            var tracking = await _context.TrackingLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.Id == logId);\n\n            if (tracking == null)\n                return null;\n\n            var contact = tracking.ContactId != null\n                ? await _context.Contacts.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.ContactId)\n                : null;\n\n            var campaign = tracking.CampaignId != null\n                ? await _context.Campaigns.AsNoTracking().FirstOrDefaultAsync(c => c.Id == tracking.CampaignId)\n                : null;\n\n            var messageLog = tracking.MessageLogId != null\n                ? await _context.MessageLogs.AsNoTracking().FirstOrDefaultAsync(m => m.Id == tracking.MessageLogId)\n                : null;\n\n            return new TrackingLogDetailsDto\n            {\n                Tracking = _mapper.Map<TrackingLogDto>(tracking),\n                Contact = contact != null ? _mapper.Map<ContactDto>(contact) : null,\n                Campaign = campaign != null ? _mapper.Map<CampaignDto>(campaign) : null,\n                MessageLog = messageLog != null ? _mapper.Map<MessageLogDto>(messageLog) : null\n            };\n        }\n        public async Task<List<TrackingLog>> GetFlowClickLogsAsync(Guid businessId)\n        {\n            return await _context.TrackingLogs\n                .Where(x => x.BusinessId == businessId && x.SourceType == \"cta-flow\")\n                .OrderByDescending(x => x.ClickedAt)\n                .ToListAsync();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/BackgroundWorkers/WebhookAutoCleanupWorker.cs",
          "sha256": "5149c73a4fbcb11d9e501321407b1c7ae7ee660b8f7d612eca136b528f0467f2",
          "language": "csharp",
          "content": "using xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.BackgroundWorkers\n{\n    public class WebhookAutoCleanupWorker : BackgroundService\n    {\n        private readonly ILogger<WebhookAutoCleanupWorker> _logger;\n        private readonly IServiceProvider _services;\n\n        public WebhookAutoCleanupWorker(IServiceProvider services, ILogger<WebhookAutoCleanupWorker> logger)\n        {\n            _services = services;\n            _logger = logger;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                using var scope = _services.CreateScope();\n                var maintenanceService = scope.ServiceProvider.GetRequiredService<IMaintenanceService>();\n\n                if (await maintenanceService.IsAutoCleanupEnabledAsync())\n                {\n                    var count = await maintenanceService.RunCleanupAsync();\n                    _logger.LogInformation($\"🧹 Auto-cleaned {count} old webhook logs.\");\n                }\n\n                await Task.Delay(TimeSpan.FromHours(12), stoppingToken);\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/BackgroundWorkers/WebhookQueueWorker.cs",
          "sha256": "4a0dbbf63a7e5e5dbdea08790538d449d81f91e4234da7a4b8acedf0ff744b25",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.DTOs;\n\npublic class WebhookQueueWorker : BackgroundService\n{\n    private readonly IWebhookQueueService _queueService;\n    private readonly IServiceScopeFactory _scopeFactory;\n    private readonly ILogger<WebhookQueueWorker> _logger;\n\n    public WebhookQueueWorker(\n        IWebhookQueueService queueService,\n        IServiceScopeFactory scopeFactory,\n        ILogger<WebhookQueueWorker> logger)\n    {\n        _queueService = queueService;\n        _scopeFactory = scopeFactory;\n        _logger = logger;\n    }\n\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        _logger.LogInformation(\"🚀 Webhook Queue Worker started.\");\n\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            try\n            {\n                var payload = await _queueService.DequeueAsync(stoppingToken);\n                var clonedPayload = payload.Clone(); // ✅ Avoid disposal issue\n\n                using var scope = _scopeFactory.CreateScope();\n\n                // 🔄 Resolve scoped dependencies\n                var dispatcher = scope.ServiceProvider.GetRequiredService<IWhatsAppWebhookDispatcher>();\n                var failureLogger = scope.ServiceProvider.GetRequiredService<IFailedWebhookLogService>();\n\n                // 🚀 Dispatch\n                await dispatcher.DispatchAsync(clonedPayload);\n            }\n            catch (OperationCanceledException)\n            {\n                _logger.LogInformation(\"🛑 Graceful shutdown requested.\");\n                break;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Error while processing webhook payload.\");\n\n                try\n                {\n                    using var scope = _scopeFactory.CreateScope();\n                    var failureLogger = scope.ServiceProvider.GetRequiredService<IFailedWebhookLogService>();\n\n                    var fallback = new FailedWebhookLogDto\n                    {\n                        SourceModule = \"WebhookQueueWorker\",\n                        FailureType = \"DispatchError\",\n                        ErrorMessage = ex.Message,\n                       // RawJson = ex.Data[\"payload\"]?.ToString() ?? \"(unavailable)\",\n                        RawJson = ex.Data[\"payload\"]?.ToString() ?? \"{}\",\n                        CreatedAt = DateTime.UtcNow\n                    };\n\n                    await failureLogger.LogFailureAsync(fallback);\n                }\n                catch (Exception innerEx)\n                {\n                    _logger.LogError(innerEx, \"⚠️ Failed to log to FailedWebhookLogs table.\");\n                }\n            }\n        }\n\n        _logger.LogInformation(\"🛑 Webhook Queue Worker stopped.\");\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Controllers/FailedWebhookLogsController.cs",
          "sha256": "f16ada5c238d2293688a73b0c4428da7f91567d1ca100da1809f0b95ea65c2fc",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Tracking.Models;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Tracking.Controllers\n{\n    [ApiController]\n    [Route(\"api/failed-webhooks\")]\n    public class FailedWebhookLogsController : ControllerBase\n    {\n        private readonly IFailedWebhookLogService _service;\n\n        public FailedWebhookLogsController(IFailedWebhookLogService service)\n        {\n            _service = service;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllAsync()\n        {\n            var logs = await _service.GetAllAsync();\n            return Ok(logs);\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var log = await _service.GetByIdAsync(id);\n            if (log == null)\n                return NotFound();\n\n            return Ok(log);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Controllers/MaintenanceController.cs",
          "sha256": "2936737cca434f20b27184b1885f94a5a90a6a94453b29dc0a597b264cc6325d",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Models;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks\")]\n    public class MaintenanceController : ControllerBase\n    {\n        private readonly AppDbContext _context;\n        private readonly IMaintenanceService _maintenance;\n\n        public MaintenanceController(AppDbContext context, IMaintenanceService maintenance)\n        {\n            _context = context;\n            _maintenance = maintenance;\n        }\n\n        // ✅ Injected Test Log for Dev Testing\n        [HttpPost(\"inject-test-log\")]\n        public async Task<IActionResult> InjectTestLog()\n        {\n            var testLog = new FailedWebhookLog\n            {\n                SourceModule = \"WebhookQueueWorker\",\n                FailureType = \"DispatchError\",\n                ErrorMessage = \"🧪 Simulated webhook dispatch failure for testing.\",\n                RawJson = \"{\\\"sample\\\":\\\"test_payload\\\",\\\"reason\\\":\\\"unit_test\\\"}\",\n                CreatedAt = DateTime.UtcNow\n            };\n\n            _context.FailedWebhookLogs.Add(testLog);\n            await _context.SaveChangesAsync();\n\n            return Ok(new { message = \"✅ Injected test log successfully.\" });\n        }\n\n        // ✅ Manual Cleanup Trigger\n        [HttpPost(\"cleanup-now\")]\n        public async Task<IActionResult> CleanupNow()\n        {\n            var cutoff = DateTime.UtcNow.AddDays(-7);\n            var oldLogs = await _context.FailedWebhookLogs\n                .Where(x => x.CreatedAt < cutoff)\n                .ToListAsync();\n\n            if (!oldLogs.Any())\n                return Ok(new { message = \"✅ No logs to delete.\" });\n\n            _context.FailedWebhookLogs.RemoveRange(oldLogs);\n            await _context.SaveChangesAsync();\n\n            return Ok(new { message = $\"✅ Deleted {oldLogs.Count} old logs.\" });\n        }\n\n        // ✅ Count of all failed logs\n        [HttpGet(\"failed/count\")]\n        public async Task<IActionResult> GetFailedCount()\n        {\n            var count = await _context.FailedWebhookLogs.CountAsync();\n            return Ok(count);\n        }\n\n        // ✅ Cleanup Setting Status\n             [HttpGet(\"settings\")]\n        public async Task<IActionResult> GetCleanupStatus()\n        {\n            var enabled = await _maintenance.IsAutoCleanupEnabledAsync();\n            var lastRun = await _maintenance.GetLastCleanupTimeAsync();\n\n            return Ok(new\n            {\n                enabled,\n                lastCleanupAt = lastRun\n            });\n        }\n\n        // ✅ Enable Auto Cleanup\n        [HttpPost(\"enable-cleanup\")]\n        public async Task<IActionResult> EnableCleanup()\n        {\n            await _maintenance.EnableAutoCleanupAsync();\n            return Ok(new { message = \"✅ Auto-cleanup enabled.\" });\n        }\n\n        // ✅ Disable Auto Cleanup\n        [HttpPost(\"disable-cleanup\")]\n        public async Task<IActionResult> DisableCleanup()\n        {\n            await _maintenance.DisableAutoCleanupAsync();\n            return Ok(new { message = \"✅ Auto-cleanup disabled.\" });\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Controllers/WebhookTestController.cs",
          "sha256": "d3d3ac0e403d42baaa151d62e86135b71a0116ed7231d86c04b87bbd4ae6ac61",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing System.Text.Json;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/test\")]\n    public class WebhookTestController : ControllerBase\n    {\n        private readonly IWebhookQueueService _queue;\n\n        public WebhookTestController(IWebhookQueueService queue)\n        {\n            _queue = queue;\n        }\n\n        [HttpPost(\"simulate-failure\")]\n        public IActionResult SimulateWebhookFailure()\n        {\n            var fakePayload = new\n            {\n                entry = new[]\n                {\n                    new\n                    {\n                        changes = new[]\n                        {\n                            new\n                            {\n                                value = new\n                                {\n                                    // This will cause dispatcher to throw due to invalid structure\n                                    unexpected = \"🧪 Simulated bad structure\"\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            var json = JsonSerializer.Serialize(fakePayload);\n            var element = JsonDocument.Parse(json).RootElement;\n\n            _queue.Enqueue(element);\n\n            return Ok(new\n            {\n                message = \"✅ Test payload enqueued to simulate failure.\",\n                enqueued = true\n            });\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Controllers/WhatsAppWebhookController.cs",
          "sha256": "d25c1bf6870c1712f3270bf8e478e741c09e7d32497bb0f3e64885e8e5c6c7ec",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System.Text.Json;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Webhooks.Services;\n\nnamespace xbytechat.api.Features.Webhooks.Controllers\n{\n    [ApiController]\n    [Route(\"api/webhooks/whatsapp\")]\n    public class WhatsAppWebhookController : ControllerBase\n    {\n        private readonly ILogger<WhatsAppWebhookController> _logger;\n        private readonly IConfiguration _config;\n        private readonly AppDbContext _context;\n        private readonly IWhatsAppWebhookService _webhookService;\n        private readonly IWebhookQueueService _queue;\n            public WhatsAppWebhookController(ILogger<WhatsAppWebhookController> logger,\n            IConfiguration config, AppDbContext context, IWhatsAppWebhookService webhookService, IWebhookQueueService queue)\n        {\n            _logger = logger;\n            _config = config;\n            _context = context;\n            _webhookService = webhookService;\n            _queue = queue;\n        }\n\n        // ✅ Step 1: Meta verification endpoint (GET)\n        // Meta calls this to verify your webhook with hub.verify_token and expects you to return hub.challenge\n        [HttpGet]\n        public IActionResult VerifyWebhook(\n            [FromQuery(Name = \"hub.mode\")] string mode,\n            [FromQuery(Name = \"hub.verify_token\")] string token,\n            [FromQuery(Name = \"hub.challenge\")] string challenge)\n        {\n            // 🔐 Load your secret token from config or environment\n            var expectedToken = _config[\"WhatsApp:MetaToken\"];\n\n            if (mode == \"subscribe\" && token == expectedToken)\n            {\n                _logger.LogInformation(\"✅ WhatsApp webhook verified successfully.\");\n                return Ok(challenge); // Meta expects a 200 OK with the challenge value\n            }\n\n            _logger.LogWarning(\"❌ WhatsApp webhook verification failed.\");\n            return Forbid(\"Token mismatch.\");\n        }\n\n     \n        [HttpPost]\n        public IActionResult HandleStatus([FromBody] JsonElement payload)\n        {\n            _logger.LogWarning(\"📥 Webhook received at controller:\\n\" + payload.ToString());\n\n            try\n            {\n                var cloned = payload.Clone(); // Important to clone here\n                _queue.Enqueue(cloned);\n\n                _logger.LogInformation(\"📥 Webhook payload enqueued successfully.\");\n                return Ok(new { received = true });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to enqueue WhatsApp webhook payload.\");\n                return StatusCode(500, new { error = \"Webhook queue failed\" });\n            }\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/DTOs/FailedWebhookLogDto.cs",
          "sha256": "6b14d817a983f7eb6626a70cc5aceedd50b164ce0e0282dcf155a1d6eb4b5a51",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Webhooks.DTOs\n{\n    public class FailedWebhookLogDto\n    {\n        public string? ErrorMessage { get; set; }\n        public string? SourceModule { get; set; }\n        public string? FailureType { get; set; }\n        public string RawJson { get; set; } = string.Empty;\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Models/FailedWebhookLog.cs",
          "sha256": "549e466af9a80b67809dd9e25d2bf5b9b5991ce11754225bda46dac4df1e6da6",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.Webhooks.Models\n{\n    public class FailedWebhookLog\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n\n        // 🧠 Debug Metadata\n        public string? ErrorMessage { get; set; }\n        public string? SourceModule { get; set; } // e.g., StatusProcessor, ClickProcessor\n        public string? FailureType { get; set; }  // e.g., JSON_PARSE_ERROR, DB_LOOKUP_FAILED\n\n        // 📦 Raw Data Snapshot\n        public string RawJson { get; set; } = string.Empty;\n\n        // 🕒 Timeline\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Models/WebhookSettings.cs",
          "sha256": "c0eeeaa5e14f839b159f28d337450f595c7604994690c66fa7df82a56c6a3093",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Webhooks.Models\n{\n    public class WebhookSettings\n    {\n        public Guid Id { get; set; } = Guid.NewGuid();\n        public bool AutoCleanupEnabled { get; set; } = true;\n        public DateTime? LastCleanupAt { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/FailedWebhookLogCleanupService.cs",
          "sha256": "68f4211391a24a94d3096c5cd71fbd6cbd0fed0211dd2929b92b1780ffd02fc8",
          "language": "csharp",
          "content": "using Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class FailedWebhookLogCleanupService : BackgroundService\n    {\n        private readonly ILogger<FailedWebhookLogCleanupService> _logger;\n        private readonly IServiceProvider _services;\n        private readonly TimeSpan _interval = TimeSpan.FromHours(24); // daily run\n\n        public FailedWebhookLogCleanupService(ILogger<FailedWebhookLogCleanupService> logger, IServiceProvider services)\n        {\n            _logger = logger;\n            _services = services;\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            _logger.LogInformation(\"🧹 FailedWebhookLogCleanupService started.\");\n\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                try\n                {\n                    using var scope = _services.CreateScope();\n                    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n\n                    var cutoff = DateTime.UtcNow.AddDays(-7);\n                    var oldLogs = await db.FailedWebhookLogs\n                        .Where(x => x.CreatedAt < cutoff)\n                        .ToListAsync(stoppingToken);\n\n                    if (oldLogs.Any())\n                    {\n                        db.FailedWebhookLogs.RemoveRange(oldLogs);\n                        await db.SaveChangesAsync(stoppingToken);\n                        _logger.LogInformation(\"🧹 Deleted {Count} old failed webhook logs.\", oldLogs.Count);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Failed to clean up old webhook logs.\");\n                }\n\n                await Task.Delay(_interval, stoppingToken); // wait before next cleanup\n            }\n\n            _logger.LogInformation(\"🛑 FailedWebhookLogCleanupService stopped.\");\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/FailedWebhookLogService.cs",
          "sha256": "3da6a5ad043773f7684b6ea9bc208441cbc36a7e53f01eacdd7c17848118c2af",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class FailedWebhookLogService : IFailedWebhookLogService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<FailedWebhookLogService> _logger;\n\n        public FailedWebhookLogService(AppDbContext context, ILogger<FailedWebhookLogService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task LogFailureAsync(FailedWebhookLogDto dto)\n        {\n            try\n            {\n                var log = new FailedWebhookLog\n                {\n                    ErrorMessage = dto.ErrorMessage,\n                    SourceModule = dto.SourceModule,\n                    FailureType = dto.FailureType,\n                    RawJson = dto.RawJson,\n                    CreatedAt = dto.CreatedAt\n                };\n\n                await _context.FailedWebhookLogs.AddAsync(log);\n                await _context.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to persist webhook error log\");\n            }\n        }\n\n        public async Task<List<FailedWebhookLog>> GetAllAsync()\n        {\n            return await _context.FailedWebhookLogs\n                .OrderByDescending(x => x.CreatedAt)\n                .Take(100) // prevent DB overload\n                .ToListAsync();\n        }\n\n        public async Task<FailedWebhookLog?> GetByIdAsync(Guid id)\n        {\n            return await _context.FailedWebhookLogs.FindAsync(id);\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/IFailedWebhookLogService.cs",
          "sha256": "9366c7a087317049e7dee346a65f7ea81a76fe95fb98fe21ca457e0ed5db6a7c",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.Webhooks.DTOs;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IFailedWebhookLogService\n    {\n        Task LogFailureAsync(FailedWebhookLogDto dto);\n        Task<List<FailedWebhookLog>> GetAllAsync();\n        Task<FailedWebhookLog?> GetByIdAsync(Guid id);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/IMaintenanceService.cs",
          "sha256": "76ef1df941e3536bbdce5e7213554b593e6431592ba6527334cf274c78357e26",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IMaintenanceService\n    {\n        Task<bool> IsAutoCleanupEnabledAsync();\n        Task EnableAutoCleanupAsync();\n        Task DisableAutoCleanupAsync();\n        Task<DateTime?> GetLastCleanupTimeAsync();\n        Task<int> RunCleanupAsync();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/IWebhookQueueService.cs",
          "sha256": "34e2e37f5ba5da57159852cecd9adde2f085640e1eb55a67116b5381ffa2e4b0",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing xbytechat.api.Features.Tracking.DTOs;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWebhookQueueService\n    {\n        void Enqueue(JsonElement payload);\n        ValueTask<JsonElement> DequeueAsync(CancellationToken cancellationToken);\n        int GetQueueLength();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/IWhatsAppWebhookDispatcher.cs",
          "sha256": "844865d879bca5e59aa9d82cf7fabfb3ac241233391ca0544922a8902eed4a88",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWhatsAppWebhookDispatcher\n    {\n        Task DispatchAsync(JsonElement payload);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/IWhatsAppWebhookService.cs",
          "sha256": "79f51c796e3319918315cd6043f985b763534fbb19a8357713d2c01aaf385112",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public interface IWhatsAppWebhookService\n    {\n        Task ProcessStatusUpdateAsync(JsonElement payload);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/MaintenanceService .cs",
          "sha256": "c8c7e803e34fb97d2edfbaaf824d332f8de8b1483327e364e63d68dd0082a20e",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Features.Webhooks.Models;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class MaintenanceService : IMaintenanceService\n    {\n        private readonly AppDbContext _context;\n\n        public MaintenanceService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<bool> IsAutoCleanupEnabledAsync()\n        {\n            var setting = await _context.WebhookSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync();\n\n            return setting?.AutoCleanupEnabled ?? false;\n        }\n\n        public async Task<DateTime?> GetLastCleanupTimeAsync()\n        {\n            return await _context.WebhookSettings\n                .AsNoTracking()\n                .Select(s => s.LastCleanupAt)\n                .FirstOrDefaultAsync();\n        }\n\n        public async Task EnableAutoCleanupAsync()\n        {\n            var setting = await GetOrCreateAsync();\n            setting.AutoCleanupEnabled = true;\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task DisableAutoCleanupAsync()\n        {\n            var setting = await GetOrCreateAsync();\n            setting.AutoCleanupEnabled = false;\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<int> RunCleanupAsync()\n        {\n            var threshold = DateTime.UtcNow.AddDays(-7);\n            var oldLogs = await _context.FailedWebhookLogs\n                .Where(l => l.CreatedAt < threshold)\n                .ToListAsync();\n\n            if (oldLogs.Any())\n                _context.FailedWebhookLogs.RemoveRange(oldLogs);\n\n            var setting = await GetOrCreateAsync();\n            setting.LastCleanupAt = DateTime.UtcNow;\n\n            await _context.SaveChangesAsync();\n            return oldLogs.Count;\n        }\n\n        private async Task<WebhookSettings> GetOrCreateAsync()\n        {\n            var setting = await _context.WebhookSettings.FirstOrDefaultAsync();\n            if (setting == null)\n            {\n                setting = new WebhookSettings\n                {\n                    AutoCleanupEnabled = false,\n                    LastCleanupAt = null\n                };\n                _context.WebhookSettings.Add(setting);\n                await _context.SaveChangesAsync();\n            }\n            return setting;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/ClickWebhookProcessor.cs",
          "sha256": "0887fd0dd55ee4fa7ceaae2f534d1b7b0fbdb99dd3814e8a861f68c1b9145c3b",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.IO.Pipelines;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Shared.TrackingUtils;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class ClickWebhookProcessor : IClickWebhookProcessor\n    {\n        private readonly ILogger<ClickWebhookProcessor> _logger;\n        private readonly IMessageIdResolver _messageIdResolver;\n        private readonly ITrackingService _trackingService;\n        private readonly AppDbContext _context;\n        private readonly IMessageEngineService _messageEngine;\n        private readonly ICTAFlowService _flowService;\n\n        public ClickWebhookProcessor(\n            ILogger<ClickWebhookProcessor> logger,\n            IMessageIdResolver messageIdResolver,\n            ITrackingService trackingService,\n            AppDbContext context,\n            IMessageEngineService messageEngine,\n            ICTAFlowService flowService)\n        {\n            _logger = logger;\n            _messageIdResolver = messageIdResolver;\n            _trackingService = trackingService;\n            _context = context;\n            _messageEngine = messageEngine;\n            _flowService = flowService;\n        }\n\n\n        //public async Task ProcessClickAsync(JsonElement value)\n        //{\n        //    _logger.LogWarning(\"📥 [ENTERED CLICK PROCESSOR]\");\n\n        //    try\n        //    {\n        //        _logger.LogWarning(\"📥 [DEBUG] Click processor entered with value: \" + value.ToString());\n\n        //        if (!value.TryGetProperty(\"messages\", out var messages)) return;\n        //        var message = messages[0];\n\n        //        if (message.GetProperty(\"type\").GetString() != \"button\") return;\n\n        //        var clickMessageId = message.GetProperty(\"id\").GetString();\n        //        var originalMessageId = message.GetProperty(\"context\").GetProperty(\"id\").GetString();\n        //        var from = message.GetProperty(\"from\").GetString();\n        //        var buttonText = message.GetProperty(\"button\").GetProperty(\"text\").GetString()?.Trim().ToLower();\n\n        //        _logger.LogInformation(\"🖱️ Button Click ␦ From: {From}, ClickMsgId: {ClickId}, OriginalMsgId: {OrigId}, Text: {Text}\",\n        //            from, clickMessageId, originalMessageId, buttonText);\n\n        //        Guid businessId = Guid.Empty;\n        //        Guid? contactId = null;\n        //        string contactPhone = from;\n        //        Guid? campaignId = null;\n        //        Guid? sendLogId = null;\n        //        string sourceType = \"catalog\";\n        //        Guid? sourceId = null;\n\n        //        // 1️⃣ Try CampaignSendLog\n        //        var campaignLog = await _context.CampaignSendLogs\n        //            .Include(l => l.Campaign)\n        //            .Include(l => l.Contact)\n        //            .FirstOrDefaultAsync(l => l.MessageId == originalMessageId);\n\n        //        if (campaignLog != null)\n        //        {\n        //            _logger.LogInformation(\"📊 CampaignSendLog matched via context.id\");\n\n        //            businessId = campaignLog.Campaign?.BusinessId ?? Guid.Empty;\n        //            contactId = campaignLog.ContactId;\n        //            contactPhone = campaignLog.Contact?.PhoneNumber ?? from;\n        //            campaignId = campaignLog.CampaignId;\n        //            sendLogId = campaignLog.Id;\n        //            sourceType = \"campaign\";\n        //            sourceId = campaignLog.CampaignId;\n\n        //            // 🔁 Auto Follow-Up\n        //            if (buttonText == \"interested\" &&\n        //                !string.IsNullOrWhiteSpace(campaignLog.Campaign?.FollowUpTemplateId))\n        //            {\n        //                var followUpDto = new SimpleTemplateMessageDto\n        //                {\n        //                    BusinessId = businessId,\n        //                    RecipientNumber = contactPhone,\n        //                    TemplateName = campaignLog.Campaign.FollowUpTemplateId,\n        //                    TemplateParameters = new() // Phase 1 → no variables\n        //                };\n\n        //                var result = await _messageEngine.SendTemplateMessageSimpleAsync(followUpDto);\n        //                _logger.LogInformation(result.Success\n        //                    ? \"✅ Follow-up message sent successfully.\"\n        //                    : $\"❌ Follow-up failed: {result.Message}\");\n        //            }\n        //        }\n        //        else\n        //        {\n        //            _logger.LogWarning(\"⚠️ CampaignSendLog not found. Trying fallback to MessageLogs.\");\n\n        //            var log = await _context.MessageLogs\n        //                .FirstOrDefaultAsync(m =>\n        //                    m.MessageId == originalMessageId ||\n        //                    m.Id.ToString() == originalMessageId ||\n        //                    m.RawResponse.Contains(originalMessageId));\n\n        //            if (log != null)\n        //            {\n        //                businessId = log.BusinessId;\n        //                contactId = log.ContactId;\n        //                contactPhone = log.RecipientNumber ?? from;\n        //                sourceType = \"flow\";\n        //                _logger.LogInformation(\"✅ Fallback matched MessageLog. BusinessId: {BusinessId}\", businessId);\n        //            }\n        //            else\n        //            {\n        //                _logger.LogWarning(\"❌ Fallback to MessageLogs failed. No message found for: {OriginalId}\", originalMessageId);\n        //            }\n        //        }\n\n        //        if (businessId == Guid.Empty)\n        //        {\n        //            _logger.LogWarning(\"❌ TrackingLog failed: No BusinessId available for click.\");\n        //            return;\n        //        }\n\n        //        // 2️⃣ Save Tracking\n        //        var dto = new TrackingLogDto\n        //        {\n        //            BusinessId = businessId,\n        //            CampaignId = campaignId,\n        //            CampaignSendLogId = sendLogId,\n        //            ContactId = contactId,\n        //            ContactPhone = contactPhone,\n        //            MessageId = originalMessageId,\n        //            MessageLogId = null,\n        //            SourceType = sourceType,\n        //            SourceId = sourceId,\n        //            ButtonText = buttonText,\n        //            CTAType = buttonText,\n        //            ClickedVia = \"webhook\",\n        //            ClickedAt = DateTime.UtcNow,\n        //            Browser = \"WhatsApp\",\n        //            IPAddress = \"webhook\",\n        //            DeviceType = DeviceHelper.GetDeviceType(\"WhatsApp\"),\n        //            Country = await GeoHelper.GetCountryFromIP(\"webhook\"),\n        //            RawJson = value.ToString()\n        //        };\n\n        //        var resultLog = await _trackingService.LogCTAClickWithEnrichmentAsync(dto);\n        //        _logger.LogInformation(\"📥 Tracking Result: {Result}\", resultLog?.Message ?? \"N/A\");\n\n        //        // 3️⃣ Match Flow → Trigger Next Step (if any)\n        //        try\n        //        {\n        //            if (!string.IsNullOrWhiteSpace(dto.ButtonText))\n        //            {\n        //                var matchedStep = await _flowService.MatchStepByButtonAsync(\n        //                    businessId,\n        //                    dto.ButtonText.Trim().ToLower(),\n        //                    \"quick_reply\",\n        //                    campaignLog?.Campaign?.MessageTemplate ?? \"\",  // currentTemplateName\n        //                    campaignId\n        //                );\n\n        //                if (matchedStep != null)\n        //                {\n        //                    ResponseResult sendResult;\n\n        //                    switch (matchedStep.TemplateType?.ToLower())\n        //                    {\n        //                        case \"image_template\":\n        //                            var imageDto = new ImageTemplateMessageDto\n        //                            {\n        //                                BusinessId = businessId,\n        //                                RecipientNumber = contactPhone,\n        //                                TemplateName = matchedStep.TemplateToSend,\n        //                                LanguageCode = \"en_US\"\n        //                            };\n        //                            sendResult = await _messageEngine.SendImageTemplateMessageAsync(imageDto);\n        //                            break;\n\n        //                        case \"text_template\":\n        //                            var textDto = new SimpleTemplateMessageDto\n        //                            {\n        //                                BusinessId = businessId,\n        //                                RecipientNumber = contactPhone,\n        //                                TemplateName = matchedStep.TemplateToSend,\n        //                                TemplateParameters = new() // Phase 1 = No placeholders\n        //                            };\n        //                            sendResult = await _messageEngine.SendTemplateMessageSimpleAsync(textDto);\n        //                            break;\n\n        //                        default:\n        //                            _logger.LogWarning(\"❌ Unsupported template type in flow step: {Type}\", matchedStep.TemplateType);\n        //                            return;\n        //                    }\n\n        //                    if (sendResult.Success)\n        //                    {\n        //                        _logger.LogInformation(\"⚡ CTA Flow matched! Sent template: {Template}\", matchedStep.TemplateToSend);\n        //                    }\n        //                    else\n        //                    {\n        //                        _logger.LogWarning(\"❌ Failed to send matched CTA template: {Message}\", sendResult.Message);\n        //                    }\n        //                }\n        //                else\n        //                {\n        //                    _logger.LogInformation(\"🟡 No CTA Flow matched for button: {Text}\", dto.ButtonText);\n        //                }\n        //            }\n        //        }\n        //        catch (Exception flowEx)\n        //        {\n        //            _logger.LogError(flowEx, \"❌ CTA Flow trigger failed.\");\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ Failed to process button click.\");\n        //    }\n        //}\n\n        public async Task ProcessClickAsync(JsonElement value)\n        {\n            _logger.LogWarning(\"📥 [ENTERED CLICK PROCESSOR]\");\n\n            try\n            {\n                if (!value.TryGetProperty(\"messages\", out var messages)) return;\n                var message = messages[0];\n\n                if (message.GetProperty(\"type\").GetString() != \"button\") return;\n\n                var clickMessageId = message.GetProperty(\"id\").GetString();\n                var originalMessageId = message.GetProperty(\"context\").GetProperty(\"id\").GetString();\n                var from = message.GetProperty(\"from\").GetString();\n                var buttonText = message.GetProperty(\"button\").GetProperty(\"text\").GetString()?.Trim();\n\n                _logger.LogInformation(\"🖱️ Button Click → From: {From}, ClickId: {ClickId}, OrigMsgId: {OrigId}, Text: {Text}\",\n                    from, clickMessageId, originalMessageId, buttonText);\n\n                Guid businessId = Guid.Empty;\n                Guid? contactId = null;\n                string contactPhone = from;\n                Guid? campaignId = null;\n                Guid? sendLogId = null;\n                string sourceType = \"catalog\";\n                Guid? sourceId = null;\n\n                // 1️⃣ Try CampaignSendLog\n                var campaignLog = await _context.CampaignSendLogs\n                    .Include(l => l.Campaign)\n                    .Include(l => l.Contact)\n                    .FirstOrDefaultAsync(l => l.MessageId == originalMessageId);\n\n                if (campaignLog != null)\n                {\n                    _logger.LogInformation(\"📊 CampaignSendLog matched via context.id\");\n\n                    businessId = campaignLog.Campaign?.BusinessId ?? Guid.Empty;\n                    contactId = campaignLog.ContactId;\n                    contactPhone = campaignLog.Contact?.PhoneNumber ?? from;\n                    campaignId = campaignLog.CampaignId;\n                    sendLogId = campaignLog.Id;\n                    sourceType = \"campaign\";\n                    sourceId = campaignLog.CampaignId;\n                }\n                else\n                {\n                    var log = await _context.MessageLogs\n                        .FirstOrDefaultAsync(m =>\n                            m.MessageId == originalMessageId ||\n                            m.Id.ToString() == originalMessageId ||\n                            m.RawResponse.Contains(originalMessageId));\n\n                    if (log != null)\n                    {\n                        businessId = log.BusinessId;\n                        contactId = log.ContactId;\n                        contactPhone = log.RecipientNumber ?? from;\n                        sourceType = \"flow\";\n                        _logger.LogInformation(\"✅ Fallback matched MessageLog. BusinessId: {BusinessId}\", businessId);\n                    }\n                }\n\n                if (businessId == Guid.Empty)\n                {\n                    _logger.LogWarning(\"❌ TrackingLog failed: No BusinessId available.\");\n                    return;\n                }\n\n                // 2️⃣ Save Click Log with enrichment\n                var dto = new TrackingLogDto\n                {\n                    BusinessId = businessId,\n                    CampaignId = campaignId,\n                    CampaignSendLogId = sendLogId,\n                    ContactId = contactId,\n                    ContactPhone = contactPhone,\n                    MessageId = originalMessageId,\n                    MessageLogId = null,\n                    SourceType = sourceType,\n                    SourceId = sourceId,\n                    ButtonText = buttonText,\n                    CTAType = buttonText,\n                    ClickedVia = \"webhook\",\n                    ClickedAt = DateTime.UtcNow,\n                    Browser = \"WhatsApp\",\n                    IPAddress = \"webhook\",\n                    DeviceType = DeviceHelper.GetDeviceType(\"WhatsApp\"),\n                    Country = await GeoHelper.GetCountryFromIP(\"webhook\"),\n                    RawJson = value.ToString()\n                };\n\n                var resultLog = await _trackingService.LogCTAClickWithEnrichmentAsync(dto);\n                _logger.LogInformation(\"📥 Click Tracked → Result: {Msg}\", resultLog?.Message ?? \"N/A\");\n\n                // ✅ Extract TrackingLog.Id from result\n                if (resultLog?.Success != true || resultLog.Data is not Guid trackingLogId)\n                {\n                    _logger.LogWarning(\"⚠️ Skipping flow execution: Tracking ID not found.\");\n                    return;\n                }\n\n                // 3️⃣ Match Flow Step and trigger flow\n                if (!string.IsNullOrWhiteSpace(dto.ButtonText))\n                {\n                    var matchedStep = await _flowService.MatchStepByButtonAsync(\n                        businessId,\n                        dto.ButtonText.Trim(),\n                        \"quick_reply\",\n                        campaignLog?.Campaign?.MessageTemplate ?? \"\",\n                        campaignId\n                    );\n\n                    if (matchedStep != null)\n                    {\n                        _logger.LogInformation(\"🔁 Matched CTA Step → {StepId}\", matchedStep.Id);\n\n                        await _flowService.ExecuteVisualFlowAsync(\n                            businessId,\n                            matchedStep.Id,\n                            trackingLogId\n                        );\n\n                        _logger.LogInformation(\"⚡ Visual flow triggered via CTA click.\");\n                    }\n                    else\n                    {\n                        _logger.LogInformation(\"🟡 No visual flow matched for this button: {Text}\", dto.ButtonText);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to process CTA button click.\");\n            }\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/IClickWebhookProcessor.cs",
          "sha256": "5c42427d1e6c36dd122b3a10412eb70d7c412baf00ce54a614491a5b1590afeb",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IClickWebhookProcessor\n    {\n        Task ProcessClickAsync(JsonElement value);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/IInboundMessageProcessor.cs",
          "sha256": "ec5496c7810122c99affe09fa17861d6d0c371457d9284e0ba58be6a93ea60f2",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IInboundMessageProcessor\n    {\n        Task ProcessChatAsync(JsonElement value);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/InboundMessageProcessor.cs",
          "sha256": "4d185e53ba4a52cd2439e23dc136aab36f4f7469c5399dd644247fdfd5631ae9",
          "language": "csharp",
          "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.SignalR;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api;\nusing xbytechat.api.Features.Inbox.DTOs;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.Extensions.DependencyInjection;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.MessagesEngine.DTOs;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.Automation.Services;\n\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class InboundMessageProcessor : IInboundMessageProcessor\n    {\n        private readonly AppDbContext _context;\n        private readonly IHubContext<InboxHub> _hubContext;\n        private readonly ILogger<InboundMessageProcessor> _logger;\n        private readonly IInboxService _inboxService;\n        private readonly IServiceScopeFactory _serviceScopeFactory;\n        public InboundMessageProcessor(\n            AppDbContext context,\n            IHubContext<InboxHub> hubContext,\n            ILogger<InboundMessageProcessor> logger,\n            IInboxService inboxService,\n            IServiceScopeFactory serviceScopeFactory)\n        {\n            _context = context;\n            _hubContext = hubContext;\n            _logger = logger;\n            _inboxService = inboxService;\n            _serviceScopeFactory = serviceScopeFactory;\n        }\n\n\n\n        \n        public async Task ProcessChatAsync(JsonElement value)\n        {\n            try\n            {\n                using var scope = _serviceScopeFactory.CreateScope();\n                var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();\n                var contactService = scope.ServiceProvider.GetRequiredService<IContactService>();\n                var chatSessionStateService = scope.ServiceProvider.GetRequiredService<IChatSessionStateService>();\n                var automationService = scope.ServiceProvider.GetRequiredService<IAutomationService>();\n                var logger = scope.ServiceProvider.GetRequiredService<ILogger<InboundMessageProcessor>>();\n\n                // ✅ 1. Extract WhatsApp metadata and message\n                var msg = value.GetProperty(\"messages\")[0];\n                var contactPhone = msg.GetProperty(\"from\").GetString()!;\n                var content = msg.GetProperty(\"text\").GetProperty(\"body\").GetString();\n                var businessNumber = value.GetProperty(\"metadata\").GetProperty(\"display_phone_number\").GetString()!;\n\n                // ✅ 2. Resolve business by WhatsApp number\n                var business = await db.Businesses\n                    .Include(b => b.WhatsAppSettings)\n                    .FirstOrDefaultAsync(b => b.WhatsAppSettings.WhatsAppBusinessNumber == businessNumber);\n\n                if (business == null)\n                {\n                    logger.LogWarning(\"❌ Business not found for WhatsApp number: {Number}\", businessNumber);\n                    return;\n                }\n\n                var businessId = business.Id;\n\n                // ✅ 3. Find or create contact\n                var contact = await contactService.FindOrCreateAsync(businessId, contactPhone);\n                if (contact == null)\n                {\n                    logger.LogWarning(\"❌ Could not resolve contact for phone: {Phone}\", contactPhone);\n                    return;\n                }\n\n                // ✅ 4. Check chat mode (skip inbox sync if not agent)\n                var mode = await chatSessionStateService.GetChatModeAsync(businessId, contact.Id);\n                var isAgentMode = mode == \"agent\";\n\n                // ✅ 5. Log incoming message\n                var messageLog = new MessageLog\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = businessId,\n                    ContactId = contact.Id,\n                    RecipientNumber = contactPhone,\n                    MessageContent = content,\n                    Status = \"received\",\n                    CreatedAt = DateTime.UtcNow,\n                    SentAt = DateTime.UtcNow,\n                    IsIncoming = true\n                };\n\n                db.MessageLogs.Add(messageLog);\n                await db.SaveChangesAsync();\n\n                // ✅ 6. Try to trigger automation by keyword\n                try\n                {\n                    var triggerKeyword = content.Trim().ToLower();\n                    var handled = await automationService.TryRunFlowByKeywordAsync(\n                        businessId,\n                        triggerKeyword,\n                        contact.PhoneNumber,\n                        sourceChannel: \"whatsapp\",\n                        industryTag: \"default\"\n                    );\n\n                    if (!handled)\n                    {\n                        logger.LogInformation(\"🕵️ No automation flow matched keyword: {Keyword}\", triggerKeyword);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    logger.LogError(ex, \"❌ Automation flow execution failed.\");\n                }\n\n                // ✅ 7. Only sync to inbox if chat mode is agent\n                if (isAgentMode)\n                {\n                    var inboxService = scope.ServiceProvider.GetRequiredService<IInboxService>();\n                    await inboxService.SaveIncomingMessageAsync(new InboxMessageDto\n                    {\n                        BusinessId = businessId,\n                        ContactId = contact.Id,\n                        RecipientPhone = contact.PhoneNumber,\n                        MessageBody = messageLog.MessageContent,\n                        IsIncoming = true,\n                        Status = messageLog.Status,\n                        SentAt = messageLog.CreatedAt\n                    });\n\n                    logger.LogInformation(\"📥 Message synced to inbox for contact {Phone}\", contactPhone);\n                }\n                else\n                {\n                    logger.LogInformation(\"🚫 Skipping inbox sync: chat mode is not 'agent'\");\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to process inbound WhatsApp chat.\");\n            }\n        }\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/IStatusWebhookProcessor.cs",
          "sha256": "b1e65faf4d0e1fe42cb9f0ca594f5e67270ea101fb1aabf768ab89da63aba838",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface IStatusWebhookProcessor\n    {\n        Task ProcessStatusUpdateAsync(JsonElement payload);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/ITemplateWebhookProcessor.cs",
          "sha256": "6f04b24d675a88073c59204ed241e4744205e80e8d488dd464550a6105c45b7a",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public interface ITemplateWebhookProcessor\n    {\n        Task ProcessTemplateUpdateAsync(JsonElement payload);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/StatusWebhookProcessor.cs",
          "sha256": "2ed51eba7ff737266deb3c2aa5a4276c3e6afed2ee2da7472bd02e8e695ed4b9",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.CampaignTracking.Models;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class StatusWebhookProcessor : IStatusWebhookProcessor\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<StatusWebhookProcessor> _logger;\n        private readonly IMessageIdResolver _messageIdResolver; // ✅ Injected resolver\n\n        public StatusWebhookProcessor(\n            AppDbContext context,\n            ILogger<StatusWebhookProcessor> logger,\n            IMessageIdResolver messageIdResolver) // ✅ Accept resolver in constructor\n        {\n            _context = context;\n            _logger = logger;\n            _messageIdResolver = messageIdResolver;\n        }\n\n        // 🔄 Extract statuses from the payload and route them to log resolver\n        public async Task ProcessAsync(JsonElement value)\n        {\n            if (!value.TryGetProperty(\"statuses\", out var statuses))\n            {\n                _logger.LogWarning(\"⚠️ 'statuses' field missing in webhook payload.\");\n                return;\n            }\n\n            foreach (var status in statuses.EnumerateArray())\n            {\n                var messageId = status.GetProperty(\"id\").GetString();\n                var statusText = status.GetProperty(\"status\").GetString();\n                //var timestamp = status.TryGetProperty(\"timestamp\", out var ts) ? ts.GetInt64() : 0;\n                //var timestamp = status.TryGetProperty(\"timestamp\", out var ts) ? ts.GetInt64() : 0;\n\n                long timestamp = 0;\n\n                if (status.TryGetProperty(\"timestamp\", out var ts))\n                {\n                    if (ts.ValueKind == JsonValueKind.String && long.TryParse(ts.GetString(), out var parsed))\n                    {\n                        timestamp = parsed;\n                    }\n                    else if (ts.ValueKind == JsonValueKind.Number)\n                    {\n                        timestamp = ts.GetInt64();\n                    }\n                }\n\n                var time = DateTimeOffset.FromUnixTimeSeconds(timestamp).UtcDateTime;\n                _logger.LogDebug(\"🕓 Parsed timestamp: {0} from raw type: {1}\", timestamp, ts.ValueKind);\n                // ✅ Resolve the correct CampaignSendLog ID using the new resolver\n                var logId = await _messageIdResolver.ResolveCampaignSendLogIdAsync(messageId);\n\n                if (logId == null)\n                {\n                    _logger.LogWarning($\"⚠️ No matching CampaignSendLog for MessageId: {messageId}\");\n                    continue;\n                }\n\n                // 🔍 Now load the row by resolved ID\n                var log = await _context.CampaignSendLogs.FirstOrDefaultAsync(l => l.Id == logId.Value);\n                if (log != null)\n                {\n                    log.SendStatus = statusText switch\n                    {\n                        \"sent\" => \"Sent\",\n                        \"delivered\" => \"Delivered\",\n                        \"read\" => \"Read\",\n                        _ => log.SendStatus\n                    };\n\n                    if (statusText == \"delivered\") log.DeliveredAt = time;\n                    if (statusText == \"read\") log.ReadAt = time;\n\n                    await _context.SaveChangesAsync();\n                    _logger.LogInformation($\"✅ CampaignSendLog updated for MessageId: {messageId} → {statusText}\");\n                }\n            }\n        }\n\n        // 🔁 Entry point from webhook dispatcher\n        public async Task ProcessStatusUpdateAsync(JsonElement payload)\n        {\n            _logger.LogWarning(\"🔍 Incoming timestamp raw value: {0}\", payload.ToString());\n            var entry = payload.GetProperty(\"entry\")[0];\n            var changes = entry.GetProperty(\"changes\")[0];\n            var value = changes.GetProperty(\"value\");\n\n            await ProcessAsync(value); // ✅ Unified internal call\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Processors/TemplateWebhookProcessor.cs",
          "sha256": "0dbe7873fcf7b84d3a4fb9d78bda6689d86cbfd4d9fd50ce1d98029aaaef0558",
          "language": "csharp",
          "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Processors\n{\n    public class TemplateWebhookProcessor : ITemplateWebhookProcessor\n    {\n        private readonly ILogger<TemplateWebhookProcessor> _logger;\n\n        public TemplateWebhookProcessor(ILogger<TemplateWebhookProcessor> logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task ProcessTemplateUpdateAsync(JsonElement payload)\n        {\n            try\n            {\n                var entry = payload.GetProperty(\"entry\")[0];\n                var changes = entry.GetProperty(\"changes\")[0];\n                var value = changes.GetProperty(\"value\");\n\n                var eventType = value.GetProperty(\"event\").GetString();\n                var templateId = value.TryGetProperty(\"message_template_id\", out var idProp)\n                                 ? idProp.GetString() : \"(unknown)\";\n\n                _logger.LogInformation($\"🧾 Template Event Received: {eventType} for ID: {templateId}\");\n\n                // 🧠 You can store in DB or show in admin logs in the future\n\n                await Task.CompletedTask;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Failed to process template webhook update.\");\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Resolvers/IMessageIdResolver.cs",
          "sha256": "a9129664eb60ff771e1f4895a51f74dd7277f7693c9a9638cab9363dc4618baa",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Resolvers\n{\n    public interface IMessageIdResolver\n    {\n        Task<Guid?> ResolveCampaignSendLogIdAsync(string messageId);\n        Task<Guid?> ResolveMessageLogIdAsync(string messageId);\n        Task<Guid?> ResolveBusinessIdByMessageIdAsync(string messageId);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/Resolvers/MessageIdResolver.cs",
          "sha256": "34280daacb42fd65daf76845f254009aff42867432c235250272bb6fc6676084",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Threading.Tasks;\nusing xbytechat.api;\n\nnamespace xbytechat.api.Features.Webhooks.Services.Resolvers\n{\n    public class MessageIdResolver : IMessageIdResolver\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<MessageIdResolver> _logger;\n\n        public MessageIdResolver(AppDbContext context, ILogger<MessageIdResolver> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n\n        public async Task<Guid?> ResolveCampaignSendLogIdAsync(string messageId)\n        {\n            var log = await _context.CampaignSendLogs\n                                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"⚠️ CampaignSendLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.Id;\n        }\n\n        public async Task<Guid?> ResolveMessageLogIdAsync(string messageId)\n        {\n            var log = await _context.MessageLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"⚠️ MessageLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.Id;\n        }\n\n        public async Task<Guid?> ResolveBusinessIdByMessageIdAsync(string messageId)\n        {\n            var log = await _context.MessageLogs\n                .AsNoTracking()\n                .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n            if (log == null)\n            {\n                _logger.LogWarning(\"⚠️ MessageLog not found for MessageId: {MessageId}\", messageId);\n                return null;\n            }\n\n            return log.BusinessId;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/WebhookQueueService.cs",
          "sha256": "5de062949cd3197e00bf3971292ea36c2014849de597b6cc077673c464a02286",
          "language": "csharp",
          "content": "using System.Text.Json;\nusing System.Threading.Channels;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class WebhookQueueService : IWebhookQueueService\n    {\n        private readonly Channel<JsonElement> _queue;\n\n        public WebhookQueueService()\n        {\n            var options = new BoundedChannelOptions(5000)\n            {\n                FullMode = BoundedChannelFullMode.Wait,\n                SingleReader = true,\n                SingleWriter = false\n            };\n\n            _queue = Channel.CreateBounded<JsonElement>(options);\n        }\n\n        public void Enqueue(JsonElement item)\n        {\n            if (!_queue.Writer.TryWrite(item))\n            {\n                throw new InvalidOperationException(\"⚠️ Webhook queue is full.\");\n            }\n        }\n\n        public async ValueTask<JsonElement> DequeueAsync(CancellationToken cancellationToken)\n        {\n            return await _queue.Reader.ReadAsync(cancellationToken);\n        }\n\n        public int GetQueueLength() => _queue.Reader.Count;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/WhatsAppWebhookDispatcher.cs",
          "sha256": "9b49d77f9faaa3791a6a92f988ad2269e92a283fc91898ef5e885ed90fbbd586",
          "language": "csharp",
          "content": "using System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Logging;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing static System.Net.Mime.MediaTypeNames;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    /// <summary>\n    /// Central dispatcher for WhatsApp webhook events.\n    /// Routes payloads to the appropriate processor based on payload type.\n    /// </summary>\n    public class WhatsAppWebhookDispatcher : IWhatsAppWebhookDispatcher\n    {\n        private readonly IStatusWebhookProcessor _statusProcessor;\n        private readonly ITemplateWebhookProcessor _templateProcessor;\n        private readonly ILogger<WhatsAppWebhookDispatcher> _logger;\n        private readonly IClickWebhookProcessor _clickProcessor;\n        private readonly IInboundMessageProcessor _inboundMessageProcessor;\n        public WhatsAppWebhookDispatcher(\n            IStatusWebhookProcessor statusProcessor,\n            ITemplateWebhookProcessor templateProcessor,\n            ILogger<WhatsAppWebhookDispatcher> logger,\n            IClickWebhookProcessor clickProcessor,\n            IInboundMessageProcessor inboundMessageProcessor)\n        {\n            _statusProcessor = statusProcessor;\n            _templateProcessor = templateProcessor;\n            _logger = logger;\n            _clickProcessor = clickProcessor;\n            _inboundMessageProcessor = inboundMessageProcessor;\n        }\n\n\n        //public async Task DispatchAsync(JsonElement payload)\n        //{\n        //    //throw new Exception(\"🧪 Simulated webhook dispatch failure for testing.\");\n        //    _logger.LogWarning(\"📦 Dispatcher Raw Payload:\\n\" + payload.ToString());\n        //    try\n        //    {\n        //        if (!payload.TryGetProperty(\"entry\", out var entries)) return;\n\n        //        foreach (var entry in entries.EnumerateArray())\n        //        {\n        //            if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n        //            foreach (var change in changes.EnumerateArray())\n        //            {\n        //                if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n        //                // 📨 Status Updates\n        //                if (value.TryGetProperty(\"statuses\", out _))\n        //                {\n        //                    _logger.LogInformation(\"📦 Routing to Status Processor\");\n        //                    await _statusProcessor.ProcessStatusUpdateAsync(payload);\n        //                    continue;\n        //                }\n\n        //                // 🧾 Template Events\n        //                if (value.TryGetProperty(\"event\", out var eventType)\n        //                    && eventType.GetString()?.StartsWith(\"template_\") == true)\n        //                {\n        //                    _logger.LogInformation(\"📦 Routing to Template Processor\");\n        //                    await _templateProcessor.ProcessTemplateUpdateAsync(payload);\n        //                    continue;\n        //                }\n\n        //                // 🎯 Click Events\n        //                if (value.TryGetProperty(\"messages\", out var messages)\n        //                    && messages.GetArrayLength() > 0\n        //                    && messages[0].TryGetProperty(\"type\", out var type)\n        //                    && type.GetString() == \"button\")\n        //                {\n        //                    _logger.LogInformation(\"👉 Routing to Click Processor\");\n        //                    await _clickProcessor.ProcessClickAsync(value);\n        //                    continue;\n        //                }\n        //                // 📥 Inbound text/image/audio messages from customer\n        //                if (value.TryGetProperty(\"messages\", out var messages) &&\n        //                    messages.GetArrayLength() > 0 &&\n        //                    messages[0].TryGetProperty(\"type\", out var typeProp))\n        //                {\n        //                    var type = typeProp.GetString();\n\n        //                    if (type is \"text\" or \"image\" or \"audio\")\n        //                    {\n        //                        _logger.LogInformation(\"💬 Routing to InboundMessageProcessor (type: {Type})\", type);\n        //                        await _inboundProcessor.ProcessAsync(value);\n        //                        continue;\n        //                    }\n        //                }\n\n        //                _logger.LogWarning(\"⚠️ No matching event processor found.\");\n        //            }\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"❌ Dispatcher failed to process WhatsApp webhook.\");\n        //    }\n        //}\n\n        public async Task DispatchAsync(JsonElement payload)\n        {\n            //clickMessages for button clicks\n            // inboundMessages for text / image / audio\n\n            _logger.LogWarning(\"📦 Dispatcher Raw Payload:\\n\" + payload.ToString());\n\n            try\n            {\n                if (!payload.TryGetProperty(\"entry\", out var entries)) return;\n\n                foreach (var entry in entries.EnumerateArray())\n                {\n                    if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n                    foreach (var change in changes.EnumerateArray())\n                    {\n                        if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n                        // 📨 Status Updates\n                        if (value.TryGetProperty(\"statuses\", out _))\n                        {\n                            _logger.LogInformation(\"📦 Routing to Status Processor\");\n                            await _statusProcessor.ProcessStatusUpdateAsync(payload);\n                            continue;\n                        }\n\n                        // 🧾 Template Events\n                        if (value.TryGetProperty(\"event\", out var eventType)\n                            && eventType.GetString()?.StartsWith(\"template_\") == true)\n                        {\n                            _logger.LogInformation(\"📦 Routing to Template Processor\");\n                            await _templateProcessor.ProcessTemplateUpdateAsync(payload);\n                            continue;\n                        }\n\n                        // 🎯 Click Events (button type)\n                        if (value.TryGetProperty(\"messages\", out var clickMessages)\n                            && clickMessages.GetArrayLength() > 0\n                            && clickMessages[0].TryGetProperty(\"type\", out var clickType)\n                            && clickType.GetString() == \"button\")\n                        {\n                            _logger.LogInformation(\"👉 Routing to Click Processor\");\n                            await _clickProcessor.ProcessClickAsync(value);\n                            continue;\n                        }\n\n                        // 💬 Inbound Messages (text/image/audio)\n                        if (value.TryGetProperty(\"messages\", out var inboundMessages)\n                            && inboundMessages.GetArrayLength() > 0\n                            && inboundMessages[0].TryGetProperty(\"type\", out var inboundType))\n                        {\n                            var type = inboundType.GetString();\n\n                            if (type is \"text\" or \"image\" or \"audio\")\n                            {\n                                _logger.LogInformation(\"💬 Routing to InboundMessageProcessor (type: {Type})\", type);\n                                await _inboundMessageProcessor.ProcessChatAsync(value);\n                                continue;\n                            }\n                        }\n\n                        _logger.LogWarning(\"⚠️ No matching event processor found.\");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Dispatcher failed to process WhatsApp webhook.\");\n            }\n        }\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/Webhooks/Services/WhatsAppWebhookService.cs",
          "sha256": "1eab721a5c07db54368581314d45a8dfb105e5d301d1dd25be6883950deaad02",
          "language": "csharp",
          "content": "using System;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\n\nnamespace xbytechat.api.Features.Webhooks.Services\n{\n    public class WhatsAppWebhookService : IWhatsAppWebhookService\n    {\n        private readonly AppDbContext _context;\n        private readonly ILogger<WhatsAppWebhookService> _logger;\n\n        public WhatsAppWebhookService(AppDbContext context, ILogger<WhatsAppWebhookService> logger)\n        {\n            _context = context;\n            _logger = logger;\n        }\n        public async Task ProcessStatusUpdateAsync(JsonElement payload)\n        {\n            _logger.LogInformation(\"📦 Processing Webhook Status:\\n\" +\n                JsonSerializer.Serialize(payload, new JsonSerializerOptions { WriteIndented = true }));\n\n            if (!payload.TryGetProperty(\"entry\", out var entries))\n            {\n                _logger.LogWarning(\"⚠️ Payload missing 'entry' property.\");\n                return;\n            }\n\n            foreach (var entry in entries.EnumerateArray())\n            {\n                if (!entry.TryGetProperty(\"changes\", out var changes)) continue;\n\n                foreach (var change in changes.EnumerateArray())\n                {\n                    if (!change.TryGetProperty(\"value\", out var value)) continue;\n\n                    if (!value.TryGetProperty(\"statuses\", out var statuses)) continue;\n\n                    foreach (var status in statuses.EnumerateArray())\n                    {\n                        string? messageId = status.TryGetProperty(\"id\", out var idProp) ? idProp.GetString() : null;\n                        string? statusText = status.TryGetProperty(\"status\", out var statusProp) ? statusProp.GetString() : null;\n                        long timestamp = status.TryGetProperty(\"timestamp\", out var tsProp) && tsProp.ValueKind == JsonValueKind.String\n                                         && long.TryParse(tsProp.GetString(), out var parsedTs)\n                                         ? parsedTs\n                                         : (tsProp.ValueKind == JsonValueKind.Number ? tsProp.GetInt64() : 0);\n\n                        if (string.IsNullOrEmpty(messageId) || string.IsNullOrEmpty(statusText))\n                        {\n                            _logger.LogWarning(\"⚠️ Missing messageId or statusText in webhook payload.\");\n                            continue;\n                        }\n\n                        var log = await _context.CampaignSendLogs\n                            //.AsNoTracking()\n                            .FirstOrDefaultAsync(l => l.MessageId == messageId);\n\n                        if (log != null)\n                        {\n                            var time = DateTimeOffset.FromUnixTimeSeconds(timestamp).UtcDateTime;\n\n                            //log.SendStatus = statusText switch\n                            //{\n                            //    \"sent\" => \"Sent\",\n                            //    \"delivered\" => \"Delivered\",\n                            //    \"read\" => \"Read\",\n                            //    _ => log.SendStatus\n                            //};\n\n                            //if (statusText == \"delivered\") log.DeliveredAt = time;\n                            //if (statusText == \"read\") log.ReadAt = time;\n\n                            //await _context.SaveChangesAsync();\n                            // 🔁 Avoid redundant updates\n                            var newStatus = statusText switch\n                            {\n                                \"sent\" => \"Sent\",\n                                \"delivered\" => \"Delivered\",\n                                \"read\" => \"Read\",\n                                _ => null\n                            };\n\n                            bool isUpdated = false;\n\n                            if (!string.IsNullOrEmpty(newStatus) && log.SendStatus != newStatus)\n                            {\n                                log.SendStatus = newStatus;\n                                isUpdated = true;\n                            }\n\n                            if (statusText == \"delivered\" && log.DeliveredAt == null)\n                            {\n                                log.DeliveredAt = time;\n                                isUpdated = true;\n                            }\n\n                            if (statusText == \"read\" && log.ReadAt == null)\n                            {\n                                log.ReadAt = time;\n                                isUpdated = true;\n                            }\n\n                            if (isUpdated)\n                            {\n                                await _context.SaveChangesAsync();\n                                _logger.LogInformation($\"✅ Log updated for MessageId: {messageId} → {newStatus}\");\n                            }\n                            else\n                            {\n                                _logger.LogInformation($\"🔁 Duplicate status '{statusText}' skipped for MessageId: {messageId}\");\n                            }\n\n                            _logger.LogInformation($\"✅ Log updated for MessageId: {messageId} → {statusText}\");\n                        }\n                        else\n                        {\n                            _logger.LogWarning($\"⚠️ No matching CampaignSendLog for MessageId: {messageId}\");\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/WhatsAppIntegration/Controllers/WhatsAppTemplateController.cs",
          "sha256": "7cee6e94d95a99b2c7b15eb9567b21bea75fb9efd058d6c2a00fba7585616dc8",
          "language": "csharp",
          "content": "\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json.Linq;\n\nnamespace xbytechat.api.Features.WhatsAppIntegration.Controllers\n{\n    [ApiController]\n    [Route(\"api/whatsapp\")]\n    public class WhatsAppTemplateController : ControllerBase\n    {\n        private readonly IConfiguration _config;\n\n        public WhatsAppTemplateController(IConfiguration config)\n        {\n            _config = config;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetTemplates()\n        {\n            var wabaId = _config[\"WhatsApp:WABA_ID\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            var url = $\"https://graph.facebook.com/v22.0/{wabaId}/message_templates\";\n\n            using var client = new HttpClient();\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            try\n            {\n                var response = await client.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                    return StatusCode((int)response.StatusCode, new { success = false, error = json });\n\n                var root = JsonConvert.DeserializeObject<JObject>(json);\n                var templatesRaw = root[\"data\"] as JArray;\n\n                if (templatesRaw == null)\n                    return BadRequest(new { success = false, error = \"Meta API did not return data array.\" });\n\n                var templates = new List<object>();\n\n                foreach (var tpl in templatesRaw)\n                {\n                    string name = tpl[\"name\"]?.ToString() ?? \"\";\n                    string language = tpl[\"language\"]?.ToString() ?? \"en_US\";\n\n                    string bodyText = \"\";\n                    var components = tpl[\"components\"] as JArray;\n\n                    if (components != null)\n                    {\n                        foreach (var comp in components)\n                        {\n                            if (comp[\"type\"]?.ToString() == \"BODY\")\n                            {\n                                bodyText = comp[\"text\"]?.ToString() ?? \"\";\n                                break;\n                            }\n                        }\n                    }\n\n                    templates.Add(new\n                    {\n                        name,\n                        language,\n                        body = bodyText\n                    });\n                }\n\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { success = false, error = ex.Message });\n            }\n        }\n\n    }\n}\n\n\n"
        },
        {
          "path": "xbytechat-api/Features/WhatsAppIntegration/DTOs/WhatsAppTemplateDto.cs",
          "sha256": "66133a62d929f35f6f56d4d6c3c9a872e14788627c9645fa41aa6eee13290993",
          "language": "csharp",
          "content": "namespace xbytechat.api.Features.WhatsAppIntegration.DTOs\n{\n    public class WhatsAppTemplateDto\n    {\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Controllers/LeadTimelineController.cs",
          "sha256": "2bf2b77897c9f322069f976352984cc8a0a0d25514e1e411e2e2393e3ccba3f0",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Serilog;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.DTOs;\n\nnamespace xbytechat.api.Features.xbTimelines.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class LeadTimelineController : ControllerBase\n    {\n        private readonly ILeadTimelineService _timelineService;\n\n        public LeadTimelineController(ILeadTimelineService timelineService)\n        {\n            _timelineService = timelineService;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddTimelineEntry([FromBody] LeadTimelineDto dto)\n        {\n            try\n            {\n                if (!ModelState.IsValid)\n                    return BadRequest(ModelState);\n\n                var result = await _timelineService.AddTimelineEntryAsync(dto);\n\n                Log.Information(\"✅ Timeline entry created for ContactId: {ContactId}\", dto.ContactId);\n\n                return Ok(result);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to add timeline entry for ContactId: {ContactId}\", dto.ContactId);\n                throw;\n            }\n        }\n\n        [HttpGet(\"contact/{contactId}\")]\n        public async Task<IActionResult> GetTimeline(Guid contactId)\n        {\n            try\n            {\n                var timeline = await _timelineService.GetTimelineByContactIdAsync(contactId);\n\n                Log.Information(\"📄 Retrieved {Count} entries for ContactId: {ContactId}\", timeline.Count, contactId);\n\n                return Ok(timeline);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to get timeline for ContactId: {ContactId}\", contactId);\n                throw;\n            }\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAll()\n        {\n            var timelines = await _timelineService.GetAllTimelinesAsync();\n            return Ok(timelines);\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/DTOs/CampaignTimelineLogDto.cs",
          "sha256": "b279e39522b2d36effd77fe29c36653ca83b93c6cc9a1281d1ed6b3e596b96e3",
          "language": "csharp",
          "content": "public class CampaignTimelineLogDto\n{\n    public Guid ContactId { get; set; }\n    public Guid BusinessId { get; set; }   // ✅ Needed for timeline insertion\n    public Guid CampaignId { get; set; }\n    public string CampaignName { get; set; } = string.Empty; // ✅ Safe default to avoid null issues\n    public DateTime? Timestamp { get; set; } // optional\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/DTOs/CRMTimelineLogDto.cs",
          "sha256": "e6ce11c00e1130226359d24f7c9da23fe4fc68c6e725c5a449ed10a345378269",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.xbTimelines.DTOs\n{\n    public class CRMTimelineLogDto\n    {\n        public Guid ContactId { get; set; }\n        public Guid BusinessId { get; set; }\n        public string EventType { get; set; }  // 🧩 Example: \"NoteAdded\", \"ReminderSet\", \"TagApplied\"\n        public string Description { get; set; }\n        public Guid? ReferenceId { get; set; }  // 🆔 Related NoteId, ReminderId, TagId (optional)\n        public string CreatedBy { get; set; }\n        public string? Category { get; set; } = \"CRM\";  // 📂 Default category: CRM\n        public DateTime? Timestamp { get; set; }  // ⏰ Custom time if needed (else CreatedAt = now)\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/DTOs/LeadTimelineDto.cs",
          "sha256": "b4692f6cebba16abcb7dc7450172517334a4832fce8e02d3c4273da2d001f2c8",
          "language": "csharp",
          "content": "using System;\n\nnamespace xbytechat.api.Features.xbTimelines.DTOs\n{\n    public class LeadTimelineDto\n    {\n        public Guid ContactId { get; set; }\n        public string ContactName { get; set; } \n        public string ContactNumber { get; set; } \n        public string EventType { get; set; }\n        public string Description { get; set; }\n        public string? Data { get; set; }\n        public Guid? ReferenceId { get; set; }\n        public bool IsSystemGenerated { get; set; } = false;\n        public string CreatedBy { get; set; }\n        public string? Source { get; set; }\n        public string? Category { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Mappers/LeadTimelineMapper.cs",
          "sha256": "de301765ab3465a422c99453aab98cf7b40ec5177358642af08c2d5ec36ead4a",
          "language": "csharp",
          "content": "using xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Mappers\n{\n    public static class LeadTimelineMapper\n    {\n        public static LeadTimelineDto ToDto(Models.LeadTimeline entry)\n        {\n            if (entry == null) return null;\n\n            return new LeadTimelineDto\n            {\n                ContactId = entry.ContactId,\n                ContactName = entry.Contact?.Name,                // ✅ Enriched from navigation\n                ContactNumber = entry.Contact?.PhoneNumber,       // ✅ Enriched from navigation\n                EventType = entry.EventType,\n                Description = entry.Description,\n                Data = entry.Data,\n                ReferenceId = entry.ReferenceId,\n                IsSystemGenerated = entry.IsSystemGenerated,\n                CreatedBy = entry.CreatedBy,\n                Source = entry.Source,\n                Category = entry.Category,\n                // ✅ CreatedAt is intentionally excluded from DTO\n            };\n        }\n\n        // Optional for create/update, include only necessary fields\n        public static Models.LeadTimeline ToModel(LeadTimelineDto dto)\n        {\n            if (dto == null) return null;\n\n            return new Models.LeadTimeline\n            {\n                ContactId = dto.ContactId,\n                EventType = dto.EventType,\n                Description = dto.Description,\n                Data = dto.Data,\n                ReferenceId = dto.ReferenceId,\n                IsSystemGenerated = dto.IsSystemGenerated,\n                CreatedBy = dto.CreatedBy,\n                Source = dto.Source,\n                Category = dto.Category,\n                CreatedAt = DateTime.UtcNow // ✅ Always use UTC when creating\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Models/LeadTimeline.cs",
          "sha256": "deaadfd25e7f565dc0456a66a61612baa9aea7a7dc297feca882d2108906413f",
          "language": "csharp",
          "content": "using xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Models\n{\n    public class LeadTimeline\n    {\n        public int Id { get; set; }\n        public Guid ContactId { get; set; }\n        public Guid BusinessId { get; set; }\n        public Business Business { get; set; }  // optional\n\n        public Contact Contact { get; set; } // 🆕 Navigation property\n\n        public string EventType { get; set; }\n\n        public string Description { get; set; }\n        public string? Data { get; set; }\n        public Guid? ReferenceId { get; set; }           // ✅ New\n        public bool IsSystemGenerated { get; set; } = false;  // ✅ New\n        public string CreatedBy { get; set; }\n        public string? Source { get; set; }\n        public string? Category { get; set; }\n        public DateTime CreatedAt { get; set; }\n\n        public string? CTAType { get; set; } // e.g., \"BuyNow\", \"PriceCheck\", \"ConfirmReminder\"\n        public string? CTASourceType { get; set; } // e.g., \"catalog\", \"campaign\", \"reminder\"\n        public Guid? CTASourceId { get; set; } // ID of the source object (productId, reminderId)\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Services/ILeadTimelineService.cs",
          "sha256": "4bff375276ef500fcbd0288211c9a8438d983b063537b2995a6fc98a8eba1148",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.Catalog.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Features.xbTimeline.Services\n{\n    public interface ILeadTimelineService\n    {\n        Task<LeadTimeline> AddTimelineEntryAsync(LeadTimelineDto dto);\n        Task<List<LeadTimeline>> GetTimelineByContactIdAsync(Guid contactId);\n        Task<List<LeadTimelineDto>> GetAllTimelinesAsync();\n        Task AddFromCatalogClickAsync(CatalogClickLog log);\n        Task<ResponseResult> LogCampaignSendAsync(CampaignTimelineLogDto dto);\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Services/ITimelineService.cs",
          "sha256": "3e8a236b7ce0a2af07bc27014910b7fbd77a83c78e8ceebe38c99bab96d183e4",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.Features.xbTimelines.DTOs;\n\nnamespace xbytechat.api.Features.xbTimelines.Services\n{\n    public interface ITimelineService\n    {\n        // Already existing methods...\n\n        // 🆕 CRM related methods\n        Task<bool> LogNoteAddedAsync(CRMTimelineLogDto dto);\n        Task<bool> LogReminderSetAsync(CRMTimelineLogDto dto);\n        Task<bool> LogTagAppliedAsync(CRMTimelineLogDto dto);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Services/LeadTimelineService.cs",
          "sha256": "cf0715e549aeb3e6288ceb6cb82177dea0441d9953e64e6aca44f13ed2a19083",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Serilog;\nusing xbytechat.api.Features.xbTimelines.Models;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.Catalog.Models;\nusing static xbytechat.api.Features.BusinessModule.Models.Business;\nusing System.Text.Json;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Features.PlanManagement.Models;\n\n\nnamespace xbytechat.api.Features.xbTimeline.Services\n{\n    public class LeadTimelineService : ILeadTimelineService\n    {\n        private readonly AppDbContext _context;\n       \n\n        public LeadTimelineService(AppDbContext context )\n        {\n            _context = context;\n        \n        }\n\n        public async Task<LeadTimeline> AddTimelineEntryAsync(LeadTimelineDto dto)\n        {\n            try\n            {\n                var entry = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    EventType = dto.EventType,\n                    Description = dto.Description,\n                    Data = dto.Data,\n                    ReferenceId = dto.ReferenceId,\n                    IsSystemGenerated = dto.IsSystemGenerated,\n                    CreatedBy = dto.CreatedBy,\n                    Source = dto.Source,\n                    Category = dto.Category,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _context.LeadTimelines.Add(entry);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"✅ Timeline entry added for ContactId: {ContactId}\", dto.ContactId);\n\n                return entry;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error adding timeline entry for ContactId: {ContactId}\", dto.ContactId);\n                throw; // Let global middleware handle this\n            }\n        }\n\n        public async Task<List<LeadTimeline>> GetTimelineByContactIdAsync(Guid contactId)\n        {\n            try\n            {\n                var results = await _context.LeadTimelines\n                    .Where(x => x.ContactId == contactId)\n                    .OrderByDescending(x => x.CreatedAt)\n                    .ToListAsync();\n\n                Log.Information(\"📄 Fetched {Count} timeline entries for ContactId: {ContactId}\", results.Count, contactId);\n\n                return results;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch timeline for ContactId: {ContactId}\", contactId);\n                throw;\n            }\n        }\n\n        public async Task<List<LeadTimelineDto>> GetAllTimelinesAsync()\n        {\n            try\n            {\n                var entries = await _context.LeadTimelines\n                    .Include(t => t.Contact) // for Contact Name/Phone\n                    .OrderByDescending(e => e.CreatedAt)\n                    .ToListAsync();\n\n                var dtoList = entries.Select(entry => new LeadTimelineDto\n                {\n                    ContactId = entry.ContactId,\n                    EventType = entry.EventType,\n                    Description = entry.Description,\n                    Data = entry.Data,\n                    ReferenceId = entry.ReferenceId,\n                    CreatedAt = entry.CreatedAt,\n                    CreatedBy = entry.CreatedBy,\n                    Source = entry.Source,\n                    Category = entry.Category,\n                    IsSystemGenerated = entry.IsSystemGenerated,\n                    ContactName = entry.Contact?.Name,\n                    ContactNumber = entry.Contact?.PhoneNumber\n                }).ToList();\n\n                Log.Information(\"📄 Loaded {Count} total timeline entries\", dtoList.Count);\n                return dtoList;\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Failed to fetch all timeline entries\");\n                throw;\n            }\n        }\n        public async Task AddFromCatalogClickAsync(CatalogClickLog log)\n        {\n            if (log == null)\n            {\n                Log.Warning(\"CatalogClickLog is null. Skipping timeline creation.\");\n                return;\n            }\n\n            try\n            {\n                var business = await _context.Businesses\n                    .AsNoTracking()\n                    .FirstOrDefaultAsync(b => b.Id == log.BusinessId);\n\n                if (business == null)\n                {\n                    Log.Warning(\"Business not found for ID: {BusinessId}. Skipping timeline creation.\", log.BusinessId);\n                    return;\n                }\n\n                // if (business.Plan == PlanType.Advanced)\n                if (business?.BusinessPlanInfo?.Plan == PlanType.Advanced)\n                {\n                    Log.Information(\"Timeline skipped for Basic Plan - BusinessId: {BusinessId}\", business.Id);\n                    return;\n                }\n\n\n                var description = $\"{log.ProductBrowsed} | {log.CTAJourney}\";\n\n                var timelineEntry = new LeadTimeline\n                {\n                    BusinessId = log.BusinessId,\n                    ContactId = log.ContactId ?? Guid.Empty,\n                    EventType = \"CatalogCTA\",\n                    Description = description,\n                    Data = JsonSerializer.Serialize(log),\n                    ReferenceId = null,\n                    CreatedBy = \"system\",\n                    IsSystemGenerated = true,\n                    Source = \"Catalog\",\n                    Category = log.CategoryBrowsed,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                _context.LeadTimelines.Add(timelineEntry);\n                await _context.SaveChangesAsync();\n\n                Log.Information(\"📈 Timeline entry created from CatalogClick for UserId: {UserId}\", log.UserId);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(ex, \"❌ Error creating timeline entry from CatalogClick for UserId: {UserId}\", log.UserId);\n                // Safe swallow\n            }\n        }\n\n        public async Task<ResponseResult> LogCampaignSendAsync(CampaignTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"CampaignSend\",\n                    Description = $\"Campaign '{dto.CampaignName}' was sent.\", // ✅ Timeline me readable text\n                    ReferenceId = dto.CampaignId, // ✅ Linking to campaign record\n                    IsSystemGenerated = false,    // ✅ Default (campaign sending is manual action)\n                    CreatedBy = \"system\",         // ✅ Or actual user email if needed later\n                    Source = \"CampaignModule\",    // ✅ Source field for clarity\n                    Category = \"Messaging\",       // ✅ Logical grouping\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow // ✅ Use given Timestamp or fallback to now\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n\n                return ResponseResult.SuccessInfo(\"✅ Campaign send event logged into timeline.\");\n            }\n            catch (Exception ex)\n            {\n                return ResponseResult.ErrorInfo(\"❌ Failed to log campaign send event: \" + ex.Message);\n            }\n        }\n\n\n    }\n\n\n}\n\n"
        },
        {
          "path": "xbytechat-api/Features/xbTimelines/Services/TimelineService.cs",
          "sha256": "34982b110dddb7a0afcac7582aa0c8dfc2d85810317956df389aaf17bd1a0a1f",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat.api.Features.xbTimelines.DTOs;\nusing xbytechat.api.Features.xbTimelines.Models;\n\nnamespace xbytechat.api.Features.xbTimelines.Services\n{\n    public class TimelineService : ITimelineService\n    {\n        private readonly AppDbContext _context;\n\n        public TimelineService(AppDbContext context)\n        {\n            _context = context;\n        }\n\n        // 🧩 Log Note Added into Timeline\n        public async Task<bool> LogNoteAddedAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"NoteAdded\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        // ⏰ Log Reminder Set into Timeline\n        public async Task<bool> LogReminderSetAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"ReminderSet\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n\n        // 🏷️ Log Tag Applied into Timeline\n        public async Task<bool> LogTagAppliedAsync(CRMTimelineLogDto dto)\n        {\n            try\n            {\n                var timeline = new LeadTimeline\n                {\n                    ContactId = dto.ContactId,\n                    BusinessId = dto.BusinessId,\n                    EventType = \"TagApplied\",\n                    Description = dto.Description,\n                    ReferenceId = dto.ReferenceId,\n                    CreatedBy = dto.CreatedBy,\n                    Source = \"CRM\",\n                    Category = dto.Category ?? \"CRM\",\n                    CreatedAt = dto.Timestamp ?? DateTime.UtcNow,\n                    IsSystemGenerated = false\n                };\n\n                _context.LeadTimelines.Add(timeline);\n                await _context.SaveChangesAsync();\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Middlewares/GlobalExceptionMiddleware.cs",
          "sha256": "81f92c798910995fdc5e81622269bc30f14971bf74da00e5b27af3bfe4a04a79",
          "language": "csharp",
          "content": "using System.Net;\nusing Serilog;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.AspNetCore.Hosting;\n\npublic class GlobalExceptionMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n    private readonly IWebHostEnvironment _env;\n\n    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n    {\n        _next = next;\n        _logger = logger;\n        _env = env;\n    }\n    public class ErrorResponse\n    {\n        public int StatusCode { get; set; }\n        public string Message { get; set; }\n        public string? StackTrace { get; set; }\n        public string Path { get; set; }\n    }\n\n    public async Task Invoke(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            Log.Error(ex, \"❌ An unhandled exception occurred\");\n\n            // 🚩 Prevent double-write/headers-already-sent error!\n            if (context.Response.HasStarted)\n            {\n                _logger.LogError(\"Response has already started, unable to write error response for path: {Path}\", context.Request.Path);\n                return;\n            }\n\n            context.Response.ContentType = \"application/json\";\n            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n            var response = new ErrorResponse\n            {\n                StatusCode = context.Response.StatusCode,\n                Message = ex.Message,\n                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n                Path = context.Request.Path\n            };\n            await context.Response.WriteAsJsonAsync(response);\n        }\n    }\n}\n\n\n//using System.Net;\n//using Serilog;\n//using System.Net;\n//using System.Threading.Tasks;\n//using Microsoft.AspNetCore.Http;\n//using Microsoft.Extensions.Logging;\n//using Microsoft.AspNetCore.Hosting;\n\n//public class GlobalExceptionMiddleware\n//{\n//    private readonly RequestDelegate _next;\n//    private readonly ILogger<GlobalExceptionMiddleware> _logger;\n//    private readonly IWebHostEnvironment _env;\n\n//    public GlobalExceptionMiddleware(RequestDelegate next, ILogger<GlobalExceptionMiddleware> logger, IWebHostEnvironment env)\n//    {\n//        _next = next;\n//        _logger = logger;\n//        _env = env;\n//    }\n//    public class ErrorResponse\n//    {\n//        public int StatusCode { get; set; }\n//        public string Message { get; set; }\n//        public string? StackTrace { get; set; }\n//        public string Path { get; set; }\n//    }\n\n//    public async Task Invoke(HttpContext context)\n//    {\n//        try\n//        {\n//            await _next(context);\n//        }\n//        catch (Exception ex)\n//        {\n//            Log.Error(ex, \"❌ An unhandled exception occurred\");\n\n//            context.Response.ContentType = \"application/json\";\n//            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;\n\n//            var response = new ErrorResponse\n//            {\n//                StatusCode = context.Response.StatusCode,\n//                Message = ex.Message,\n//                StackTrace = _env.IsDevelopment() ? ex.StackTrace : null,\n//                Path = context.Request.Path\n//            };\n//            await context.Response.WriteAsJsonAsync(response);\n//        }\n//    }\n\n//}\n"
        },
        {
          "path": "xbytechat-api/Middlewares/JwtErrorHandlingMiddleware.cs",
          "sha256": "d35104606ec5c8b08c106f2499d4962349d1c9c99465f0772fe1a92366cdcfac",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Http;\nusing System.Net;\nusing System.Text.Json;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace xbytechat.api.Middlewares\n{\n    public class JwtErrorHandlingMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public JwtErrorHandlingMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task Invoke(HttpContext context)\n        {\n            try\n            {\n                await _next(context); // Proceed to next middleware\n            }\n            catch (SecurityTokenExpiredException)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = \"❌ Token expired. Please login again.\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (SecurityTokenException ex)\n            {\n                context.Response.StatusCode = (int)HttpStatusCode.Unauthorized;\n                context.Response.ContentType = \"application/json\";\n\n                var response = new\n                {\n                    success = false,\n                    message = $\"❌ Token invalid: {ex.Message}\"\n                };\n\n                await context.Response.WriteAsync(JsonSerializer.Serialize(response));\n            }\n            catch (Exception)\n            {\n                // Pass unhandled exceptions to global exception middleware\n                throw;\n            }\n        }\n    }\n\n    // Extension method for clean registration\n    public static class JwtErrorHandlingMiddlewareExtensions\n    {\n        public static IApplicationBuilder UseJwtErrorHandling(this IApplicationBuilder builder)\n        {\n            return builder.UseMiddleware<JwtErrorHandlingMiddleware>();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Middlewares/RequirePermissionAttribute.cs",
          "sha256": "a6d3aaceba78295b73d29b3f7b0c72837f08e7f8cb0004a15f1f77f1066dc3c2",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Middleware.Attributes\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePermissionAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string _requiredPermission;\n\n        public RequirePermissionAttribute(string requiredPermission)\n        {\n            _requiredPermission = requiredPermission;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var user = context.HttpContext.User;\n\n            if (!user.Identity.IsAuthenticated)\n            {\n                context.Result = new UnauthorizedResult();\n                return;\n            }\n\n            var permissionsClaim = user.Claims.FirstOrDefault(c => c.Type == \"permissions\")?.Value;\n\n            if (permissionsClaim == null || !permissionsClaim.Split(',').Contains(_requiredPermission))\n            {\n                context.Result = new ForbidResult();\n            }\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Middlewares/RequirePlanAttribute.cs",
          "sha256": "3e7d8fc23618708b9d4ae5351012eb53f013b2ab0f579426c3d4c9091ed06251",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequirePlanAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _allowedPlans;\n\n        public RequirePlanAttribute(params string[] allowedPlans)\n        {\n            _allowedPlans = allowedPlans;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var plan = context.HttpContext.User.FindFirst(\"plan\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(plan) || !_allowedPlans.Any(p => p.ToLowerInvariant() == plan))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Middlewares/RequireRoleAttribute.cs",
          "sha256": "b8ca70695e176a36191713cb6b179e1f5097d9077227a77b8658f86392b98b6b",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing System;\nusing System.Linq;\n\nnamespace xbytechat.api.Middlewares\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\n    public class RequireRoleAttribute : Attribute, IAuthorizationFilter\n    {\n        private readonly string[] _roles;\n\n        public RequireRoleAttribute(params string[] roles)\n        {\n            _roles = roles;\n        }\n\n        public void OnAuthorization(AuthorizationFilterContext context)\n        {\n            var role = context.HttpContext.User.FindFirst(\"role\")?.Value?.ToLowerInvariant();\n            if (string.IsNullOrEmpty(role) || !_roles.Any(r => r.ToLowerInvariant() == role))\n            {\n                context.Result = new ForbidResult(); // 403 Forbidden\n            }\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250617162332_Initial.cs",
          "sha256": "7998b36675fd84a0f596d341050d3e4761c48c8480a617364e4471ef8056378f",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class Initial : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.CreateTable(\n                name: \"AuditLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PerformedByUserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PerformedByUserName = table.Column<string>(type: \"text\", nullable: true),\n                    RoleAtTime = table.Column<string>(type: \"text\", nullable: true),\n                    ActionType = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IPAddress = table.Column<string>(type: \"text\", nullable: true),\n                    UserAgent = table.Column<string>(type: \"text\", nullable: true),\n                    Location = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AuditLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlows\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    NodesJson = table.Column<string>(type: \"text\", nullable: false),\n                    EdgesJson = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlows\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerType = table.Column<string>(type: \"text\", nullable: false),\n                    ReplyContent = table.Column<string>(type: \"text\", nullable: false),\n                    FlowName = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    TriggeredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Businesses\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CompanyName = table.Column<string>(type: \"text\", nullable: true),\n                    BusinessName = table.Column<string>(type: \"text\", nullable: false),\n                    BusinessEmail = table.Column<string>(type: \"text\", nullable: false),\n                    RepresentativeName = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedByPartnerId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Phone = table.Column<string>(type: \"text\", nullable: true),\n                    CompanyPhone = table.Column<string>(type: \"text\", nullable: true),\n                    Website = table.Column<string>(type: \"text\", nullable: true),\n                    Address = table.Column<string>(type: \"text\", nullable: true),\n                    Industry = table.Column<string>(type: \"text\", nullable: true),\n                    LogoUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<int>(type: \"integer\", nullable: false),\n                    Tags = table.Column<string>(type: \"text\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsApproved = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ApprovedBy = table.Column<string>(type: \"text\", nullable: true),\n                    ApprovedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastLoginAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeletedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Businesses\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CatalogClickLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ProductId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    UserId = table.Column<string>(type: \"text\", nullable: true),\n                    UserName = table.Column<string>(type: \"text\", nullable: true),\n                    UserPhone = table.Column<string>(type: \"text\", nullable: true),\n                    BotId = table.Column<string>(type: \"text\", nullable: true),\n                    CategoryBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    ProductBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    CTAJourney = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: false),\n                    RefMessageId = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastInteractionType = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    PlanSnapshot = table.Column<string>(type: \"text\", nullable: true),\n                    CtaId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CatalogClickLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ChatSessionStates\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Mode = table.Column<string>(type: \"text\", nullable: false),\n                    LastUpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ChatSessionStates\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ContactReads\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    LastReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ContactReads\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTADefinitions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    TargetUrl = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTADefinitions\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTAFlowConfigs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsPublished = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTAFlowConfigs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FailedWebhookLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    SourceModule = table.Column<string>(type: \"text\", nullable: true),\n                    FailureType = table.Column<string>(type: \"text\", nullable: true),\n                    RawJson = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FailedWebhookLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FlowExecutionLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    StepId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    StepName = table.Column<string>(type: \"text\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    TrackingLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactPhone = table.Column<string>(type: \"text\", nullable: true),\n                    TriggeredByButton = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateName = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateType = table.Column<string>(type: \"text\", nullable: true),\n                    Success = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    RawResponse = table.Column<string>(type: \"text\", nullable: true),\n                    ExecutedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FlowExecutionLogs\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Notes\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Content = table.Column<string>(type: \"text\", nullable: false),\n                    Source = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: false),\n                    IsPinned = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsInternal = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    EditedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Notes\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Permissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Code = table.Column<string>(type: \"text\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Group = table.Column<string>(type: \"text\", nullable: true),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Permissions\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Products\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    Price = table.Column<decimal>(type: \"numeric\", nullable: false),\n                    Currency = table.Column<string>(type: \"text\", nullable: false),\n                    ImageUrl = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    TotalClicks = table.Column<int>(type: \"integer\", nullable: false),\n                    LastClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    MostClickedCTA = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Products\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Reminders\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    DueAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    ReminderType = table.Column<string>(type: \"text\", nullable: true),\n                    Priority = table.Column<int>(type: \"integer\", nullable: true),\n                    IsRecurring = table.Column<bool>(type: \"boolean\", nullable: false),\n                    RecurrencePattern = table.Column<string>(type: \"text\", nullable: true),\n                    SendWhatsappNotification = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LinkedCampaign = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    CompletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastCTAType = table.Column<string>(type: \"text\", nullable: true),\n                    LastClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Reminders\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Roles\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsSystemDefined = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Roles\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Tags\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    ColorHex = table.Column<string>(type: \"text\", nullable: true),\n                    Category = table.Column<string>(type: \"text\", nullable: true),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    IsSystemTag = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    LastUsedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Tags\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WebhookSettings\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AutoCleanupEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastCleanupAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WebhookSettings\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlowEdges\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    SourceNodeId = table.Column<string>(type: \"text\", nullable: false),\n                    TargetNodeId = table.Column<string>(type: \"text\", nullable: false),\n                    SourceHandle = table.Column<string>(type: \"text\", nullable: true),\n                    TargetHandle = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlowEdges\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyFlowEdges_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyFlowNodes\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    NodeType = table.Column<string>(type: \"text\", nullable: false),\n                    Label = table.Column<string>(type: \"text\", nullable: false),\n                    ConfigJson = table.Column<string>(type: \"text\", nullable: false),\n                    Position_X = table.Column<double>(type: \"double precision\", nullable: false),\n                    Position_Y = table.Column<double>(type: \"double precision\", nullable: false),\n                    Order = table.Column<int>(type: \"integer\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyFlowNodes\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyFlowNodes_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"AutoReplyRules\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    ReplyMessage = table.Column<string>(type: \"text\", nullable: false),\n                    MediaUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Priority = table.Column<int>(type: \"integer\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    FlowName = table.Column<string>(type: \"text\", nullable: true),\n                    FlowId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutoReplyRules\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_AutoReplyRules_AutoReplyFlows_FlowId\",\n                        column: x => x.FlowId,\n                        principalTable: \"AutoReplyFlows\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"BusinessPlanInfos\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Plan = table.Column<int>(type: \"integer\", nullable: false),\n                    TotalMonthlyQuota = table.Column<int>(type: \"integer\", nullable: false),\n                    RemainingMessages = table.Column<int>(type: \"integer\", nullable: false),\n                    QuotaResetDate = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    WalletBalance = table.Column<decimal>(type: \"numeric\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_BusinessPlanInfos\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_BusinessPlanInfos_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Contacts\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    PhoneNumber = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    Email = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: true),\n                    LeadSource = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: true),\n                    Tags = table.Column<string>(type: \"character varying(200)\", maxLength: 200, nullable: true),\n                    LastContactedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    NextFollowUpAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    Notes = table.Column<string>(type: \"character varying(500)\", maxLength: 500, nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    LastCTAInteraction = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastCTAType = table.Column<string>(type: \"text\", nullable: true),\n                    LastClickedProductId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsAutomationPaused = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAgentId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsFavorite = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsArchived = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Group = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Contacts\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Contacts_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"WhatsAppSettings\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ApiUrl = table.Column<string>(type: \"character varying(500)\", maxLength: 500, nullable: false),\n                    ApiToken = table.Column<string>(type: \"character varying(1000)\", maxLength: 1000, nullable: false),\n                    WhatsAppBusinessNumber = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    PhoneNumberId = table.Column<string>(type: \"text\", nullable: true),\n                    WabaId = table.Column<string>(type: \"text\", nullable: true),\n                    SenderDisplayName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_WhatsAppSettings\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_WhatsAppSettings_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Campaigns\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    SourceCampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    MessageTemplate = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    MessageBody = table.Column<string>(type: \"text\", nullable: true),\n                    FollowUpTemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignType = table.Column<string>(type: \"text\", nullable: true),\n                    CtaId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ScheduledAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeletedBy = table.Column<string>(type: \"text\", nullable: true),\n                    ImageUrl = table.Column<string>(type: \"text\", nullable: true),\n                    ImageCaption = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateParameters = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Campaigns\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_CTADefinitions_CtaId\",\n                        column: x => x.CtaId,\n                        principalTable: \"CTADefinitions\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_Campaigns_Campaigns_SourceCampaignId\",\n                        column: x => x.SourceCampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CTAFlowSteps\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TriggerButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateToSend = table.Column<string>(type: \"text\", nullable: false),\n                    StepOrder = table.Column<int>(type: \"integer\", nullable: false),\n                    RequiredTag = table.Column<string>(type: \"text\", nullable: true),\n                    RequiredSource = table.Column<string>(type: \"text\", nullable: true),\n                    PositionX = table.Column<float>(type: \"real\", nullable: true),\n                    PositionY = table.Column<float>(type: \"real\", nullable: true),\n                    TemplateType = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CTAFlowSteps\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CTAFlowSteps_CTAFlowConfigs_CTAFlowConfigId\",\n                        column: x => x.CTAFlowConfigId,\n                        principalTable: \"CTAFlowConfigs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"RolePermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RoleId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    IsRevoked = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_RolePermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_RolePermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_RolePermissions_Roles_RoleId\",\n                        column: x => x.RoleId,\n                        principalTable: \"Roles\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"Users\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Email = table.Column<string>(type: \"text\", nullable: false),\n                    PasswordHash = table.Column<string>(type: \"text\", nullable: false),\n                    RoleId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsDeleted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    DeletedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Users\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_Users_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_Users_Roles_RoleId\",\n                        column: x => x.RoleId,\n                        principalTable: \"Roles\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"ContactTags\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TagId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_ContactTags\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_ContactTags_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_ContactTags_Tags_TagId\",\n                        column: x => x.TagId,\n                        principalTable: \"Tags\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"LeadTimelines\",\n                columns: table => new\n                {\n                    Id = table.Column<int>(type: \"integer\", nullable: false)\n                        .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    EventType = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: false),\n                    Data = table.Column<string>(type: \"text\", nullable: true),\n                    ReferenceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsSystemGenerated = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: false),\n                    Source = table.Column<string>(type: \"text\", nullable: true),\n                    Category = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CTAType = table.Column<string>(type: \"text\", nullable: true),\n                    CTASourceType = table.Column<string>(type: \"text\", nullable: true),\n                    CTASourceId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_LeadTimelines\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_LeadTimelines_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_LeadTimelines_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignButtons\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Title = table.Column<string>(type: \"text\", nullable: false),\n                    Type = table.Column<string>(type: \"text\", nullable: false),\n                    Value = table.Column<string>(type: \"text\", nullable: false),\n                    Position = table.Column<int>(type: \"integer\", nullable: false),\n                    IsFromTemplate = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignButtons\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignButtons_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignFlowOverrides\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    TemplateName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    ButtonText = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    OverrideNextTemplate = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignFlowOverrides\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignFlowOverrides_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignRecipients\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    BotId = table.Column<string>(type: \"text\", nullable: true),\n                    MessagePreview = table.Column<string>(type: \"text\", nullable: true),\n                    ClickedCTA = table.Column<string>(type: \"text\", nullable: true),\n                    CategoryBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    ProductBrowsed = table.Column<string>(type: \"text\", nullable: true),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IsAutoTagged = table.Column<bool>(type: \"boolean\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignRecipients\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignRecipients_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"MessageLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientNumber = table.Column<string>(type: \"text\", nullable: false),\n                    MessageContent = table.Column<string>(type: \"text\", nullable: false),\n                    MediaUrl = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    RawResponse = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowConfigId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    IsIncoming = table.Column<bool>(type: \"boolean\", nullable: false),\n                    RenderedBody = table.Column<string>(type: \"text\", nullable: true),\n                    RefMessageId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    Source = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_MessageLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_MessageLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"FlowButtonLinks\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: false),\n                    NextStepId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonType = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonSubType = table.Column<string>(type: \"text\", nullable: false),\n                    ButtonValue = table.Column<string>(type: \"text\", nullable: false),\n                    CTAFlowStepId = table.Column<Guid>(type: \"uuid\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FlowButtonLinks\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_FlowButtonLinks_CTAFlowSteps_CTAFlowStepId\",\n                        column: x => x.CTAFlowStepId,\n                        principalTable: \"CTAFlowSteps\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"MessageStatusLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientNumber = table.Column<string>(type: \"text\", nullable: false),\n                    CustomerProfileName = table.Column<string>(type: \"text\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    Status = table.Column<string>(type: \"text\", nullable: false),\n                    MessageType = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateName = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateCategory = table.Column<string>(type: \"text\", nullable: true),\n                    Channel = table.Column<string>(type: \"text\", nullable: false),\n                    IsSessionOpen = table.Column<bool>(type: \"boolean\", nullable: false),\n                    MetaTimestamp = table.Column<long>(type: \"bigint\", nullable: true),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeliveredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    ErrorCode = table.Column<int>(type: \"integer\", nullable: true),\n                    RawPayload = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_MessageStatusLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Businesses_BusinessId\",\n                        column: x => x.BusinessId,\n                        principalTable: \"Businesses\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_MessageStatusLogs_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"UserPermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    IsGranted = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true),\n                    IsRevoked = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_UserPermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_UserPermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_UserPermissions_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"CampaignSendLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    RecipientId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    MessageBody = table.Column<string>(type: \"text\", nullable: false),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    SendStatus = table.Column<string>(type: \"text\", nullable: true),\n                    ErrorMessage = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    CreatedBy = table.Column<string>(type: \"text\", nullable: true),\n                    SentAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    DeliveredAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ReadAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    IpAddress = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceInfo = table.Column<string>(type: \"text\", nullable: true),\n                    MacAddress = table.Column<string>(type: \"text\", nullable: true),\n                    SourceChannel = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceType = table.Column<string>(type: \"text\", nullable: true),\n                    Browser = table.Column<string>(type: \"text\", nullable: true),\n                    Country = table.Column<string>(type: \"text\", nullable: true),\n                    City = table.Column<string>(type: \"text\", nullable: true),\n                    IsClicked = table.Column<bool>(type: \"boolean\", nullable: false),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    ClickType = table.Column<string>(type: \"text\", nullable: true),\n                    RetryCount = table.Column<int>(type: \"integer\", nullable: false),\n                    LastRetryAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: true),\n                    LastRetryStatus = table.Column<string>(type: \"text\", nullable: true),\n                    AllowRetry = table.Column<bool>(type: \"boolean\", nullable: false),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_CampaignSendLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_CampaignRecipients_RecipientId\",\n                        column: x => x.RecipientId,\n                        principalTable: \"CampaignRecipients\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_MessageLogs_MessageLogId\",\n                        column: x => x.MessageLogId,\n                        principalTable: \"MessageLogs\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Restrict);\n                    table.ForeignKey(\n                        name: \"FK_CampaignSendLogs_Users_UserId\",\n                        column: x => x.UserId,\n                        principalTable: \"Users\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"TrackingLogs\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    ContactId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ContactPhone = table.Column<string>(type: \"text\", nullable: true),\n                    SourceType = table.Column<string>(type: \"text\", nullable: false),\n                    SourceId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CampaignSendLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ButtonText = table.Column<string>(type: \"text\", nullable: true),\n                    CTAType = table.Column<string>(type: \"text\", nullable: true),\n                    MessageId = table.Column<string>(type: \"text\", nullable: true),\n                    TemplateId = table.Column<string>(type: \"text\", nullable: true),\n                    MessageLogId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ClickedVia = table.Column<string>(type: \"text\", nullable: true),\n                    Referrer = table.Column<string>(type: \"text\", nullable: true),\n                    ClickedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    IPAddress = table.Column<string>(type: \"text\", nullable: true),\n                    DeviceType = table.Column<string>(type: \"text\", nullable: true),\n                    Browser = table.Column<string>(type: \"text\", nullable: true),\n                    Country = table.Column<string>(type: \"text\", nullable: true),\n                    City = table.Column<string>(type: \"text\", nullable: true),\n                    FollowUpSent = table.Column<bool>(type: \"boolean\", nullable: false),\n                    LastInteractionType = table.Column<string>(type: \"text\", nullable: true),\n                    SessionId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    ThreadId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    StepId = table.Column<Guid>(type: \"uuid\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_TrackingLogs\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_CampaignSendLogs_CampaignSendLogId\",\n                        column: x => x.CampaignSendLogId,\n                        principalTable: \"CampaignSendLogs\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_Campaigns_CampaignId\",\n                        column: x => x.CampaignId,\n                        principalTable: \"Campaigns\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_Contacts_ContactId\",\n                        column: x => x.ContactId,\n                        principalTable: \"Contacts\",\n                        principalColumn: \"Id\");\n                    table.ForeignKey(\n                        name: \"FK_TrackingLogs_MessageLogs_MessageLogId\",\n                        column: x => x.MessageLogId,\n                        principalTable: \"MessageLogs\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Permissions\",\n                columns: new[] { \"Id\", \"Code\", \"CreatedAt\", \"Description\", \"Group\", \"IsActive\", \"Name\" },\n                values: new object[,]\n                {\n                    { new Guid(\"30000000-0000-0000-0000-000000000000\"), \"dashboard.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1701), \"Permission for dashboard.view\", null, true, \"dashboard.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000001\"), \"campaign.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1712), \"Permission for campaign.view\", null, true, \"campaign.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000002\"), \"campaign.create\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1716), \"Permission for campaign.create\", null, true, \"campaign.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000003\"), \"campaign.delete\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1719), \"Permission for campaign.delete\", null, true, \"campaign.delete\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000004\"), \"product.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1722), \"Permission for product.view\", null, true, \"product.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000005\"), \"product.create\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1727), \"Permission for product.create\", null, true, \"product.create\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000006\"), \"product.delete\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1730), \"Permission for product.delete\", null, true, \"product.delete\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000007\"), \"contacts.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1734), \"Permission for contacts.view\", null, true, \"contacts.view\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000008\"), \"tags.edit\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1737), \"Permission for tags.edit\", null, true, \"tags.edit\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000009\"), \"admin.business.approve\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1753), \"Permission for admin.business.approve\", null, true, \"admin.business.approve\" },\n                    { new Guid(\"30000000-0000-0000-0000-000000000010\"), \"admin.logs.view\", new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1757), \"Permission for admin.logs.view\", null, true, \"admin.logs.view\" }\n                });\n\n            migrationBuilder.InsertData(\n                table: \"Roles\",\n                columns: new[] { \"Id\", \"CreatedAt\", \"Description\", \"IsActive\", \"IsSystemDefined\", \"Name\" },\n                values: new object[,]\n                {\n                    { new Guid(\"00000000-0000-0000-0000-000000000001\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(852), \"Super Admin\", true, false, \"admin\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000002\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(856), \"Business Partner\", true, false, \"partner\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000003\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(858), \"Reseller Partner\", true, false, \"reseller\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000004\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(860), \"Business Owner\", true, false, \"business\" },\n                    { new Guid(\"00000000-0000-0000-0000-000000000005\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(862), \"Staff\", true, false, \"staff\" }\n                });\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2209), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2225), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2202), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2248), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2217), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2213), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2186), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2253), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2192), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2271), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2281), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2221), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2285), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2234), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2156), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2167), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyFlowEdges_FlowId\",\n                table: \"AutoReplyFlowEdges\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyFlowNodes_FlowId\",\n                table: \"AutoReplyFlowNodes\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_AutoReplyRules_FlowId\",\n                table: \"AutoReplyRules\",\n                column: \"FlowId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_BusinessPlanInfos_BusinessId\",\n                table: \"BusinessPlanInfos\",\n                column: \"BusinessId\",\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignButtons_CampaignId\",\n                table: \"CampaignButtons\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignFlowOverrides_CampaignId\",\n                table: \"CampaignFlowOverrides\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_BusinessId\",\n                table: \"CampaignRecipients\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_CampaignId\",\n                table: \"CampaignRecipients\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignRecipients_ContactId\",\n                table: \"CampaignRecipients\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_BusinessId\",\n                table: \"Campaigns\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_CtaId\",\n                table: \"Campaigns\",\n                column: \"CtaId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Campaigns_SourceCampaignId\",\n                table: \"Campaigns\",\n                column: \"SourceCampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_CampaignId\",\n                table: \"CampaignSendLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_ContactId\",\n                table: \"CampaignSendLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_MessageLogId\",\n                table: \"CampaignSendLogs\",\n                column: \"MessageLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_RecipientId\",\n                table: \"CampaignSendLogs\",\n                column: \"RecipientId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CampaignSendLogs_UserId\",\n                table: \"CampaignSendLogs\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactReads_ContactId_UserId\",\n                table: \"ContactReads\",\n                columns: new[] { \"ContactId\", \"UserId\" },\n                unique: true);\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Contacts_BusinessId\",\n                table: \"Contacts\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactTags_ContactId\",\n                table: \"ContactTags\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_ContactTags_TagId\",\n                table: \"ContactTags\",\n                column: \"TagId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_CTAFlowSteps_CTAFlowConfigId\",\n                table: \"CTAFlowSteps\",\n                column: \"CTAFlowConfigId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_FlowButtonLinks_CTAFlowStepId\",\n                table: \"FlowButtonLinks\",\n                column: \"CTAFlowStepId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_LeadTimelines_BusinessId\",\n                table: \"LeadTimelines\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_LeadTimelines_ContactId\",\n                table: \"LeadTimelines\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_BusinessId\",\n                table: \"MessageLogs\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_CampaignId\",\n                table: \"MessageLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageLogs_ContactId\",\n                table: \"MessageLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_BusinessId\",\n                table: \"MessageStatusLogs\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_CampaignId\",\n                table: \"MessageStatusLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_MessageStatusLogs_UserId\",\n                table: \"MessageStatusLogs\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_RolePermissions_PermissionId\",\n                table: \"RolePermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_RolePermissions_RoleId\",\n                table: \"RolePermissions\",\n                column: \"RoleId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_CampaignId\",\n                table: \"TrackingLogs\",\n                column: \"CampaignId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_CampaignSendLogId\",\n                table: \"TrackingLogs\",\n                column: \"CampaignSendLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_ContactId\",\n                table: \"TrackingLogs\",\n                column: \"ContactId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_TrackingLogs_MessageLogId\",\n                table: \"TrackingLogs\",\n                column: \"MessageLogId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_UserPermissions_PermissionId\",\n                table: \"UserPermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_UserPermissions_UserId\",\n                table: \"UserPermissions\",\n                column: \"UserId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Users_BusinessId\",\n                table: \"Users\",\n                column: \"BusinessId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_Users_RoleId\",\n                table: \"Users\",\n                column: \"RoleId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_WhatsAppSettings_BusinessId\",\n                table: \"WhatsAppSettings\",\n                column: \"BusinessId\",\n                unique: true);\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"AuditLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlowEdges\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlowNodes\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyRules\");\n\n            migrationBuilder.DropTable(\n                name: \"BusinessPlanInfos\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignButtons\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignFlowOverrides\");\n\n            migrationBuilder.DropTable(\n                name: \"CatalogClickLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"ChatSessionStates\");\n\n            migrationBuilder.DropTable(\n                name: \"ContactReads\");\n\n            migrationBuilder.DropTable(\n                name: \"ContactTags\");\n\n            migrationBuilder.DropTable(\n                name: \"FailedWebhookLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"FlowButtonLinks\");\n\n            migrationBuilder.DropTable(\n                name: \"FlowExecutionLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"LeadTimelines\");\n\n            migrationBuilder.DropTable(\n                name: \"MessageStatusLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Notes\");\n\n            migrationBuilder.DropTable(\n                name: \"Products\");\n\n            migrationBuilder.DropTable(\n                name: \"Reminders\");\n\n            migrationBuilder.DropTable(\n                name: \"RolePermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"TrackingLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"UserPermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"WebhookSettings\");\n\n            migrationBuilder.DropTable(\n                name: \"WhatsAppSettings\");\n\n            migrationBuilder.DropTable(\n                name: \"AutoReplyFlows\");\n\n            migrationBuilder.DropTable(\n                name: \"Tags\");\n\n            migrationBuilder.DropTable(\n                name: \"CTAFlowSteps\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignSendLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Permissions\");\n\n            migrationBuilder.DropTable(\n                name: \"CTAFlowConfigs\");\n\n            migrationBuilder.DropTable(\n                name: \"CampaignRecipients\");\n\n            migrationBuilder.DropTable(\n                name: \"MessageLogs\");\n\n            migrationBuilder.DropTable(\n                name: \"Users\");\n\n            migrationBuilder.DropTable(\n                name: \"Campaigns\");\n\n            migrationBuilder.DropTable(\n                name: \"Contacts\");\n\n            migrationBuilder.DropTable(\n                name: \"Roles\");\n\n            migrationBuilder.DropTable(\n                name: \"CTADefinitions\");\n\n            migrationBuilder.DropTable(\n                name: \"Businesses\");\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250617162332_Initial.Designer.cs",
          "sha256": "1fd0680f6b8ba8f6472ed3f4bd55b54427ef6a138ef5b0f371aaa2be5c060f3b",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250617162332_Initial\")]\n    partial class Initial\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1701),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1712),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1716),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1719),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1722),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1727),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1730),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1734),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1737),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1753),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1757),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(852),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(856),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(858),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(860),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(862),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2156),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2167),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2186),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2192),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2202),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2209),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2213),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2217),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2221),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2225),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2234),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2248),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2253),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2257),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2271),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2281),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"),\n                            AssignedAt = new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2285),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Models.BusinessModel.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250618065214_AddIsActiveToContact.cs",
          "sha256": "697f220f114e1035d49caecdf1172cbf96e733310f01ae29f4f443605796a99e",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddIsActiveToContact : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"));\n\n            migrationBuilder.AddColumn<bool>(\n                name: \"IsActive\",\n                table: \"Contacts\",\n                type: \"boolean\",\n                nullable: false,\n                defaultValue: false);\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8447));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8456));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8459));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8460));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8462));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8465));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8467));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8468));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8470));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8478));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8550));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9295), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9298), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9250), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9254), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9270), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9247), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9288), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9244), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8861), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9220), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9278), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8849), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8865), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8857), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9274), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9230), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7870));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7871));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7872));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7873));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7874));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"));\n\n            migrationBuilder.DropColumn(\n                name: \"IsActive\",\n                table: \"Contacts\");\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1701));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1712));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1716));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1719));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1722));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1727));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1730));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1734));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1737));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1753));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(1757));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"079e80c6-323c-4a08-94a2-51bd604f4929\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2209), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"37eabfd6-e9f8-498f-8532-d7dd7a3b80d7\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2225), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3b9748e5-b4e1-4d9d-a962-71caa9954a8b\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2202), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3c4ce25c-0e01-417e-9449-eb52371f8166\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"47f15563-8f8a-4072-8654-c8b497de1ee6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2248), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"55ec2d92-e5c7-4bf0-9fe9-3e2125e972b6\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2217), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6a15f715-fffc-4731-aedc-c905efaa8f37\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2213), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7dbca6d5-8cb2-44ef-a4b8-4c74bbe632bd\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2186), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"818c1856-92a1-4791-bf0e-3f4b9d19a694\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2253), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"925fabe1-5550-4418-9b2b-2e841f8fd598\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2192), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b4438d9f-0f6c-4d90-8876-f8e5f44277ce\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2271), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c37fb295-55f6-4864-bce6-15fef6a141b4\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2281), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"e1f27aa9-0113-4c6c-92ee-dad1416bfc20\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2221), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e97935dc-a48a-4b8f-9cf6-985a2838e269\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2285), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"eebb40df-29d7-48cb-991c-97bc78fde2fa\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2234), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f085246d-dd95-4ef7-9c6b-03079155e299\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2156), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fae4e29c-e7a3-41e7-a591-e54220d55e51\"), new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(2167), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(852));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(856));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(858));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(860));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 17, 16, 23, 31, 798, DateTimeKind.Utc).AddTicks(862));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250618065214_AddIsActiveToContact.Designer.cs",
          "sha256": "f7eba5549553ae4a4edc8bc2c8a486f67bf3ebfa66836c46bf949d8394bb2d77",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250618065214_AddIsActiveToContact\")]\n    partial class AddIsActiveToContact\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8447),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8456),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8459),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8460),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8462),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8465),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8467),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8468),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8470),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8478),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8550),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7870),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7871),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7872),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7873),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7874),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8849),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8857),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8861),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8865),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9220),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9230),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9244),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9247),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9250),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9254),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9257),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9270),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9274),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9278),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9288),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9295),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9298),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250618085616_AddPlanAndPermissionsTables.cs",
          "sha256": "5ce1d945fb389700bc5aa141a5216e712bd3f4bb37029225b012638d8adceb29",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddPlanAndPermissionsTables : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6488));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6499));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6503));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6505));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6509));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6513));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6516));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6518));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6522));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6536));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6540));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"003843fd-8c1e-48ca-b835-204f1bd45d70\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7100), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"14e55de6-27a2-4628-936b-b69ba64abda9\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7153), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2564bb32-540e-454a-b685-b7f24c341fa7\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7115), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"39cdceb8-6001-45db-aeea-c39f35f9b6ac\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7068), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"46549846-d2a6-47d1-8166-203b5b8c9033\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7167), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"613a89f2-84ba-462a-8c70-8749baf7f5cf\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7138), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"63c8311f-bd99-4511-8832-d2290f88f672\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7095), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6555c2bd-fc8d-4f45-abb2-c92de944216e\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7074), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6ab149de-62f7-4207-8a09-5e49252b1635\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7120), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6f3808e5-4643-448a-8ea6-672acab61a4b\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7162), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"91c81b3d-49f0-4ccb-b9fc-4afb84755e05\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7105), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aa2fcb6f-93b6-42b5-af4a-bcaf1da0e724\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7134), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"b06e50ad-f1ff-4f90-b44d-c440be8dc23c\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7084), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"bef317da-6e28-43f1-99c9-d1e7d7734ccf\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7090), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d361b7d0-0308-4e2c-b12b-0715b7a86887\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6976), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dcfb4546-1ec5-4842-af11-0e127094e50b\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7142), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"ea9e2321-7062-4390-97dc-a6f0cfd92988\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7000), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4969));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4973));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4974));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4976));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4978));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"003843fd-8c1e-48ca-b835-204f1bd45d70\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"14e55de6-27a2-4628-936b-b69ba64abda9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2564bb32-540e-454a-b685-b7f24c341fa7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"39cdceb8-6001-45db-aeea-c39f35f9b6ac\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"46549846-d2a6-47d1-8166-203b5b8c9033\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"613a89f2-84ba-462a-8c70-8749baf7f5cf\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"63c8311f-bd99-4511-8832-d2290f88f672\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6555c2bd-fc8d-4f45-abb2-c92de944216e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6ab149de-62f7-4207-8a09-5e49252b1635\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6f3808e5-4643-448a-8ea6-672acab61a4b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"91c81b3d-49f0-4ccb-b9fc-4afb84755e05\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa2fcb6f-93b6-42b5-af4a-bcaf1da0e724\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b06e50ad-f1ff-4f90-b44d-c440be8dc23c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"bef317da-6e28-43f1-99c9-d1e7d7734ccf\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d361b7d0-0308-4e2c-b12b-0715b7a86887\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcfb4546-1ec5-4842-af11-0e127094e50b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ea9e2321-7062-4390-97dc-a6f0cfd92988\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8447));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8456));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8459));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8460));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8462));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8465));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8467));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8468));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8470));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8478));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8550));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"02764f80-8341-4f65-9ba0-4a9a82c3d02c\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9295), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"1ad951a6-4970-42e7-94b1-5b96729f870d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9298), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"1ca2458f-1612-464a-9bcc-1c133f15053b\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9250), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"24e2cfbb-0475-407a-aed2-436393a916e4\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9254), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2aa6096a-a2e5-430a-a871-b9d93358204d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9257), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"30bbab7e-d3ca-4113-928a-ce20506fb542\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9270), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"33993d87-cdc5-44b7-bbdd-8285317b7a68\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9247), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6485bf8f-a5cc-48a0-8a30-0b5f0742387a\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9288), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"7dbef1b0-e4f0-4e02-87e1-43e9a1612515\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9244), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"82df3d2a-da23-44d4-9b14-5d61bcf4de91\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8861), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"88d10a1c-6dc1-4bf1-aab7-6be6f4962c4d\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9220), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"954fd0fe-c5fe-4f83-81b3-8a3ae1ec1015\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9278), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"aa51357f-8f50-4c23-a15e-f2a446a70db8\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8849), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d9d64c9b-37f4-4d59-b835-288a424c40cb\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8865), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dbdb282e-add5-46fd-ad64-3545858ecae9\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(8857), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e41905a0-52b8-48a4-87dc-36e8b21f9937\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9274), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"fa3591be-aeee-47ee-aeb7-983b168ab174\"), new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(9230), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7870));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7871));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7872));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7873));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 6, 52, 13, 690, DateTimeKind.Utc).AddTicks(7874));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250618085616_AddPlanAndPermissionsTables.Designer.cs",
          "sha256": "c5eab867f34f3c1e2cebf2ee4e3fe18f16eb9df377def70992e3ee36e3e1df83",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250618085616_AddPlanAndPermissionsTables\")]\n    partial class AddPlanAndPermissionsTables\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6488),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6499),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6503),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6505),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6509),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6513),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6516),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6518),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6522),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6536),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6540),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4969),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4973),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4974),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4976),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4978),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"d361b7d0-0308-4e2c-b12b-0715b7a86887\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6976),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ea9e2321-7062-4390-97dc-a6f0cfd92988\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7000),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"39cdceb8-6001-45db-aeea-c39f35f9b6ac\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7068),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6555c2bd-fc8d-4f45-abb2-c92de944216e\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7074),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b06e50ad-f1ff-4f90-b44d-c440be8dc23c\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7084),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"bef317da-6e28-43f1-99c9-d1e7d7734ccf\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7090),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"63c8311f-bd99-4511-8832-d2290f88f672\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7095),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"003843fd-8c1e-48ca-b835-204f1bd45d70\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7100),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"91c81b3d-49f0-4ccb-b9fc-4afb84755e05\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7105),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2564bb32-540e-454a-b685-b7f24c341fa7\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7115),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6ab149de-62f7-4207-8a09-5e49252b1635\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7120),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aa2fcb6f-93b6-42b5-af4a-bcaf1da0e724\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7134),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"613a89f2-84ba-462a-8c70-8749baf7f5cf\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7138),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dcfb4546-1ec5-4842-af11-0e127094e50b\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7142),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"14e55de6-27a2-4628-936b-b69ba64abda9\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7153),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6f3808e5-4643-448a-8ea6-672acab61a4b\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7162),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"46549846-d2a6-47d1-8166-203b5b8c9033\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7167),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250618113519_AddFeatureAccessControlTable.cs",
          "sha256": "1c5bd08f0b97cd0c14fafef4b88d8fd04594c521ca86df7c9970949c0bc9917e",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddFeatureAccessControlTable : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"003843fd-8c1e-48ca-b835-204f1bd45d70\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"14e55de6-27a2-4628-936b-b69ba64abda9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2564bb32-540e-454a-b685-b7f24c341fa7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"39cdceb8-6001-45db-aeea-c39f35f9b6ac\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"46549846-d2a6-47d1-8166-203b5b8c9033\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"613a89f2-84ba-462a-8c70-8749baf7f5cf\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"63c8311f-bd99-4511-8832-d2290f88f672\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6555c2bd-fc8d-4f45-abb2-c92de944216e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6ab149de-62f7-4207-8a09-5e49252b1635\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6f3808e5-4643-448a-8ea6-672acab61a4b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"91c81b3d-49f0-4ccb-b9fc-4afb84755e05\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa2fcb6f-93b6-42b5-af4a-bcaf1da0e724\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b06e50ad-f1ff-4f90-b44d-c440be8dc23c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"bef317da-6e28-43f1-99c9-d1e7d7734ccf\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d361b7d0-0308-4e2c-b12b-0715b7a86887\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcfb4546-1ec5-4842-af11-0e127094e50b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ea9e2321-7062-4390-97dc-a6f0cfd92988\"));\n\n            migrationBuilder.CreateTable(\n                name: \"Plans\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Code = table.Column<string>(type: \"text\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    Description = table.Column<string>(type: \"text\", nullable: true),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_Plans\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"PlanPermissions\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PlanId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PermissionId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    AssignedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    AssignedBy = table.Column<string>(type: \"text\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_PlanPermissions\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_PlanPermissions_Permissions_PermissionId\",\n                        column: x => x.PermissionId,\n                        principalTable: \"Permissions\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                    table.ForeignKey(\n                        name: \"FK_PlanPermissions_Plans_PlanId\",\n                        column: x => x.PlanId,\n                        principalTable: \"Plans\",\n                        principalColumn: \"Id\",\n                        onDelete: ReferentialAction.Cascade);\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7359));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7374));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7380));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7384));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7389));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7396));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7400));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7405));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7410));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7432));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7437));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"03816e54-47a3-467d-8c88-e43ea4536e05\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8144), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"341fb820-6b52-4174-9662-3b214e82e6e3\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8207), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3c392691-3438-4a20-b045-7df862eafc67\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8229), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3df6dae8-231e-4d76-82e2-2884cc481a43\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8214), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4d721807-27c2-4739-accb-9f31089a94c2\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8263), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"50f07690-d640-4399-b443-e340aee9d3a0\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8127), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"56e6eda1-6ed4-4b00-9a1d-53ee6d41e251\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8221), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7df4604b-fe0e-4f58-8622-9ca6cca4e079\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8314), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"86dc236f-b269-46af-bf2d-823f9ab40ce2\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8184), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"88838163-0483-46a7-a5dd-db80abc6c5c6\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8255), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"abeb1282-e95e-4b1d-b1dd-62104642ebc4\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8336), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"be5dd8e3-2c78-46b6-af9c-ee91c9390de5\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8175), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cb57d18f-d96a-4634-a65e-edbe6c34ae73\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8162), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cbd3bd8a-2761-449b-80fd-16ec9c4b56f3\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8269), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"e0cd0f85-44d7-49d8-b1a1-ad7d400ed458\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8236), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e8a60265-2301-4d75-906b-488c01fc1b00\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8329), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"eef2747c-b46d-452a-82a1-55e1005b9baa\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8154), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6272));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6275));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6278));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6280));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6282));\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_PlanPermissions_PermissionId\",\n                table: \"PlanPermissions\",\n                column: \"PermissionId\");\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_PlanPermissions_PlanId\",\n                table: \"PlanPermissions\",\n                column: \"PlanId\");\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"PlanPermissions\");\n\n            migrationBuilder.DropTable(\n                name: \"Plans\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"03816e54-47a3-467d-8c88-e43ea4536e05\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"341fb820-6b52-4174-9662-3b214e82e6e3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3c392691-3438-4a20-b045-7df862eafc67\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3df6dae8-231e-4d76-82e2-2884cc481a43\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4d721807-27c2-4739-accb-9f31089a94c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"50f07690-d640-4399-b443-e340aee9d3a0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"56e6eda1-6ed4-4b00-9a1d-53ee6d41e251\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7df4604b-fe0e-4f58-8622-9ca6cca4e079\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"86dc236f-b269-46af-bf2d-823f9ab40ce2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"88838163-0483-46a7-a5dd-db80abc6c5c6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"abeb1282-e95e-4b1d-b1dd-62104642ebc4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"be5dd8e3-2c78-46b6-af9c-ee91c9390de5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cb57d18f-d96a-4634-a65e-edbe6c34ae73\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cbd3bd8a-2761-449b-80fd-16ec9c4b56f3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e0cd0f85-44d7-49d8-b1a1-ad7d400ed458\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e8a60265-2301-4d75-906b-488c01fc1b00\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eef2747c-b46d-452a-82a1-55e1005b9baa\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6488));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6499));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6503));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6505));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6509));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6513));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6516));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6518));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6522));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6536));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6540));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"003843fd-8c1e-48ca-b835-204f1bd45d70\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7100), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"14e55de6-27a2-4628-936b-b69ba64abda9\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7153), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2564bb32-540e-454a-b685-b7f24c341fa7\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7115), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"39cdceb8-6001-45db-aeea-c39f35f9b6ac\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7068), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"46549846-d2a6-47d1-8166-203b5b8c9033\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7167), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"613a89f2-84ba-462a-8c70-8749baf7f5cf\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7138), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"63c8311f-bd99-4511-8832-d2290f88f672\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7095), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6555c2bd-fc8d-4f45-abb2-c92de944216e\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7074), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6ab149de-62f7-4207-8a09-5e49252b1635\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7120), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6f3808e5-4643-448a-8ea6-672acab61a4b\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7162), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"91c81b3d-49f0-4ccb-b9fc-4afb84755e05\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7105), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aa2fcb6f-93b6-42b5-af4a-bcaf1da0e724\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7134), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"b06e50ad-f1ff-4f90-b44d-c440be8dc23c\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7084), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"bef317da-6e28-43f1-99c9-d1e7d7734ccf\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7090), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d361b7d0-0308-4e2c-b12b-0715b7a86887\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(6976), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dcfb4546-1ec5-4842-af11-0e127094e50b\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7142), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"ea9e2321-7062-4390-97dc-a6f0cfd92988\"), new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(7000), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4969));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4973));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4974));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4976));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 8, 56, 15, 175, DateTimeKind.Utc).AddTicks(4978));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250618113519_AddFeatureAccessControlTable.Designer.cs",
          "sha256": "4243c5eb4591029867b024d9123ab6f484b6db66f1b69548bbdf9dec6b9975ee",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250618113519_AddFeatureAccessControlTable\")]\n    partial class AddFeatureAccessControlTable\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7359),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7374),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7380),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7384),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7389),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7396),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7400),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7405),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7410),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7432),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7437),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6272),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6275),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6278),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6280),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6282),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"50f07690-d640-4399-b443-e340aee9d3a0\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8127),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"03816e54-47a3-467d-8c88-e43ea4536e05\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8144),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eef2747c-b46d-452a-82a1-55e1005b9baa\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8154),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cb57d18f-d96a-4634-a65e-edbe6c34ae73\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8162),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"be5dd8e3-2c78-46b6-af9c-ee91c9390de5\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8175),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"86dc236f-b269-46af-bf2d-823f9ab40ce2\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8184),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"341fb820-6b52-4174-9662-3b214e82e6e3\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8207),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3df6dae8-231e-4d76-82e2-2884cc481a43\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8214),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"56e6eda1-6ed4-4b00-9a1d-53ee6d41e251\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8221),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3c392691-3438-4a20-b045-7df862eafc67\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8229),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e0cd0f85-44d7-49d8-b1a1-ad7d400ed458\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8236),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"88838163-0483-46a7-a5dd-db80abc6c5c6\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8255),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4d721807-27c2-4739-accb-9f31089a94c2\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8263),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cbd3bd8a-2761-449b-80fd-16ec9c4b56f3\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8269),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7df4604b-fe0e-4f58-8622-9ca6cca4e079\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8314),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e8a60265-2301-4d75-906b-488c01fc1b00\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8329),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"abeb1282-e95e-4b1d-b1dd-62104642ebc4\"),\n                            AssignedAt = new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8336),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250619125213_AddPlanFeatureMatrix.cs",
          "sha256": "606f6af95559c9750988b257d930510db81746c00fff89c0c78f93740caf3fd3",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddPlanFeatureMatrix : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"03816e54-47a3-467d-8c88-e43ea4536e05\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"341fb820-6b52-4174-9662-3b214e82e6e3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3c392691-3438-4a20-b045-7df862eafc67\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3df6dae8-231e-4d76-82e2-2884cc481a43\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4d721807-27c2-4739-accb-9f31089a94c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"50f07690-d640-4399-b443-e340aee9d3a0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"56e6eda1-6ed4-4b00-9a1d-53ee6d41e251\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7df4604b-fe0e-4f58-8622-9ca6cca4e079\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"86dc236f-b269-46af-bf2d-823f9ab40ce2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"88838163-0483-46a7-a5dd-db80abc6c5c6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"abeb1282-e95e-4b1d-b1dd-62104642ebc4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"be5dd8e3-2c78-46b6-af9c-ee91c9390de5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cb57d18f-d96a-4634-a65e-edbe6c34ae73\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cbd3bd8a-2761-449b-80fd-16ec9c4b56f3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e0cd0f85-44d7-49d8-b1a1-ad7d400ed458\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e8a60265-2301-4d75-906b-488c01fc1b00\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eef2747c-b46d-452a-82a1-55e1005b9baa\"));\n\n            migrationBuilder.CreateTable(\n                name: \"FeatureAccess\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FeatureName = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    IsEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FeatureAccess\", x => x.Id);\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5976));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5986));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5989));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5993));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5996));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6001));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6003));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6007));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6011));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6024));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6028));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"04458866-2ef9-4687-bfec-4198044108a5\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6468), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"118fff52-3cdc-4147-a9ee-43a793d8fb75\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6616), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"30f9753b-4f86-46e3-9ecd-5296dafc2e22\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6529), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"30f9766a-dd91-4cbb-b18f-687fd63ec978\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6487), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"31893be4-65b2-4891-b4f0-5f510b257752\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6629), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"32a1772e-104a-4df9-91cc-21147553a2f2\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6491), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"33aa695f-30d9-4b7f-972f-c53e47d44472\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6449), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4ba699b2-f51b-481b-bc33-e1440f46f7f4\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6534), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"80e010d0-9eb8-44dc-9b2d-d92112209731\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6514), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8328b691-55fe-4a99-81fd-6e8a97c34c39\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6538), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"857ce948-a586-4443-a932-37839f780841\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6480), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8f64dac3-89ca-4d79-b83d-f983c96ed0e3\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6503), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a64cc25f-9b4f-4484-9fec-4e16d43c82b3\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6637), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"dcd4151c-a419-4554-b864-4051acc33ae8\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6496), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e0b7aab9-8202-43e7-ba87-b4ddc393df56\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6458), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f8d37bcf-3b68-4e47-ad19-53716fead29a\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6463), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f9aeccd1-91d1-4509-9f8d-303684423c1b\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6509), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4405));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4408));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4410));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4411));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4413));\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_FeatureAccess_BusinessId_FeatureName\",\n                table: \"FeatureAccess\",\n                columns: new[] { \"BusinessId\", \"FeatureName\" },\n                unique: true);\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"FeatureAccess\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"04458866-2ef9-4687-bfec-4198044108a5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"118fff52-3cdc-4147-a9ee-43a793d8fb75\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30f9753b-4f86-46e3-9ecd-5296dafc2e22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30f9766a-dd91-4cbb-b18f-687fd63ec978\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31893be4-65b2-4891-b4f0-5f510b257752\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"32a1772e-104a-4df9-91cc-21147553a2f2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"33aa695f-30d9-4b7f-972f-c53e47d44472\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4ba699b2-f51b-481b-bc33-e1440f46f7f4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"80e010d0-9eb8-44dc-9b2d-d92112209731\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8328b691-55fe-4a99-81fd-6e8a97c34c39\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"857ce948-a586-4443-a932-37839f780841\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8f64dac3-89ca-4d79-b83d-f983c96ed0e3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a64cc25f-9b4f-4484-9fec-4e16d43c82b3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcd4151c-a419-4554-b864-4051acc33ae8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e0b7aab9-8202-43e7-ba87-b4ddc393df56\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f8d37bcf-3b68-4e47-ad19-53716fead29a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f9aeccd1-91d1-4509-9f8d-303684423c1b\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7359));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7374));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7380));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7384));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7389));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7396));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7400));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7405));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7410));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7432));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(7437));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"03816e54-47a3-467d-8c88-e43ea4536e05\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8144), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"341fb820-6b52-4174-9662-3b214e82e6e3\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8207), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3c392691-3438-4a20-b045-7df862eafc67\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8229), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3df6dae8-231e-4d76-82e2-2884cc481a43\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8214), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4d721807-27c2-4739-accb-9f31089a94c2\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8263), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"50f07690-d640-4399-b443-e340aee9d3a0\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8127), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"56e6eda1-6ed4-4b00-9a1d-53ee6d41e251\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8221), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7df4604b-fe0e-4f58-8622-9ca6cca4e079\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8314), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"86dc236f-b269-46af-bf2d-823f9ab40ce2\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8184), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"88838163-0483-46a7-a5dd-db80abc6c5c6\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8255), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"abeb1282-e95e-4b1d-b1dd-62104642ebc4\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8336), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"be5dd8e3-2c78-46b6-af9c-ee91c9390de5\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8175), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cb57d18f-d96a-4634-a65e-edbe6c34ae73\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8162), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cbd3bd8a-2761-449b-80fd-16ec9c4b56f3\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8269), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"e0cd0f85-44d7-49d8-b1a1-ad7d400ed458\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8236), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e8a60265-2301-4d75-906b-488c01fc1b00\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8329), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"eef2747c-b46d-452a-82a1-55e1005b9baa\"), new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(8154), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6272));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6275));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6278));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6280));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 18, 11, 35, 17, 880, DateTimeKind.Utc).AddTicks(6282));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250619125213_AddPlanFeatureMatrix.Designer.cs",
          "sha256": "e32ff38af51a88f2477a3340772800a15e06d4395bd76c3c98182695dc67d7f0",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250619125213_AddPlanFeatureMatrix\")]\n    partial class AddPlanFeatureMatrix\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5976),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5986),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5989),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5993),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5996),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6001),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6003),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6007),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6011),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6024),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6028),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4405),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4408),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4410),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4411),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4413),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"33aa695f-30d9-4b7f-972f-c53e47d44472\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6449),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e0b7aab9-8202-43e7-ba87-b4ddc393df56\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6458),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"f8d37bcf-3b68-4e47-ad19-53716fead29a\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6463),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"04458866-2ef9-4687-bfec-4198044108a5\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6468),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"857ce948-a586-4443-a932-37839f780841\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6480),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30f9766a-dd91-4cbb-b18f-687fd63ec978\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6487),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"32a1772e-104a-4df9-91cc-21147553a2f2\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6491),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dcd4151c-a419-4554-b864-4051acc33ae8\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6496),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8f64dac3-89ca-4d79-b83d-f983c96ed0e3\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6503),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"f9aeccd1-91d1-4509-9f8d-303684423c1b\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6509),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"80e010d0-9eb8-44dc-9b2d-d92112209731\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6514),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30f9753b-4f86-46e3-9ecd-5296dafc2e22\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6529),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4ba699b2-f51b-481b-bc33-e1440f46f7f4\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6534),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8328b691-55fe-4a99-81fd-6e8a97c34c39\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6538),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"118fff52-3cdc-4147-a9ee-43a793d8fb75\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6616),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"31893be4-65b2-4891-b4f0-5f510b257752\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6629),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a64cc25f-9b4f-4484-9fec-4e16d43c82b3\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6637),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250619125804_AddUserFeatureAccessTable.cs",
          "sha256": "02e06ec9d126a93ddb57534ff950596bf52f606b01c2deaa9f30d1d3be9385e6",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddUserFeatureAccessTable : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"04458866-2ef9-4687-bfec-4198044108a5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"118fff52-3cdc-4147-a9ee-43a793d8fb75\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30f9753b-4f86-46e3-9ecd-5296dafc2e22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30f9766a-dd91-4cbb-b18f-687fd63ec978\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31893be4-65b2-4891-b4f0-5f510b257752\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"32a1772e-104a-4df9-91cc-21147553a2f2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"33aa695f-30d9-4b7f-972f-c53e47d44472\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4ba699b2-f51b-481b-bc33-e1440f46f7f4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"80e010d0-9eb8-44dc-9b2d-d92112209731\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8328b691-55fe-4a99-81fd-6e8a97c34c39\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"857ce948-a586-4443-a932-37839f780841\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8f64dac3-89ca-4d79-b83d-f983c96ed0e3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a64cc25f-9b4f-4484-9fec-4e16d43c82b3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcd4151c-a419-4554-b864-4051acc33ae8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e0b7aab9-8202-43e7-ba87-b4ddc393df56\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f8d37bcf-3b68-4e47-ad19-53716fead29a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f9aeccd1-91d1-4509-9f8d-303684423c1b\"));\n\n            migrationBuilder.CreateTable(\n                name: \"PlanFeatureMatrix\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    PlanName = table.Column<string>(type: \"character varying(20)\", maxLength: 20, nullable: false),\n                    FeatureName = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    IsEnabled = table.Column<bool>(type: \"boolean\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_PlanFeatureMatrix\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"UserFeatureAccess\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    UserId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FeatureName = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    IsEnabled = table.Column<bool>(type: \"boolean\", nullable: false),\n                    Notes = table.Column<string>(type: \"text\", nullable: true),\n                    ModifiedByUserId = table.Column<Guid>(type: \"uuid\", nullable: true),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_UserFeatureAccess\", x => x.Id);\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1484));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1496));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1500));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1504));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1507));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1513));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1516));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1520));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1524));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1544));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1547));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"096be258-50ae-4078-b0b8-c26a084fd724\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1993), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"0fd99a93-afb1-4c95-bd45-6cac60d66c95\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2113), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"252166cd-7af1-4e13-9307-d49d67174ca0\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2084), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"3ac31a18-ad13-4c36-b48b-809df1accbea\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1987), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3ae5fc4a-1802-4e1d-88e1-1a18ec723c68\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2003), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3b73270a-83ea-4035-bc71-afcd2712b655\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2069), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4a1d7dea-8658-4b83-ab55-3fa7d44acfca\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2123), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"58bc10ee-9c29-43f1-91ae-b47c230c074c\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2129), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"5974390a-3569-4e81-844a-eef6252ef7e4\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1966), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"81b8d4c8-6ce9-45b4-8edf-420e9e7cc508\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2065), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"ab889393-3213-491e-9a14-22ed8d5e2ec9\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2093), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"cf24b7f5-1cd6-4a11-ae7d-6cf51ef639b4\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1934), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d93c4342-cb14-4ca7-a8f5-8b48689cb9d5\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1961), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e6bbb9ea-c7c5-46ec-a174-89321cb049f4\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2058), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e7be4659-3d78-46ee-ada0-d8daf6dfc315\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1998), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"eaea5537-8ed7-4503-aa6e-e7d5e8cff0bb\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1955), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f793d715-08c4-4660-bb72-79c135d915fa\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2099), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(346));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(350));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(352));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(354));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(356));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"PlanFeatureMatrix\");\n\n            migrationBuilder.DropTable(\n                name: \"UserFeatureAccess\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"096be258-50ae-4078-b0b8-c26a084fd724\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0fd99a93-afb1-4c95-bd45-6cac60d66c95\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"252166cd-7af1-4e13-9307-d49d67174ca0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3ac31a18-ad13-4c36-b48b-809df1accbea\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3ae5fc4a-1802-4e1d-88e1-1a18ec723c68\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3b73270a-83ea-4035-bc71-afcd2712b655\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4a1d7dea-8658-4b83-ab55-3fa7d44acfca\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"58bc10ee-9c29-43f1-91ae-b47c230c074c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5974390a-3569-4e81-844a-eef6252ef7e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"81b8d4c8-6ce9-45b4-8edf-420e9e7cc508\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ab889393-3213-491e-9a14-22ed8d5e2ec9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf24b7f5-1cd6-4a11-ae7d-6cf51ef639b4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d93c4342-cb14-4ca7-a8f5-8b48689cb9d5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e6bbb9ea-c7c5-46ec-a174-89321cb049f4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e7be4659-3d78-46ee-ada0-d8daf6dfc315\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eaea5537-8ed7-4503-aa6e-e7d5e8cff0bb\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f793d715-08c4-4660-bb72-79c135d915fa\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5976));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5986));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5989));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5993));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(5996));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6001));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6003));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6007));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6011));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6024));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6028));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"04458866-2ef9-4687-bfec-4198044108a5\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6468), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"118fff52-3cdc-4147-a9ee-43a793d8fb75\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6616), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"30f9753b-4f86-46e3-9ecd-5296dafc2e22\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6529), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"30f9766a-dd91-4cbb-b18f-687fd63ec978\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6487), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"31893be4-65b2-4891-b4f0-5f510b257752\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6629), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"32a1772e-104a-4df9-91cc-21147553a2f2\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6491), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"33aa695f-30d9-4b7f-972f-c53e47d44472\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6449), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4ba699b2-f51b-481b-bc33-e1440f46f7f4\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6534), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"80e010d0-9eb8-44dc-9b2d-d92112209731\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6514), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8328b691-55fe-4a99-81fd-6e8a97c34c39\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6538), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"857ce948-a586-4443-a932-37839f780841\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6480), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8f64dac3-89ca-4d79-b83d-f983c96ed0e3\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6503), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a64cc25f-9b4f-4484-9fec-4e16d43c82b3\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6637), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"dcd4151c-a419-4554-b864-4051acc33ae8\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6496), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e0b7aab9-8202-43e7-ba87-b4ddc393df56\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6458), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f8d37bcf-3b68-4e47-ad19-53716fead29a\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6463), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f9aeccd1-91d1-4509-9f8d-303684423c1b\"), new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(6509), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4405));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4408));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4410));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4411));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 52, 12, 620, DateTimeKind.Utc).AddTicks(4413));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250619125804_AddUserFeatureAccessTable.Designer.cs",
          "sha256": "1d005047673d716dd27c18c687f8ab3ebdb72c7a26a3529ddd81185f88de0866",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250619125804_AddUserFeatureAccessTable\")]\n    partial class AddUserFeatureAccessTable\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1484),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1496),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1500),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1504),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1507),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1513),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1516),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1520),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1524),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1544),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1547),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(346),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(350),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(352),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(354),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(356),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"cf24b7f5-1cd6-4a11-ae7d-6cf51ef639b4\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1934),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eaea5537-8ed7-4503-aa6e-e7d5e8cff0bb\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1955),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d93c4342-cb14-4ca7-a8f5-8b48689cb9d5\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1961),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"5974390a-3569-4e81-844a-eef6252ef7e4\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1966),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3ac31a18-ad13-4c36-b48b-809df1accbea\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1987),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"096be258-50ae-4078-b0b8-c26a084fd724\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1993),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e7be4659-3d78-46ee-ada0-d8daf6dfc315\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1998),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3ae5fc4a-1802-4e1d-88e1-1a18ec723c68\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2003),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e6bbb9ea-c7c5-46ec-a174-89321cb049f4\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2058),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"81b8d4c8-6ce9-45b4-8edf-420e9e7cc508\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2065),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3b73270a-83ea-4035-bc71-afcd2712b655\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2069),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"252166cd-7af1-4e13-9307-d49d67174ca0\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2084),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ab889393-3213-491e-9a14-22ed8d5e2ec9\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2093),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"f793d715-08c4-4660-bb72-79c135d915fa\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2099),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0fd99a93-afb1-4c95-bd45-6cac60d66c95\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2113),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4a1d7dea-8658-4b83-ab55-3fa7d44acfca\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2123),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"58bc10ee-9c29-43f1-91ae-b47c230c074c\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2129),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeature\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250619130505_UPdateTablePlanFeatureMatrix.cs",
          "sha256": "26fb8a69ab1324e31227be87f39d8da48d2968e30881e1e63d1492a99e9a00cc",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class UPdateTablePlanFeatureMatrix : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"096be258-50ae-4078-b0b8-c26a084fd724\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0fd99a93-afb1-4c95-bd45-6cac60d66c95\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"252166cd-7af1-4e13-9307-d49d67174ca0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3ac31a18-ad13-4c36-b48b-809df1accbea\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3ae5fc4a-1802-4e1d-88e1-1a18ec723c68\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3b73270a-83ea-4035-bc71-afcd2712b655\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4a1d7dea-8658-4b83-ab55-3fa7d44acfca\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"58bc10ee-9c29-43f1-91ae-b47c230c074c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5974390a-3569-4e81-844a-eef6252ef7e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"81b8d4c8-6ce9-45b4-8edf-420e9e7cc508\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ab889393-3213-491e-9a14-22ed8d5e2ec9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf24b7f5-1cd6-4a11-ae7d-6cf51ef639b4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d93c4342-cb14-4ca7-a8f5-8b48689cb9d5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e6bbb9ea-c7c5-46ec-a174-89321cb049f4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e7be4659-3d78-46ee-ada0-d8daf6dfc315\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eaea5537-8ed7-4503-aa6e-e7d5e8cff0bb\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f793d715-08c4-4660-bb72-79c135d915fa\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4701));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4709));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4712));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4715));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4717));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4721));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4724));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4726));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4729));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4744));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4747));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"07503bb5-f5a3-48e0-916c-6310c7e132d6\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5306), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"0c898220-4231-4723-9bbf-304fe6447cd0\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5272), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"0e6bd3b2-5056-4cc3-97fd-a11e4e1e4a3e\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5212), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1198345c-c96c-44d4-9602-3d5382ea69c2\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5226), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2af188d1-7bd2-4eda-bc94-aea97e80d16e\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5260), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3a30a452-7f8c-4d6a-92f0-971393a2b3c5\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5255), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4283079b-7d1f-4184-bd9d-5341d110b461\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5279), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"7504e744-8b7a-4422-8cc2-287e3d771041\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5310), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"7f7bc705-2d45-43cc-815c-a8889a123721\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5295), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"9e2c8d5b-dc26-449d-b0bd-be663e09e61c\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5235), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a3f6f36e-4aa6-4a3f-ba9b-3205bc918f14\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5253), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b25ff30e-10d9-4b9d-bf52-30c92e49d3a7\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5263), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c8729359-8505-47ca-b4fc-5e80ce84e4c7\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5203), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cd29166e-6d07-4f88-bcac-b52eba3e40c8\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5231), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cdcd8d38-dbbc-49ee-a39d-026fa25f1eea\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5195), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e837feae-a731-4ab4-98d0-5441b93ed285\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5217), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"ff6899d1-69ff-4245-949c-2446bcf28ff4\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5276), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3868));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3871));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3872));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3874));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3875));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"07503bb5-f5a3-48e0-916c-6310c7e132d6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0c898220-4231-4723-9bbf-304fe6447cd0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0e6bd3b2-5056-4cc3-97fd-a11e4e1e4a3e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1198345c-c96c-44d4-9602-3d5382ea69c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2af188d1-7bd2-4eda-bc94-aea97e80d16e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3a30a452-7f8c-4d6a-92f0-971393a2b3c5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4283079b-7d1f-4184-bd9d-5341d110b461\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7504e744-8b7a-4422-8cc2-287e3d771041\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7f7bc705-2d45-43cc-815c-a8889a123721\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"9e2c8d5b-dc26-449d-b0bd-be663e09e61c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a3f6f36e-4aa6-4a3f-ba9b-3205bc918f14\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b25ff30e-10d9-4b9d-bf52-30c92e49d3a7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c8729359-8505-47ca-b4fc-5e80ce84e4c7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cd29166e-6d07-4f88-bcac-b52eba3e40c8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cdcd8d38-dbbc-49ee-a39d-026fa25f1eea\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e837feae-a731-4ab4-98d0-5441b93ed285\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ff6899d1-69ff-4245-949c-2446bcf28ff4\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1484));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1496));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1500));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1504));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1507));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1513));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1516));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1520));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1524));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1544));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1547));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"096be258-50ae-4078-b0b8-c26a084fd724\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1993), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"0fd99a93-afb1-4c95-bd45-6cac60d66c95\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2113), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"252166cd-7af1-4e13-9307-d49d67174ca0\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2084), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"3ac31a18-ad13-4c36-b48b-809df1accbea\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1987), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3ae5fc4a-1802-4e1d-88e1-1a18ec723c68\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2003), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3b73270a-83ea-4035-bc71-afcd2712b655\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2069), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4a1d7dea-8658-4b83-ab55-3fa7d44acfca\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2123), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"58bc10ee-9c29-43f1-91ae-b47c230c074c\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2129), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"5974390a-3569-4e81-844a-eef6252ef7e4\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1966), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"81b8d4c8-6ce9-45b4-8edf-420e9e7cc508\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2065), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"ab889393-3213-491e-9a14-22ed8d5e2ec9\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2093), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"cf24b7f5-1cd6-4a11-ae7d-6cf51ef639b4\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1934), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d93c4342-cb14-4ca7-a8f5-8b48689cb9d5\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1961), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e6bbb9ea-c7c5-46ec-a174-89321cb049f4\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2058), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e7be4659-3d78-46ee-ada0-d8daf6dfc315\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1998), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"eaea5537-8ed7-4503-aa6e-e7d5e8cff0bb\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(1955), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f793d715-08c4-4660-bb72-79c135d915fa\"), new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(2099), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(346));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(350));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(352));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(354));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 12, 58, 3, 278, DateTimeKind.Utc).AddTicks(356));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250619130505_UPdateTablePlanFeatureMatrix.Designer.cs",
          "sha256": "0938cd34750cea2adf124f72405261071a3460ad56f8e416f2503f446cb8620a",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250619130505_UPdateTablePlanFeatureMatrix\")]\n    partial class UPdateTablePlanFeatureMatrix\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4701),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4709),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4712),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4715),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4717),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4721),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4724),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4726),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4729),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4744),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4747),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3868),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3871),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3872),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3874),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3875),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"cdcd8d38-dbbc-49ee-a39d-026fa25f1eea\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5195),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c8729359-8505-47ca-b4fc-5e80ce84e4c7\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5203),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0e6bd3b2-5056-4cc3-97fd-a11e4e1e4a3e\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5212),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e837feae-a731-4ab4-98d0-5441b93ed285\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5217),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1198345c-c96c-44d4-9602-3d5382ea69c2\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5226),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cd29166e-6d07-4f88-bcac-b52eba3e40c8\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5231),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9e2c8d5b-dc26-449d-b0bd-be663e09e61c\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5235),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a3f6f36e-4aa6-4a3f-ba9b-3205bc918f14\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5253),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3a30a452-7f8c-4d6a-92f0-971393a2b3c5\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5255),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2af188d1-7bd2-4eda-bc94-aea97e80d16e\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5260),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b25ff30e-10d9-4b9d-bf52-30c92e49d3a7\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5263),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0c898220-4231-4723-9bbf-304fe6447cd0\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5272),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ff6899d1-69ff-4245-949c-2446bcf28ff4\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5276),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4283079b-7d1f-4184-bd9d-5341d110b461\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5279),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7f7bc705-2d45-43cc-815c-a8889a123721\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5295),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"07503bb5-f5a3-48e0-916c-6310c7e132d6\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5306),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7504e744-8b7a-4422-8cc2-287e3d771041\"),\n                            AssignedAt = new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5310),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250621073612_AddRefreshTokenSupport.cs",
          "sha256": "065b07a1fa59c36ea7f823fd687444d54a87d3b9406fb6b9cad4f5eb9fadbfb1",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddRefreshTokenSupport : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"07503bb5-f5a3-48e0-916c-6310c7e132d6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0c898220-4231-4723-9bbf-304fe6447cd0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0e6bd3b2-5056-4cc3-97fd-a11e4e1e4a3e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1198345c-c96c-44d4-9602-3d5382ea69c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2af188d1-7bd2-4eda-bc94-aea97e80d16e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3a30a452-7f8c-4d6a-92f0-971393a2b3c5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4283079b-7d1f-4184-bd9d-5341d110b461\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7504e744-8b7a-4422-8cc2-287e3d771041\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7f7bc705-2d45-43cc-815c-a8889a123721\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"9e2c8d5b-dc26-449d-b0bd-be663e09e61c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a3f6f36e-4aa6-4a3f-ba9b-3205bc918f14\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b25ff30e-10d9-4b9d-bf52-30c92e49d3a7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c8729359-8505-47ca-b4fc-5e80ce84e4c7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cd29166e-6d07-4f88-bcac-b52eba3e40c8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cdcd8d38-dbbc-49ee-a39d-026fa25f1eea\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e837feae-a731-4ab4-98d0-5441b93ed285\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ff6899d1-69ff-4245-949c-2446bcf28ff4\"));\n\n            migrationBuilder.AddColumn<string>(\n                name: \"RefreshToken\",\n                table: \"Users\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<DateTime>(\n                name: \"RefreshTokenExpiry\",\n                table: \"Users\",\n                type: \"timestamp with time zone\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<Guid>(\n                name: \"BusinessId\",\n                table: \"UserFeatureAccess\",\n                type: \"uuid\",\n                nullable: false,\n                defaultValue: new Guid(\"00000000-0000-0000-0000-000000000000\"));\n\n            migrationBuilder.AddColumn<string>(\n                name: \"Description\",\n                table: \"FeatureAccess\",\n                type: \"character varying(200)\",\n                maxLength: 200,\n                nullable: false,\n                defaultValue: \"\");\n\n            migrationBuilder.AddColumn<string>(\n                name: \"Group\",\n                table: \"FeatureAccess\",\n                type: \"character varying(50)\",\n                maxLength: 50,\n                nullable: false,\n                defaultValue: \"\");\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9532));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9542));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9545));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9547));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9550));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9554));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9609));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9612));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9616));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9629));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9631));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"0574c0c9-3f81-428d-af3a-d2a90fb35b8e\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(111), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"08344dd6-c032-4918-a5ed-145f085617e0\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(101), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2dc90489-89ac-4877-b0df-869a7bf893ed\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(31), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3313278a-881c-4bb0-932f-adb0ef4f960e\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(106), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"389c40b7-c1a8-4933-9b22-7a13099641e6\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(134), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"3f057e7a-e29b-4ca9-932b-6f5700c26eda\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(85), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"623c923e-ed8a-40e1-bdf2-75beadd7c3fd\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(77), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6fd53fe6-6790-4c93-9193-e40732e38797\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(137), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"76b5616e-cf3f-4a28-b434-a75380fa86a5\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(89), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7eae3e11-c8fb-4870-a688-1eb0b69f3fe6\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(52), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"90235fca-ea3a-4d87-9843-8120d6a248aa\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(56), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a3ff4e6d-c3db-47d0-8d5a-dc05a868bd21\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(23), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b5fa27ec-9cba-4d9e-9e7b-1914c6a1be5c\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(35), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b60da824-36e3-40c6-9dcc-254786b056d7\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(73), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c7ceb1c9-1bcf-41fc-8be3-5bb894ecd502\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(126), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"f50a2419-dcfa-42e1-9b5f-feed5cb19d55\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(39), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fc083ff6-22d7-45ff-a2ea-db995bf3634e\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(81), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8739));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8742));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8744));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8745));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8747));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0574c0c9-3f81-428d-af3a-d2a90fb35b8e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"08344dd6-c032-4918-a5ed-145f085617e0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2dc90489-89ac-4877-b0df-869a7bf893ed\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3313278a-881c-4bb0-932f-adb0ef4f960e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"389c40b7-c1a8-4933-9b22-7a13099641e6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3f057e7a-e29b-4ca9-932b-6f5700c26eda\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"623c923e-ed8a-40e1-bdf2-75beadd7c3fd\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6fd53fe6-6790-4c93-9193-e40732e38797\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"76b5616e-cf3f-4a28-b434-a75380fa86a5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7eae3e11-c8fb-4870-a688-1eb0b69f3fe6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"90235fca-ea3a-4d87-9843-8120d6a248aa\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a3ff4e6d-c3db-47d0-8d5a-dc05a868bd21\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b5fa27ec-9cba-4d9e-9e7b-1914c6a1be5c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b60da824-36e3-40c6-9dcc-254786b056d7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c7ceb1c9-1bcf-41fc-8be3-5bb894ecd502\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f50a2419-dcfa-42e1-9b5f-feed5cb19d55\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fc083ff6-22d7-45ff-a2ea-db995bf3634e\"));\n\n            migrationBuilder.DropColumn(\n                name: \"RefreshToken\",\n                table: \"Users\");\n\n            migrationBuilder.DropColumn(\n                name: \"RefreshTokenExpiry\",\n                table: \"Users\");\n\n            migrationBuilder.DropColumn(\n                name: \"BusinessId\",\n                table: \"UserFeatureAccess\");\n\n            migrationBuilder.DropColumn(\n                name: \"Description\",\n                table: \"FeatureAccess\");\n\n            migrationBuilder.DropColumn(\n                name: \"Group\",\n                table: \"FeatureAccess\");\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4701));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4709));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4712));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4715));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4717));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4721));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4724));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4726));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4729));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4744));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(4747));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"07503bb5-f5a3-48e0-916c-6310c7e132d6\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5306), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"0c898220-4231-4723-9bbf-304fe6447cd0\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5272), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"0e6bd3b2-5056-4cc3-97fd-a11e4e1e4a3e\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5212), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1198345c-c96c-44d4-9602-3d5382ea69c2\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5226), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2af188d1-7bd2-4eda-bc94-aea97e80d16e\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5260), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3a30a452-7f8c-4d6a-92f0-971393a2b3c5\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5255), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4283079b-7d1f-4184-bd9d-5341d110b461\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5279), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"7504e744-8b7a-4422-8cc2-287e3d771041\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5310), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"7f7bc705-2d45-43cc-815c-a8889a123721\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5295), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"9e2c8d5b-dc26-449d-b0bd-be663e09e61c\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5235), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a3f6f36e-4aa6-4a3f-ba9b-3205bc918f14\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5253), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b25ff30e-10d9-4b9d-bf52-30c92e49d3a7\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5263), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c8729359-8505-47ca-b4fc-5e80ce84e4c7\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5203), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cd29166e-6d07-4f88-bcac-b52eba3e40c8\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5231), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cdcd8d38-dbbc-49ee-a39d-026fa25f1eea\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5195), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e837feae-a731-4ab4-98d0-5441b93ed285\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5217), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"ff6899d1-69ff-4245-949c-2446bcf28ff4\"), new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(5276), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3868));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3871));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3872));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3874));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 19, 13, 5, 4, 368, DateTimeKind.Utc).AddTicks(3875));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250621073612_AddRefreshTokenSupport.Designer.cs",
          "sha256": "3e1cb9fe47d7cc3e37406238cefff003bae5a6da8a73301c61c851a9d79b09aa",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250621073612_AddRefreshTokenSupport\")]\n    partial class AddRefreshTokenSupport\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9532),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9542),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9545),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9547),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9550),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9554),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9609),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9612),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9616),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9629),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9631),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8739),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8742),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8744),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8745),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8747),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"a3ff4e6d-c3db-47d0-8d5a-dc05a868bd21\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(23),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2dc90489-89ac-4877-b0df-869a7bf893ed\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(31),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b5fa27ec-9cba-4d9e-9e7b-1914c6a1be5c\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(35),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"f50a2419-dcfa-42e1-9b5f-feed5cb19d55\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(39),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7eae3e11-c8fb-4870-a688-1eb0b69f3fe6\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(52),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"90235fca-ea3a-4d87-9843-8120d6a248aa\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(56),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b60da824-36e3-40c6-9dcc-254786b056d7\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(73),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"623c923e-ed8a-40e1-bdf2-75beadd7c3fd\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(77),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"fc083ff6-22d7-45ff-a2ea-db995bf3634e\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(81),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3f057e7a-e29b-4ca9-932b-6f5700c26eda\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(85),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"76b5616e-cf3f-4a28-b434-a75380fa86a5\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(89),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"08344dd6-c032-4918-a5ed-145f085617e0\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(101),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3313278a-881c-4bb0-932f-adb0ef4f960e\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(106),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0574c0c9-3f81-428d-af3a-d2a90fb35b8e\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(111),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c7ceb1c9-1bcf-41fc-8be3-5bb894ecd502\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(126),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"389c40b7-c1a8-4933-9b22-7a13099641e6\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(134),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"6fd53fe6-6790-4c93-9193-e40732e38797\"),\n                            AssignedAt = new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(137),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250622062351_AddFeatureMasterTable.cs",
          "sha256": "30dc91ef63aed3159b2f601d4197e1313317b0a35d0d2cb3076fc138078fd469",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddFeatureMasterTable : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0574c0c9-3f81-428d-af3a-d2a90fb35b8e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"08344dd6-c032-4918-a5ed-145f085617e0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2dc90489-89ac-4877-b0df-869a7bf893ed\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3313278a-881c-4bb0-932f-adb0ef4f960e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"389c40b7-c1a8-4933-9b22-7a13099641e6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3f057e7a-e29b-4ca9-932b-6f5700c26eda\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"623c923e-ed8a-40e1-bdf2-75beadd7c3fd\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"6fd53fe6-6790-4c93-9193-e40732e38797\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"76b5616e-cf3f-4a28-b434-a75380fa86a5\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7eae3e11-c8fb-4870-a688-1eb0b69f3fe6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"90235fca-ea3a-4d87-9843-8120d6a248aa\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a3ff4e6d-c3db-47d0-8d5a-dc05a868bd21\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b5fa27ec-9cba-4d9e-9e7b-1914c6a1be5c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b60da824-36e3-40c6-9dcc-254786b056d7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c7ceb1c9-1bcf-41fc-8be3-5bb894ecd502\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f50a2419-dcfa-42e1-9b5f-feed5cb19d55\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fc083ff6-22d7-45ff-a2ea-db995bf3634e\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3162));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3176));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3183));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3189));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3195));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3317));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3323));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3328));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3334));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3353));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3359));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"06eeda5f-6a80-43f6-ad18-0ffa7de3b82d\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4016), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1d69a371-aa3a-4c5c-8f89-854b77861a08\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3988), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1f98a6c6-dfa6-4199-b997-9a88a3592f93\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3935), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2647805a-3461-4fd0-9dc4-2b73e06ab436\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4103), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"31077fc3-8326-4a70-88e5-d02f4909b523\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3975), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"351db354-aa0a-4250-ab44-9c1ca3df05d4\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4047), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"410a4982-9970-411e-9fcd-a10403a66018\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4127), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"4f4dfc5f-13db-4287-bc1d-4800e5d08fe7\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4039), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5a665b77-9472-41fc-87af-75a7c1718a3e\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4023), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"84e7384c-5e71-4c66-9d29-97c299d806b8\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4066), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"aeab94b3-1bb2-470b-868d-8f25c69fce36\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4119), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"aedf4756-e1d0-4c34-bd96-dc58bff5e0a0\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3967), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c3855b1f-c41e-4807-bf68-1bbc24414225\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4073), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c65530da-5647-4dcb-b556-91b548ed188f\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4085), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"e71628db-a572-49ae-8898-695d0c7c6b22\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3959), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e89d8afd-00bd-4450-88d8-1ffbaf616163\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4009), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"eaca9399-e841-42eb-806c-e94fca09d80d\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4031), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2073));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2077));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2079));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2081));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2084));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"06eeda5f-6a80-43f6-ad18-0ffa7de3b82d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1d69a371-aa3a-4c5c-8f89-854b77861a08\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1f98a6c6-dfa6-4199-b997-9a88a3592f93\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2647805a-3461-4fd0-9dc4-2b73e06ab436\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31077fc3-8326-4a70-88e5-d02f4909b523\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"351db354-aa0a-4250-ab44-9c1ca3df05d4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"410a4982-9970-411e-9fcd-a10403a66018\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4f4dfc5f-13db-4287-bc1d-4800e5d08fe7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5a665b77-9472-41fc-87af-75a7c1718a3e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"84e7384c-5e71-4c66-9d29-97c299d806b8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aeab94b3-1bb2-470b-868d-8f25c69fce36\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aedf4756-e1d0-4c34-bd96-dc58bff5e0a0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c3855b1f-c41e-4807-bf68-1bbc24414225\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c65530da-5647-4dcb-b556-91b548ed188f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e71628db-a572-49ae-8898-695d0c7c6b22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e89d8afd-00bd-4450-88d8-1ffbaf616163\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eaca9399-e841-42eb-806c-e94fca09d80d\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9532));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9542));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9545));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9547));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9550));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9554));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9609));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9612));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9616));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9629));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(9631));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"0574c0c9-3f81-428d-af3a-d2a90fb35b8e\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(111), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"08344dd6-c032-4918-a5ed-145f085617e0\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(101), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2dc90489-89ac-4877-b0df-869a7bf893ed\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(31), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3313278a-881c-4bb0-932f-adb0ef4f960e\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(106), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"389c40b7-c1a8-4933-9b22-7a13099641e6\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(134), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"3f057e7a-e29b-4ca9-932b-6f5700c26eda\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(85), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"623c923e-ed8a-40e1-bdf2-75beadd7c3fd\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(77), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"6fd53fe6-6790-4c93-9193-e40732e38797\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(137), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"76b5616e-cf3f-4a28-b434-a75380fa86a5\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(89), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7eae3e11-c8fb-4870-a688-1eb0b69f3fe6\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(52), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"90235fca-ea3a-4d87-9843-8120d6a248aa\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(56), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a3ff4e6d-c3db-47d0-8d5a-dc05a868bd21\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(23), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b5fa27ec-9cba-4d9e-9e7b-1914c6a1be5c\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(35), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b60da824-36e3-40c6-9dcc-254786b056d7\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(73), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c7ceb1c9-1bcf-41fc-8be3-5bb894ecd502\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(126), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"f50a2419-dcfa-42e1-9b5f-feed5cb19d55\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(39), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fc083ff6-22d7-45ff-a2ea-db995bf3634e\"), new DateTime(2025, 6, 21, 7, 36, 11, 863, DateTimeKind.Utc).AddTicks(81), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8739));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8742));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8744));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8745));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 21, 7, 36, 11, 862, DateTimeKind.Utc).AddTicks(8747));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250622062351_AddFeatureMasterTable.Designer.cs",
          "sha256": "eb50fe2b8e9ada145b09111e222e0ab73671be87f94f403a093c10b4aa39fd2d",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250622062351_AddFeatureMasterTable\")]\n    partial class AddFeatureMasterTable\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3162),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3176),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3183),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3189),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3195),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3317),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3323),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3328),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3334),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3353),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3359),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2073),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2077),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2079),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2081),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2084),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"1f98a6c6-dfa6-4199-b997-9a88a3592f93\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3935),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e71628db-a572-49ae-8898-695d0c7c6b22\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3959),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aedf4756-e1d0-4c34-bd96-dc58bff5e0a0\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3967),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"31077fc3-8326-4a70-88e5-d02f4909b523\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3975),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1d69a371-aa3a-4c5c-8f89-854b77861a08\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3988),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e89d8afd-00bd-4450-88d8-1ffbaf616163\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4009),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"06eeda5f-6a80-43f6-ad18-0ffa7de3b82d\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4016),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"5a665b77-9472-41fc-87af-75a7c1718a3e\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4023),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"eaca9399-e841-42eb-806c-e94fca09d80d\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4031),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4f4dfc5f-13db-4287-bc1d-4800e5d08fe7\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4039),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"351db354-aa0a-4250-ab44-9c1ca3df05d4\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4047),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"84e7384c-5e71-4c66-9d29-97c299d806b8\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4066),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c3855b1f-c41e-4807-bf68-1bbc24414225\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4073),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c65530da-5647-4dcb-b556-91b548ed188f\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4085),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2647805a-3461-4fd0-9dc4-2b73e06ab436\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4103),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aeab94b3-1bb2-470b-868d-8f25c69fce36\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4119),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"410a4982-9970-411e-9fcd-a10403a66018\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4127),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250622070448_AddFeatureMasterTable1.cs",
          "sha256": "ba6e08ea0f83d3c2e9a29f4d014397fe5f7af02b32990f80ca4d318b7bc74f34",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddFeatureMasterTable1 : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"06eeda5f-6a80-43f6-ad18-0ffa7de3b82d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1d69a371-aa3a-4c5c-8f89-854b77861a08\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1f98a6c6-dfa6-4199-b997-9a88a3592f93\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2647805a-3461-4fd0-9dc4-2b73e06ab436\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31077fc3-8326-4a70-88e5-d02f4909b523\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"351db354-aa0a-4250-ab44-9c1ca3df05d4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"410a4982-9970-411e-9fcd-a10403a66018\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4f4dfc5f-13db-4287-bc1d-4800e5d08fe7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5a665b77-9472-41fc-87af-75a7c1718a3e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"84e7384c-5e71-4c66-9d29-97c299d806b8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aeab94b3-1bb2-470b-868d-8f25c69fce36\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aedf4756-e1d0-4c34-bd96-dc58bff5e0a0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c3855b1f-c41e-4807-bf68-1bbc24414225\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c65530da-5647-4dcb-b556-91b548ed188f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e71628db-a572-49ae-8898-695d0c7c6b22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e89d8afd-00bd-4450-88d8-1ffbaf616163\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"eaca9399-e841-42eb-806c-e94fca09d80d\"));\n\n            migrationBuilder.AddColumn<string>(\n                name: \"Plan\",\n                table: \"FeatureAccess\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.CreateTable(\n                name: \"FeatureMaster\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    FeatureCode = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    DisplayName = table.Column<string>(type: \"character varying(100)\", maxLength: 100, nullable: false),\n                    Description = table.Column<string>(type: \"character varying(250)\", maxLength: 250, nullable: false),\n                    Group = table.Column<string>(type: \"character varying(50)\", maxLength: 50, nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_FeatureMaster\", x => x.Id);\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2832));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2845));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2849));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2852));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2855));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2859));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2862));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2865));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2868));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2991));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2995));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"1418e3c7-df29-4ae2-aa27-2ef426f1933c\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4384), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"1c5228fa-c7cd-407a-9933-0f09eb3a554f\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4367), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1e5a3b00-04aa-49ab-8174-6ddacb25726d\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4405), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"24262200-285e-4aa6-a065-4c5a49ddc8ac\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4389), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"41d4a538-2ca3-4e67-a336-c52b22fb9b0a\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4324), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"56e48877-6772-4be4-a827-63bc8f5242c2\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4393), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"8bd44ca4-27ea-41d4-835b-8659095ad6c8\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4318), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a8aea059-6ff2-42ad-a155-219ce78916b3\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4361), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a98dfe68-3b7f-4a68-b5a8-8e931896206b\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4349), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"bb77f0eb-50a9-49b0-9f29-154872e2970d\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4422), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"c574e6a2-495c-41cf-8aa4-5f9760d83baf\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4371), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cab676a7-df99-4eaa-bb3d-dfdec1e7ac39\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4344), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cf233a37-a64c-4ae2-aeb1-bf5c4bd642e3\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4354), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d18e4159-67dd-490b-9dd1-fb5685e5073a\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4338), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dcb05ff3-470d-43d9-8af9-0324c2eba91c\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4415), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"dd3a681f-d5f5-47bb-be92-44f360fce9f7\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4308), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fadff09e-9b6a-44e6-9e1a-07cc6a9c3722\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4327), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1619));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1622));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1624));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1626));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1627));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"FeatureMaster\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1418e3c7-df29-4ae2-aa27-2ef426f1933c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1c5228fa-c7cd-407a-9933-0f09eb3a554f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1e5a3b00-04aa-49ab-8174-6ddacb25726d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"24262200-285e-4aa6-a065-4c5a49ddc8ac\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"41d4a538-2ca3-4e67-a336-c52b22fb9b0a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"56e48877-6772-4be4-a827-63bc8f5242c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8bd44ca4-27ea-41d4-835b-8659095ad6c8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a8aea059-6ff2-42ad-a155-219ce78916b3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a98dfe68-3b7f-4a68-b5a8-8e931896206b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"bb77f0eb-50a9-49b0-9f29-154872e2970d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c574e6a2-495c-41cf-8aa4-5f9760d83baf\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cab676a7-df99-4eaa-bb3d-dfdec1e7ac39\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf233a37-a64c-4ae2-aeb1-bf5c4bd642e3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d18e4159-67dd-490b-9dd1-fb5685e5073a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcb05ff3-470d-43d9-8af9-0324c2eba91c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dd3a681f-d5f5-47bb-be92-44f360fce9f7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fadff09e-9b6a-44e6-9e1a-07cc6a9c3722\"));\n\n            migrationBuilder.DropColumn(\n                name: \"Plan\",\n                table: \"FeatureAccess\");\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3162));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3176));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3183));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3189));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3195));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3317));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3323));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3328));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3334));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3353));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3359));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"06eeda5f-6a80-43f6-ad18-0ffa7de3b82d\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4016), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1d69a371-aa3a-4c5c-8f89-854b77861a08\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3988), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1f98a6c6-dfa6-4199-b997-9a88a3592f93\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3935), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2647805a-3461-4fd0-9dc4-2b73e06ab436\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4103), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"31077fc3-8326-4a70-88e5-d02f4909b523\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3975), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"351db354-aa0a-4250-ab44-9c1ca3df05d4\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4047), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"410a4982-9970-411e-9fcd-a10403a66018\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4127), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"4f4dfc5f-13db-4287-bc1d-4800e5d08fe7\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4039), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5a665b77-9472-41fc-87af-75a7c1718a3e\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4023), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"84e7384c-5e71-4c66-9d29-97c299d806b8\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4066), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"aeab94b3-1bb2-470b-868d-8f25c69fce36\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4119), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"aedf4756-e1d0-4c34-bd96-dc58bff5e0a0\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3967), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"c3855b1f-c41e-4807-bf68-1bbc24414225\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4073), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c65530da-5647-4dcb-b556-91b548ed188f\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4085), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"e71628db-a572-49ae-8898-695d0c7c6b22\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(3959), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e89d8afd-00bd-4450-88d8-1ffbaf616163\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4009), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"eaca9399-e841-42eb-806c-e94fca09d80d\"), new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(4031), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2073));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2077));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2079));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2081));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 6, 23, 49, 975, DateTimeKind.Utc).AddTicks(2084));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250622070448_AddFeatureMasterTable1.Designer.cs",
          "sha256": "a32c0a8ac92ef9119974d0dc0f71d57f21a2987d1f115f23cc9a75beed01168b",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250622070448_AddFeatureMasterTable1\")]\n    partial class AddFeatureMasterTable1\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2832),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2845),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2849),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2852),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2855),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2859),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2862),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2865),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2868),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2991),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2995),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1619),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1622),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1624),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1626),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1627),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"dd3a681f-d5f5-47bb-be92-44f360fce9f7\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4308),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8bd44ca4-27ea-41d4-835b-8659095ad6c8\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4318),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"41d4a538-2ca3-4e67-a336-c52b22fb9b0a\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4324),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"fadff09e-9b6a-44e6-9e1a-07cc6a9c3722\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4327),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d18e4159-67dd-490b-9dd1-fb5685e5073a\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4338),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cab676a7-df99-4eaa-bb3d-dfdec1e7ac39\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4344),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a98dfe68-3b7f-4a68-b5a8-8e931896206b\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4349),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cf233a37-a64c-4ae2-aeb1-bf5c4bd642e3\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4354),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a8aea059-6ff2-42ad-a155-219ce78916b3\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4361),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1c5228fa-c7cd-407a-9933-0f09eb3a554f\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4367),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c574e6a2-495c-41cf-8aa4-5f9760d83baf\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4371),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1418e3c7-df29-4ae2-aa27-2ef426f1933c\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4384),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"24262200-285e-4aa6-a065-4c5a49ddc8ac\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4389),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"56e48877-6772-4be4-a827-63bc8f5242c2\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4393),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"1e5a3b00-04aa-49ab-8174-6ddacb25726d\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4405),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dcb05ff3-470d-43d9-8af9-0324c2eba91c\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4415),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"bb77f0eb-50a9-49b0-9f29-154872e2970d\"),\n                            AssignedAt = new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4422),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250704093133_AddIndustryToAutoReplyRule.cs",
          "sha256": "5b67fe185444f3f1fc33ace7b1f05914d882d2387f37d1379f5c7911cb7b44f8",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddIndustryToAutoReplyRule : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1418e3c7-df29-4ae2-aa27-2ef426f1933c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1c5228fa-c7cd-407a-9933-0f09eb3a554f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"1e5a3b00-04aa-49ab-8174-6ddacb25726d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"24262200-285e-4aa6-a065-4c5a49ddc8ac\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"41d4a538-2ca3-4e67-a336-c52b22fb9b0a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"56e48877-6772-4be4-a827-63bc8f5242c2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8bd44ca4-27ea-41d4-835b-8659095ad6c8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a8aea059-6ff2-42ad-a155-219ce78916b3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a98dfe68-3b7f-4a68-b5a8-8e931896206b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"bb77f0eb-50a9-49b0-9f29-154872e2970d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c574e6a2-495c-41cf-8aa4-5f9760d83baf\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cab676a7-df99-4eaa-bb3d-dfdec1e7ac39\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf233a37-a64c-4ae2-aeb1-bf5c4bd642e3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d18e4159-67dd-490b-9dd1-fb5685e5073a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dcb05ff3-470d-43d9-8af9-0324c2eba91c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dd3a681f-d5f5-47bb-be92-44f360fce9f7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"fadff09e-9b6a-44e6-9e1a-07cc6a9c3722\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2785));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2793));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2796));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2798));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2801));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2805));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2807));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2810));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2813));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2816));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2819));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"08e81e86-af2e-44e7-aa98-96ddbb265fd4\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3320), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"104a4dec-d683-4af5-b817-5d89b2ae09c0\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3282), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"170baea8-4ee1-433c-ae9a-bc9cb7db938f\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3303), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2fb759a5-ff0d-417f-bb97-bd4483b70a22\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3296), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"31bd93dc-41dc-4409-8d30-b1c5996624f9\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3268), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"37991ff4-bae2-408a-9a00-028fadc69810\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3286), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3bb13eca-7657-4609-ae59-15ef6b008b29\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3271), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4ad7df90-e52f-4dc5-aef8-1a7c0c70e673\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3259), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5633443a-4b94-4adf-af7b-7c59c990c42d\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3306), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"665cf6fe-9022-4367-8474-90954e49b350\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3247), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"697a8ab6-5898-4ed6-8114-611f34ddc7e8\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3300), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"943e78ee-02dc-495e-a212-b3f037b742c7\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3251), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a64bfba6-28df-42e4-94f0-c14a37c081b7\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3237), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a71bc075-0ae0-4903-b0bd-3c5e834eb092\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3314), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"a8768168-5817-4ec6-8558-72508caf72d8\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3255), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cf227764-e3bc-4c10-a73a-f104c99b5fc2\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3263), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d585ad3d-c3bc-4d6a-ad03-15bb1bcc61c1\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3277), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2138));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2139));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2141));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2142));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2143));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"08e81e86-af2e-44e7-aa98-96ddbb265fd4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"104a4dec-d683-4af5-b817-5d89b2ae09c0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"170baea8-4ee1-433c-ae9a-bc9cb7db938f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2fb759a5-ff0d-417f-bb97-bd4483b70a22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31bd93dc-41dc-4409-8d30-b1c5996624f9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"37991ff4-bae2-408a-9a00-028fadc69810\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3bb13eca-7657-4609-ae59-15ef6b008b29\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4ad7df90-e52f-4dc5-aef8-1a7c0c70e673\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5633443a-4b94-4adf-af7b-7c59c990c42d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"665cf6fe-9022-4367-8474-90954e49b350\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"697a8ab6-5898-4ed6-8114-611f34ddc7e8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"943e78ee-02dc-495e-a212-b3f037b742c7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a64bfba6-28df-42e4-94f0-c14a37c081b7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a71bc075-0ae0-4903-b0bd-3c5e834eb092\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a8768168-5817-4ec6-8558-72508caf72d8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf227764-e3bc-4c10-a73a-f104c99b5fc2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d585ad3d-c3bc-4d6a-ad03-15bb1bcc61c1\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2832));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2845));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2849));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2852));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2855));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2859));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2862));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2865));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2868));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2991));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(2995));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"1418e3c7-df29-4ae2-aa27-2ef426f1933c\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4384), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"1c5228fa-c7cd-407a-9933-0f09eb3a554f\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4367), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"1e5a3b00-04aa-49ab-8174-6ddacb25726d\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4405), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"24262200-285e-4aa6-a065-4c5a49ddc8ac\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4389), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"41d4a538-2ca3-4e67-a336-c52b22fb9b0a\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4324), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"56e48877-6772-4be4-a827-63bc8f5242c2\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4393), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"8bd44ca4-27ea-41d4-835b-8659095ad6c8\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4318), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a8aea059-6ff2-42ad-a155-219ce78916b3\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4361), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a98dfe68-3b7f-4a68-b5a8-8e931896206b\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4349), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"bb77f0eb-50a9-49b0-9f29-154872e2970d\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4422), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"c574e6a2-495c-41cf-8aa4-5f9760d83baf\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4371), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cab676a7-df99-4eaa-bb3d-dfdec1e7ac39\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4344), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cf233a37-a64c-4ae2-aeb1-bf5c4bd642e3\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4354), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d18e4159-67dd-490b-9dd1-fb5685e5073a\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4338), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dcb05ff3-470d-43d9-8af9-0324c2eba91c\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4415), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"dd3a681f-d5f5-47bb-be92-44f360fce9f7\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4308), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"fadff09e-9b6a-44e6-9e1a-07cc6a9c3722\"), new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(4327), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1619));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1622));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1624));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1626));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 6, 22, 7, 4, 47, 251, DateTimeKind.Utc).AddTicks(1627));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250704093133_AddIndustryToAutoReplyRule.Designer.cs",
          "sha256": "7e213ed137dc4a0a61961478314d5feb46f59aaaefc9716e5d8630d42a5289e9",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250704093133_AddIndustryToAutoReplyRule\")]\n    partial class AddIndustryToAutoReplyRule\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2785),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2793),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2796),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2798),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2801),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2805),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2807),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2810),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2813),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2816),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2819),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2138),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2139),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2141),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2142),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2143),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"a64bfba6-28df-42e4-94f0-c14a37c081b7\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3237),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"665cf6fe-9022-4367-8474-90954e49b350\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3247),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"943e78ee-02dc-495e-a212-b3f037b742c7\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3251),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a8768168-5817-4ec6-8558-72508caf72d8\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3255),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4ad7df90-e52f-4dc5-aef8-1a7c0c70e673\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3259),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"cf227764-e3bc-4c10-a73a-f104c99b5fc2\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3263),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"31bd93dc-41dc-4409-8d30-b1c5996624f9\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3268),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3bb13eca-7657-4609-ae59-15ef6b008b29\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3271),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d585ad3d-c3bc-4d6a-ad03-15bb1bcc61c1\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3277),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"104a4dec-d683-4af5-b817-5d89b2ae09c0\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3282),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"37991ff4-bae2-408a-9a00-028fadc69810\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3286),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2fb759a5-ff0d-417f-bb97-bd4483b70a22\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3296),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"697a8ab6-5898-4ed6-8114-611f34ddc7e8\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3300),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"170baea8-4ee1-433c-ae9a-bc9cb7db938f\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3303),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"5633443a-4b94-4adf-af7b-7c59c990c42d\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3306),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a71bc075-0ae0-4903-b0bd-3c5e834eb092\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3314),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"08e81e86-af2e-44e7-aa98-96ddbb265fd4\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3320),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250704155618_AddAutomationFlowModel.cs",
          "sha256": "892c88528842503eaf5b927354fff640d5fa2349990248aeaf4979d6a1513b77",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class AddAutomationFlowModel : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"08e81e86-af2e-44e7-aa98-96ddbb265fd4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"104a4dec-d683-4af5-b817-5d89b2ae09c0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"170baea8-4ee1-433c-ae9a-bc9cb7db938f\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2fb759a5-ff0d-417f-bb97-bd4483b70a22\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31bd93dc-41dc-4409-8d30-b1c5996624f9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"37991ff4-bae2-408a-9a00-028fadc69810\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3bb13eca-7657-4609-ae59-15ef6b008b29\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4ad7df90-e52f-4dc5-aef8-1a7c0c70e673\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5633443a-4b94-4adf-af7b-7c59c990c42d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"665cf6fe-9022-4367-8474-90954e49b350\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"697a8ab6-5898-4ed6-8114-611f34ddc7e8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"943e78ee-02dc-495e-a212-b3f037b742c7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a64bfba6-28df-42e4-94f0-c14a37c081b7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a71bc075-0ae0-4903-b0bd-3c5e834eb092\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a8768168-5817-4ec6-8558-72508caf72d8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cf227764-e3bc-4c10-a73a-f104c99b5fc2\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d585ad3d-c3bc-4d6a-ad03-15bb1bcc61c1\"));\n\n            migrationBuilder.AddColumn<string>(\n                name: \"IndustryTag\",\n                table: \"AutoReplyRules\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<string>(\n                name: \"SourceChannel\",\n                table: \"AutoReplyRules\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<string>(\n                name: \"IndustryTag\",\n                table: \"AutoReplyFlows\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<bool>(\n                name: \"IsDefaultTemplate\",\n                table: \"AutoReplyFlows\",\n                type: \"boolean\",\n                nullable: false,\n                defaultValue: false);\n\n            migrationBuilder.AddColumn<string>(\n                name: \"Keyword\",\n                table: \"AutoReplyFlows\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<string>(\n                name: \"UseCase\",\n                table: \"AutoReplyFlows\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.AddColumn<string>(\n                name: \"NodeName\",\n                table: \"AutoReplyFlowNodes\",\n                type: \"text\",\n                nullable: true);\n\n            migrationBuilder.CreateTable(\n                name: \"AutomationFlows\",\n                columns: table => new\n                {\n                    Id = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    BusinessId = table.Column<Guid>(type: \"uuid\", nullable: false),\n                    Name = table.Column<string>(type: \"text\", nullable: false),\n                    TriggerKeyword = table.Column<string>(type: \"text\", nullable: false),\n                    NodesJson = table.Column<string>(type: \"text\", nullable: false),\n                    EdgesJson = table.Column<string>(type: \"text\", nullable: false),\n                    IsActive = table.Column<bool>(type: \"boolean\", nullable: false),\n                    CreatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false),\n                    UpdatedAt = table.Column<DateTime>(type: \"timestamp with time zone\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_AutomationFlows\", x => x.Id);\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4986));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4993));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4995));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4997));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4999));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5001));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5003));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5004));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5056));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5059));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5061));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"02972145-3fb4-4821-b138-55529fc14140\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5405), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2741a9c5-759a-4d7d-bd75-19b39830fb1d\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5373), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2f815ab0-7114-4d1e-8c11-928a7a1ff3e1\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5443), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"31551594-28e8-4307-9ff4-c88c90b8e41e\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5411), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3d68c643-c06a-4d8e-906d-67e431fb8dae\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5425), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"418cb051-994a-4227-8191-91f333d022c4\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5432), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"4559c220-b214-4867-a5ef-420dfd537530\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5377), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4a7c82bd-282e-4d7f-b06e-942961c578e4\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5429), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"4fe0af17-0bce-4ad8-a006-682780ce8e75\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5402), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7f139177-7fec-4f69-ba2a-bff27989f456\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5414), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8f8abd40-9e1c-46d5-af37-3e718062b56b\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5446), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"aaff6051-9a29-4693-8587-ec86d1713328\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5366), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aec7e2bc-bf4c-4a5a-805a-a081da6fc861\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5437), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c6128b15-63a3-4cad-97ca-50d153cd97b9\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5384), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dda31ae1-dfd6-42e4-9d47-8de18e30e67c\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5381), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e7332033-fb8e-4ee9-8486-fbc8698c37f8\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5408), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f6fdc533-cf5c-43c3-9906-8437105d0df4\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5387), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4408));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4409));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4411));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4412));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4413));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"AutomationFlows\");\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"02972145-3fb4-4821-b138-55529fc14140\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2741a9c5-759a-4d7d-bd75-19b39830fb1d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2f815ab0-7114-4d1e-8c11-928a7a1ff3e1\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31551594-28e8-4307-9ff4-c88c90b8e41e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3d68c643-c06a-4d8e-906d-67e431fb8dae\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"418cb051-994a-4227-8191-91f333d022c4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4559c220-b214-4867-a5ef-420dfd537530\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4a7c82bd-282e-4d7f-b06e-942961c578e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4fe0af17-0bce-4ad8-a006-682780ce8e75\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7f139177-7fec-4f69-ba2a-bff27989f456\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8f8abd40-9e1c-46d5-af37-3e718062b56b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aaff6051-9a29-4693-8587-ec86d1713328\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aec7e2bc-bf4c-4a5a-805a-a081da6fc861\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c6128b15-63a3-4cad-97ca-50d153cd97b9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dda31ae1-dfd6-42e4-9d47-8de18e30e67c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e7332033-fb8e-4ee9-8486-fbc8698c37f8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f6fdc533-cf5c-43c3-9906-8437105d0df4\"));\n\n            migrationBuilder.DropColumn(\n                name: \"IndustryTag\",\n                table: \"AutoReplyRules\");\n\n            migrationBuilder.DropColumn(\n                name: \"SourceChannel\",\n                table: \"AutoReplyRules\");\n\n            migrationBuilder.DropColumn(\n                name: \"IndustryTag\",\n                table: \"AutoReplyFlows\");\n\n            migrationBuilder.DropColumn(\n                name: \"IsDefaultTemplate\",\n                table: \"AutoReplyFlows\");\n\n            migrationBuilder.DropColumn(\n                name: \"Keyword\",\n                table: \"AutoReplyFlows\");\n\n            migrationBuilder.DropColumn(\n                name: \"UseCase\",\n                table: \"AutoReplyFlows\");\n\n            migrationBuilder.DropColumn(\n                name: \"NodeName\",\n                table: \"AutoReplyFlowNodes\");\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2785));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2793));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2796));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2798));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2801));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2805));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2807));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2810));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2813));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2816));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2819));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"08e81e86-af2e-44e7-aa98-96ddbb265fd4\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3320), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"104a4dec-d683-4af5-b817-5d89b2ae09c0\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3282), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"170baea8-4ee1-433c-ae9a-bc9cb7db938f\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3303), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"2fb759a5-ff0d-417f-bb97-bd4483b70a22\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3296), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"31bd93dc-41dc-4409-8d30-b1c5996624f9\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3268), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"37991ff4-bae2-408a-9a00-028fadc69810\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3286), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3bb13eca-7657-4609-ae59-15ef6b008b29\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3271), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4ad7df90-e52f-4dc5-aef8-1a7c0c70e673\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3259), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5633443a-4b94-4adf-af7b-7c59c990c42d\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3306), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"665cf6fe-9022-4367-8474-90954e49b350\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3247), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"697a8ab6-5898-4ed6-8114-611f34ddc7e8\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3300), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"943e78ee-02dc-495e-a212-b3f037b742c7\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3251), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a64bfba6-28df-42e4-94f0-c14a37c081b7\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3237), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a71bc075-0ae0-4903-b0bd-3c5e834eb092\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3314), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"a8768168-5817-4ec6-8558-72508caf72d8\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3255), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"cf227764-e3bc-4c10-a73a-f104c99b5fc2\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3263), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d585ad3d-c3bc-4d6a-ad03-15bb1bcc61c1\"), new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(3277), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2138));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2139));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2141));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2142));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 9, 31, 32, 982, DateTimeKind.Utc).AddTicks(2143));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250704155618_AddAutomationFlowModel.Designer.cs",
          "sha256": "b8f7a4b51f080f25a92bc0e3f70d8474de458062056f4790acc9cde013814dea",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250704155618_AddAutomationFlowModel\")]\n    partial class AddAutomationFlowModel\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.15\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4986),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4993),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4995),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4997),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4999),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5001),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5003),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5004),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5056),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5059),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5061),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4408),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4409),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4411),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4412),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4413),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"aaff6051-9a29-4693-8587-ec86d1713328\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5366),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2741a9c5-759a-4d7d-bd75-19b39830fb1d\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5373),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4559c220-b214-4867-a5ef-420dfd537530\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5377),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"dda31ae1-dfd6-42e4-9d47-8de18e30e67c\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5381),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"c6128b15-63a3-4cad-97ca-50d153cd97b9\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5384),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"f6fdc533-cf5c-43c3-9906-8437105d0df4\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5387),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4fe0af17-0bce-4ad8-a006-682780ce8e75\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5402),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"02972145-3fb4-4821-b138-55529fc14140\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5405),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e7332033-fb8e-4ee9-8486-fbc8698c37f8\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5408),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"31551594-28e8-4307-9ff4-c88c90b8e41e\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5411),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"7f139177-7fec-4f69-ba2a-bff27989f456\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5414),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"3d68c643-c06a-4d8e-906d-67e431fb8dae\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5425),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"4a7c82bd-282e-4d7f-b06e-942961c578e4\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5429),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"418cb051-994a-4227-8191-91f333d022c4\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5432),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aec7e2bc-bf4c-4a5a-805a-a081da6fc861\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5437),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2f815ab0-7114-4d1e-8c11-928a7a1ff3e1\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5443),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8f8abd40-9e1c-46d5-af37-3e718062b56b\"),\n                            AssignedAt = new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5446),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250806080314_InitialCreate.cs",
          "sha256": "d9d8254c7a056048f1942ee9091271abfc51d3db0ef12cfa4b1312d30ab1348e",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class InitialCreate : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"02972145-3fb4-4821-b138-55529fc14140\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2741a9c5-759a-4d7d-bd75-19b39830fb1d\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2f815ab0-7114-4d1e-8c11-928a7a1ff3e1\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"31551594-28e8-4307-9ff4-c88c90b8e41e\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"3d68c643-c06a-4d8e-906d-67e431fb8dae\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"418cb051-994a-4227-8191-91f333d022c4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4559c220-b214-4867-a5ef-420dfd537530\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4a7c82bd-282e-4d7f-b06e-942961c578e4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"4fe0af17-0bce-4ad8-a006-682780ce8e75\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"7f139177-7fec-4f69-ba2a-bff27989f456\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8f8abd40-9e1c-46d5-af37-3e718062b56b\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aaff6051-9a29-4693-8587-ec86d1713328\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aec7e2bc-bf4c-4a5a-805a-a081da6fc861\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"c6128b15-63a3-4cad-97ca-50d153cd97b9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"dda31ae1-dfd6-42e4-9d47-8de18e30e67c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e7332033-fb8e-4ee9-8486-fbc8698c37f8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f6fdc533-cf5c-43c3-9906-8437105d0df4\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5111));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5118));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5120));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5122));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5124));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5127));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5130));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5132));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5135));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5138));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5179));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"0478c3a5-283b-442d-a51d-909c2b0172d3\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5559), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"0759059d-e71d-4198-b3b9-58d12c8200f9\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5539), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"15b8aca8-7fb9-4e9f-8f59-9e88bd26b0ec\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5524), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"18c92b80-4c5e-4d54-b364-8b3953000241\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5515), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"251c0b3d-3bb2-4e11-a64f-190d457306d0\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5509), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"40fe8966-eefb-43ef-b8ca-677f107d33dc\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5535), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5f2a715d-4a83-4669-b42c-1df495d349b8\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5554), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"65ffa364-2c5a-45e0-af28-5a1730dc9d94\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5551), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"8ce09038-350b-4f34-9467-38ba611c61bd\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5569), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"8e58d8a5-dc1f-4fb9-9198-f868ae63fc70\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5542), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a471818e-7c64-4c7f-869c-545938ad9217\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5533), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aa7bf421-9fdc-4a77-b822-29b6a5a1c131\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5518), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"af77b30e-d9b4-4052-b378-4b862fe1a86c\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5512), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b30d4433-c4b8-4131-8072-bb52a720f964\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5572), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"cddcfa62-e4bb-4433-83fa-42bce5951025\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5499), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e0e5dc1c-9235-4fa8-863d-8a57c01e8a24\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5522), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f6933ae2-c83d-4652-bdd6-559684858967\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5557), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3900));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3902));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3904));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3905));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3906));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0478c3a5-283b-442d-a51d-909c2b0172d3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0759059d-e71d-4198-b3b9-58d12c8200f9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"15b8aca8-7fb9-4e9f-8f59-9e88bd26b0ec\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"18c92b80-4c5e-4d54-b364-8b3953000241\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"251c0b3d-3bb2-4e11-a64f-190d457306d0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"40fe8966-eefb-43ef-b8ca-677f107d33dc\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5f2a715d-4a83-4669-b42c-1df495d349b8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"65ffa364-2c5a-45e0-af28-5a1730dc9d94\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8ce09038-350b-4f34-9467-38ba611c61bd\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8e58d8a5-dc1f-4fb9-9198-f868ae63fc70\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a471818e-7c64-4c7f-869c-545938ad9217\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa7bf421-9fdc-4a77-b822-29b6a5a1c131\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"af77b30e-d9b4-4052-b378-4b862fe1a86c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b30d4433-c4b8-4131-8072-bb52a720f964\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cddcfa62-e4bb-4433-83fa-42bce5951025\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e0e5dc1c-9235-4fa8-863d-8a57c01e8a24\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f6933ae2-c83d-4652-bdd6-559684858967\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4986));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4993));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4995));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4997));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4999));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5001));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5003));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5004));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5056));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5059));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5061));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"02972145-3fb4-4821-b138-55529fc14140\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5405), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2741a9c5-759a-4d7d-bd75-19b39830fb1d\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5373), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2f815ab0-7114-4d1e-8c11-928a7a1ff3e1\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5443), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"31551594-28e8-4307-9ff4-c88c90b8e41e\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5411), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"3d68c643-c06a-4d8e-906d-67e431fb8dae\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5425), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"418cb051-994a-4227-8191-91f333d022c4\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5432), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"4559c220-b214-4867-a5ef-420dfd537530\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5377), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"4a7c82bd-282e-4d7f-b06e-942961c578e4\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5429), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"4fe0af17-0bce-4ad8-a006-682780ce8e75\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5402), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"7f139177-7fec-4f69-ba2a-bff27989f456\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5414), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8f8abd40-9e1c-46d5-af37-3e718062b56b\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5446), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"aaff6051-9a29-4693-8587-ec86d1713328\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5366), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aec7e2bc-bf4c-4a5a-805a-a081da6fc861\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5437), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"c6128b15-63a3-4cad-97ca-50d153cd97b9\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5384), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"dda31ae1-dfd6-42e4-9d47-8de18e30e67c\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5381), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e7332033-fb8e-4ee9-8486-fbc8698c37f8\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5408), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f6fdc533-cf5c-43c3-9906-8437105d0df4\"), new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(5387), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4408));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4409));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4411));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4412));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 7, 4, 15, 56, 17, 413, DateTimeKind.Utc).AddTicks(4413));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250806080314_InitialCreate.Designer.cs",
          "sha256": "e1fd133edf1d3a46177b12b8ebddc4ea836c8b51500e81b51214549e563fd6a4",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250806080314_InitialCreate\")]\n    partial class InitialCreate\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5111),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5118),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5120),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5122),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5124),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5127),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5130),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5132),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5135),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5138),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5179),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3900),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3902),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3904),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3905),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3906),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"cddcfa62-e4bb-4433-83fa-42bce5951025\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5499),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"251c0b3d-3bb2-4e11-a64f-190d457306d0\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5509),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"af77b30e-d9b4-4052-b378-4b862fe1a86c\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5512),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"18c92b80-4c5e-4d54-b364-8b3953000241\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5515),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"aa7bf421-9fdc-4a77-b822-29b6a5a1c131\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5518),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"e0e5dc1c-9235-4fa8-863d-8a57c01e8a24\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5522),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"15b8aca8-7fb9-4e9f-8f59-9e88bd26b0ec\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5524),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a471818e-7c64-4c7f-869c-545938ad9217\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5533),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"40fe8966-eefb-43ef-b8ca-677f107d33dc\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5535),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0759059d-e71d-4198-b3b9-58d12c8200f9\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5539),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8e58d8a5-dc1f-4fb9-9198-f868ae63fc70\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5542),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"65ffa364-2c5a-45e0-af28-5a1730dc9d94\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5551),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"5f2a715d-4a83-4669-b42c-1df495d349b8\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5554),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"f6933ae2-c83d-4652-bdd6-559684858967\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5557),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"0478c3a5-283b-442d-a51d-909c2b0172d3\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5559),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8ce09038-350b-4f34-9467-38ba611c61bd\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5569),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b30d4433-c4b8-4131-8072-bb52a720f964\"),\n                            AssignedAt = new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5572),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250810122422_InitialCreateToNeon.cs",
          "sha256": "131eb9d73dd1caaf33417e037972b4aef280ce4575cf1492ec96b05cf99d2e0d",
          "language": "csharp",
          "content": "using System;\nusing Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\n#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional\n\nnamespace xbytechat.api.Migrations\n{\n    /// <inheritdoc />\n    public partial class InitialCreateToNeon : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0478c3a5-283b-442d-a51d-909c2b0172d3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"0759059d-e71d-4198-b3b9-58d12c8200f9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"15b8aca8-7fb9-4e9f-8f59-9e88bd26b0ec\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"18c92b80-4c5e-4d54-b364-8b3953000241\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"251c0b3d-3bb2-4e11-a64f-190d457306d0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"40fe8966-eefb-43ef-b8ca-677f107d33dc\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"5f2a715d-4a83-4669-b42c-1df495d349b8\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"65ffa364-2c5a-45e0-af28-5a1730dc9d94\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8ce09038-350b-4f34-9467-38ba611c61bd\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8e58d8a5-dc1f-4fb9-9198-f868ae63fc70\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a471818e-7c64-4c7f-869c-545938ad9217\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"aa7bf421-9fdc-4a77-b822-29b6a5a1c131\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"af77b30e-d9b4-4052-b378-4b862fe1a86c\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b30d4433-c4b8-4131-8072-bb52a720f964\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"cddcfa62-e4bb-4433-83fa-42bce5951025\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"e0e5dc1c-9235-4fa8-863d-8a57c01e8a24\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"f6933ae2-c83d-4652-bdd6-559684858967\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8372));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8380));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8382));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8385));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8387));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8390));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8392));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8394));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8397));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8400));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8401));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"077411e5-1f1b-4e94-90b9-febb503d955a\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8718), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"106019ac-e3ba-47c5-aa3d-3de8459189f7\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8783), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"2cd29bd3-f812-435e-bfa4-dcbe753c8a0a\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8787), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"348b34f4-6d0a-4505-a7f9-f67a64e867f6\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8820), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"43751848-5176-482e-8854-cfe0c1fe1476\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8725), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"48b591be-65f7-451f-b719-f327dada5ad4\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8705), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8730c3e3-5f76-4acd-bba1-619e983d37d4\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8700), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"8988065d-f1a5-4e5c-aff1-36b30317c807\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8810), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"89b52866-c0a4-4988-aee5-e5afb670f1db\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8807), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"9695b1ca-cf9e-4ba8-b608-25ba5ed6c578\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8802), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"9efa0b93-4944-4e5c-b8a8-7d85661a26a3\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8805), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"a47785b3-34d7-43e2-a1ab-b9e91e987dfa\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8792), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b2178c98-9d0e-45f1-9e60-47f9763367e9\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8714), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b85669b0-d5f9-4b87-8a5b-617120e76679\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8817), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"ccd710e6-baf8-414e-b3ce-fdba41bb9692\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8776), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"d2a22e67-99a2-4f6c-b042-38c9647d0ea0\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8780), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"da299567-1c2c-4912-977f-70a7a102ffb4\"), new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8721), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7678));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7680));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7681));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7682));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7684));\n        }\n\n        /// <inheritdoc />\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"077411e5-1f1b-4e94-90b9-febb503d955a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"106019ac-e3ba-47c5-aa3d-3de8459189f7\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"2cd29bd3-f812-435e-bfa4-dcbe753c8a0a\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"348b34f4-6d0a-4505-a7f9-f67a64e867f6\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"43751848-5176-482e-8854-cfe0c1fe1476\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"48b591be-65f7-451f-b719-f327dada5ad4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8730c3e3-5f76-4acd-bba1-619e983d37d4\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"8988065d-f1a5-4e5c-aff1-36b30317c807\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"89b52866-c0a4-4988-aee5-e5afb670f1db\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"9695b1ca-cf9e-4ba8-b608-25ba5ed6c578\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"9efa0b93-4944-4e5c-b8a8-7d85661a26a3\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"a47785b3-34d7-43e2-a1ab-b9e91e987dfa\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b2178c98-9d0e-45f1-9e60-47f9763367e9\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"b85669b0-d5f9-4b87-8a5b-617120e76679\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"ccd710e6-baf8-414e-b3ce-fdba41bb9692\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"d2a22e67-99a2-4f6c-b042-38c9647d0ea0\"));\n\n            migrationBuilder.DeleteData(\n                table: \"RolePermissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"da299567-1c2c-4912-977f-70a7a102ffb4\"));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5111));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5118));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5120));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5122));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5124));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5127));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5130));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5132));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5135));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5138));\n\n            migrationBuilder.UpdateData(\n                table: \"Permissions\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5179));\n\n            migrationBuilder.InsertData(\n                table: \"RolePermissions\",\n                columns: new[] { \"Id\", \"AssignedAt\", \"AssignedBy\", \"IsActive\", \"IsRevoked\", \"PermissionId\", \"RoleId\" },\n                values: new object[,]\n                {\n                    { new Guid(\"0478c3a5-283b-442d-a51d-909c2b0172d3\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5559), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"0759059d-e71d-4198-b3b9-58d12c8200f9\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5539), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000009\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"15b8aca8-7fb9-4e9f-8f59-9e88bd26b0ec\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5524), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000006\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"18c92b80-4c5e-4d54-b364-8b3953000241\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5515), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000003\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"251c0b3d-3bb2-4e11-a64f-190d457306d0\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5509), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"40fe8966-eefb-43ef-b8ca-677f107d33dc\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5535), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000008\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"5f2a715d-4a83-4669-b42c-1df495d349b8\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5554), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000001\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"65ffa364-2c5a-45e0-af28-5a1730dc9d94\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5551), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000004\") },\n                    { new Guid(\"8ce09038-350b-4f34-9467-38ba611c61bd\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5569), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"8e58d8a5-dc1f-4fb9-9198-f868ae63fc70\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5542), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000010\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"a471818e-7c64-4c7f-869c-545938ad9217\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5533), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"aa7bf421-9fdc-4a77-b822-29b6a5a1c131\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5518), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000004\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"af77b30e-d9b4-4052-b378-4b862fe1a86c\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5512), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000002\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"b30d4433-c4b8-4131-8072-bb52a720f964\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5572), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000005\") },\n                    { new Guid(\"cddcfa62-e4bb-4433-83fa-42bce5951025\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5499), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000000\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"e0e5dc1c-9235-4fa8-863d-8a57c01e8a24\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5522), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000005\"), new Guid(\"00000000-0000-0000-0000-000000000001\") },\n                    { new Guid(\"f6933ae2-c83d-4652-bdd6-559684858967\"), new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(5557), null, true, false, new Guid(\"30000000-0000-0000-0000-000000000007\"), new Guid(\"00000000-0000-0000-0000-000000000004\") }\n                });\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3900));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3902));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3904));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3905));\n\n            migrationBuilder.UpdateData(\n                table: \"Roles\",\n                keyColumn: \"Id\",\n                keyValue: new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                column: \"CreatedAt\",\n                value: new DateTime(2025, 8, 6, 8, 3, 13, 784, DateTimeKind.Utc).AddTicks(3906));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/20250810122422_InitialCreateToNeon.Designer.cs",
          "sha256": "b6ad3c4f18b9393d7e38325a2a5719edaf0b70256efb0db28c6a20d03ef8544c",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20250810122422_InitialCreateToNeon\")]\n    partial class InitialCreateToNeon\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8372),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8380),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8382),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8385),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8387),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8390),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8392),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8394),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8397),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8400),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8401),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7678),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7680),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7681),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7682),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7684),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"8730c3e3-5f76-4acd-bba1-619e983d37d4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8700),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"48b591be-65f7-451f-b719-f327dada5ad4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8705),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b2178c98-9d0e-45f1-9e60-47f9763367e9\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8714),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"077411e5-1f1b-4e94-90b9-febb503d955a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8718),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"da299567-1c2c-4912-977f-70a7a102ffb4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8721),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"43751848-5176-482e-8854-cfe0c1fe1476\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8725),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ccd710e6-baf8-414e-b3ce-fdba41bb9692\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8776),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d2a22e67-99a2-4f6c-b042-38c9647d0ea0\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8780),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"106019ac-e3ba-47c5-aa3d-3de8459189f7\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8783),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2cd29bd3-f812-435e-bfa4-dcbe753c8a0a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8787),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a47785b3-34d7-43e2-a1ab-b9e91e987dfa\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8792),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9695b1ca-cf9e-4ba8-b608-25ba5ed6c578\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8802),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9efa0b93-4944-4e5c-b8a8-7d85661a26a3\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8805),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"89b52866-c0a4-4988-aee5-e5afb670f1db\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8807),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8988065d-f1a5-4e5c-aff1-36b30317c807\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8810),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b85669b0-d5f9-4b87-8a5b-617120e76679\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8817),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"348b34f4-6d0a-4505-a7f9-f67a64e867f6\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8820),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Migrations/AppDbContextModelSnapshot.cs",
          "sha256": "349e367cabd2c25a11dab71d3c96436aa9bb09e5afda148eda59667e869a933d",
          "language": "csharp",
          "content": "// <auto-generated />\nusing System;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\nusing Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;\nusing xbytechat.api;\n\n#nullable disable\n\nnamespace xbytechat.api.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    partial class AppDbContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"8.0.18\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 63);\n\n            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"TagId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"TagId\");\n\n                    b.ToTable(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsIncoming\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"RefMessageId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RenderedBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"MessageLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RefreshToken\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"RefreshTokenExpiry\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"AssignedAgentId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsArchived\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsAutomationPaused\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsFavorite\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCTAInteraction\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"LastClickedProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"LastContactedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LeadSource\")\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"NextFollowUpAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.ToTable(\"Contacts\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Note\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"EditedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsInternal\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPinned\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Notes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Reminder\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"CompletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"DueAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRecurring\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastCTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LinkedCampaign\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int?>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"RecurrencePattern\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ReminderType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"SendWhatsappNotification\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Reminders\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ColorHex\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemTag\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastUsedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Tags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Group\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Permissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            Code = \"dashboard.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8372),\n                            Description = \"Permission for dashboard.view\",\n                            IsActive = true,\n                            Name = \"dashboard.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            Code = \"campaign.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8380),\n                            Description = \"Permission for campaign.view\",\n                            IsActive = true,\n                            Name = \"campaign.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            Code = \"campaign.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8382),\n                            Description = \"Permission for campaign.create\",\n                            IsActive = true,\n                            Name = \"campaign.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            Code = \"campaign.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8385),\n                            Description = \"Permission for campaign.delete\",\n                            IsActive = true,\n                            Name = \"campaign.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            Code = \"product.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8387),\n                            Description = \"Permission for product.view\",\n                            IsActive = true,\n                            Name = \"product.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            Code = \"product.create\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8390),\n                            Description = \"Permission for product.create\",\n                            IsActive = true,\n                            Name = \"product.create\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            Code = \"product.delete\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8392),\n                            Description = \"Permission for product.delete\",\n                            IsActive = true,\n                            Name = \"product.delete\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            Code = \"contacts.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8394),\n                            Description = \"Permission for contacts.view\",\n                            IsActive = true,\n                            Name = \"contacts.view\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            Code = \"tags.edit\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8397),\n                            Description = \"Permission for tags.edit\",\n                            IsActive = true,\n                            Name = \"tags.edit\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            Code = \"admin.business.approve\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8400),\n                            Description = \"Permission for admin.business.approve\",\n                            IsActive = true,\n                            Name = \"admin.business.approve\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            Code = \"admin.logs.view\",\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8401),\n                            Description = \"Permission for admin.logs.view\",\n                            IsActive = true,\n                            Name = \"admin.logs.view\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Code\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Plans\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"PlanId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"PlanId\");\n\n                    b.ToTable(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsSystemDefined\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Roles\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000001\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7678),\n                            Description = \"Super Admin\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"admin\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000002\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7680),\n                            Description = \"Business Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"partner\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000003\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7681),\n                            Description = \"Reseller Partner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"reseller\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000004\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7682),\n                            Description = \"Business Owner\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"business\"\n                        },\n                        new\n                        {\n                            Id = new Guid(\"00000000-0000-0000-0000-000000000005\"),\n                            CreatedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(7684),\n                            Description = \"Staff\",\n                            IsActive = true,\n                            IsSystemDefined = false,\n                            Name = \"staff\"\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"RoleId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"RolePermissions\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = new Guid(\"8730c3e3-5f76-4acd-bba1-619e983d37d4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8700),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"48b591be-65f7-451f-b719-f327dada5ad4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8705),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b2178c98-9d0e-45f1-9e60-47f9763367e9\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8714),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000002\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"077411e5-1f1b-4e94-90b9-febb503d955a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8718),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000003\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"da299567-1c2c-4912-977f-70a7a102ffb4\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8721),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"43751848-5176-482e-8854-cfe0c1fe1476\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8725),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000005\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"ccd710e6-baf8-414e-b3ce-fdba41bb9692\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8776),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000006\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"d2a22e67-99a2-4f6c-b042-38c9647d0ea0\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8780),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"106019ac-e3ba-47c5-aa3d-3de8459189f7\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8783),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000008\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"2cd29bd3-f812-435e-bfa4-dcbe753c8a0a\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8787),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000009\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"a47785b3-34d7-43e2-a1ab-b9e91e987dfa\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8792),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000010\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000001\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9695b1ca-cf9e-4ba8-b608-25ba5ed6c578\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8802),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"9efa0b93-4944-4e5c-b8a8-7d85661a26a3\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8805),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000001\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"89b52866-c0a4-4988-aee5-e5afb670f1db\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8807),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"8988065d-f1a5-4e5c-aff1-36b30317c807\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8810),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000004\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000004\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"b85669b0-d5f9-4b87-8a5b-617120e76679\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8817),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000000\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        },\n                        new\n                        {\n                            Id = new Guid(\"348b34f4-6d0a-4505-a7f9-f67a64e867f6\"),\n                            AssignedAt = new DateTime(2025, 8, 10, 12, 24, 21, 784, DateTimeKind.Utc).AddTicks(8820),\n                            IsActive = true,\n                            IsRevoked = false,\n                            PermissionId = new Guid(\"30000000-0000-0000-0000-000000000007\"),\n                            RoleId = new Guid(\"00000000-0000-0000-0000-000000000005\")\n                        });\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"AssignedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"AssignedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsGranted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsRevoked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid>(\"PermissionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"PermissionId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AuditTrail.Models.AuditLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ActionType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Location\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"PerformedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PerformedByUserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RoleAtTime\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserAgent\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AuditLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDefaultTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Keyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UseCase\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetHandle\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TargetNodeId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowEdges\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ConfigJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Label\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodeType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Order\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyFlowNodes\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ReplyContent\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"TriggeredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutoReplyLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FlowName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IndustryTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MediaUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Priority\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ReplyMessage\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"FlowId\");\n\n                    b.ToTable(\"AutoReplyRules\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Automation.Models.AutomationFlow\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"EdgesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"NodesJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerKeyword\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"AutomationFlows\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Address\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ApprovedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ApprovedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessEmail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"BusinessName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CompanyPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CreatedByPartnerId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Industry\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsApproved\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastLoginAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LogoUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Phone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RepresentativeName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Tags\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Website\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Businesses\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FlowName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<bool>(\"IsPublished\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTAFlowConfigs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CTAFlowConfigId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<float?>(\"PositionX\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<float?>(\"PositionY\")\n                        .HasColumnType(\"real\");\n\n                    b.Property<string>(\"RequiredSource\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RequiredTag\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"StepOrder\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"TemplateToSend\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TriggerButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowConfigId\");\n\n                    b.ToTable(\"CTAFlowSteps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonSubType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonValue\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"CTAFlowStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"NextStepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CTAFlowStepId\");\n\n                    b.ToTable(\"FlowButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowExecutionLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ExecutedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"FlowId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RawResponse\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"StepName\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"Success\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"TrackingLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TriggeredByButton\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FlowExecutionLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ButtonType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"TargetUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CTADefinitions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CampaignType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"DeletedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeletedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FollowUpTemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageCaption\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsDeleted\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageTemplate\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ScheduledAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"SourceCampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateParameters\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CtaId\");\n\n                    b.HasIndex(\"SourceCampaignId\");\n\n                    b.ToTable(\"Campaigns\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsFromTemplate\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<int>(\"Position\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Type\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Value\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignButtons\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"OverrideNextTemplate\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.ToTable(\"CampaignFlowOverrides\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"IsAutoTagged\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessagePreview\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"CampaignRecipients\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AllowRetry\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ClickType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"DeviceInfo\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"IpAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsClicked\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastRetryAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"LastRetryStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MacAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageBody\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"RecipientId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<int>(\"RetryCount\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"SendStatus\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"SourceChannel\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.HasIndex(\"RecipientId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"CampaignSendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.CatalogClickLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"BotId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAJourney\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CategoryBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CtaId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"PlanSnapshot\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ProductBrowsed\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ProductId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"RefMessageId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Source\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UserPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"CatalogClickLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Catalog.Models.Product\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Currency\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"MostClickedCTA\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<decimal>(\"Price\")\n                        .HasColumnType(\"numeric\");\n\n                    b.Property<int>(\"TotalClicks\")\n                        .HasColumnType(\"integer\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Products\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(200)\n                        .HasColumnType(\"character varying(200)\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Plan\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\", \"FeatureName\")\n                        .IsUnique();\n\n                    b.ToTable(\"FeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.FeatureMaster\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasMaxLength(250)\n                        .HasColumnType(\"character varying(250)\");\n\n                    b.Property<string>(\"DisplayName\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"FeatureCode\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<string>(\"Group\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FeatureMaster\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.FeatureAccessModule.Models.UserFeatureAccess\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ModifiedByUserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Notes\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"UserFeatureAccess\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ChatSessionState\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastUpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Mode\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"UpdatedBy\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"ChatSessionStates\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Inbox.Models.ContactRead\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"LastReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<Guid>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"ContactId\", \"UserId\")\n                        .IsUnique();\n\n                    b.ToTable(\"ContactReads\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Channel\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CustomerProfileName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"DeliveredAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int?>(\"ErrorCode\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSessionOpen\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<long?>(\"MetaTimestamp\")\n                        .HasColumnType(\"bigint\");\n\n                    b.Property<string>(\"RawPayload\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"ReadAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"RecipientNumber\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime?>(\"SentAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"Status\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateCategory\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"TemplateName\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"UserId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"MessageStatusLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.PlanManagement.Models.PlanFeatureMatrix\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"FeatureName\")\n                        .IsRequired()\n                        .HasMaxLength(50)\n                        .HasColumnType(\"character varying(50)\");\n\n                    b.Property<bool>(\"IsEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PlanName\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"PlanFeatureMatrix\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Browser\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ButtonText\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"CampaignId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CampaignSendLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"City\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<DateTime>(\"ClickedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ClickedVia\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ContactPhone\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Country\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"DeviceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"FollowUpSent\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"IPAddress\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"LastInteractionType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"MessageId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"MessageLogId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Referrer\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"SessionId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"SourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"SourceType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"StepId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"TemplateId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid?>(\"ThreadId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CampaignId\");\n\n                    b.HasIndex(\"CampaignSendLogId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.HasIndex(\"MessageLogId\");\n\n                    b.ToTable(\"TrackingLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.FailedWebhookLog\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"ErrorMessage\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"FailureType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"RawJson\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SourceModule\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"FailedWebhookLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Webhooks.Models.WebhookSettings\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<bool>(\"AutoCleanupEnabled\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<DateTime?>(\"LastCleanupAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"WebhookSettings\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"integer\");\n\n                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid?>(\"CTASourceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"CTASourceType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"CTAType\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Category\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<Guid>(\"ContactId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Data\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"EventType\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<bool>(\"IsSystemGenerated\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<Guid?>(\"ReferenceId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"Source\")\n                        .HasColumnType(\"text\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\");\n\n                    b.HasIndex(\"ContactId\");\n\n                    b.ToTable(\"LeadTimelines\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"Plan\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"QuotaResetDate\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<int>(\"RemainingMessages\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<int>(\"TotalMonthlyQuota\")\n                        .HasColumnType(\"integer\");\n\n                    b.Property<DateTime>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<decimal>(\"WalletBalance\")\n                        .HasColumnType(\"numeric\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"BusinessPlanInfos\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.Property<Guid>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<string>(\"ApiToken\")\n                        .IsRequired()\n                        .HasMaxLength(1000)\n                        .HasColumnType(\"character varying(1000)\");\n\n                    b.Property<string>(\"ApiUrl\")\n                        .IsRequired()\n                        .HasMaxLength(500)\n                        .HasColumnType(\"character varying(500)\");\n\n                    b.Property<Guid>(\"BusinessId\")\n                        .HasColumnType(\"uuid\");\n\n                    b.Property<DateTime>(\"CreatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"boolean\");\n\n                    b.Property<string>(\"PhoneNumberId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"SenderDisplayName\")\n                        .HasMaxLength(100)\n                        .HasColumnType(\"character varying(100)\");\n\n                    b.Property<DateTime?>(\"UpdatedAt\")\n                        .HasColumnType(\"timestamp with time zone\");\n\n                    b.Property<string>(\"WabaId\")\n                        .HasColumnType(\"text\");\n\n                    b.Property<string>(\"WhatsAppBusinessNumber\")\n                        .IsRequired()\n                        .HasMaxLength(20)\n                        .HasColumnType(\"character varying(20)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"BusinessId\")\n                        .IsUnique();\n\n                    b.ToTable(\"WhatsAppSettings\");\n                });\n\n            modelBuilder.Entity(\"ContactTag\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Tag\", \"Tag\")\n                        .WithMany(\"ContactTags\")\n                        .HasForeignKey(\"TagId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"Tag\");\n                });\n\n            modelBuilder.Entity(\"MessageLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany(\"MessageLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"Users\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.PlanPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany()\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Plan\", \"Plan\")\n                        .WithMany(\"PlanPermissions\")\n                        .HasForeignKey(\"PlanId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Plan\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.RolePermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Role\", \"Role\")\n                        .WithMany(\"RolePermissions\")\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"Role\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.UserPermission\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AccessControl.Models.Permission\", \"Permission\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"PermissionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"UserPermissions\")\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Permission\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowEdge\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyFlowNode\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.OwnsOne(\"xbytechat.api.Features.AutoReplyBuilder.Models.Position\", \"Position\", b1 =>\n                        {\n                            b1.Property<Guid>(\"AutoReplyFlowNodeId\")\n                                .HasColumnType(\"uuid\");\n\n                            b1.Property<double>(\"X\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.Property<double>(\"Y\")\n                                .HasColumnType(\"double precision\");\n\n                            b1.HasKey(\"AutoReplyFlowNodeId\");\n\n                            b1.ToTable(\"AutoReplyFlowNodes\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"AutoReplyFlowNodeId\");\n                        });\n\n                    b.Navigation(\"Flow\");\n\n                    b.Navigation(\"Position\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AutoReplyBuilder.Models.AutoReplyRule\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.AutoReplyBuilder.Flows.Models.AutoReplyFlow\", \"Flow\")\n                        .WithMany()\n                        .HasForeignKey(\"FlowId\");\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", \"Flow\")\n                        .WithMany(\"Steps\")\n                        .HasForeignKey(\"CTAFlowConfigId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Flow\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.FlowButtonLink\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", \"Step\")\n                        .WithMany(\"ButtonLinks\")\n                        .HasForeignKey(\"CTAFlowStepId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Step\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"Campaigns\")\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CTAManagement.Models.CTADefinition\", \"Cta\")\n                        .WithMany()\n                        .HasForeignKey(\"CtaId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"SourceCampaign\")\n                        .WithMany()\n                        .HasForeignKey(\"SourceCampaignId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Cta\");\n\n                    b.Navigation(\"SourceCampaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignButton\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MultiButtons\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignFlowOverride\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Campaign\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Restrict)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"Recipients\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"CampaignId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\")\n                        .OnDelete(DeleteBehavior.Restrict);\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", \"Recipient\")\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"RecipientId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", null)\n                        .WithMany(\"SendLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n\n                    b.Navigation(\"Recipient\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.MessageManagement.DTOs.MessageStatusLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"BusinessId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.AuthModule.Models.User\", \"User\")\n                        .WithMany(\"MessageStatusLogs\")\n                        .HasForeignKey(\"UserId\");\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"User\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.Tracking.Models.TrackingLog\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", \"Campaign\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignId\");\n\n                    b.HasOne(\"xbytechat.api.Features.CampaignTracking.Models.CampaignSendLog\", \"CampaignSendLog\")\n                        .WithMany()\n                        .HasForeignKey(\"CampaignSendLogId\");\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\");\n\n                    b.HasOne(\"MessageLog\", \"MessageLog\")\n                        .WithMany()\n                        .HasForeignKey(\"MessageLogId\");\n\n                    b.Navigation(\"Campaign\");\n\n                    b.Navigation(\"CampaignSendLog\");\n\n                    b.Navigation(\"Contact\");\n\n                    b.Navigation(\"MessageLog\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.xbTimelines.Models.LeadTimeline\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithMany()\n                        .HasForeignKey(\"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"xbytechat.api.CRM.Models.Contact\", \"Contact\")\n                        .WithMany()\n                        .HasForeignKey(\"ContactId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n\n                    b.Navigation(\"Contact\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", \"Business\")\n                        .WithOne(\"BusinessPlanInfo\")\n                        .HasForeignKey(\"xbytechat.api.Models.BusinessModel.BusinessPlanInfo\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Business\");\n                });\n\n            modelBuilder.Entity(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", b =>\n                {\n                    b.HasOne(\"xbytechat.api.Features.BusinessModule.Models.Business\", null)\n                        .WithOne(\"WhatsAppSettings\")\n                        .HasForeignKey(\"xbytechat_api.WhatsAppSettings.Models.WhatsAppSettingEntity\", \"BusinessId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.AuthModule.Models.User\", b =>\n                {\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"SendLogs\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Contact\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.CRM.Models.Tag\", b =>\n                {\n                    b.Navigation(\"ContactTags\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Permission\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"UserPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Plan\", b =>\n                {\n                    b.Navigation(\"PlanPermissions\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.AccessControl.Models.Role\", b =>\n                {\n                    b.Navigation(\"RolePermissions\");\n\n                    b.Navigation(\"Users\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.BusinessModule.Models.Business\", b =>\n                {\n                    b.Navigation(\"BusinessPlanInfo\");\n\n                    b.Navigation(\"Campaigns\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"Users\");\n\n                    b.Navigation(\"WhatsAppSettings\")\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowConfig\", b =>\n                {\n                    b.Navigation(\"Steps\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CTAFlowBuilder.Models.CTAFlowStep\", b =>\n                {\n                    b.Navigation(\"ButtonLinks\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.Campaign\", b =>\n                {\n                    b.Navigation(\"MessageLogs\");\n\n                    b.Navigation(\"MessageStatusLogs\");\n\n                    b.Navigation(\"MultiButtons\");\n\n                    b.Navigation(\"Recipients\");\n\n                    b.Navigation(\"SendLogs\");\n                });\n\n            modelBuilder.Entity(\"xbytechat.api.Features.CampaignModule.Models.CampaignRecipient\", b =>\n                {\n                    b.Navigation(\"SendLogs\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Models/MessagesModel/MessageLog.cs",
          "sha256": "45d9f23504249cda4ca6119267f52c07de4eb971f9d0ec72465331ce4b38865d",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.BusinessModule.Models;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\npublic class MessageLog\n{\n    public Guid Id { get; set; }\n\n    public string? MessageId { get; set; } // WAMID from WhatsApp — alternate key\n   // public ICollection<MessageStatusLog> StatusUpdates { get; set; } = new List<MessageStatusLog>();\n\n    // 🔗 FK to Business\n    public Guid BusinessId { get; set; }\n    public Business Business { get; set; }\n\n    // 📨 Message Info\n    public string RecipientNumber { get; set; }\n    public string MessageContent { get; set; }\n    public string? MediaUrl { get; set; }\n\n    // 🧾 Status Info\n    public string Status { get; set; } = \"Queued\";\n    public string? ErrorMessage { get; set; }\n    public string? RawResponse { get; set; }\n\n    // 🕒 Timestamps\n    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n    public DateTime? SentAt { get; set; }\n\n    // 🔗 Contact (optional)\n    public Guid? ContactId { get; set; }\n    public Contact? Contact { get; set; }\n\n    // 🔗 Campaign (optional)\n    public Guid? CampaignId { get; set; }\n\n    // 🔗 CTA Flow Tracking\n    public Guid? CTAFlowConfigId { get; set; }  // Which visual flow config this message belongs to\n    public Guid? CTAFlowStepId { get; set; }    // Which flow step (template) this message originated from\n    public Campaign? SourceCampaign { get; set; } // renamed from \"Campaign\" to avoid name conflict\n\n    public bool IsIncoming { get; set; }\n\n    public string? RenderedBody { get; set; } // actual resolved message with parameters\n\n    public Guid? RefMessageId { get; set; }\n    public string? Source { get; set; } // e.g., \"campaign\", \"flow\", \"manual\"\n}\n"
        },
        {
          "path": "xbytechat-api/Models/WhatsAppResult.cs",
          "sha256": "cd627fc7d90a4da1360bb14f8be3109068a83b746a1b782f257095f68ea5279d",
          "language": "csharp",
          "content": "namespace xbytechat.api.Models\n{\n    public class WhatsAppResult\n    {\n        public bool Success { get; set; }\n        public string? ErrorMessage { get; set; }\n        public string? RawResponse { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/PayloadBuilders/ImageMessagePayloadBuilder.cs",
          "sha256": "71c13746d4e6cc70735324c5c2c755b80e4c7d032e71a97969c3efe007aa68ae",
          "language": "csharp",
          "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    /// <summary>\n    /// Builds payload for sending image messages with media URL.\n    /// </summary>\n    public class ImageMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var imageDto = dto as ImageMessageDto;\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = imageDto.RecipientNumber,\n                type = \"image\",\n                image = new\n                {\n                    link = imageDto.MediaUrl\n                }\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/PayloadBuilders/IWhatsAppPayloadBuilder.cs",
          "sha256": "2a2ff0592129a93fea8aa20df5fe1e8454dbfbe1640d5a1e15963af93dcd7922",
          "language": "csharp",
          "content": "namespace xbytechat.api.PayloadBuilders\n{\n    using xbytechat.api.DTOs.Messages;\n\n    public interface IWhatsAppPayloadBuilder\n    {\n        object BuildPayload(BaseMessageDto dto);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/PayloadBuilders/TemplateMessagePayloadBuilder.cs",
          "sha256": "70f39daad2789c61f03ade184abdf96a43221189b751178dfa1955c123b5f884",
          "language": "csharp",
          "content": "using xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TemplateMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var templateDto = dto as TemplateMessageDto;\n            if (templateDto == null)\n                throw new InvalidCastException(\"DTO is not of type TemplateMessageDto.\");\n\n            var components = new List<object>();\n\n            // 🧠 Body parameters\n            if (templateDto.TemplateParameters != null && templateDto.TemplateParameters.Any())\n            {\n                components.Add(new\n                {\n                    type = \"body\",\n                    parameters = templateDto.TemplateParameters.Select(p => new\n                    {\n                        type = \"text\",\n                        text = p\n                    }).ToList()\n                });\n            }\n\n            // ✅ Add button placeholders (Meta requires them for static buttons too)\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"url\",\n                index = \"0\",\n                parameters = new object[] { }  // 👈 no parameters if static URL\n            });\n\n            components.Add(new\n            {\n                type = \"button\",\n                sub_type = \"phone_number\",\n                index = \"1\",\n                parameters = new object[] { }  // 👈 no parameters if static phone\n            });\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = templateDto.RecipientNumber,\n                type = \"template\",\n                template = new\n                {\n                    name = templateDto.TemplateName,\n                    language = new\n                    {\n                        code = templateDto.LanguageCode ?? \"en_US\"\n                    },\n                    components\n                }\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/PayloadBuilders/TextMessagePayloadBuilder.cs",
          "sha256": "ce8e2e75c7865d9b08bebb267ceb84f7cdd0e77bd971c609576979b02726a590",
          "language": "csharp",
          "content": "// File: PayloadBuilders/TextMessagePayloadBuilder.cs\nusing xbytechat.api.DTOs.Messages;\n\nnamespace xbytechat.api.PayloadBuilders\n{\n    public class TextMessagePayloadBuilder : IWhatsAppPayloadBuilder\n    {\n        public object BuildPayload(BaseMessageDto dto)\n        {\n            var textDto = dto as TextMessageDto;\n\n            if (textDto == null)\n                throw new InvalidCastException(\"DTO is not of type TextMessageDto.\");\n\n            return new\n            {\n                messaging_product = \"whatsapp\",\n                to = textDto.RecipientNumber,\n                type = \"text\",\n                text = new\n                {\n                    body = textDto.MessageContent\n                }\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Program.cs",
          "sha256": "cbd0b2091feaea5ac7bc6b40d472b50be5e0b5f60c434bf95ab08444581385b4",
          "language": "csharp",
          "content": "using FluentValidation;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Serilog;\nusing Serilog.Exceptions;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing xbytechat.api;\nusing xbytechat.api.AuthModule.Services;\nusing xbytechat.api.CRM.Interfaces;\nusing xbytechat.api.CRM.Services;\nusing xbytechat.api.Features.AccessControl.Services;\nusing xbytechat.api.Features.AuditTrail.Services;\nusing xbytechat.api.Features.CampaignModule.Services;\nusing xbytechat.api.Features.CampaignTracking.Services;\nusing xbytechat.api.Features.Catalog.Services;\nusing xbytechat.api.Features.MessageManagement.Services;\nusing xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.MessagesEngine.Services;\nusing xbytechat.api.Features.PlanManagement.Services;\nusing xbytechat.api.Features.TemplateModule.Services;\nusing xbytechat.api.Features.Webhooks.Services;\nusing xbytechat.api.Features.Webhooks.Services.Processors;\nusing xbytechat.api.Features.Webhooks.Services.Resolvers;\nusing xbytechat.api.Features.xbTimeline.Services;\nusing xbytechat.api.Features.xbTimelines.Services;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Middlewares;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Implementations;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services;\nusing xbytechat.api.Services.Messages.Implementations;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing xbytechat_api.WhatsAppSettings.Services;\nusing xbytechat_api.WhatsAppSettings.Validators;\nusing EnginePayloadBuilders = xbytechat.api.Features.MessagesEngine.PayloadBuilders;\nusing xbytechat.api.Features.CTAManagement.Services;\nusing xbytechat.api.Features.Tracking.Services;\nusing xbytechat.api.Features.Webhooks.BackgroundWorkers;\nusing xbytechat.api.Features.CTAFlowBuilder.Services;\nusing xbytechat.api.Features.FlowAnalytics.Services;\nusing xbytechat.api.Features.Inbox.Repositories;\nusing xbytechat.api.Features.Inbox.Services;\nusing xbytechat.api.Features.Inbox.Hubs;\nusing Microsoft.AspNetCore.SignalR;\nusing xbytechat.api.SignalR;\nusing xbytechat.api.Features.AutoReplyBuilder.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Services;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\nusing xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\nusing xbytechat.api.Features.BusinessModule.Services;\nusing xbytechat.api.Features.FeatureAccessModule.Services;\nusing xbytechat.api.Features.ReportingModule.Services;\nusing xbytechat.api.Features.Automation.Repositories;\nusing xbytechat.api.Features.Automation.Services;\nusing Npgsql;\nusing System.Net;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n#region 🔷 Serilog Configuration\nLog.Logger = new LoggerConfiguration()\n    .Enrich.WithExceptionDetails()\n    .Enrich.FromLogContext()\n    .MinimumLevel.Information()\n    .WriteTo.Console()\n    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n    .CreateLogger();\nbuilder.Host.UseSerilog();\n#endregion\n\n#region 🔷 Database Setup (PostgreSQL)\nvar connStr = builder.Configuration.GetConnectionString(\"DefaultConnection\");\nbuilder.Services.AddDbContext<AppDbContext>(options =>\n    options.UseNpgsql(connStr).EnableSensitiveDataLogging()\n);\nConsole.WriteLine($\"[DEBUG] Using Connection String: {connStr}\");\n#endregion\n\n#region 🔷 Generic Repository Pattern\nbuilder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));\n#endregion\n\n#region 🔷 Core Modules (Business/Auth)\nbuilder.Services.AddScoped<IBusinessService, BusinessService>();\nbuilder.Services.AddScoped<IAuthService, AuthService>();\nbuilder.Services.AddScoped<IJwtTokenService, JwtTokenService>();\n#endregion\n\n#region 🔷 Messaging Services & WhatsApp\nbuilder.Services.AddScoped<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddHttpClient<IMessageService, MessageService>();\nbuilder.Services.AddScoped<WhatsAppService>();\nbuilder.Services.AddScoped<IMessageStatusService, MessageStatusService>();\nbuilder.Services.AddScoped<ITemplateMessageSender, TemplateMessageSender>();\n#endregion\n\n#region 🔷 Payload Builders\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TemplateMessagePayloadBuilder>();\n#endregion\n\n#region 🔷 Catalog & CRM Modules\nbuilder.Services.AddScoped<IProductService, ProductService>();\nbuilder.Services.AddScoped<ICatalogTrackingService, CatalogTrackingService>();\nbuilder.Services.AddScoped<ICatalogDashboardService, CatalogDashboardService>();\nbuilder.Services.AddScoped<IContactService, ContactService>();\nbuilder.Services.AddScoped<ITagService, TagService>();\nbuilder.Services.AddScoped<IReminderService, ReminderService>();\nbuilder.Services.AddScoped<INoteService, NoteService>();\nbuilder.Services.AddScoped<ITimelineService, TimelineService>();\n#endregion\n\n#region 🔷 Campaign Management\nbuilder.Services.AddScoped<ICampaignService, CampaignService>();\nbuilder.Services.AddScoped<ICampaignSendLogService, CampaignSendLogService>();\nbuilder.Services.AddScoped<ICampaignSendLogEnricher, CampaignSendLogEnricher>();\nbuilder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\nbuilder.Services.AddScoped<ICampaignRetryService, CampaignRetryService>();\nbuilder.Services.AddHttpClient<IWhatsAppTemplateService, WhatsAppTemplateService>();\nbuilder.Services.AddScoped<ICampaignRecipientService, CampaignRecipientService>();\n#endregion\n\n#region 🔷 Webhook Management\nbuilder.Services.AddScoped<IWhatsAppWebhookService, WhatsAppWebhookService>();\nbuilder.Services.AddScoped<IWhatsAppWebhookDispatcher, WhatsAppWebhookDispatcher>();\nbuilder.Services.AddScoped<IStatusWebhookProcessor, StatusWebhookProcessor>();\nbuilder.Services.AddScoped<ITemplateWebhookProcessor, TemplateWebhookProcessor>();\nbuilder.Services.AddScoped<IMessageIdResolver, MessageIdResolver>();\nbuilder.Services.AddScoped<IClickWebhookProcessor, ClickWebhookProcessor>();\nbuilder.Services.AddScoped<ILeadTimelineService, LeadTimelineService>();\nbuilder.Services.AddScoped<IFailedWebhookLogService, FailedWebhookLogService>();\nbuilder.Services.AddSingleton<IWebhookQueueService, WebhookQueueService>();\nbuilder.Services.AddHostedService<WebhookQueueWorker>();\nbuilder.Services.AddHostedService<FailedWebhookLogCleanupService>();\nbuilder.Services.AddScoped<IMaintenanceService, MaintenanceService>();\nbuilder.Services.AddHostedService<WebhookAutoCleanupWorker>();\n#endregion\n\n#region 🔷 Access Control & Permission\nbuilder.Services.AddScoped<IAccessControlService, AccessControlService>();\nbuilder.Services.AddScoped<IFeatureAccessEvaluator, FeatureAccessEvaluator>();\nbuilder.Services.AddScoped<IFeatureAccessService, FeatureAccessService>();\n#endregion\n\n#region 🔷 Tracking\nbuilder.Services.AddScoped<ITrackingService, TrackingService>();\nbuilder.Services.AddScoped<IMessageAnalyticsService, MessageAnalyticsService>();\n#endregion\n\n#region 🔷 Flow Builder\nbuilder.Services.AddScoped<ICTAFlowService, CTAFlowService>();\n#endregion\n\n#region 🔷 Audit Trail Logging\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddScoped<IAuditLogService, AuditLogService>();\n#endregion\n\n#region 🔷 WhatsApp settings\nbuilder.Services.AddScoped<IWhatsAppSettingsService, WhatsAppSettingsService>();\nbuilder.Services.AddValidatorsFromAssemblyContaining<SaveWhatsAppSettingValidator>();\nbuilder.Services.AddHttpClient<IMessageEngineService, MessageEngineService>();\nbuilder.Services.AddScoped<IWhatsAppTemplateFetcherService, WhatsAppTemplateFetcherService>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TextMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.ImageMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.TemplateMessagePayloadBuilder>();\nbuilder.Services.AddScoped<EnginePayloadBuilders.CtaMessagePayloadBuilder>();\nbuilder.Services.AddScoped<IPlanManager, PlanManager>();\nbuilder.Services.AddScoped<ICTAManagementService, CTAManagementService>();\n#endregion\n\n#region 🔷 Inbox\nbuilder.Services.AddScoped<IFlowAnalyticsService, FlowAnalyticsService>();\nbuilder.Services.AddScoped<IInboxService, InboxService>();\nbuilder.Services.AddScoped<IInboundMessageProcessor, InboundMessageProcessor>();\nbuilder.Services.AddScoped<IInboxRepository, InboxRepository>();\n#endregion\n\n#region 🔷 AutoReplyBuilder Module\nbuilder.Services.AddScoped<IAutoReplyRepository, AutoReplyRepository>();\nbuilder.Services.AddScoped<IAutoReplyService, AutoReplyService>();\nbuilder.Services.AddScoped<IAutoReplyFlowRepository, AutoReplyFlowRepository>();\nbuilder.Services.AddScoped<IAutoReplyFlowService, AutoReplyFlowService>();\nbuilder.Services.AddScoped<IAutoReplyRuntimeService, AutoReplyRuntimeService>();\nbuilder.Services.AddScoped<IChatSessionStateService, ChatSessionStateService>();\nbuilder.Services.AddScoped<IAgentAssignmentService, AgentAssignmentService>();\n#endregion\n\n#region 🔷 Automation Module\nbuilder.Services.AddScoped<IAutomationFlowRepository, AutomationFlowRepository>();\nbuilder.Services.AddScoped<IAutomationRunner, AutomationRunner>();\nbuilder.Services.AddScoped<IAutomationService, AutomationService>();\n#endregion\n\n#region 🔐 JWT Authentication (Bearer token only, no cookies)\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = jwtSettings[\"Issuer\"],\n            ValidAudience = jwtSettings[\"Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n            ClockSkew = TimeSpan.Zero\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnAuthenticationFailed = context =>\n            {\n                if (context.Exception is SecurityTokenExpiredException)\n                {\n                    context.Response.StatusCode = 401;\n                    context.Response.ContentType = \"application/json\";\n                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n                }\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n#endregion\n\n#region 🌐 CORS Setup (Bearer mode, no credentials)\n//var allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\n// 🌐 Read allowed origins (array or single string) + log them\n//var allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\n//if (allowedOrigins == null || allowedOrigins.Length == 0)\n//{\n//    var raw = builder.Configuration[\"Cors:AllowedOrigins\"]; // supports single string or comma/semicolon list\n//    if (!string.IsNullOrWhiteSpace(raw))\n//        allowedOrigins = raw.Split(new[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n//}\n//Console.WriteLine(\"[CORS] Allowed origins => \" + string.Join(\", \", allowedOrigins ?? Array.Empty<string>()));\nvar allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\nif (allowedOrigins == null || allowedOrigins.Length == 0)\n{\n    var raw = builder.Configuration[\"Cors:AllowedOrigins\"];\n    if (!string.IsNullOrWhiteSpace(raw))\n        allowedOrigins = raw.Split(new[] { ',', ';', ' ' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);\n}\nConsole.WriteLine(\"[CORS] Allowed origins => \" + string.Join(\", \", allowedOrigins ?? Array.Empty<string>()));\n\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowFrontend\", policy =>\n    {\n        policy\n            .WithOrigins(allowedOrigins ?? Array.Empty<string>())\n            .AllowAnyHeader()\n            .AllowAnyMethod();\n    });\n});\n#endregion\n\n#region ✅ MVC + Swagger + Middleware\nbuilder.Services.AddControllers()\n    .AddJsonOptions(opts =>\n    {\n        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));\n    });\n\nbuilder.Services.AddEndpointsApiExplorer();\n\nbuilder.Services.AddSwaggerGen(options =>\n{\n    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n    {\n        Title = \"xByteChat API\",\n        Version = \"v1\",\n        Description = \"API documentation for xByteChat project\"\n    });\n});\n#endregion\n\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n#region SignalR\nbuilder.Services.AddSignalR();\nbuilder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n#endregion\n\nvar app = builder.Build();\n\napp.MapGet(\"/api/debug/cors\", () => Results.Ok(new\n{\n    Allowed = app.Services.GetRequiredService<IConfiguration>()\n              .GetSection(\"Cors:AllowedOrigins\").Get<string[]>()\n}));\napp.MapGet(\"/api/debug/db\", async (AppDbContext db) => {\n    try { await db.Database.OpenConnectionAsync(); await db.Database.CloseConnectionAsync(); return Results.Ok(\"ok\"); }\n    catch (Exception ex) { return Results.Problem(ex.Message); }\n});\napp.MapGet(\"/api/debug/conn\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    return Results.Ok(new\n    {\n        host = b.Host,\n        port = b.Port,\n        database = b.Database,\n        username = b.Username,\n        sslmode = b.SslMode.ToString(),\n        hasPassword = !string.IsNullOrEmpty(b.Password)\n    });\n});\n// Try DNS resolution of the DB host that /api/debug/conn reports\napp.MapGet(\"/api/debug/dns\", (IConfiguration cfg) =>\n{\n    var cs = cfg.GetConnectionString(\"DefaultConnection\") ?? \"\";\n    var b = new NpgsqlConnectionStringBuilder(cs);\n    try\n    {\n        var ips = Dns.GetHostAddresses(b.Host);\n        return Results.Ok(new { host = b.Host, addresses = ips.Select(i => i.ToString()).ToArray() });\n    }\n    catch (Exception ex)\n    {\n        return Results.Problem($\"DNS failed for host '{b.Host}': {ex.Message}\");\n    }\n});\n\n#region 🌐 Middleware Pipeline Setup\nAuditLoggingHelper.Configure(app.Services);\n\napp.UseMiddleware<GlobalExceptionMiddleware>();\n\nif (app.Environment.IsDevelopment())\n{\n    // Dev-specific configs\n}\n\napp.UseSwagger();\napp.UseSwaggerUI();\n\napp.UseHsts();\napp.UseHttpsRedirection();\n\n// Security headers\napp.Use(async (context, next) =>\n{\n    context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n    context.Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n    context.Response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n    context.Response.Headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\";\n    context.Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n    await next();\n});\n\napp.UseRouting();\napp.UseCors(\"AllowFrontend\");\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\napp.MapHub<InboxHub>(\"/hubs/inbox\");\n\napp.Run();\n#endregion\n\n\n\n//using FluentValidation;;\n//using Microsoft.AspNetCore.Authentication.JwtBearer;\n//using Microsoft.EntityFrameworkCore;\n//using Microsoft.IdentityModel.Tokens;\n//using Serilog;\n//using Serilog.Exceptions;\n//using System.Text;\n//using System.Text.Json;\n//using System.Text.Json.Serialization;\n//using xbytechat.api;\n//using xbytechat.api.AuthModule.Services;\n//using xbytechat.api.CRM.Interfaces;\n//using xbytechat.api.CRM.Services;\n//using xbytechat.api.Features.AccessControl.Services;\n//using xbytechat.api.Features.AuditTrail.Services;\n//using xbytechat.api.Features.CampaignModule.Services;\n//using xbytechat.api.Features.CampaignTracking.Services;\n//using xbytechat.api.Features.Catalog.Services;\n//using xbytechat.api.Features.MessageManagement.Services;\n//using xbytechat.api.Features.MessagesEngine.PayloadBuilders;\n//using xbytechat.api.Features.MessagesEngine.Services;\n//using xbytechat.api.Features.PlanManagement.Services;\n//using xbytechat.api.Features.TemplateModule.Services;\n//using xbytechat.api.Features.Webhooks.Services;\n//using xbytechat.api.Features.Webhooks.Services.Processors;\n//using xbytechat.api.Features.Webhooks.Services.Resolvers;\n//using xbytechat.api.Features.xbTimeline.Services;\n//using xbytechat.api.Features.xbTimelines.Services;\n//using xbytechat.api.Helpers;\n//using xbytechat.api.Middlewares;\n//using xbytechat.api.PayloadBuilders;\n//using xbytechat.api.Repositories.Implementations;\n//using xbytechat.api.Repositories.Interfaces;\n//using xbytechat.api.Services;\n//using xbytechat.api.Services.Messages.Implementations;\n//using xbytechat.api.Services.Messages.Interfaces;\n//using xbytechat_api.WhatsAppSettings.Services;\n//using xbytechat_api.WhatsAppSettings.Validators;\n//using EnginePayloadBuilders = xbytechat.api.Features.MessagesEngine.PayloadBuilders;\n//using xbytechat.api.Features.CTAManagement.Services;\n//using xbytechat.api.Features.Tracking.Services;\n//using xbytechat.api.Features.Webhooks.BackgroundWorkers;\n//using xbytechat.api.Features.CTAFlowBuilder.Services;\n//using xbytechat.api.Features.FlowAnalytics.Services;\n//using xbytechat.api.Features.Inbox.Repositories;\n//using xbytechat.api.Features.Inbox.Services;\n//using xbytechat.api.Features.Inbox.Hubs;\n//using Microsoft.AspNetCore.SignalR;\n//using xbytechat.api.SignalR;\n//using xbytechat.api.Features.AutoReplyBuilder.Repositories;\n//using xbytechat.api.Features.AutoReplyBuilder.Services;\n//using xbytechat.api.Features.AutoReplyBuilder.Flows.Repositories;\n//using xbytechat.api.Features.AutoReplyBuilder.Flows.Services;\n//using xbytechat.api.Features.BusinessModule.Services;\n//using xbytechat.api.Features.FeatureAccessModule.Services;\n//using xbytechat.api.Features.ReportingModule.Services;\n//using xbytechat.api.Features.Automation.Repositories;\n//using xbytechat.api.Features.Automation.Services;\n\n\n//var builder = WebApplication.CreateBuilder(args);\n\n//#region 🔷 Serilog Configuration\n//Log.Logger = new LoggerConfiguration()\n//    .Enrich.WithExceptionDetails()\n//    .Enrich.FromLogContext()\n//    .MinimumLevel.Information()\n//    .WriteTo.Console()\n//    .WriteTo.File(\"logs/log-.txt\", rollingInterval: RollingInterval.Day)\n//    .CreateLogger();\n//builder.Host.UseSerilog();\n//#endregion\n\n////#region 🔷 Database Setup (PostgreSQL)\n////var connStr = builder.Services.AddDbContext<AppDbContext>(options =>\n////    options.UseNpgsql(builder.Configuration.GetConnectionString(\"DefaultConnection\")).EnableSensitiveDataLogging());\n////Console.WriteLine($\"[DEBUG] Using Connection String: {connStr}\");\n////#endregion\n//#region Database Setup (PostgreSQL)\n//var connStr = builder.Configuration.GetConnectionString(\"DefaultConnection\");  // Get actual string\n//builder.Services.AddDbContext<AppDbContext>(options =>\n//    options.UseNpgsql(connStr).EnableSensitiveDataLogging()\n//);\n//Console.WriteLine($\"[DEBUG] Using Connection String: {connStr}\"); // This prints the REAL connection string\n//#endregion\n\n//#region 🔷 Generic Repository Pattern\n//builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));\n//#endregion\n\n//#region 🔷 Core Modules (Business/Auth)\n//builder.Services.AddScoped<IBusinessService, BusinessService>();\n//builder.Services.AddScoped<IAuthService, AuthService>();\n//builder.Services.AddScoped<IJwtTokenService, JwtTokenService>();\n//#endregion\n\n//#region 🔷 Messaging Services & WhatsApp\n//builder.Services.AddScoped<IMessageEngineService, MessageEngineService>(); // New\n\n//builder.Services.AddHttpClient<IMessageService, MessageService>();\n//builder.Services.AddScoped<WhatsAppService>();\n//builder.Services.AddScoped<IMessageStatusService, MessageStatusService>();\n//builder.Services.AddScoped<ITemplateMessageSender, TemplateMessageSender>();\n//#endregion\n\n//#region 🔷 Payload Builders\n//builder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TextMessagePayloadBuilder>();\n//builder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.ImageMessagePayloadBuilder>();\n//builder.Services.AddScoped<xbytechat.api.PayloadBuilders.IWhatsAppPayloadBuilder, xbytechat.api.PayloadBuilders.TemplateMessagePayloadBuilder>();\n//#endregion\n\n//#region 🔷 Catalog & CRM Modules\n//builder.Services.AddScoped<IProductService, ProductService>();\n//builder.Services.AddScoped<ICatalogTrackingService, CatalogTrackingService>();\n//builder.Services.AddScoped<ICatalogDashboardService, CatalogDashboardService>();\n//builder.Services.AddScoped<IContactService, ContactService>();\n//builder.Services.AddScoped<ITagService, TagService>();\n//builder.Services.AddScoped<IReminderService, ReminderService>();\n//builder.Services.AddScoped<INoteService, NoteService>();\n//builder.Services.AddScoped<ITimelineService, TimelineService>();\n\n//#endregion\n\n//#region 🔷 Campaign Management\n//builder.Services.AddScoped<ICampaignService, CampaignService>();\n//builder.Services.AddScoped<ICampaignSendLogService, CampaignSendLogService>();\n//builder.Services.AddScoped<ICampaignSendLogEnricher, CampaignSendLogEnricher>();\n//builder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\n\n//builder.Services.AddScoped<ICampaignRetryService, CampaignRetryService>();\n//builder.Services.AddHttpClient<IWhatsAppTemplateService, WhatsAppTemplateService>();\n//builder.Services.AddScoped<ICampaignAnalyticsService, CampaignAnalyticsService>();\n//builder.Services.AddScoped<ICampaignRecipientService, CampaignRecipientService>();\n\n//#endregion\n\n//#region 🔷 Webhook Management\n//builder.Services.AddScoped<IWhatsAppWebhookService, WhatsAppWebhookService>();\n//builder.Services.AddScoped<IWhatsAppWebhookDispatcher, WhatsAppWebhookDispatcher>();\n//builder.Services.AddScoped<IStatusWebhookProcessor, StatusWebhookProcessor>();\n//builder.Services.AddScoped<ITemplateWebhookProcessor, TemplateWebhookProcessor>();\n//builder.Services.AddScoped<IMessageIdResolver, MessageIdResolver>();\n//builder.Services.AddScoped<IClickWebhookProcessor, ClickWebhookProcessor>();\n//builder.Services.AddScoped<ILeadTimelineService, LeadTimelineService>();\n//builder.Services.AddScoped<IFailedWebhookLogService, FailedWebhookLogService>();\n//builder.Services.AddSingleton<IWebhookQueueService, WebhookQueueService>();\n//builder.Services.AddHostedService<WebhookQueueWorker>();\n//builder.Services.AddHostedService<FailedWebhookLogCleanupService>();\n//builder.Services.AddScoped<IMaintenanceService, MaintenanceService>();\n//builder.Services.AddHostedService<WebhookAutoCleanupWorker>();\n\n//#endregion\n\n//#region 🔷 Access Control & Permission\n//builder.Services.AddScoped<IAccessControlService, AccessControlService>();\n//builder.Services.AddScoped<IFeatureAccessEvaluator, FeatureAccessEvaluator>();\n//builder.Services.AddScoped<IFeatureAccessService, FeatureAccessService>();\n//#endregion\n\n//#region 🔷 Tracking \n//builder.Services.AddScoped<ITrackingService, TrackingService>();\n//builder.Services.AddScoped<IMessageAnalyticsService, MessageAnalyticsService>();\n\n//#endregion\n//#region 🔷 Flow Builder \n//builder.Services.AddScoped<ICTAFlowService, CTAFlowService>();\n\n//#endregion\n//#region 🔷 Audit Trail Logging\n//builder.Services.AddHttpContextAccessor(); // For Audit + Cookies\n//builder.Services.AddScoped<IAuditLogService, AuditLogService>();\n\n\n//#endregion\n//#region 🔷 WhatsApp settings\n//builder.Services.AddScoped<IWhatsAppSettingsService, WhatsAppSettingsService>();\n//builder.Services.AddValidatorsFromAssemblyContaining<SaveWhatsAppSettingValidator>();\n//builder.Services.AddHttpClient<IMessageEngineService, MessageEngineService>();\n//builder.Services.AddScoped<IWhatsAppTemplateFetcherService, WhatsAppTemplateFetcherService>();\n\n//// ✅ Force DI to use correct class from MessagesEngine.PayloadBuilders\n//builder.Services.AddScoped<EnginePayloadBuilders.TextMessagePayloadBuilder>();\n//builder.Services.AddScoped<EnginePayloadBuilders.ImageMessagePayloadBuilder>();\n//builder.Services.AddScoped<EnginePayloadBuilders.TemplateMessagePayloadBuilder>();\n//builder.Services.AddScoped<EnginePayloadBuilders.CtaMessagePayloadBuilder>();\n//builder.Services.AddScoped<IPlanManager, PlanManager>();\n//builder.Services.AddScoped<ICTAManagementService, CTAManagementService>();\n\n\n//#endregion\n//#region 🔷 Inbox \n//builder.Services.AddScoped<IFlowAnalyticsService, FlowAnalyticsService>();\n//builder.Services.AddScoped<IInboxService, InboxService>();\n//builder.Services.AddScoped<IInboundMessageProcessor, InboundMessageProcessor>();\n//builder.Services.AddScoped<IInboxRepository, InboxRepository>();\n//#endregion \n\n//// AutoReplyBuilder Module\n//builder.Services.AddScoped<IAutoReplyRepository, AutoReplyRepository>();\n//builder.Services.AddScoped<IAutoReplyService, AutoReplyService>();\n//builder.Services.AddScoped<IAutoReplyFlowRepository, AutoReplyFlowRepository>();\n//builder.Services.AddScoped<IAutoReplyFlowService, AutoReplyFlowService>();\n//builder.Services.AddScoped<IAutoReplyRuntimeService, AutoReplyRuntimeService>();\n//builder.Services.AddScoped<IChatSessionStateService, ChatSessionStateService>();\n//builder.Services.AddScoped<IAgentAssignmentService, AgentAssignmentService>();\n\n//// 🧠 Automation Module - Dependency Injection\n//builder.Services.AddScoped<IAutomationFlowRepository, AutomationFlowRepository>();\n//builder.Services.AddScoped<IAutomationRunner, AutomationRunner>();\n//builder.Services.AddScoped<IAutomationService, AutomationService>();\n\n\n//#region 🔐 JWT Authentication (Token + Cookie Based)\n//#region 🔐 JWT Authentication (Secure Cookie + Expiry Handling)\n//builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n//    .AddJwtBearer(options =>\n//    {\n//        var jwtSettings = builder.Configuration.GetSection(\"JwtSettings\");\n\n//        options.TokenValidationParameters = new TokenValidationParameters\n//        {\n//            ValidateIssuer = true,\n//            ValidateAudience = true,\n//            ValidateLifetime = true,\n//            ValidateIssuerSigningKey = true,\n//            ValidIssuer = jwtSettings[\"Issuer\"],\n//            ValidAudience = jwtSettings[\"Audience\"],\n//            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings[\"SecretKey\"])),\n//            ClockSkew = TimeSpan.Zero // No token grace period\n//        };\n\n//        options.Events = new JwtBearerEvents\n//        {\n//            OnMessageReceived = context =>\n//            {\n//                var token = context.Request.Cookies[\"xbyte_token\"];\n//                if (!string.IsNullOrEmpty(token))\n//                {\n//                    context.Token = token;\n//                }\n//                return Task.CompletedTask;\n//            },\n//            OnAuthenticationFailed = context =>\n//            {\n//                if (context.Exception is SecurityTokenExpiredException)\n//                {\n//                    context.Response.StatusCode = 401;\n//                    context.Response.ContentType = \"application/json\";\n//                    return context.Response.WriteAsync(\"{\\\"success\\\":false,\\\"message\\\":\\\"❌ Token expired. Please login again.\\\"}\");\n//                }\n//                return Task.CompletedTask;\n//            }\n//        };\n//    });\n\n\n\n//builder.Services.AddAuthorization();\n//#endregion\n//#endregion\n//#region 🌐 CORS Setup (Secure Cookie-Compatible)\n\n//var allowedOrigins = builder.Configuration.GetSection(\"Cors:AllowedOrigins\").Get<string[]>();\n\n//builder.Services.AddCors(options =>\n//{\n//    options.AddPolicy(\"AllowFrontend\", policy =>\n//    {\n//        policy\n//            .WithOrigins(allowedOrigins ?? Array.Empty<string>())\n//            .AllowAnyHeader()\n//            .AllowAnyMethod()\n//            .AllowCredentials();\n//    });\n//});\n////builder.Services.AddCors(options =>\n////{\n////    options.AddPolicy(\"AllowFrontend\", policy =>\n////    {\n////        policy.WithOrigins(\"busiorbit-ui-c0dbc0crazd6bae4.centralindia-01.azurewebsites.net\") // ✅ React dev URL\n////              .AllowAnyHeader()\n////              .AllowAnyMethod()\n////              .AllowCredentials(); // ✅ Needed for httpOnly cookie\n////    });\n////});\n//#endregion\n\n//#region ✅ MVC + Swagger + Middleware\n//builder.Services.AddControllers()\n//    .AddJsonOptions(opts =>\n//    {\n//        opts.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter(JsonNamingPolicy.CamelCase));\n//    });\n\n//builder.Services.AddEndpointsApiExplorer();\n////builder.Services.AddSwaggerGen(\n\n////    );\n//try\n//{\n//    builder.Services.AddSwaggerGen(options =>\n//{\n//    options.SwaggerDoc(\"v1\", new Microsoft.OpenApi.Models.OpenApiInfo\n//    {\n//        Title = \"xByteChat API\",\n//        Version = \"v1\",\n//        Description = \"API documentation for xByteChat project\"\n//    });\n\n//    // Optional: include XML comments if enabled\n//    var xmlFile = $\"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n//    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n//    if (File.Exists(xmlPath))\n//        options.IncludeXmlComments(xmlPath);\n//});\n//}\n//catch (Exception ex)\n//{\n//    Console.WriteLine(\"⚠️ Swagger registration failed: \" + ex.Message);\n//}\n//#endregion\n//builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n//#region ✅ For output in visual studio code\n//builder.Logging.ClearProviders();         // Clear default log providers\n//builder.Logging.AddConsole();             // Add console logging\n\n//#region SignalR\n//builder.Services.AddSignalR();\n//builder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n\n\n//#endregion\n//var app = builder.Build();\n\n//#region 🌐 Middleware Pipeline Setup\n//AuditLoggingHelper.Configure(app.Services);\n\n//app.UseMiddleware<GlobalExceptionMiddleware>();\n///*/*app.UseMiddleware<JwtErrorHandlingMiddleware>();*/// ✅ Handle JWT Expired errors\n//#endregion\n//if (app.Environment.IsDevelopment())\n//{\n\n//}\n//app.UseSwagger();\n//app.UseSwaggerUI();\n//app.UseHttpsRedirection();\n//// ✅ Secure CORS policy applied BEFORE auth\n//app.Use(async (context, next) =>\n//{\n//    context.Response.Headers[\"X-Content-Type-Options\"] = \"nosniff\";\n//    context.Response.Headers[\"X-Frame-Options\"] = \"DENY\";\n//    context.Response.Headers[\"X-XSS-Protection\"] = \"1; mode=block\";\n//    context.Response.Headers[\"Referrer-Policy\"] = \"strict-origin-when-cross-origin\";\n//    context.Response.Headers[\"Permissions-Policy\"] = \"geolocation=(), microphone=(), camera=()\";\n//    await next();\n//});\n//app.UseCors(\"AllowFrontend\");\n\n//app.UseAuthentication();\n//app.UseAuthorization();\n\n//app.MapControllers();\n//app.MapHub<InboxHub>(\"/hubs/inbox\");\n//app.Run();\n//#endregion\n\n\n\n\n\n"
        },
        {
          "path": "xbytechat-api/Properties/launchSettings.json",
          "sha256": "3374c65b7338b8a459db1242f356b2dd07d3dfd4cded988482a8f34fbe64e62e",
          "language": "json",
          "content": "{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:18939\",\n      \"sslPort\": 44375\n    }\n  },\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5295;http://localhost:7113\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:7113;http://localhost:5295\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n"
        },
        {
          "path": "xbytechat-api/RepositoriesGen/Implementations/GenericRepository.cs",
          "sha256": "68fdbced75094ad69adcf2073501cec37b1745f7b4d6206826d6aedc33fe0a46",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.Repositories.Interfaces;\n\nnamespace xbytechat.api.Repositories.Implementations\n{\n    public class GenericRepository<T> : IGenericRepository<T> where T : class\n    {\n        private readonly AppDbContext _context;\n        private readonly DbSet<T> _dbSet;\n\n        public GenericRepository(AppDbContext context)\n        {\n            _context = context;\n            _dbSet = _context.Set<T>();\n        }\n\n        public async Task<IEnumerable<T>> GetAllAsync()\n        {\n            return await _dbSet.ToListAsync();\n        }\n\n        public async Task<T?> FindByIdAsync(Guid id)\n        {\n            return await _dbSet.FindAsync(id);\n        }\n\n        public async Task AddAsync(T entity)\n        {\n            await _dbSet.AddAsync(entity);\n        }\n\n        public void Update(T entity)\n        {\n            _dbSet.Update(entity);\n        }\n\n        public void Delete(T entity)\n        {\n            _dbSet.Remove(entity);\n        }\n\n        public async Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.FirstOrDefaultAsync(predicate);\n        }\n\n        public async Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.Where(predicate).ToListAsync();\n        }\n\n        public async Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _dbSet.AnyAsync(predicate);\n        }\n\n        public async Task SaveAsync()\n        {\n            await _context.SaveChangesAsync();\n        }\n\n        public async Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate)\n        {\n            return await _context.Set<T>().Where(predicate).ToListAsync();\n        }\n\n        // ✅ NEW: Enables .Include(), .ThenInclude(), etc.\n        public IQueryable<T> AsQueryable()\n        {\n            return _dbSet.AsQueryable();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/RepositoriesGen/Interfaces/IGenericRepository.cs",
          "sha256": "dce9a4518c5e6db0da8996246969bbc864c23c5ec0eeb93ac053cc16a33bc920",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Repositories.Interfaces\n{\n    public interface IGenericRepository<T> where T : class\n    {\n        // 🔍 Basic Reads\n        Task<IEnumerable<T>> GetAllAsync();\n        Task<T?> FindByIdAsync(Guid id);\n        Task<T?> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate);\n        Task<IEnumerable<T>> FindAllAsync(Expression<Func<T, bool>> predicate);\n\n        // 🔐 Checks\n        Task<bool> ExistsAsync(Expression<Func<T, bool>> predicate);\n\n        // ✍️ Commands\n        Task AddAsync(T entity);\n        void Update(T entity);\n        void Delete(T entity);\n        Task SaveAsync();\n\n        Task<List<T>> WhereAsync(Expression<Func<T, bool>> predicate);\n\n        // ✅ New: Supports advanced LINQ operations like Include()\n        IQueryable<T> AsQueryable();\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Services/MessageModule/Implementations/MessageService.cs",
          "sha256": "4a9530274bcc8a60c09a984dfd7c120424ee9f5b32a1d430a4f393b0ebd5d45c",
          "language": "csharp",
          "content": "using System.Text;\nusing System.Net.Http.Headers;\nusing Newtonsoft.Json;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\nusing xbytechat.api.Models;\nusing xbytechat.api.PayloadBuilders;\nusing xbytechat.api.Repositories.Interfaces;\nusing xbytechat.api.Services.Messages.Interfaces;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api.CRM.Models;\n\nnamespace xbytechat.api.Services.Messages.Implementations\n{\n    public class MessageService : IMessageService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly IConfiguration _config;\n        private readonly IGenericRepository<MessageLog> _messageLogRepo;\n        private readonly Dictionary<string, IWhatsAppPayloadBuilder> _payloadBuilders;\n        private readonly ILogger<MessageService> _logger;\n\n        public MessageService(\n            AppDbContext dbContext,\n            HttpClient httpClient,\n            IConfiguration config,\n            IGenericRepository<MessageLog> messageLogRepo,\n            IEnumerable<IWhatsAppPayloadBuilder> builders,\n            ILogger<MessageService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _config = config;\n            _messageLogRepo = messageLogRepo;\n            _logger = logger;\n\n            _payloadBuilders = builders.ToDictionary(\n                b => b.GetType().Name.Replace(\"MessagePayloadBuilder\", \"\").ToLower(),\n                b => b\n            );\n        }\n\n        public async Task SendFollowUpAsync(string recipientNumber, string messageContent)\n        {\n            var dto = new TextMessageDto\n            {\n                RecipientNumber = recipientNumber,\n                MessageContent = messageContent,\n                BusinessId = Guid.Empty // Optional: Set dynamically if needed\n            };\n\n            await SendMessageAsync(dto); // ✅ You already have this method\n        }\n\n\n        public async Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto)\n        {\n            var messageType = dto.GetType().Name.Replace(\"MessageDto\", \"\").ToLower();\n\n            // 🧠 Get the right builder (e.g., for text, image)\n            if (!_payloadBuilders.TryGetValue(messageType, out var builder))\n            {\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Unsupported message type: \" + messageType\n                };\n            }\n\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = builder.BuildPayload(dto);\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"📦 Sending Payload: {Payload}\", json);\n\n            try\n\n\n            {\n                // 🛠️ Log the payload for debugging\n                _logger.LogInformation(\"📤 Final WhatsApp Payload:\\n\" + JsonConvert.SerializeObject(payload, Formatting.Indented));\n\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n\n                string? messageId = null;\n\n                // 🧾 Try extracting messageId (WAMID) from response\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        var jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"✅ Message sent but failed to parse WAMID: \" + ex.Message);\n                    }\n                }\n\n                // 📝 Log message for tracking\n                var log = new MessageLog\n                {\n                    BusinessId = dto.BusinessId,\n                    RecipientNumber = dto.RecipientNumber,\n                    MessageContent = dto is TextMessageDto textDto && !string.IsNullOrEmpty(textDto.MessageContent)\n                        ? textDto.MessageContent\n                        : \"[Empty or Non-Text]\",\n                    MediaUrl = (dto as ImageMessageDto)?.MediaUrl,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ Message sent successfully\" : \"❌ Failed to send message\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception during message send\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending\",\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n        public async Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons)\n        {\n            var apiUrl = _config[\"WhatsApp:ApiUrl\"];\n            var apiToken = _config[\"WhatsApp:apiToken\"];\n\n            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", apiToken);\n\n            var payload = new\n            {\n                messaging_product = \"whatsapp\",\n                to = recipientPhone,\n                type = \"interactive\",\n                interactive = new\n                {\n                    type = \"button\",\n                    body = new { text = bodyText },\n                    action = new\n                    {\n                        buttons = buttons.Select((text, index) => new\n                        {\n                            type = \"reply\",\n                            reply = new\n                            {\n                                id = $\"cta_{index + 1}\",\n                                title = text\n                            }\n                        }).ToList()\n                    }\n                }\n            };\n\n            var json = JsonConvert.SerializeObject(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n            _logger.LogInformation(\"🚀 Sending CTA Message: \" + json);\n\n            try\n            {\n                var response = await _httpClient.PostAsync(apiUrl, content);\n                var rawResponse = await response.Content.ReadAsStringAsync();\n                // Message send here successfully \n                string? messageId = null;\n                if (response.IsSuccessStatusCode)\n                {\n                    try\n                    {\n                        dynamic jsonObj = JsonConvert.DeserializeObject<dynamic>(rawResponse);\n                        messageId = jsonObj?.messages?[0]?.id;\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogWarning(\"⚠️ Sent, but failed to parse messageId: \" + ex.Message);\n                    }\n                }\n\n                // Log to MessageLogs table (optional: use a dummy entry)\n\n                var log = new MessageLog\n                {\n\n                    //BusinessId = Guid.Parse(\"put-a-valid-business-guid-here\"), //Guid.Empty, // set properly if you want to track\n                    BusinessId = Guid.TryParse(\"45262049-0127-4658-93e1-b3ffea645f4f\", out var parsedId)\n    ? parsedId\n    : throw new FormatException(\"❌ Invalid GUID format used for BusinessId.\"),\n                    RecipientNumber = recipientPhone,\n                    MessageContent = bodyText,\n                    Status = response.IsSuccessStatusCode ? \"Sent\" : \"Failed\",\n                    ErrorMessage = response.IsSuccessStatusCode ? null : response.ReasonPhrase,\n                    RawResponse = rawResponse,\n                    SentAt = DateTime.UtcNow,\n                    MessageId = messageId\n                };\n\n                await _messageLogRepo.AddAsync(log);\n                await _messageLogRepo.SaveAsync();\n\n                return new SendResultExtended\n                {\n                    Success = response.IsSuccessStatusCode,\n                    Message = response.IsSuccessStatusCode ? \"✅ CTA message sent\" : \"❌ Failed to send CTA\",\n                    MessageId = messageId,\n                    RawResponse = rawResponse,\n                    MessageLogId = log.Id\n                };\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception while sending CTA\");\n\n                return new SendResultExtended\n                {\n                    Success = false,\n                    Message = \"❌ Exception while sending CTA\",\n                    ErrorMessage = ex.InnerException?.Message ?? ex.Message // ✅ this is critical\n                };\n            }\n\n        }\n\n    }\n}\n\n\n\n\n\n"
        },
        {
          "path": "xbytechat-api/Services/MessageModule/Interfaces/IMessageService.cs",
          "sha256": "7592cb1c94c37bab95a7c1a34fbc22e00b2fa0428bc1a23a4c2626a437314c30",
          "language": "csharp",
          "content": "using System.Threading.Tasks;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Helpers;\n\nnamespace xbytechat.api.Services.Messages.Interfaces\n{\n    public interface IMessageService\n    {\n        /// <summary>\n        /// Sends a message of any supported type (Text, Image, Template).\n        /// </summary>\n        /// <param name=\"dto\">Base DTO representing message details.</param>\n        /// <returns>Standardized result with status, error info, and raw response.</returns>\n        Task<SendResultExtended> SendMessageAsync(BaseMessageDto dto);\n        //Task<SendResultExtended> SendBulkMessagesAsync(BulkMessageDto dto);\n        Task SendFollowUpAsync(string recipientNumber, string messageContent);\n        Task<SendResultExtended> SendInteractiveMessageAsync(string recipientPhone, string bodyText, List<string> buttons);\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Services/WhatsAppService.cs",
          "sha256": "239db95488943944c9836125a53c4ede14522f2bc4914748e07350d86cc0051f",
          "language": "csharp",
          "content": "using System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing Microsoft.Extensions.Configuration;\nusing xbytechat.api.Models;\n\nnamespace xbytechat.api.Services\n{\n    public class WhatsAppService\n    {\n        private readonly HttpClient _httpClient;\n        private readonly string _whatsAppToken;\n        private readonly string _whatsAppPhoneId;\n\n        public WhatsAppService(IConfiguration configuration)\n        {\n            _httpClient = new HttpClient();\n\n            _whatsAppToken = configuration[\"WhatsApp:apiToken\"];\n            _whatsAppPhoneId = configuration[\"WhatsApp:PhoneNumberId\"];\n\n            if (string.IsNullOrEmpty(_whatsAppToken))\n                Console.WriteLine(\"❌ Token is NULL or EMPTY from config!\");\n\n            if (string.IsNullOrEmpty(_whatsAppPhoneId))\n                Console.WriteLine(\"❌ Phone ID is NULL or EMPTY from config!\");\n        }\n\n        public async Task<WhatsAppResult> SendMessageAsync(string recipientPhone, string messageText)\n        {\n            try\n            {\n                Console.WriteLine(\"👉 Preparing to send WhatsApp message...\");\n                var url = $\"https://graph.facebook.com/v22.0/{_whatsAppPhoneId}/messages\";\n\n                var payload = new\n                {\n                    messaging_product = \"whatsapp\",\n                    to = recipientPhone,\n                    type = \"text\",\n                    text = new { body = messageText }\n                };\n\n                var json = JsonSerializer.Serialize(payload);\n                var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", _whatsAppToken);\n\n                var response = await _httpClient.PostAsync(url, content);\n                var responseBody = await response.Content.ReadAsStringAsync();\n\n                Console.WriteLine($\"✅ Status: {response.StatusCode}\");\n                Console.WriteLine($\"📥 Response: {responseBody}\");\n\n                if (response.IsSuccessStatusCode)\n                {\n                    return new WhatsAppResult { Success = true, RawResponse = responseBody };\n                }\n                else\n                {\n                    return new WhatsAppResult\n                    {\n                        Success = false,\n                        ErrorMessage = $\"Meta API Error: {response.StatusCode}\",\n                        RawResponse = responseBody\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"❌ Exception while sending:\");\n                Console.WriteLine(ex.Message);\n\n                return new WhatsAppResult\n                {\n                    Success = false,\n                    ErrorMessage = ex.Message\n                };\n            }\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/AutoMapperProfile.cs",
          "sha256": "989f0b9b654be427f90cea952c56afc87d0c6b647e71bae60f9694b4e21bacf2",
          "language": "csharp",
          "content": "using AutoMapper;\nusing xbytechat.api.CRM.Dtos;\nusing xbytechat.api.CRM.Models;\nusing xbytechat.api.Features.CampaignModule.DTOs;\nusing xbytechat.api.Features.CampaignModule.Models;\nusing xbytechat.api.DTOs.Messages;\nusing xbytechat.api.Features.Tracking.DTOs;\nusing xbytechat.api.Features.Tracking.Models;\nusing xbytechat.api.Features.MessageManagement.DTOs;\n\nnamespace xbytechat.api.Shared\n{\n    public class AutoMapperProfile : Profile\n    {\n        public AutoMapperProfile()\n        {\n            CreateMap<Contact, ContactDto>();\n            CreateMap<Campaign, CampaignDto>();\n            CreateMap<MessageLog, MessageLogDto>();\n            CreateMap<TrackingLog, TrackingLogDto>();\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/ClaimsBusinessDetails.cs",
          "sha256": "c2e6949a61ef96fc2c06636f297b8d8d033f3f29fa5d7b57230743db945ed0a2",
          "language": "csharp",
          "content": "using System;\nusing System.Security.Claims;\n\nnamespace xbytechat.api.Shared\n{\n    public static class ClaimsBusinessDetails\n    {\n        public static Guid GetBusinessId(this ClaimsPrincipal user)\n        {\n            var businessIdClaim = user.FindFirst(\"businessId\")?.Value; // lowercase only!\n            if (string.IsNullOrEmpty(businessIdClaim) || !Guid.TryParse(businessIdClaim, out var businessId))\n                throw new UnauthorizedAccessException(\"Invalid or missing businessId in token.\");\n            return businessId;\n        }\n\n        public static Guid GetUserId(this ClaimsPrincipal user)\n        {\n            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))\n                throw new UnauthorizedAccessException(\"Invalid or missing userId in token.\");\n            return userId;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/PaginatedRequest.cs",
          "sha256": "af6fceb743c7fcb6bbb984e08b2bb8e696a447e38e61b6fc85a7b9dd48a0fb04",
          "language": "csharp",
          "content": "namespace xbytechat.api.Shared\n{\n    public class PaginatedRequest\n    {\n        public int Page { get; set; } = 1;       // Page number (1-based)\n        public int PageSize { get; set; } = 10;  // Items per page\n\n        // Optional filter (can be extended later)\n        public string? Status { get; set; }\n        public string? Search { get; set; }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/Shared/PaginatedResponse.cs",
          "sha256": "d59aca9b4129006df5c4ec39b4e6793672e9493f4581e7963b6c215465d1b113",
          "language": "csharp",
          "content": "using System.Collections.Generic;\n\nnamespace xbytechat.api.Shared\n{\n    public class PaginatedResponse<T>\n    {\n        public List<T> Items { get; set; } = new();\n        public int TotalCount { get; set; }\n        public int Page { get; set; }\n        public int PageSize { get; set; }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/TrackingUtils/DeviceHelper.cs",
          "sha256": "70ad5b3deb3b07358a3ce61a514b3a9c3f4bb78007752bd0f4106ef8a3f27b32",
          "language": "csharp",
          "content": "// File: Features/CTATracking/Utils/DeviceHelper.cs\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class DeviceHelper\n    {\n        public static string GetDeviceType(string userAgent)\n        {\n            if (string.IsNullOrEmpty(userAgent)) return \"Unknown\";\n\n            userAgent = userAgent.ToLower();\n\n            if (userAgent.Contains(\"mobile\") || userAgent.Contains(\"android\") || userAgent.Contains(\"iphone\"))\n                return \"Mobile\";\n\n            if (userAgent.Contains(\"ipad\") || userAgent.Contains(\"tablet\"))\n                return \"Tablet\";\n\n            if (userAgent.Contains(\"windows\") || userAgent.Contains(\"macintosh\"))\n                return \"Desktop\";\n\n            return \"Unknown\";\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/TrackingUtils/GeoHelper.cs",
          "sha256": "359da4b5f8939751d00d9137b41774e466af302ccaf60e203c1b0f0827a9eafd",
          "language": "csharp",
          "content": "// File: Features/CTATracking/Utils/GeoHelper.cs\n\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class GeoHelper\n    {\n        public static async Task<string> GetCountryFromIP(string ipAddress)\n        {\n            try\n            {\n                if (string.IsNullOrWhiteSpace(ipAddress) || ipAddress == \"::1\")\n                    return \"Localhost\";\n\n                using var client = new HttpClient();\n                var response = await client.GetStringAsync($\"https://ipapi.co/{ipAddress}/json/\");\n\n                var doc = JsonDocument.Parse(response);\n                if (doc.RootElement.TryGetProperty(\"country_name\", out var countryProp))\n                    return countryProp.GetString() ?? \"Unknown\";\n            }\n            catch\n            {\n                // fallback\n            }\n\n            return \"Unknown\";\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/TrackingUtils/TrackingUrlBuilder.cs",
          "sha256": "d944abb54aa2863bcad184f9d8bbd42d683f5d0b0b07474ea3f26903e7cc13d5",
          "language": "csharp",
          "content": "using System;\nusing System.Web;\n\nnamespace xbytechat.api.Shared.TrackingUtils\n{\n    public static class TrackingUrlBuilder\n    {\n        public static string BuildTrackingUrl(\n            Guid businessId,\n            string sourceType,\n            Guid sourceId,\n            string buttonText,\n            string redirectUrl,\n            Guid? messageId = null,\n            Guid? contactId = null,\n            string contactPhone = null,\n            string sessionId = null,\n            string threadId = null)\n        {\n            var query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"src\"] = sourceType;\n            query[\"id\"] = sourceId.ToString();\n            query[\"btn\"] = buttonText;\n            query[\"to\"] = redirectUrl;\n            query[\"type\"] = buttonText;\n            if (messageId != null) query[\"msg\"] = messageId.ToString();\n            if (contactId != null) query[\"contact\"] = contactId.ToString();\n            if (!string.IsNullOrEmpty(contactPhone)) query[\"phone\"] = contactPhone;\n            if (!string.IsNullOrEmpty(sessionId)) query[\"session\"] = sessionId;\n            if (!string.IsNullOrEmpty(threadId)) query[\"thread\"] = threadId;\n\n            var baseUrl = Environment.GetEnvironmentVariable(\"API_BASE_URL\") ?? \"https://yourdomain.com\";\n            return $\"{baseUrl}/api/tracking/redirect?{query}\";\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Shared/utility/TemplateParameterHelper.cs",
          "sha256": "51753bdf8ce7b9964913d5a501bee92803cf58d23cc315def80b8c69561dfbe1",
          "language": "csharp",
          "content": "using Newtonsoft.Json;\nusing System.Text.RegularExpressions;\n\nnamespace xbytechat.api.Shared.utility\n{\n    public static class TemplateParameterHelper\n    {\n        // ✅ Used when parsing stored JSON parameters\n        public static List<string> ParseTemplateParams(string? jsonString)\n        {\n            if (string.IsNullOrWhiteSpace(jsonString)) return new List<string>();\n            try\n            {\n                return JsonConvert.DeserializeObject<List<string>>(jsonString) ?? new List<string>();\n            }\n            catch\n            {\n                return new List<string>();\n            }\n        }\n\n        // ✅ NEW: Fills {{1}}, {{2}} with parameter values\n        public static string FillPlaceholders(string template, List<string> parameters)\n        {\n            if (string.IsNullOrWhiteSpace(template) || parameters == null || parameters.Count == 0)\n                return template;\n\n            // Replace {{1}}, {{2}} ... with values\n            return Regex.Replace(template, @\"\\{\\{(\\d+)\\}\\}\", match =>\n            {\n                var index = int.Parse(match.Groups[1].Value) - 1;\n                return index >= 0 && index < parameters.Count ? parameters[index] : match.Value;\n            });\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/Validators/MessageTypeValidator.cs",
          "sha256": "a9accea936700f5fa40d270dffc11079bdce7a4ede1f30f968b41436460b80b2",
          "language": "csharp",
          "content": "namespace xbytechat.api.Validators\n{\n    /// <summary>\n    /// Centralized validator for supported message types (text, image, template, etc.)\n    /// </summary>\n    public static class MessageTypeValidator\n    {\n        private static readonly HashSet<string> SupportedTypes = new()\n        {\n            \"text\", \"image\", \"template\"\n        };\n\n        /// <summary>\n        /// Checks whether a messageType is supported.\n        /// </summary>\n        public static bool IsValid(string? messageType)\n        {\n            return !string.IsNullOrWhiteSpace(messageType) &&\n                   SupportedTypes.Contains(messageType.ToLower());\n        }\n\n        /// <summary>\n        /// Returns all supported message types.\n        /// </summary>\n        public static IEnumerable<string> GetSupportedTypes()\n        {\n            return SupportedTypes;\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppSettingsController.cs",
          "sha256": "6afee1d3a9680e97d33644eb9415cbdfdd9b34d14f56727d201f7621d46bddd0",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Linq;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\nusing xbytechat.api.Shared;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    [Authorize]\n    public class WhatsAppSettingsController : ControllerBase\n    {\n        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n        private readonly ILogger<WhatsAppSettingsController> _logger;\n\n        public WhatsAppSettingsController(\n            IWhatsAppSettingsService whatsAppSettingsService,\n            ILogger<WhatsAppSettingsController> logger)\n        {\n            _whatsAppSettingsService = whatsAppSettingsService;\n            _logger = logger;\n        }\n\n        [HttpPut(\"update\")]\n        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            _logger.LogInformation(\"🔧 [UpdateSetting] Request received for WhatsApp settings update.\");\n\n            if (!ModelState.IsValid)\n            {\n                var validationErrors = ModelState\n                    .Where(e => e.Value.Errors.Count > 0)\n                    .Select(e => new\n                    {\n                        Field = e.Key,\n                        Errors = e.Value.Errors.Select(x => x.ErrorMessage)\n                    });\n\n                _logger.LogWarning(\"❌ [UpdateSetting] Validation failed: {@Errors}\", validationErrors);\n                return BadRequest(new { message = \"❌ Invalid input.\", errors = validationErrors });\n            }\n\n            Guid businessId;\n            try\n            {\n                businessId = User.GetBusinessId(); // ✅ Cleaner using your helper\n                dto.BusinessId = businessId;\n            }\n            catch (UnauthorizedAccessException ex)\n            {\n                _logger.LogWarning(\"❌ [UpdateSetting] BusinessId claim missing or invalid: {Message}\", ex.Message);\n                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n            }\n\n            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n            {\n                _logger.LogWarning(\"❌ [UpdateSetting] Missing ApiToken or PhoneNumberId.\");\n                return BadRequest(new { message = \"❌ API Token and Phone Number ID are required.\" });\n            }\n\n            try\n            {\n                _logger.LogInformation(\"💾 [UpdateSetting] Saving/updating WhatsApp settings for businessId={BusinessId}.\", businessId);\n                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n                _logger.LogInformation(\"✅ [UpdateSetting] WhatsApp settings updated successfully.\");\n                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ [UpdateSetting] Exception occurred while saving settings.\");\n                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n            }\n        }\n\n        [HttpGet(\"me\")]\n        public async Task<IActionResult> GetMySettings()\n        {\n  \n            var businessId = User.GetBusinessId();\n            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n\n        [HttpGet(\"{businessId}\")]\n        public async Task<IActionResult> GetSetting(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n            if (setting == null)\n                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n            return Ok(setting);\n        }\n        //[HttpPost(\"test-connection\")]\n        //public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        //{\n        //    if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n        //        return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n        //    try\n        //    {\n        //        var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n        //        return Ok(new { message = result });\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n        //    }\n        //}\n        [HttpPost(\"test-connection\")]\n        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n        {\n            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n                return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n            try\n            {\n                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n                return Ok(new { message = result });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n            }\n        }\n\n        [HttpDelete(\"delete\")]\n        public async Task<IActionResult> DeleteSetting()\n        {\n            var businessIdStr = User.FindFirst(\"BusinessId\")?.Value;\n            if (!Guid.TryParse(businessIdStr, out var businessId))\n                return Unauthorized(new { message = \"❌ BusinessId missing or invalid in token.\" });\n\n            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n            if (!result)\n                return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n\n            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n        }\n    }\n}\n\n\n//using Microsoft.AspNetCore.Mvc;\n//using System;\n//using System.Threading.Tasks;\n//using xbytechat_api.WhatsAppSettings.DTOs;\n//using xbytechat_api.WhatsAppSettings.Services;\n\n//namespace xbytechat_api.WhatsAppSettings.Controllers\n//{\n//    [ApiController]\n//    [Route(\"api/[controller]\")]\n//    public class WhatsAppSettingsController : ControllerBase\n//    {\n//        private readonly IWhatsAppSettingsService _whatsAppSettingsService;\n\n//        public WhatsAppSettingsController(IWhatsAppSettingsService whatsAppSettingsService)\n//        {\n//            _whatsAppSettingsService = whatsAppSettingsService;\n//        }\n\n\n//        [HttpPut(\"update\")]\n//        public async Task<IActionResult> UpdateSetting([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (!ModelState.IsValid)\n//                return BadRequest(new { message = \"❌ Invalid input.\", errors = ModelState });\n\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n//                return BadRequest(new { message = \"❌ API Token and Phone Number ID are required.\" });\n\n//            try\n//            {\n//                await _whatsAppSettingsService.SaveOrUpdateSettingAsync(dto);\n//                return Ok(new { message = \"✅ WhatsApp settings saved/updated successfully.\" });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Error while saving settings.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Get WhatsApp Settings by BusinessId\n//        /// </summary>\n//        [HttpGet(\"{businessId}\")]\n//        public async Task<IActionResult> GetSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var setting = await _whatsAppSettingsService.GetSettingsByBusinessIdAsync(businessId);\n//            if (setting == null)\n//                return NotFound(new { message = \"❌ WhatsApp settings not found.\" });\n\n//            return Ok(setting);\n//        }\n\n//        /// <summary>\n//        /// Test WhatsApp Connection (API URL + Token)\n//        /// </summary>\n//        [HttpPost(\"test-connection\")]\n//        public async Task<IActionResult> TestConnection([FromBody] SaveWhatsAppSettingDto dto)\n//        {\n//            if (string.IsNullOrWhiteSpace(dto.ApiToken) || string.IsNullOrWhiteSpace(dto.ApiUrl))\n//                return BadRequest(new { message = \"❌ API Token and API URL are required for testing connection.\" });\n\n//            try\n//            {\n//                var result = await _whatsAppSettingsService.TestConnectionAsync(dto);\n//                return Ok(new { message = result });\n//            }\n//            catch (Exception ex)\n//            {\n//                return StatusCode(500, new { message = \"❌ Test connection failed.\", details = ex.Message });\n//            }\n//        }\n\n//        /// <summary>\n//        /// Delete WhatsApp Settings for a Business\n//        /// </summary>\n//        [HttpDelete(\"delete/{businessId}\")]\n//        public async Task<IActionResult> DeleteSetting(Guid businessId)\n//        {\n//            if (businessId == Guid.Empty)\n//                return BadRequest(new { message = \"❌ Invalid businessId.\" });\n\n//            var result = await _whatsAppSettingsService.DeleteSettingsAsync(businessId);\n//            if (!result)\n//                return NotFound(new { message = \"❌ No WhatsApp settings found to delete.\" });\n\n//            return Ok(new { message = \"🗑️ WhatsApp settings deleted successfully.\" });\n//        }\n//    }\n//}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Controllers/WhatsAppTemplateFetcherController.cs",
          "sha256": "6a64af207ecc08df8ddba5f9b04afb58816cc87a04c8e74ad693655fe5fab584",
          "language": "csharp",
          "content": "using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing xbytechat_api.WhatsAppSettings.Services;\n\nnamespace xbytechat_api.WhatsAppSettings.Controllers\n{\n    [ApiController]\n    [Route(\"api/[controller]\")]\n    public class WhatsAppTemplateFetcherController : ControllerBase\n    {\n        private readonly IWhatsAppTemplateFetcherService _templateFetcherService;\n\n        public WhatsAppTemplateFetcherController(IWhatsAppTemplateFetcherService templateFetcherService)\n        {\n            _templateFetcherService = templateFetcherService;\n        }\n\n        [HttpGet(\"get-template/{businessId}\")]\n        [Authorize] // ✅ Optional: Require authentication if your project uses JWT auth\n        public async Task<IActionResult> FetchTemplates(Guid businessId)\n        {\n            if (businessId == Guid.Empty)\n                return BadRequest(new { message = \"❌ Invalid BusinessId.\" });\n\n            var templates = await _templateFetcherService.FetchTemplatesAsync(businessId); // comment this line to stop fetch template as per businessid\n            //var templates = await _templateFetcherService.FetchAllTemplatesAsync(); // comment this line to stop fetch template as per businessid\n\n            return Ok(new\n            {\n                success = true,\n                templates = templates\n            });\n        }\n        [HttpGet(\"get-template-all\")]\n        public async Task<IActionResult> GetAllTemplatesAsync()\n        {\n            try\n            {\n                var templates = await _templateFetcherService.FetchAllTemplatesAsync();\n                return Ok(new { success = true, templates });\n            }\n            catch (Exception ex)\n            {\n                return StatusCode(500, new\n                {\n                    success = false,\n                    message = \"Error fetching templates\",\n                    detail = ex.Message\n                });\n            }\n        }\n\n        [HttpGet(\"get-template-by-name\")]\n        public async Task<IActionResult> GetTemplateByName([FromQuery] string name)\n        {\n            var businessId = Guid.Parse(User.FindFirst(\"businessId\")?.Value);\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, name, true);\n            return template == null ? NotFound() : Ok(template);\n        }\n        [HttpGet(\"get-by-name/{businessId}/{templateName}\")]\n        public async Task<IActionResult> GetByName(Guid businessId, string templateName, [FromQuery] bool includeButtons = true)\n        {\n            if (businessId == Guid.Empty || string.IsNullOrWhiteSpace(templateName))\n                return BadRequest(new { success = false, message = \"❌ Missing or invalid parameters.\" });\n\n            var template = await _templateFetcherService.GetTemplateByNameAsync(businessId, templateName, includeButtons);\n\n            if (template == null)\n                return NotFound();\n\n            return Ok(new\n            {\n                success = true,\n                template\n            });\n        }\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/DTOs/ButtonMetadataDto.cs",
          "sha256": "55b2b89dbf3f8b8f16bb134711c23334c37a60c9543a1ea34325fb89506a6dce",
          "language": "csharp",
          "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    public class ButtonMetadataDto\n    {\n        public string Type { get; set; } // Example: \"URL\" or \"PHONE_NUMBER\"\n        public string Text { get; set; } // Button Text\n        public string SubType { get; set; } // (optional) for URL, Phone Number etc\n        public int Index { get; set; } // Index like 0, 1\n                                       // Optional: dynamic parameter value for validation\n        public string? ParameterValue { get; set; } // e.g. coupon_code\n    }\n\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/DTOs/SaveWhatsAppSettingDto.cs",
          "sha256": "2ae3c96b70b9bd13834e6fe68cd66fe7f7be3336385574f56d0489cccf053c6f",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.DTOs\n{\n    public class SaveWhatsAppSettingDto\n    {\n       \n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; }\n\n        [Required]\n        [MaxLength(100)]\n        public string PhoneNumberId { get; set; }  // ✅ NEW: Needed to send messages\n\n        [MaxLength(100)]\n        public string? WabaId { get; set; } // Optional\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; } = \"https://graph.facebook.com/v18.0/\";\n\n        [Required]\n        [MaxLength(50)]\n        public string WhatsAppBusinessNumber { get; set; }  // ✅ Still used for testing via `/me` or WABA ID\n\n        public bool IsActive { get; set; } = true;\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/DTOs/TemplateMetadataDto.cs",
          "sha256": "ee243eac02e205bf965753cb204d12e1548d23a7d43b9b21717744b30b5845e5",
          "language": "csharp",
          "content": "namespace xbytechat.api.WhatsAppSettings.DTOs\n{\n    /// <summary>\n    /// DTO representing a simplified view of WhatsApp template metadata.\n    /// </summary>\n    public class TemplateMetadataDto\n    {\n        /// Unique name of the template.\n        public string Name { get; set; } = string.Empty;\n\n        /// Language code used when creating the template (e.g., en_US, hi_IN).\n        public string Language { get; set; } = \"en_US\";\n\n        /// The message body content with placeholders (e.g., \"Hi {{1}}, your order is ready\").\n        public string Body { get; set; } = string.Empty;\n\n        /// Number of dynamic parameters required (e.g., 2 for {{1}} and {{2}}).\n        public int PlaceholderCount { get; set; }\n\n        public List<ButtonMetadataDto> ButtonParams { get; set; } = new List<ButtonMetadataDto>(); // ✅ Added Buttons\n        public bool HasImageHeader { get; set; } = false;\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Models/WhatsAppSettingEntity.cs",
          "sha256": "86a9eeecdc03ce1f55e7057e15e38a1e82a136efb5adb1a16ec2e8de605a83dd",
          "language": "csharp",
          "content": "using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace xbytechat_api.WhatsAppSettings.Models\n{\n    public class WhatsAppSettingEntity\n    {\n        [Key]\n        public Guid Id { get; set; }\n\n        [Required]\n        public Guid BusinessId { get; set; }\n\n        [Required]\n        [MaxLength(500)]\n        public string ApiUrl { get; set; }\n\n        [Required]\n        [MaxLength(1000)]\n        public string ApiToken { get; set; }\n\n        [Required]\n        [MaxLength(20)]\n        public string? WhatsAppBusinessNumber { get; set; }\n\n        public string? PhoneNumberId { get; set; } //Meta Business phone number ID\n        public string? WabaId { get; set; } = string.Empty; //WhatsApp Business Account ID\n\n        [MaxLength(100)]\n        public string? SenderDisplayName { get; set; }\n\n        [Required]\n        public bool IsActive { get; set; } = true;\n\n        [Required]\n        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;\n\n        public DateTime? UpdatedAt { get; set; }\n\n        // string ApiVersion { get; set; } = \"v18.0\";\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppSettingsService.cs",
          "sha256": "efcd668cb54b466be5f66ebf202f4e32ce48c8d1e8f6404a0d2366c0ec186549",
          "language": "csharp",
          "content": "using System;\nusing System.Threading.Tasks;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppSettingsService\n    {\n        Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto);\n        Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId);\n        Task<bool> DeleteSettingsAsync(Guid businessId);\n        Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto);\n        Task<string?> GetSenderNumberAsync(Guid businessId);\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Services/IWhatsAppTemplateFetcherService.cs",
          "sha256": "b5885cf1f231339958b3654b05bafa3aceb5fcb78d7f4e8c650d39c3fa21973f",
          "language": "csharp",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public interface IWhatsAppTemplateFetcherService\n    {\n        Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId);\n        // 🔹 (NEW) Load all templates across all businesses (admin/debug mode)\n        Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync();\n\n        Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons);\n\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppSettingsService.cs",
          "sha256": "ae214f0b9c67e280aded7d9d70930b9bc4e77e40cf9de8e5944787f072a23d74",
          "language": "csharp",
          "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing xbytechat.api;\nusing xbytechat_api.WhatsAppSettings.DTOs;\nusing xbytechat_api.WhatsAppSettings.Models;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n    public class WhatsAppSettingsService : IWhatsAppSettingsService\n    {\n        private readonly AppDbContext _dbContext;\n\n        public WhatsAppSettingsService(AppDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public async Task SaveOrUpdateSettingAsync(SaveWhatsAppSettingDto dto)\n        {\n            if (dto.BusinessId == Guid.Empty)\n                throw new ArgumentException(\"Invalid BusinessId provided.\");\n\n            var existingSetting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == dto.BusinessId);\n\n            if (existingSetting != null)\n            {\n                // 🔁 Update existing record with null-safety\n                existingSetting.ApiUrl = dto.ApiUrl?.Trim() ?? existingSetting.ApiUrl;\n                existingSetting.ApiToken = dto.ApiToken?.Trim() ?? existingSetting.ApiToken;\n\n                if (!string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                    existingSetting.PhoneNumberId = dto.PhoneNumberId.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.WhatsAppBusinessNumber))\n                    existingSetting.WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.SenderDisplayName))\n                    existingSetting.SenderDisplayName = dto.SenderDisplayName.Trim();\n\n                if (!string.IsNullOrWhiteSpace(dto.WabaId))\n                    existingSetting.WabaId = dto.WabaId.Trim();\n\n                existingSetting.IsActive = dto.IsActive;\n                existingSetting.UpdatedAt = DateTime.UtcNow;\n            }\n            else\n            {\n                // ➕ Insert new record\n                var newSetting = new WhatsAppSettingEntity\n                {\n                    Id = Guid.NewGuid(),\n                    BusinessId = dto.BusinessId,\n                    ApiUrl = dto.ApiUrl.Trim(),\n                    ApiToken = dto.ApiToken.Trim(),\n                    PhoneNumberId = dto.PhoneNumberId?.Trim(),\n                    WhatsAppBusinessNumber = dto.WhatsAppBusinessNumber?.Trim(),\n                    SenderDisplayName = dto.SenderDisplayName?.Trim(),\n                    WabaId = dto.WabaId?.Trim(),\n                    IsActive = dto.IsActive,\n                    CreatedAt = DateTime.UtcNow\n                };\n\n                await _dbContext.WhatsAppSettings.AddAsync(newSetting);\n            }\n\n            try\n            {\n                await _dbContext.SaveChangesAsync();\n            }\n            catch (Exception ex)\n            {\n                throw new Exception(\"Error saving WhatsApp settings: \" + ex.InnerException?.Message ?? ex.Message);\n            }\n        }\n\n        public async Task<WhatsAppSettingEntity?> GetSettingsByBusinessIdAsync(Guid businessId)\n        {\n            // 🔎 Find active WhatsApp setting for the business\n            return await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n        }\n\n        public async Task<bool> DeleteSettingsAsync(Guid businessId)\n        {\n            // 🗑 Delete settings based on businessId\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId);\n\n            if (setting == null)\n                return false;\n\n            _dbContext.WhatsAppSettings.Remove(setting);\n            await _dbContext.SaveChangesAsync();\n            return true;\n        }\n\n        //public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        //{\n        //    using var client = new HttpClient();\n        //    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n        //    var baseUrl = dto.ApiUrl.TrimEnd('/');\n        //    var testUrl = $\"{baseUrl}/me\"; // 📡 Lightweight endpoint for connection test\n\n        //    var response = await client.GetAsync(testUrl);\n        //    var content = await response.Content.ReadAsStringAsync();\n\n        //    if (!response.IsSuccessStatusCode)\n        //        throw new Exception($\"❌ WhatsApp API Error: {content}\");\n\n        //    return \"WhatsApp API token is valid and connection was successful.\";\n        //}\n        public async Task<string> TestConnectionAsync(SaveWhatsAppSettingDto dto)\n        {\n            using var client = new HttpClient();\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", dto.ApiToken);\n\n            var baseUrl = dto.ApiUrl.TrimEnd('/');\n            if (string.IsNullOrWhiteSpace(dto.PhoneNumberId))\n                throw new Exception(\"PhoneNumberId is required to test WhatsApp Cloud API connection.\");\n\n            // This is the official endpoint for checking the number\n            var testUrl = $\"{baseUrl}/{dto.PhoneNumberId}\";\n\n            var response = await client.GetAsync(testUrl);\n            var content = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n                throw new Exception($\"❌ WhatsApp API Error: {content}\");\n\n            return \"WhatsApp API token is valid and connection was successful.\";\n        }\n\n        public async Task<string?> GetSenderNumberAsync(Guid businessId)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .AsNoTracking()\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                throw new Exception($\"❌ WhatsApp settings not found for BusinessId: {businessId}\");\n            }\n\n            return setting.WhatsAppBusinessNumber;\n        }\n\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Services/WhatsAppTemplateFetcherService.cs",
          "sha256": "c2ae93048c8cd03b7e28e4d0360bd8c2bf24bdfd80d3353ad8c2352244f38188",
          "language": "csharp",
          "content": "using Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\nusing System.Net.Http.Headers;\nusing System.Text.RegularExpressions;\nusing xbytechat.api;\nusing xbytechat.api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Services\n{\n\n    public class WhatsAppTemplateFetcherService : IWhatsAppTemplateFetcherService\n    {\n        private readonly AppDbContext _dbContext;\n        private readonly HttpClient _httpClient;\n        private readonly ILogger<WhatsAppTemplateFetcherService> _logger;\n\n        public WhatsAppTemplateFetcherService(AppDbContext dbContext, HttpClient httpClient, ILogger<WhatsAppTemplateFetcherService> logger)\n        {\n            _dbContext = dbContext;\n            _httpClient = httpClient;\n            _logger = logger;\n        }\n\n        //public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        //{\n        //    var templates = new List<TemplateMetadataDto>();\n\n        //    var setting = await _dbContext.WhatsAppSettings\n        //        .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n        //    if (setting == null)\n        //    {\n        //        _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n        //        return templates;\n        //    }\n\n        //    if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n        //    {\n        //        _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n        //        return templates;\n        //    }\n\n        //    try\n        //    {\n        //        var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n        //        var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n        //        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n        //        var response = await _httpClient.GetAsync(url);\n        //        var json = await response.Content.ReadAsStringAsync();\n        //        _logger.LogInformation(\"🧪 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n\n\n        //        if (!response.IsSuccessStatusCode)\n        //        {\n        //            _logger.LogError(\"Failed to fetch templates from Meta: {Response}\", json);\n        //            return templates;\n        //        }\n\n        //        var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n        //        foreach (var tpl in parsed.data)\n        //        {\n        //            string name = tpl.name;\n        //            string language = tpl.language ?? \"en_US\";\n        //            string body = \"\";\n\n        //            foreach (var component in tpl.components)\n        //            {\n        //                if (component.type == \"BODY\")\n        //                {\n        //                    body = component.text;\n        //                    break;\n        //                }\n        //            }\n\n        //            int placeholderCount = System.Text.RegularExpressions.Regex.Matches(body, \"{{(.*?)}}\").Count;\n\n        //            templates.Add(new TemplateMetadataDto\n        //            {\n        //                Name = name,\n        //                Language = language,\n        //                Body = body,\n        //                PlaceholderCount = placeholderCount\n        //            });\n        //        }\n        //    }\n        //    catch (Exception ex)\n        //    {\n        //        _logger.LogError(ex, \"Exception while fetching WhatsApp templates.\");\n        //    }\n\n        //    return templates;\n        //}\n        public async Task<List<TemplateMetadataDto>> FetchTemplatesAsync(Guid businessId)\n        {\n            var templates = new List<TemplateMetadataDto>();\n\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.BusinessId == businessId && x.IsActive);\n\n            if (setting == null)\n            {\n                _logger.LogWarning(\"WhatsApp Settings not found for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n            {\n                _logger.LogWarning(\"Missing API Token or WABA ID for BusinessId: {BusinessId}\", businessId);\n                return templates;\n            }\n\n            try\n            {\n                var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n                _logger.LogInformation(\"🧪 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Failed to fetch templates from Meta: {Response}\", json);\n                    return templates;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpper();\n\n                        if (type == \"BODY\")\n                        {\n                            body = component.text?.ToString() ?? \"\";\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpper();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    bool hasExample = button.example != null;\n                                    bool isDynamic = hasExample && Regex.IsMatch(button.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n                                    bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                    bool needsRuntimeValue = requiresParam && isDynamic;\n\n                                    if (subType == \"unknown\" || (paramValue == null && needsRuntimeValue))\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\"\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button for template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                    templates.Add(new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = placeholderCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = buttons\n                    });\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Exception while fetching WhatsApp templates.\");\n            }\n\n            return templates;\n        }\n\n\n        public async Task<List<TemplateForUIResponseDto>> FetchAllTemplatesAsync()\n        {\n            var allTemplates = new List<TemplateForUIResponseDto>();\n\n            var settingsList = await _dbContext.WhatsAppSettings\n                .Where(x => x.IsActive)\n                .ToListAsync();\n\n            foreach (var setting in settingsList)\n            {\n                if (string.IsNullOrWhiteSpace(setting.ApiToken) || string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n                {\n                    _logger.LogWarning(\"⏭️ Skipping BusinessId {BusinessId} due to missing token or phone ID\", setting.BusinessId);\n                    continue;\n                }\n\n                try\n                {\n                    var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                    var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                    var response = await _httpClient.GetAsync(url);\n                    var json = await response.Content.ReadAsStringAsync();\n\n                    _logger.LogInformation(\"📦 Meta Template API Raw JSON for {BusinessId}:\\n{Json}\", setting.BusinessId, json);\n\n                    if (!response.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"❌ Failed to fetch templates for BusinessId {BusinessId}: {Response}\", setting.BusinessId, json);\n                        continue;\n                    }\n\n                    var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                    foreach (var tpl in parsed.data)\n                    {\n                        string name = tpl.name;\n                        string language = tpl.language ?? \"en_US\";\n                        string body = \"\";\n                        bool hasImageHeader = false;\n                        var buttons = new List<ButtonMetadataDto>();\n\n                        foreach (var component in tpl.components)\n                        {\n                            string type = component.type?.ToString()?.ToUpper();\n\n                            if (type == \"BODY\")\n                            {\n                                try\n                                {\n                                    body = component.text?.ToString() ?? \"\";\n                                }\n                                catch\n                                {\n                                    _logger.LogWarning(\"⚠️ Could not read BODY component text for template: {TemplateName}\", name);\n                                    body = \"\";\n                                }\n                            }\n\n                            if (type == \"HEADER\")\n                            {\n                                string format = component.format?.ToString()?.ToUpper();\n                                if (format == \"IMAGE\")\n                                {\n                                    hasImageHeader = true;\n                                }\n                            }\n\n                            if (type == \"BUTTONS\")\n                            {\n                                foreach (var button in component.buttons)\n                                {\n                                    try\n                                    {\n                                        string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                        string text = button.text?.ToString() ?? \"\";\n                                        int index = buttons.Count;\n\n                                        string subType = btnType switch\n                                        {\n                                            \"URL\" => \"url\",\n                                            \"PHONE_NUMBER\" => \"voice_call\",\n                                            \"QUICK_REPLY\" => \"quick_reply\",\n                                            \"COPY_CODE\" => \"copy_code\",\n                                            \"CATALOG\" => \"catalog\",\n                                            \"FLOW\" => \"flow\",\n                                            \"REMINDER\" => \"reminder\",\n                                            \"ORDER_DETAILS\" => \"order_details\",\n                                            _ => \"unknown\"\n                                        };\n\n                                        string? paramValue = null;\n                                        if (button.url != null)\n                                            paramValue = button.url.ToString();\n                                        else if (button.phone_number != null)\n                                            paramValue = button.phone_number.ToString();\n                                        else if (button.coupon_code != null)\n                                            paramValue = button.coupon_code.ToString();\n                                        else if (button.flow_id != null)\n                                            paramValue = button.flow_id.ToString();\n\n                                        // 🧠 Meta injects static values — no need to enforce paramValue if STATIC\n                                        bool hasExample = button.example != null;\n                                        bool isDynamic = hasExample && Regex.IsMatch(button.example.ToString(), @\"\\{\\{[0-9]+\\}\\}\");\n\n                                        bool requiresParam = new[] { \"url\", \"flow\", \"copy_code\", \"catalog\", \"reminder\" }.Contains(subType);\n                                        bool needsRuntimeValue = requiresParam && isDynamic;\n\n                                        // ❌ Skip if invalid OR dynamic + missing runtime param\n                                        if (subType == \"unknown\" || (paramValue == null && needsRuntimeValue))\n                                        {\n                                            _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                            continue;\n                                        }\n\n                                        buttons.Add(new ButtonMetadataDto\n                                        {\n                                            Text = text,\n                                            Type = btnType,\n                                            SubType = subType,\n                                            Index = index,\n                                            ParameterValue = paramValue ?? \"\" // ✅ Always safe for static\n                                        });\n                                    }\n                                    catch (Exception exBtn)\n                                    {\n                                        _logger.LogWarning(exBtn, \"⚠️ Failed to parse button for template {TemplateName}\", name);\n                                    }\n                                }\n\n                            }\n                        }\n\n                        int placeholderCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                        allTemplates.Add(new TemplateForUIResponseDto\n                        {\n                            Name = name,\n                            Language = language,\n                            Body = body,\n                            ParametersCount = placeholderCount,\n                            HasImageHeader = hasImageHeader,\n                            ButtonParams = buttons\n                        });\n                    }\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"❌ Exception while fetching templates for BusinessId {BusinessId}\", setting.BusinessId);\n                }\n            }\n\n            return allTemplates;\n        }\n\n\n        public async Task<TemplateMetadataDto?> GetTemplateByNameAsync(Guid businessId, string templateName, bool includeButtons)\n        {\n            var setting = await _dbContext.WhatsAppSettings\n                .FirstOrDefaultAsync(x => x.IsActive && x.BusinessId == businessId);\n\n            if (setting == null ||\n                string.IsNullOrWhiteSpace(setting.ApiToken) ||\n                string.IsNullOrWhiteSpace(setting.PhoneNumberId))\n            {\n                _logger.LogWarning(\"❌ Missing WhatsApp config for business: {BusinessId}\", businessId);\n                return null;\n            }\n\n            try\n            {\n                var baseUrl = setting.ApiUrl?.TrimEnd('/') ?? \"https://graph.facebook.com/v18.0\";\n                var url = $\"{baseUrl}/{setting.WabaId}/message_templates\";\n\n                _httpClient.DefaultRequestHeaders.Authorization =\n                    new AuthenticationHeaderValue(\"Bearer\", setting.ApiToken);\n\n                var response = await _httpClient.GetAsync(url);\n                var json = await response.Content.ReadAsStringAsync();\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"❌ Failed to fetch templates for BusinessId {BusinessId}: {Json}\", businessId, json);\n                    return null;\n                }\n\n                var parsed = JsonConvert.DeserializeObject<dynamic>(json);\n\n                foreach (var tpl in parsed.data)\n                {\n                    string name = tpl.name;\n                    if (!name.Equals(templateName, StringComparison.OrdinalIgnoreCase))\n                        continue;\n\n                    string language = tpl.language ?? \"en_US\";\n                    string body = \"\";\n                    var buttons = new List<ButtonMetadataDto>();\n                    bool hasImageHeader = false;\n\n                    foreach (var component in tpl.components)\n                    {\n                        string type = component.type?.ToString()?.ToUpper();\n\n                        if (type == \"BODY\")\n                        {\n                            try\n                            {\n                                body = component.text?.ToString() ?? \"\";\n                            }\n                            catch\n                            {\n                                body = \"\";\n                            }\n                        }\n\n                        if (type == \"HEADER\")\n                        {\n                            string format = component.format?.ToString()?.ToUpper();\n                            if (format == \"IMAGE\") hasImageHeader = true;\n                        }\n\n                        if (includeButtons && type == \"BUTTONS\")\n                        {\n                            foreach (var button in component.buttons)\n                            {\n                                try\n                                {\n                                    string btnType = button.type?.ToString()?.ToUpper() ?? \"\";\n                                    string text = button.text?.ToString() ?? \"\";\n                                    int index = buttons.Count;\n\n                                    string subType = btnType switch\n                                    {\n                                        \"URL\" => \"url\",\n                                        \"PHONE_NUMBER\" => \"voice_call\",\n                                        \"QUICK_REPLY\" => \"quick_reply\",\n                                        \"COPY_CODE\" => \"copy_code\",\n                                        \"CATALOG\" => \"catalog\",\n                                        \"FLOW\" => \"flow\",\n                                        \"REMINDER\" => \"reminder\",\n                                        \"ORDER_DETAILS\" => \"order_details\",\n                                        _ => \"unknown\"\n                                    };\n\n                                    // ✅ Extract known dynamic values\n                                    string? paramValue = null;\n                                    if (button.url != null)\n                                        paramValue = button.url.ToString();\n                                    else if (button.phone_number != null)\n                                        paramValue = button.phone_number.ToString();\n                                    else if (button.coupon_code != null)\n                                        paramValue = button.coupon_code.ToString();\n                                    else if (button.flow_id != null)\n                                        paramValue = button.flow_id.ToString();\n\n                                    // ✅ Skip truly invalid (unknown + missing value for dynamic)\n                                    if (subType == \"unknown\" || (paramValue == null && new[] { \"url\", \"flow\", \"copy_code\" }.Contains(subType)))\n\n                                    {\n                                        _logger.LogWarning(\"⚠️ Skipping button '{Text}' due to unknown type or missing required param.\", text);\n                                        continue;\n                                    }\n\n                                    buttons.Add(new ButtonMetadataDto\n                                    {\n                                        Text = text,\n                                        Type = btnType,\n                                        SubType = subType,\n                                        Index = index,\n                                        ParameterValue = paramValue ?? \"\" // ✅ Default to empty for static buttons\n                                    });\n                                }\n                                catch (Exception exBtn)\n                                {\n                                    _logger.LogWarning(exBtn, \"⚠️ Failed to parse button in template {TemplateName}\", name);\n                                }\n                            }\n                        }\n                    }\n\n                    int paramCount = Regex.Matches(body ?? \"\", \"{{(.*?)}}\").Count;\n\n                    return new TemplateMetadataDto\n                    {\n                        Name = name,\n                        Language = language,\n                        Body = body,\n                        PlaceholderCount = paramCount,\n                        HasImageHeader = hasImageHeader,\n                        ButtonParams = includeButtons ? buttons : new List<ButtonMetadataDto>()\n                    };\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"❌ Exception in GetTemplateByNameAsync\");\n            }\n\n            return null;\n        }\n\n    }\n}\n\n"
        },
        {
          "path": "xbytechat-api/WhatsAppSettings/Validators/SaveWhatsAppSettingValidator.cs",
          "sha256": "0514de8678bd403897fb43017b8857bf209000360de191805c741c17965c1112",
          "language": "csharp",
          "content": "using FluentValidation;\nusing xbytechat_api.WhatsAppSettings.DTOs;\n\nnamespace xbytechat_api.WhatsAppSettings.Validators\n{\n    public class SaveWhatsAppSettingValidator : AbstractValidator<SaveWhatsAppSettingDto> // ✅ Inherit properly\n    {\n        public SaveWhatsAppSettingValidator()\n        {\n            RuleFor(x => x.BusinessId)\n                .NotEmpty().WithMessage(\"BusinessId is required.\");\n\n            RuleFor(x => x.ApiUrl)\n                .NotEmpty().WithMessage(\"API URL is required.\")\n                .MaximumLength(500).WithMessage(\"API URL must not exceed 500 characters.\");\n\n            RuleFor(x => x.ApiToken)\n                .NotEmpty().WithMessage(\"API Token is required.\")\n                .MaximumLength(1000).WithMessage(\"API Token must not exceed 1000 characters.\");\n\n            RuleFor(x => x.WhatsAppBusinessNumber)\n                .NotEmpty().WithMessage(\"WhatsApp Business Number is required.\")\n                .MaximumLength(20).WithMessage(\"WhatsApp Business Number must not exceed 20 characters.\");\n\n            RuleFor(x => x.SenderDisplayName)\n                .MaximumLength(100).WithMessage(\"Sender Display Name must not exceed 100 characters.\")\n                .When(x => !string.IsNullOrEmpty(x.SenderDisplayName));\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/xbytechat-api/Helpers/AuditLoggingHelper.cs",
          "sha256": "c5b311d19b5c69b6b78d7ca335b984e43795ef1e140c2239dea1ed7190e188c6",
          "language": "csharp",
          "content": "using xbytechat.api.Features.AuditTrail.Models;\nusing xbytechat.api.Features.AuditTrail.Services;\n\npublic static class AuditLoggingHelper\n{\n    private static IServiceProvider? _serviceProvider;\n\n    public static void Configure(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n\n    public static void Log(\n        string actionType,\n        string? entityName,\n        string? entityId,\n        string? description,\n        IHttpContextAccessor contextAccessor)\n    {\n        if (_serviceProvider == null) return;\n\n        var scope = _serviceProvider.CreateScope();\n        var auditLogService = scope.ServiceProvider.GetRequiredService<IAuditLogService>();\n\n        var httpContext = contextAccessor.HttpContext;\n        var user = httpContext?.User;\n        var claims = user?.Identities?.FirstOrDefault();\n\n        var log = new AuditLog\n        {\n            Id = Guid.NewGuid(),\n            ActionType = actionType,\n            Description = description,\n            BusinessId = TryParseGuid(claims?.FindFirst(\"businessId\")?.Value),\n            PerformedByUserId = TryParseGuid(claims?.FindFirst(\"sub\")?.Value),\n            PerformedByUserName = claims?.FindFirst(\"email\")?.Value,\n            RoleAtTime = claims?.FindFirst(\"role\")?.Value,\n            IPAddress = httpContext?.Connection?.RemoteIpAddress?.ToString(),\n            UserAgent = httpContext?.Request?.Headers[\"User-Agent\"].ToString(),\n            CreatedAt = DateTime.UtcNow\n        };\n\n        _ = Task.Run(() => auditLogService.SaveLogAsync(log));\n    }\n\n    private static Guid TryParseGuid(string? input) =>\n        Guid.TryParse(input, out var guid) ? guid : Guid.Empty;\n}\n"
        },
        {
          "path": "xbytechat-api/xbytechat-api/Helpers/JwtCookieHelper.cs",
          "sha256": "50ed48ffead96168a429fe26398cbc9b3021ecfebafabcbba8dc8e59f9a12885",
          "language": "csharp",
          "content": "// 📄 File: Helpers/JwtCookieHelper.cs\nusing Microsoft.AspNetCore.Http;\nusing System;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class JwtCookieHelper\n    {\n        // ✅ Set Access Token (short-lived)\n        public static void SetJwtCookie(HttpContext httpContext, string cookieName, string token, int expiryHours = 12)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, token, new CookieOptions\n            {\n                HttpOnly = true,\n                ///*Secure*/ = isProduction,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddHours(expiryHours)\n            }); ;\n        }\n\n        // ✅ Clear Access Token cookie\n        public static void ClearJwtCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear JWT cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n\n        // ✅ Set Refresh Token (long-lived)\n        public static void SetRefreshTokenCookie(HttpContext httpContext, string cookieName, string refreshToken, int expiryDays = 30)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot set refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            bool isProduction = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\") == \"Production\";\n\n            httpContext.Response.Cookies.Append(cookieName, refreshToken, new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = isProduction,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(expiryDays)\n            });\n        }\n\n        // ✅ Clear Refresh Token cookie\n        public static void ClearRefreshTokenCookie(HttpContext httpContext, string cookieName)\n        {\n            if (httpContext == null || httpContext.Response.HasStarted)\n            {\n                Console.WriteLine($\"⚠️ Cannot clear refresh cookie '{cookieName}' — response already started.\");\n                return;\n            }\n\n            httpContext.Response.Cookies.Append(cookieName, \"\", new CookieOptions\n            {\n                HttpOnly = true,\n                Secure = true,\n                SameSite = SameSiteMode.Strict,\n                Expires = DateTimeOffset.UtcNow.AddDays(-1)\n            });\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/xbytechat-api/Helpers/ResponseResult.cs",
          "sha256": "e179ac827eca18c7316cf0dff9d2d9741653f9bde358cbda401ff1e978cd30ec",
          "language": "csharp",
          "content": "namespace xbytechat.api.Helpers\n{\n    /// <summary>\n    /// Represents a standardized response structure for service layer results.\n    /// </summary>\n    public class ResponseResult\n    {\n        public bool Success { get; set; }                  // ✅ Whether operation succeeded\n        public string Message { get; set; }                // ✅ User-friendly message\n        public object? Data { get; set; }                  // Optional payload (if needed)\n\n        // ✅ WhatsApp-specific diagnostics\n        public string? ErrorMessage { get; set; }          // Error from API or exception\n        public string? RawResponse { get; set; }           // Full API raw response\n\n        public string? MessageId { get; set; } // 🌐 WhatsApp WAMID (Message ID)\n\n        public Guid? LogId { get; set; } // ✅ Unique ID of MessageLog for tracking\n                                         // ✅ Factory method for successful result\n\n        public string? Token { get; set; }\n\n        public string? RefreshToken { get; set; }\n        public static ResponseResult SuccessInfo(string message, object? data = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = true,\n                Message = message,\n                Data = data,\n                RawResponse = raw\n            };\n        }\n\n        // ❌ Factory method for error result\n        public static ResponseResult ErrorInfo(string message, string? error = null, string? raw = null)\n        {\n            return new ResponseResult\n            {\n                Success = false,\n                Message = message,\n                ErrorMessage = error,\n                RawResponse = raw\n            };\n        }\n    }\n}\n"
        },
        {
          "path": "xbytechat-api/xbytechat-api/Helpers/SendResultExtended.cs",
          "sha256": "d70ced23d36d879eb80982f4a2508398175f5a06bc3e524c5c426cfe59635a0a",
          "language": "csharp",
          "content": "using xbytechat.api.Helpers;\n\npublic class SendResultExtended : ResponseResult\n{\n   // public string? MessageId { get; set; }         // WAMID from WhatsApp\n    public Guid? MessageLogId { get; set; }        // Our DB log ID (from MessageLogs table)\n}\n"
        },
        {
          "path": "xbytechat-api/xbytechat-api/Helpers/UserContextHelper.cs",
          "sha256": "ebabfd85a8a344a40535bccbbdb67a5241b585ecca9f9688e3eb6201b71fda0d",
          "language": "csharp",
          "content": "using System.Security.Claims;\n\nnamespace xbytechat.api.Helpers\n{\n    public static class UserContextHelper\n    {\n        /// <summary>\n        /// Returns the logged-in user's unique ID from JWT.\n        /// </summary>\n        public static Guid GetUserId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"sub\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the business ID (tenant) from JWT claims.\n        /// </summary>\n        public static Guid GetBusinessId(ClaimsPrincipal user)\n        {\n            return Guid.TryParse(user.FindFirst(\"businessId\")?.Value, out var id) ? id : Guid.Empty;\n        }\n\n        /// <summary>\n        /// Returns the role of the logged-in user.\n        /// </summary>\n        public static string GetRole(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"role\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns company name for UI display (optional).\n        /// </summary>\n        public static string GetCompanyName(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"companyName\")?.Value ?? \"\";\n        }\n\n        /// <summary>\n        /// Returns plan info if needed for plan-based access control.\n        /// </summary>\n        public static string GetPlan(ClaimsPrincipal user)\n        {\n            return user.FindFirst(\"plan\")?.Value ?? \"\";\n        }\n    }\n}\n"
        }
      ]
    }
  ]
}
